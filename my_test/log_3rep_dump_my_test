['SemLearn.py', 'i_n', '-', '3']
build or check is  i_n
Number of possible LFs in training:3
testout =  None
put in sent coutn =  0
K k=-0.8
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  more juice ?
making  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
making  Q(qn|more($1,n|juice($1)),$0)
making  qn|more($1,n|juice($1)),$0)
making  n|juice($1)
making  $1
making  $0)
Is Q
sentence is  more juice ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  more juice ?

got training pair
Sent : more juice ?
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
sentence is  ['more', 'juice']
sem is  lambda $0_{ev}.v|go(pro|you,$0)
adding  S  to START
sem is  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
adding  Syn  to START
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
adding  Swh  to START
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
size of chart is  31
got chart
norm score is  -16.6663917138
doing updates with learning rate  0.043047096028
Deleting 0 entries of the total 25
done io
WATCH	more juice ?
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
making  Q(qn|more($1,n|juice($1)),$0)
making  qn|more($1,n|juice($1)),$0)
making  n|juice($1)
making  $1
making  $0)
Is Q
sentence is  where 's your cup ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  where 's your cup ?
making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  where 's your cup ?

got training pair
Sent : where 's your cup ?
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sentence is  ['where', "'s", 'your', 'cup']
sem is  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
size of chart is  353
got chart
norm score is  -32.8500609715
doing updates with learning rate  0.0423835495277
Deleting 0 entries of the total 248
done io
WATCH	where 's your cup ?
WATCH	2	((S\NP)\NP)	0.421928409999
WATCH	2	((S\NP)/NP)	0.0780715900011
WATCH	2	((S/NP)/NP)	0.421928409999
WATCH	2	((S/NP)\NP)	0.0780715900011
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  I took it .
making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  I took it .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I took it .

got training pair
Sent : I took it .
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
sentence is  ['I', 'took', 'it']
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
size of chart is  126
got chart
norm score is  -25.5994333701
doing updates with learning rate  0.0417425815524
Deleting 0 entries of the total 345
done io
WATCH	I took it .
WATCH	3	((S\NP)\NP)	0.432699858068
WATCH	3	((S\NP)/NP)	0.067300141932
WATCH	3	((S/NP)/NP)	0.432699858068
WATCH	3	((S/NP)\NP)	0.067300141932
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  I 'm not sure .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I 'm not sure .
making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  I 'm not sure .

got training pair
Sent : I 'm not sure .
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sentence is  ['I', "'m", 'not', 'sure', '.']
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
size of chart is  1041
got chart
norm score is  -34.4026199264
doing updates with learning rate  0.0411230191652
Deleting 0 entries of the total 949
done io
WATCH	I 'm not sure .
WATCH	4	((S\NP)\NP)	0.451926586474
WATCH	4	((S\NP)/NP)	0.0482520459978
WATCH	4	((S/NP)/NP)	0.451596525813
WATCH	4	((S/NP)\NP)	0.0482248417157
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  are you saying Fraser ?
making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  are you saying Fraser ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  are you saying Fraser ?

got training pair
Sent : are you saying Fraser ?
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['are', 'you', 'saying', 'Fraser']
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  540
got chart
norm score is  -39.6917702842
doing updates with learning rate  0.0405237706188
Deleting 0 entries of the total 1285
done io
WATCH	are you saying Fraser ?
WATCH	5	((S\NP)\NP)	0.457988773467
WATCH	5	((S\NP)/NP)	0.0424405335648
WATCH	5	((S/NP)/NP)	0.457187265536
WATCH	5	((S/NP)\NP)	0.0423834274316
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  154
got chart
norm score is  -29.1804445371
doing updates with learning rate  0.0399438183829
Deleting 0 entries of the total 1392
done io
WATCH	what is that ?
WATCH	6	((S\NP)\NP)	0.457585225214
WATCH	6	((S\NP)/NP)	0.0424348418375
WATCH	6	((S/NP)/NP)	0.45753189399
WATCH	6	((S/NP)\NP)	0.0424480389587
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  det|a($0,n|fly($0))
adding  NP  to START
size of chart is  81
got chart
norm score is  -13.0655157657
doing updates with learning rate  0.0393822128836
Deleting 0 entries of the total 1416
done io
WATCH	what is that ?
WATCH	7	((S\NP)\NP)	0.456999465629
WATCH	7	((S\NP)/NP)	0.0425008191495
WATCH	7	((S/NP)/NP)	0.458071336081
WATCH	7	((S/NP)\NP)	0.0424283791408
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  a fly .
making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  a fly .
making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  a fly .

got training pair
Sent : a fly .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sentence is  ['a', 'fly']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  det|a($0,n|fly($0))
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
size of chart is  35
got chart
norm score is  -14.1311880594
doing updates with learning rate  0.0388380668695
Deleting 0 entries of the total 1447
done io
WATCH	a fly .
WATCH	8	((S\NP)\NP)	0.456995765574
WATCH	8	((S\NP)/NP)	0.0424376677189
WATCH	8	((S/NP)/NP)	0.458189845623
WATCH	8	((S/NP)\NP)	0.0423767210847
getting topparses
outputting cat probs
done with sent


making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  you get a fly .
making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  you get a fly .
making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  you get a fly .

got training pair
Sent : you get a fly .
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sentence is  ['you', 'get', 'a', 'fly']
sem is  det|a($0,n|fly($0))
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
size of chart is  269
got chart
norm score is  -23.9840793406
doing updates with learning rate  0.0383105503327
Deleting 0 entries of the total 1624
done io
WATCH	you get a fly .
WATCH	9	((S\NP)\NP)	0.529203238666
WATCH	9	((S\NP)/NP)	0.0582174160532
WATCH	9	((S/NP)/NP)	0.378624693288
WATCH	9	((S/NP)\NP)	0.0339546519919
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  you get one .
making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  you get one .
making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  you get one .

got training pair
Sent : you get one .
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
sentence is  ['you', 'get', 'one']
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sem is  pro:poss:det|your($0,n|telephone($0))
size of chart is  119
got chart
norm score is  -16.6701899595
doing updates with learning rate  0.0377988859211
Deleting 0 entries of the total 1676
done io
WATCH	you get one .
WATCH	10	((S\NP)\NP)	0.63828158546
WATCH	10	((S\NP)/NP)	0.05237145333
WATCH	10	((S/NP)/NP)	0.283928408114
WATCH	10	((S/NP)\NP)	0.0254185530964
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  go and get your telephone .
making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  go and get your telephone .
making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  go and get your telephone .

got training pair
Sent : go and get your telephone .
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sentence is  ['go', 'and', 'get', 'your', 'telephone']
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sem is  pro:poss:det|your($0,n|telephone($0))
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
size of chart is  1071
got chart
norm score is  -39.6609593762
doing updates with learning rate  0.0373023447888
Deleting 1999 entries of the total 2304
done io
WATCH	go and get your telephone .
WATCH	11	((S\NP)\NP)	0.658967930582
WATCH	11	((S\NP)/NP)	0.0504293191485
WATCH	11	((S/NP)/NP)	0.267138981745
WATCH	11	((S/NP)\NP)	0.0234637685247
getting topparses
outputting cat probs
done with sent


making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  he gave you your telephone .
making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  he gave you your telephone .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  he gave you your telephone .

got training pair
Sent : he gave you your telephone .
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
sentence is  ['he', 'gave', 'you', 'your', 'telephone']
sem is  pro:poss:det|your($0,n|telephone($0))
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1363
got chart
norm score is  -32.9904142312
doing updates with learning rate  0.0368202428339
Deleting 0 entries of the total 981
done io
WATCH	he gave you your telephone .
WATCH	12	((S\NP)\NP)	0.696755267135
WATCH	12	((S\NP)/NP)	0.0464983669189
WATCH	12	((S/NP)/NP)	0.236045397157
WATCH	12	((S/NP)\NP)	0.0207009687888
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  who are you calling ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  who are you calling ?
making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  who are you calling ?

got training pair
Sent : who are you calling ?
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
sentence is  ['who', 'are', 'you', 'calling', '?']
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
size of chart is  1447
got chart
norm score is  -42.9501792559
doing updates with learning rate  0.0363519372845
Deleting 0 entries of the total 1650
done io
WATCH	who are you calling ?
WATCH	13	((S\NP)\NP)	0.696926854984
WATCH	13	((S\NP)/NP)	0.042566392811
WATCH	13	((S/NP)/NP)	0.242997224294
WATCH	13	((S/NP)\NP)	0.0175095279117
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  who ?
making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  who ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  who ?

got training pair
Sent : who ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
sentence is  ['who']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
size of chart is  3
got chart
norm score is  -14.5930250893
doing updates with learning rate  0.0358968235937
Deleting 0 entries of the total 1651
done io
WATCH	who ?
WATCH	14	((S\NP)\NP)	0.696991362588
WATCH	14	((S\NP)/NP)	0.042531245509
WATCH	14	((S/NP)/NP)	0.242996347528
WATCH	14	((S/NP)\NP)	0.0174810443749
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  what 's the man doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  what 's the man doing ?
making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  what 's the man doing ?

got training pair
Sent : what 's the man doing ?
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sentence is  ['what', "'s", 'the', 'man', 'doing', '?']
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
size of chart is  3177
got chart
norm score is  -34.8427768093
doing updates with learning rate  0.0354543326123
Deleting 0 entries of the total 2868
done io
WATCH	what 's the man doing ?
WATCH	15	((S\NP)\NP)	0.695378088326
WATCH	15	((S\NP)/NP)	0.0384796524545
WATCH	15	((S/NP)/NP)	0.249664952199
WATCH	15	((S/NP)\NP)	0.0164773070199
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  you want a cookie ?
making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  you want a cookie ?
making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  you want a cookie ?

got training pair
Sent : you want a cookie ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sentence is  ['you', 'want', 'a', 'cookie', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
size of chart is  2127
got chart
norm score is  -30.3251646177
doing updates with learning rate  0.0350239280111
Deleting 0 entries of the total 3826
done io
WATCH	you want a cookie ?
WATCH	16	((S\NP)\NP)	0.72744278695
WATCH	16	((S\NP)/NP)	0.0408706951106
WATCH	16	((S/NP)/NP)	0.217361814477
WATCH	16	((S/NP)\NP)	0.0143247034624
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  can you do it ?
making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  can you do it ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  can you do it ?

got training pair
Sent : can you do it ?
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
sentence is  ['can', 'you', 'do', 'it']
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
size of chart is  619
got chart
norm score is  -23.4299361884
doing updates with learning rate  0.034605103925
Deleting 0 entries of the total 4195
done io
WATCH	can you do it ?
WATCH	17	((S\NP)\NP)	0.74007374249
WATCH	17	((S\NP)/NP)	0.0356820769156
WATCH	17	((S/NP)/NP)	0.211205195346
WATCH	17	((S/NP)\NP)	0.0130389852487
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  there .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  there .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  there .

got training pair
Sent : there .
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['there']
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  3
got chart
norm score is  -11.8685226363
doing updates with learning rate  0.0341973828006
Deleting 0 entries of the total 4198
done io
WATCH	there .
WATCH	18	((S\NP)\NP)	0.74012975873
WATCH	18	((S\NP)/NP)	0.0356542042707
WATCH	18	((S/NP)/NP)	0.211200658442
WATCH	18	((S/NP)\NP)	0.0130153785568
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
size of chart is  127
got chart
norm score is  -17.3022559363
doing updates with learning rate  0.0338003134226
Deleting 0 entries of the total 4268
done io
WATCH	what 's that ?
WATCH	19	((S\NP)\NP)	0.746003831828
WATCH	19	((S\NP)/NP)	0.0354706986142
WATCH	19	((S/NP)/NP)	0.206043581445
WATCH	19	((S/NP)\NP)	0.0124818881126
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  it 's a baby .
making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  it 's a baby .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  it 's a baby .

got training pair
Sent : it 's a baby .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sentence is  ['it', "'s", 'a', 'baby']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
size of chart is  466
got chart
norm score is  -22.9203011505
doing updates with learning rate  0.0334134691061
Deleting 0 entries of the total 4533
done io
WATCH	it 's a baby .
WATCH	20	((S\NP)\NP)	0.725381527813
WATCH	20	((S\NP)/NP)	0.0346833910358
WATCH	20	((S/NP)/NP)	0.227045213392
WATCH	20	((S/NP)\NP)	0.0128898677588
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  Mommy can 't read .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Mommy can 't read .
making  adj|busy(pro|I)
making  pro|I
sentence is  Mommy can 't read .

got training pair
Sent : Mommy can 't read .
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
sentence is  ['Mommy', 'can', "'t", 'read']
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(pro|I)
adding  St  to START
size of chart is  433
got chart
norm score is  -35.9705168014
doing updates with learning rate  0.0330364460353
Deleting 4395 entries of the total 4851
done io
WATCH	Mommy can 't read .
WATCH	21	((S\NP)\NP)	0.66867377312
WATCH	21	((S\NP)/NP)	0.0305854671775
WATCH	21	((S/NP)/NP)	0.288386479041
WATCH	21	((S/NP)\NP)	0.0123542806609
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  I 'm busy .
making  adj|busy(pro|I)
making  pro|I
sentence is  I 'm busy .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  I 'm busy .

got training pair
Sent : I 'm busy .
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sentence is  ['I', "'m", 'busy']
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
size of chart is  167
got chart
norm score is  -21.5721563864
doing updates with learning rate  0.0326688617368
Deleting 0 entries of the total 594
done io
WATCH	I 'm busy .
WATCH	22	((S\NP)\NP)	0.665322616166
WATCH	22	((S\NP)/NP)	0.0298221615235
WATCH	22	((S/NP)/NP)	0.292606588336
WATCH	22	((S/NP)\NP)	0.0122486339739
getting topparses
outputting cat probs
done with sent


making  adj|busy(pro|I)
making  pro|I
sentence is  you read the book .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  you read the book .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  you read the book .

got training pair
Sent : you read the book .
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sentence is  ['you', 'read', 'the', 'book']
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
size of chart is  415
got chart
norm score is  -27.592941278
doing updates with learning rate  0.0323103536745
Deleting 0 entries of the total 903
done io
WATCH	you read the book .
WATCH	23	((S\NP)\NP)	0.70441283407
WATCH	23	((S\NP)/NP)	0.0320704073316
WATCH	23	((S/NP)/NP)	0.252957408017
WATCH	23	((S/NP)\NP)	0.0105593505814
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  that 's the stool .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  that 's the stool .
making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  that 's the stool .

got training pair
Sent : that 's the stool .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sentence is  ['that', "'s", 'the', 'stool', '.']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
size of chart is  1393
got chart
norm score is  -32.8066091382
doing updates with learning rate  0.0319605779545
Deleting 0 entries of the total 1695
done io
WATCH	that 's the stool .
WATCH	24	((S\NP)\NP)	0.722451841129
WATCH	24	((S\NP)/NP)	0.0301494846245
WATCH	24	((S/NP)/NP)	0.236626145873
WATCH	24	((S/NP)\NP)	0.0107725283733
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  did you eat it ?
making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  did you eat it ?
making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  did you eat it ?

got training pair
Sent : did you eat it ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sentence is  ['did', 'you', 'eat', 'it']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
size of chart is  577
got chart
norm score is  -24.5445473287
doing updates with learning rate  0.0316192081304
Deleting 0 entries of the total 2069
done io
WATCH	did you eat it ?
WATCH	25	((S\NP)\NP)	0.729109913178
WATCH	25	((S\NP)/NP)	0.027364429701
WATCH	25	((S/NP)/NP)	0.233597113002
WATCH	25	((S/NP)\NP)	0.00992854411903
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  you ate it .
making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  you ate it .
making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  you ate it .

got training pair
Sent : you ate it .
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
sentence is  ['you', 'ate', 'it']
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sem is  lambda $0_{e}.n|milk($0)
size of chart is  148
got chart
norm score is  -16.4893734263
doing updates with learning rate  0.0312859340997
Deleting 0 entries of the total 2129
done io
WATCH	you ate it .
WATCH	26	((S\NP)\NP)	0.732509542675
WATCH	26	((S\NP)/NP)	0.0274448548039
WATCH	26	((S/NP)/NP)	0.230276101674
WATCH	26	((S/NP)\NP)	0.00976950084671
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  milk ?
making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  milk ?
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  milk ?

got training pair
Sent : milk ?
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sentence is  ['milk']
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sem is  lambda $0_{e}.n|milk($0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
size of chart is  3
got chart
norm score is  -8.22942929737
doing updates with learning rate  0.0309604610838
Deleting 0 entries of the total 2132
done io
WATCH	milk ?
WATCH	27	((S\NP)\NP)	0.732551974193
WATCH	27	((S\NP)/NP)	0.0274235207498
WATCH	27	((S/NP)/NP)	0.230273341477
WATCH	27	((S/NP)\NP)	0.00975116358004
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  you don 't want milk .
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you don 't want milk .
making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  you don 't want milk .

got training pair
Sent : you don 't want milk .
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sentence is  ['you', 'don', "'t", 'want', 'milk']
sem is  lambda $0_{e}.n|milk($0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
size of chart is  2983
got chart
norm score is  -28.1333971443
doing updates with learning rate  0.030642508684
Deleting 0 entries of the total 3872
done io
WATCH	you don 't want milk .
WATCH	28	((S\NP)\NP)	0.743009037994
WATCH	28	((S\NP)/NP)	0.0274522837842
WATCH	28	((S/NP)/NP)	0.220230546986
WATCH	28	((S/NP)\NP)	0.00930813123599
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you 've just had some juice .
making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  you 've just had some juice .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you 've just had some juice .

got training pair
Sent : you 've just had some juice .
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['you', "'ve", 'just', 'had', 'some', 'juice']
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  6083
got chart
norm score is  -50.3457240322
doing updates with learning rate  0.0303318100061
Deleting 0 entries of the total 6631
done io
WATCH	you 've just had some juice .
WATCH	29	((S\NP)\NP)	0.732757035881
WATCH	29	((S\NP)/NP)	0.0270304624949
WATCH	29	((S/NP)/NP)	0.230537690483
WATCH	29	((S/NP)\NP)	0.00967481114129
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
size of chart is  282
got chart
norm score is  -12.4368992524
doing updates with learning rate  0.0300281108495
Deleting 0 entries of the total 6839
done io
WATCH	what is that ?
WATCH	30	((S\NP)\NP)	0.730023740665
WATCH	30	((S\NP)/NP)	0.026518213583
WATCH	30	((S/NP)/NP)	0.233536732623
WATCH	30	((S/NP)\NP)	0.0099213131292
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  drink the water .
making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  drink the water .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  drink the water .

got training pair
Sent : drink the water .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['drink', 'the', 'water']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  125
got chart
norm score is  -20.3368889801
doing updates with learning rate  0.0297311689541
Deleting 6214 entries of the total 6918
done io
WATCH	drink the water .
WATCH	31	((S\NP)\NP)	0.728620319141
WATCH	31	((S\NP)/NP)	0.0261789816853
WATCH	31	((S/NP)/NP)	0.235324848089
WATCH	31	((S/NP)\NP)	0.00987585108453
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|coffee($0)
size of chart is  135
got chart
norm score is  -10.7089631141
doing updates with learning rate  0.0294407533
Deleting 0 entries of the total 791
done io
WATCH	what is that ?
WATCH	32	((S\NP)\NP)	0.734841732581
WATCH	32	((S\NP)/NP)	0.0245805051724
WATCH	32	((S/NP)/NP)	0.2303994395
WATCH	32	((S/NP)\NP)	0.0101783227467
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  coffee .
making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  coffee .
making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  coffee .

got training pair
Sent : coffee .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sentence is  ['coffee']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|coffee($0)
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
size of chart is  3
got chart
norm score is  -9.00253500546
doing updates with learning rate  0.0291566434574
Deleting 0 entries of the total 794
done io
WATCH	coffee .
WATCH	33	((S\NP)\NP)	0.734883548649
WATCH	33	((S\NP)/NP)	0.0245615433508
WATCH	33	((S/NP)/NP)	0.230394834946
WATCH	33	((S/NP)\NP)	0.0101600730545
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  he 's drinking his coffee .
making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  he 's drinking his coffee .
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  he 's drinking his coffee .

got training pair
Sent : he 's drinking his coffee .
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
sentence is  ['he', "'s", 'drinking', 'his', 'coffee']
sem is  lambda $0_{e}.n|coffee($0)
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sem is  lambda $0_{ev}.v|go(pro|you,$0)
size of chart is  965
got chart
norm score is  -35.2664328676
doing updates with learning rate  0.02887862898
Deleting 0 entries of the total 1383
done io
WATCH	he 's drinking his coffee .
WATCH	34	((S\NP)\NP)	0.69666904221
WATCH	34	((S\NP)/NP)	0.0256602139508
WATCH	34	((S/NP)/NP)	0.26760397777
WATCH	34	((S/NP)\NP)	0.0100667660697
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  you go .
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  you go .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you go .

got training pair
Sent : you go .
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sentence is  ['you', 'go']
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
size of chart is  55
got chart
norm score is  -12.3748353337
doing updates with learning rate  0.0286065088411
Deleting 0 entries of the total 1436
done io
WATCH	you go .
WATCH	35	((S\NP)\NP)	0.704153452207
WATCH	35	((S\NP)/NP)	0.0259157886846
WATCH	35	((S/NP)/NP)	0.260161880329
WATCH	35	((S/NP)\NP)	0.00976887877959
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  later we 'll have a cookie .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  later we 'll have a cookie .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  later we 'll have a cookie .

got training pair
Sent : later we 'll have a cookie .
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sentence is  ['later', 'we', "'ll", 'have', 'a', 'cookie']
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
size of chart is  4960
got chart
norm score is  -41.3398193758
doing updates with learning rate  0.0283400909068
Deleting 0 entries of the total 3806
done io
WATCH	later we 'll have a cookie .
WATCH	36	((S\NP)\NP)	0.678954543678
WATCH	36	((S\NP)/NP)	0.0258854147434
WATCH	36	((S/NP)/NP)	0.285745911093
WATCH	36	((S/NP)\NP)	0.009414130485
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  we 'll have a cookie later .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  we 'll have a cookie later .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  we 'll have a cookie later .

got training pair
Sent : we 'll have a cookie later .
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['we', "'ll", 'have', 'a', 'cookie', 'later']
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  5128
got chart
norm score is  -25.8615603114
doing updates with learning rate  0.0280791914453
Deleting 0 entries of the total 4216
done io
WATCH	we 'll have a cookie later .
WATCH	37	((S\NP)\NP)	0.636278797549
WATCH	37	((S\NP)/NP)	0.0241096050881
WATCH	37	((S/NP)/NP)	0.330651870619
WATCH	37	((S/NP)\NP)	0.00895972674387
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sentence is  ['what', "'s", 'that', '?']
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
size of chart is  1046
got chart
norm score is  -17.2226775236
doing updates with learning rate  0.0278236346674
Deleting 0 entries of the total 4891
done io
WATCH	what 's that ?
WATCH	38	((S\NP)\NP)	0.637936199672
WATCH	38	((S\NP)/NP)	0.0217579400598
WATCH	38	((S/NP)/NP)	0.331124840468
WATCH	38	((S/NP)\NP)	0.00918101979994
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  your hat ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  your hat ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  your hat ?

got training pair
Sent : your hat ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sentence is  ['your', 'hat']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  59
got chart
norm score is  -17.8439366218
doing updates with learning rate  0.0275732522983
Deleting 0 entries of the total 4936
done io
WATCH	your hat ?
WATCH	39	((S\NP)\NP)	0.637898640026
WATCH	39	((S\NP)/NP)	0.0217391793973
WATCH	39	((S/NP)/NP)	0.33119708243
WATCH	39	((S/NP)\NP)	0.00916509814762
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  and what did you do with it ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  and what did you do with it ?
making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  and what did you do with it ?

got training pair
Sent : and what did you do with it ?
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sentence is  ['and', 'what', 'did', 'you', 'do', 'with', 'it']
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
size of chart is  11027
got chart
norm score is  -42.8015156358
doing updates with learning rate  0.0273278831761
Deleting 0 entries of the total 7941
done io
WATCH	and what did you do with it ?
WATCH	40	((S\NP)\NP)	0.606667052119
WATCH	40	((S\NP)/NP)	0.0206561635538
WATCH	40	((S/NP)/NP)	0.364669882904
WATCH	40	((S/NP)\NP)	0.00800690142354
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  give dolly her bottle .
making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  give dolly her bottle .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  give dolly her bottle .

got training pair
Sent : give dolly her bottle .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['give', 'dolly', 'her', 'bottle']
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1486
got chart
norm score is  -38.8372982124
doing updates with learning rate  0.0270873728761
Deleting 7706 entries of the total 8616
done io
WATCH	give dolly her bottle .
WATCH	41	((S\NP)\NP)	0.613738020301
WATCH	41	((S\NP)/NP)	0.0208458861985
WATCH	41	((S/NP)/NP)	0.357579581265
WATCH	41	((S/NP)\NP)	0.00783651223589
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['what', 'are', 'you', 'doing']
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
size of chart is  611
got chart
norm score is  -23.3922427966
doing updates with learning rate  0.0268515733591
Deleting 0 entries of the total 1274
done io
WATCH	what are you doing ?
WATCH	42	((S\NP)\NP)	0.62907852644
WATCH	42	((S\NP)/NP)	0.0191303788781
WATCH	42	((S/NP)/NP)	0.344290472073
WATCH	42	((S/NP)\NP)	0.00750062260908
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
sentence is  ['what', 'are', 'you', 'doing']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sem is  lambda $0_{e}.n|bottle($0)
size of chart is  268
got chart
norm score is  -15.54733879
doing updates with learning rate  0.0266203426413
Deleting 0 entries of the total 1277
done io
WATCH	what are you doing ?
WATCH	43	((S\NP)\NP)	0.642924595563
WATCH	43	((S\NP)/NP)	0.0176128462584
WATCH	43	((S/NP)/NP)	0.332239532656
WATCH	43	((S/NP)\NP)	0.00722302552236
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  bottle ?
making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  bottle ?
making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  bottle ?

got training pair
Sent : bottle ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sentence is  ['bottle', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|bottle($0)
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
size of chart is  39
got chart
norm score is  -16.1835032197
doing updates with learning rate  0.026393544485
Deleting 0 entries of the total 1303
done io
WATCH	bottle ?
WATCH	44	((S\NP)\NP)	0.655145965053
WATCH	44	((S\NP)/NP)	0.0179319958436
WATCH	44	((S/NP)/NP)	0.319980056139
WATCH	44	((S/NP)\NP)	0.00694198296528
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  the hat ?
making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  the hat ?
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  the hat ?

got training pair
Sent : the hat ?
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sentence is  ['the', 'hat']
sem is  lambda $0_{e}.n|bottle($0)
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
size of chart is  41
got chart
norm score is  -15.1768936118
doing updates with learning rate  0.0261710481075
Deleting 0 entries of the total 1340
done io
WATCH	the hat ?
WATCH	45	((S\NP)\NP)	0.655169668571
WATCH	45	((S\NP)/NP)	0.017916726872
WATCH	45	((S/NP)/NP)	0.319986223384
WATCH	45	((S/NP)\NP)	0.00692738117237
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  he doesn 't have a hat .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  he doesn 't have a hat .

got training pair
Sent : he doesn 't have a hat .
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['he', 'doesn', "'t", 'have', 'a', 'hat']
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  3133
got chart
norm score is  -40.9307381404
doing updates with learning rate  0.0259527279087
Deleting 0 entries of the total 2850
done io
WATCH	he doesn 't have a hat .
WATCH	46	((S\NP)\NP)	0.650421414207
WATCH	46	((S\NP)/NP)	0.0177760366947
WATCH	46	((S/NP)/NP)	0.324758874201
WATCH	46	((S/NP)\NP)	0.0070436748973
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soldier-PL($0)
size of chart is  199
got chart
norm score is  -9.36379768831
doing updates with learning rate  0.0257384632137
Deleting 0 entries of the total 2988
done io
WATCH	what is that ?
WATCH	47	((S\NP)\NP)	0.662500829773
WATCH	47	((S\NP)/NP)	0.0164964073139
WATCH	47	((S/NP)/NP)	0.314087331428
WATCH	47	((S/NP)\NP)	0.0069154314848
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  soldiers .
making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  soldiers .
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  soldiers .

got training pair
Sent : soldiers .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sentence is  ['soldiers']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soldier-PL($0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
size of chart is  3
got chart
norm score is  -10.4287461594
doing updates with learning rate  0.025528138032
Deleting 0 entries of the total 2991
done io
WATCH	soldiers .
WATCH	48	((S\NP)\NP)	0.662524928439
WATCH	48	((S\NP)/NP)	0.0164816689359
WATCH	48	((S/NP)/NP)	0.31409311221
WATCH	48	((S/NP)\NP)	0.00690029041506
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  bring it here .
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  bring it here .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  bring it here .

got training pair
Sent : bring it here .
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['bring', 'it', 'here']
sem is  lambda $0_{e}.n|soldier-PL($0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  162
got chart
norm score is  -25.7628512127
doing updates with learning rate  0.0253216408296
Deleting 0 entries of the total 3109
done io
WATCH	bring it here .
WATCH	49	((S\NP)\NP)	0.662994625989
WATCH	49	((S\NP)/NP)	0.0164774880053
WATCH	49	((S/NP)/NP)	0.313652847553
WATCH	49	((S/NP)\NP)	0.00687503845201
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
size of chart is  223
got chart
norm score is  -9.48858018538
doing updates with learning rate  0.0251188643151
Deleting 0 entries of the total 3263
done io
WATCH	what 's that ?
WATCH	50	((S\NP)\NP)	0.674274095046
WATCH	50	((S\NP)/NP)	0.0152202672219
WATCH	50	((S/NP)/NP)	0.303758671728
WATCH	50	((S/NP)\NP)	0.00674696600394
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's Jack and Jill .
making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  that 's Jack and Jill .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  that 's Jack and Jill .

got training pair
Sent : that 's Jack and Jill .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sentence is  ['that', "'s", 'Jack', 'and', 'Jill']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
size of chart is  2173
got chart
norm score is  -35.6962961683
doing updates with learning rate  0.0249197052378
Deleting 3399 entries of the total 4437
done io
WATCH	that 's Jack and Jill .
WATCH	51	((S\NP)\NP)	0.657989136297
WATCH	51	((S\NP)/NP)	0.014731846151
WATCH	51	((S/NP)/NP)	0.320651644487
WATCH	51	((S/NP)\NP)	0.00662737306566
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  he doesn 't have a hat .

got training pair
Sent : he doesn 't have a hat .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sentence is  ['he', 'doesn', "'t", 'have', 'a', 'hat']
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
size of chart is  4255
got chart
norm score is  -24.0150943116
doing updates with learning rate  0.0247240641974
Deleting 0 entries of the total 3229
done io
WATCH	he doesn 't have a hat .
WATCH	52	((S\NP)\NP)	0.64059255983
WATCH	52	((S\NP)/NP)	0.0143281839378
WATCH	52	((S/NP)/NP)	0.338312077066
WATCH	52	((S/NP)\NP)	0.00676717916554
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  Eve has a hat .
making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  Eve has a hat .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  Eve has a hat .

got training pair
Sent : Eve has a hat .
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sentence is  ['Eve', 'has', 'a', 'hat']
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
size of chart is  1343
got chart
norm score is  -18.4642734875
doing updates with learning rate  0.0245318454645
Deleting 0 entries of the total 4002
done io
WATCH	Eve has a hat .
WATCH	53	((S\NP)\NP)	0.589486621274
WATCH	53	((S\NP)/NP)	0.0154712927627
WATCH	53	((S/NP)/NP)	0.388537919596
WATCH	53	((S/NP)\NP)	0.00650416636716
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  you 're gonna find it .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  you 're gonna find it .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  you 're gonna find it .

got training pair
Sent : you 're gonna find it .
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
sentence is  ['you', "'re", 'gonna', 'find', 'it']
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
size of chart is  2783
got chart
norm score is  -33.4109057766
doing updates with learning rate  0.0243429568107
Deleting 0 entries of the total 5525
done io
WATCH	you 're gonna find it .
WATCH	54	((S\NP)\NP)	0.587014187389
WATCH	54	((S\NP)/NP)	0.0153759654033
WATCH	54	((S/NP)/NP)	0.391078195324
WATCH	54	((S/NP)\NP)	0.00653165188397
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  there .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  there .
making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  there .

got training pair
Sent : there .
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
sentence is  ['there']
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.n|man($0)
size of chart is  3
got chart
norm score is  -6.32281247396
doing updates with learning rate  0.0241573093489
Deleting 0 entries of the total 5527
done io
WATCH	there .
WATCH	55	((S\NP)\NP)	0.58703264433
WATCH	55	((S\NP)/NP)	0.0153625703581
WATCH	55	((S/NP)/NP)	0.391088359977
WATCH	55	((S/NP)\NP)	0.00651642533471
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  man ?
making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  man ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  man ?

got training pair
Sent : man ?
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sentence is  ['man']
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.n|man($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
size of chart is  3
got chart
norm score is  -5.65235314899
doing updates with learning rate  0.0239748173813
Deleting 0 entries of the total 5529
done io
WATCH	man ?
WATCH	56	((S\NP)\NP)	0.58705136967
WATCH	56	((S\NP)/NP)	0.0153489676381
WATCH	56	((S/NP)/NP)	0.391098667352
WATCH	56	((S/NP)\NP)	0.00650099534064
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  who is that man ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  who is that man ?
making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  who is that man ?

got training pair
Sent : who is that man ?
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
sentence is  ['who', 'is', 'that', 'man', '?']
sem is  lambda $0_{e}.n|man($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
size of chart is  621
got chart
norm score is  -32.2135118548
doing updates with learning rate  0.0237953982564
Deleting 0 entries of the total 5757
done io
WATCH	who is that man ?
WATCH	57	((S\NP)\NP)	0.576459254727
WATCH	57	((S\NP)/NP)	0.0194220417708
WATCH	57	((S/NP)/NP)	0.398329790968
WATCH	57	((S/NP)\NP)	0.00578891253431
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  Eve ?
making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  Eve ?
making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  Eve ?

got training pair
Sent : Eve ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sentence is  ['Eve']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
size of chart is  3
got chart
norm score is  -9.95875954543
doing updates with learning rate  0.0236189722338
Deleting 0 entries of the total 5760
done io
WATCH	Eve ?
WATCH	58	((S\NP)\NP)	0.576476900633
WATCH	58	((S\NP)/NP)	0.0194079118938
WATCH	58	((S/NP)/NP)	0.398340412664
WATCH	58	((S/NP)\NP)	0.00577477480865
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  you 're Eve .
making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  you 're Eve .
making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  you 're Eve .

got training pair
Sent : you 're Eve .
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
sentence is  ['you', "'re", 'Eve']
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sem is  lambda $0_{ev}.adv:loc|down($0)
size of chart is  76
got chart
norm score is  -22.3586581365
doing updates with learning rate  0.0234454623554
Deleting 0 entries of the total 5799
done io
WATCH	you 're Eve .
WATCH	59	((S\NP)\NP)	0.58243006534
WATCH	59	((S\NP)/NP)	0.0288757118095
WATCH	59	((S/NP)/NP)	0.383155262468
WATCH	59	((S/NP)\NP)	0.00553896038231
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  down .
making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  down .
making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  down .

got training pair
Sent : down .
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sentence is  ['down']
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sem is  lambda $0_{ev}.adv:loc|down($0)
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
size of chart is  3
got chart
norm score is  -8.48530017921
doing updates with learning rate  0.023274794324
Deleting 0 entries of the total 5802
done io
WATCH	down .
WATCH	60	((S\NP)\NP)	0.582448771792
WATCH	60	((S\NP)/NP)	0.0288608261262
WATCH	60	((S/NP)/NP)	0.383165391141
WATCH	60	((S/NP)\NP)	0.00552501094111
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  you write a letter .
making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  you write a letter .
making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  you write a letter .

got training pair
Sent : you write a letter .
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sentence is  ['you', 'write', 'a', 'letter', '.']
sem is  lambda $0_{ev}.adv:loc|down($0)
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
size of chart is  703
got chart
norm score is  -30.2478829735
doing updates with learning rate  0.0231068963886
Deleting 5095 entries of the total 6196
done io
WATCH	you write a letter .
WATCH	61	((S\NP)\NP)	0.608268742713
WATCH	61	((S\NP)/NP)	0.0310069601498
WATCH	61	((S/NP)/NP)	0.355609944013
WATCH	61	((S/NP)\NP)	0.00511435312404
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  the pencil ?
making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  the pencil ?
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  the pencil ?

got training pair
Sent : the pencil ?
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sentence is  ['the', 'pencil']
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
size of chart is  43
got chart
norm score is  -13.3979250231
doing updates with learning rate  0.0229416992343
Deleting 0 entries of the total 1141
done io
WATCH	the pencil ?
WATCH	62	((S\NP)\NP)	0.608310031176
WATCH	62	((S\NP)/NP)	0.0309932003246
WATCH	62	((S/NP)/NP)	0.355596024143
WATCH	62	((S/NP)\NP)	0.00510074435704
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  that 's your pencil .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  that 's your pencil .
making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  that 's your pencil .

got training pair
Sent : that 's your pencil .
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sentence is  ['that', "'s", 'your', 'pencil', '.']
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
size of chart is  717
got chart
norm score is  -36.521485472
doing updates with learning rate  0.0227791358797
Deleting 0 entries of the total 1557
done io
WATCH	that 's your pencil .
WATCH	63	((S\NP)\NP)	0.59775274395
WATCH	63	((S\NP)/NP)	0.0304202357247
WATCH	63	((S/NP)/NP)	0.36683923841
WATCH	63	((S/NP)\NP)	0.00498778191447
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  the man ?
making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  the man ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  the man ?

got training pair
Sent : the man ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
sentence is  ['the', 'man']
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  71
got chart
norm score is  -7.64799615818
doing updates with learning rate  0.0226191415778
Deleting 0 entries of the total 1602
done io
WATCH	the man ?
WATCH	64	((S\NP)\NP)	0.597771597467
WATCH	64	((S\NP)/NP)	0.0304051482709
WATCH	64	((S/NP)/NP)	0.366848812273
WATCH	64	((S/NP)\NP)	0.00497444198941
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  what are you doing in the corner ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  what are you doing in the corner ?
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  what are you doing in the corner ?

got training pair
Sent : what are you doing in the corner ?
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sentence is  ['what', 'are', 'you', 'doing', 'in', 'the', 'corner']
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
size of chart is  15656
got chart
norm score is  -42.4538890815
doing updates with learning rate  0.0224616537229
Deleting 0 entries of the total 5540
done io
WATCH	what are you doing in the corner ?
WATCH	65	((S\NP)\NP)	0.602568940454
WATCH	65	((S\NP)/NP)	0.0279474858553
WATCH	65	((S/NP)/NP)	0.364553862859
WATCH	65	((S/NP)\NP)	0.00492971083122
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  you 're going to read .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  you 're going to read .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you 're going to read .

got training pair
Sent : you 're going to read .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['you', "'re", 'going', 'to', 'read']
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  4949
got chart
norm score is  -36.4295467021
doing updates with learning rate  0.0223066117621
Deleting 0 entries of the total 7028
done io
WATCH	you 're going to read .
WATCH	66	((S\NP)\NP)	0.603343618538
WATCH	66	((S\NP)/NP)	0.0280144635319
WATCH	66	((S/NP)/NP)	0.363736803093
WATCH	66	((S/NP)\NP)	0.00490511483789
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|shoe($0)
size of chart is  190
got chart
norm score is  -9.3120090587
doing updates with learning rate  0.022153957111
Deleting 0 entries of the total 7128
done io
WATCH	what is that ?
WATCH	67	((S\NP)\NP)	0.617402542051
WATCH	67	((S\NP)/NP)	0.0260706089758
WATCH	67	((S/NP)/NP)	0.351746142305
WATCH	67	((S/NP)\NP)	0.00478070666854
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  shoe .
making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  shoe .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  shoe .

got training pair
Sent : shoe .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sentence is  ['shoe']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|shoe($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
size of chart is  3
got chart
norm score is  -7.38053001075
doing updates with learning rate  0.0220036330731
Deleting 0 entries of the total 7131
done io
WATCH	shoe .
WATCH	68	((S\NP)\NP)	0.617420261539
WATCH	68	((S\NP)/NP)	0.0260596847923
WATCH	68	((S/NP)/NP)	0.351752828406
WATCH	68	((S/NP)\NP)	0.00476722526269
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .

got training pair
Sent : that 's Racketyboom .
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sentence is  ['that', "'s", 'Racketyboom']
sem is  lambda $0_{e}.n|shoe($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
size of chart is  62
got chart
norm score is  -21.9026563332
doing updates with learning rate  0.0218555847641
Deleting 0 entries of the total 7164
done io
WATCH	that 's Racketyboom .
WATCH	69	((S\NP)\NP)	0.595401667778
WATCH	69	((S\NP)/NP)	0.0251012728948
WATCH	69	((S/NP)/NP)	0.374825868558
WATCH	69	((S/NP)\NP)	0.00467119076987
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  that 's Racketyboom .

got training pair
Sent : that 's Racketyboom .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sentence is  ['that', "'s", 'Racketyboom']
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
size of chart is  90
got chart
norm score is  -12.1182058654
doing updates with learning rate  0.0217097590391
Deleting 0 entries of the total 7196
done io
WATCH	that 's Racketyboom .
WATCH	70	((S\NP)\NP)	0.558397495613
WATCH	70	((S\NP)/NP)	0.0235303301855
WATCH	70	((S/NP)/NP)	0.4135497084
WATCH	70	((S/NP)\NP)	0.00452246580081
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  Eve read book .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  Eve read book .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  Eve read book .

got training pair
Sent : Eve read book .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sentence is  ['Eve', 'read', 'book']
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
size of chart is  142
got chart
norm score is  -17.9075616677
doing updates with learning rate  0.0215661044238
Deleting 6109 entries of the total 7308
done io
WATCH	Eve read book .
WATCH	71	((S\NP)\NP)	0.570374661587
WATCH	71	((S\NP)/NP)	0.0240237049203
WATCH	71	((S/NP)/NP)	0.401226921022
WATCH	71	((S/NP)\NP)	0.00437471247145
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  you read the book .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  you read the book .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  you read the book .

got training pair
Sent : you read the book .
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sentence is  ['you', 'read', 'the', 'book']
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
size of chart is  439
got chart
norm score is  -13.3383044859
doing updates with learning rate  0.0214245710482
Deleting 0 entries of the total 1536
done io
WATCH	you read the book .
WATCH	72	((S\NP)\NP)	0.603512971592
WATCH	72	((S\NP)/NP)	0.023145681941
WATCH	72	((S/NP)/NP)	0.369326546084
WATCH	72	((S/NP)\NP)	0.00401480038343
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  Mommy can 't read .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Mommy can 't read .
making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  Mommy can 't read .

got training pair
Sent : Mommy can 't read .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
sentence is  ['Mommy', 'can', "'t", 'read']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(n:prop|Mommy)
size of chart is  424
got chart
norm score is  -35.6280278197
doing updates with learning rate  0.0212851105845
Deleting 0 entries of the total 1815
done io
WATCH	Mommy can 't read .
WATCH	73	((S\NP)\NP)	0.565303258583
WATCH	73	((S\NP)/NP)	0.0219069000772
WATCH	73	((S/NP)/NP)	0.408904414985
WATCH	73	((S/NP)\NP)	0.00388542635495
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Mommy 's busy .
making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  Mommy 's busy .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  Mommy 's busy .

got training pair
Sent : Mommy 's busy .
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sentence is  ['Mommy', "'s", 'busy']
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(n:prop|Mommy)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
size of chart is  110
got chart
norm score is  -21.9950399654
doing updates with learning rate  0.0211476761869
Deleting 0 entries of the total 1883
done io
WATCH	Mommy 's busy .
WATCH	74	((S\NP)\NP)	0.569690576789
WATCH	74	((S\NP)/NP)	0.0220661830203
WATCH	74	((S/NP)/NP)	0.40441235777
WATCH	74	((S/NP)\NP)	0.00383088242038
getting topparses
outputting cat probs
done with sent


making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  Eve read .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  Eve read .
making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  Eve read .

got training pair
Sent : Eve read .
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sentence is  ['Eve', 'read']
sem is  adj|busy(n:prop|Mommy)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
size of chart is  41
got chart
norm score is  -16.3325888531
doing updates with learning rate  0.0210122224352
Deleting 0 entries of the total 1915
done io
WATCH	Eve read .
WATCH	75	((S\NP)\NP)	0.578278018104
WATCH	75	((S\NP)/NP)	0.0223877535242
WATCH	75	((S/NP)/NP)	0.395598559459
WATCH	75	((S/NP)\NP)	0.00373566891326
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  you read about the choochoo .
making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  you read about the choochoo .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you read about the choochoo .

got training pair
Sent : you read about the choochoo .
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sentence is  ['you', 'read', 'about', 'the', 'choochoo']
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
size of chart is  2385
got chart
norm score is  -28.8957919961
doing updates with learning rate  0.0208787052798
Deleting 0 entries of the total 3119
done io
WATCH	you read about the choochoo .
WATCH	76	((S\NP)\NP)	0.578542787279
WATCH	76	((S\NP)/NP)	0.0224738913964
WATCH	76	((S/NP)/NP)	0.395262658024
WATCH	76	((S/NP)\NP)	0.00372066329995
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  Mommy 'll read later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  Mommy 'll read later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  Mommy 'll read later .

got training pair
Sent : Mommy 'll read later .
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sentence is  ['Mommy', "'ll", 'read', 'later']
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
size of chart is  944
got chart
norm score is  -25.1802582467
doing updates with learning rate  0.0207470819903
Deleting 0 entries of the total 3650
done io
WATCH	Mommy 'll read later .
WATCH	77	((S\NP)\NP)	0.586062879908
WATCH	77	((S\NP)/NP)	0.0227554609364
WATCH	77	((S/NP)/NP)	0.387545360516
WATCH	77	((S/NP)\NP)	0.00363629863996
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  I 'll read to you later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  I 'll read to you later .
making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  I 'll read to you later .

got training pair
Sent : I 'll read to you later .
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sentence is  ['I', "'ll", 'read', 'to', 'you', 'later', '.']
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
size of chart is  2787
got chart
norm score is  -48.773980325
doing updates with learning rate  0.0206173111058
Deleting 0 entries of the total 4841
done io
WATCH	I 'll read to you later .
WATCH	78	((S\NP)\NP)	0.592642459818
WATCH	78	((S\NP)/NP)	0.0230001101618
WATCH	78	((S/NP)/NP)	0.380796091
WATCH	78	((S/NP)\NP)	0.00356133902062
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  come ?
making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  come ?
making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  come ?

got training pair
Sent : come ?
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sentence is  ['come', '?']
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
size of chart is  49
got chart
norm score is  -16.7910432349
doing updates with learning rate  0.0204893523878
Deleting 0 entries of the total 4887
done io
WATCH	come ?
WATCH	79	((S\NP)\NP)	0.592664072667
WATCH	79	((S\NP)/NP)	0.0229899785822
WATCH	79	((S/NP)/NP)	0.38079635422
WATCH	79	((S/NP)\NP)	0.00354959453152
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  you want some milk ?
making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  you want some milk ?
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  you want some milk ?

got training pair
Sent : you want some milk ?
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sentence is  ['you', 'want', 'some', 'milk']
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
size of chart is  1326
got chart
norm score is  -31.877832646
doing updates with learning rate  0.0203631667747
Deleting 0 entries of the total 5741
done io
WATCH	you want some milk ?
WATCH	80	((S\NP)\NP)	0.593291583976
WATCH	80	((S\NP)/NP)	0.0230034637494
WATCH	80	((S/NP)/NP)	0.380172865098
WATCH	80	((S/NP)\NP)	0.00353208717619
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  we 'll have milk for lunch .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  we 'll have milk for lunch .
making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  we 'll have milk for lunch .

got training pair
Sent : we 'll have milk for lunch .
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
sentence is  ['we', "'ll", 'have', 'milk', 'for', 'lunch']
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sem is  lambda $0_{e}.n|cup($0)
size of chart is  7329
got chart
norm score is  -43.1888892165
doing updates with learning rate  0.020238716339
Deleting 7309 entries of the total 8644
done io
WATCH	we 'll have milk for lunch .
WATCH	81	((S\NP)\NP)	0.599761211952
WATCH	81	((S\NP)/NP)	0.0232430179495
WATCH	81	((S/NP)/NP)	0.373537081425
WATCH	81	((S/NP)\NP)	0.00345868867321
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  cup ?
making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  cup ?
making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  cup ?

got training pair
Sent : cup ?
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sentence is  ['cup']
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sem is  lambda $0_{e}.n|cup($0)
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
size of chart is  3
got chart
norm score is  -6.76341488951
doing updates with learning rate  0.0201159642459
Deleting 0 entries of the total 1338
done io
WATCH	cup ?
WATCH	82	((S\NP)\NP)	0.599777704049
WATCH	82	((S\NP)/NP)	0.0232322139702
WATCH	82	((S/NP)/NP)	0.373543195293
WATCH	82	((S/NP)\NP)	0.0034468866876
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  that 's not a cup .
making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  that 's not a cup .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  that 's not a cup .

got training pair
Sent : that 's not a cup .
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sentence is  ['that', "'s", 'not', 'a', 'cup']
sem is  lambda $0_{e}.n|cup($0)
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
size of chart is  1079
got chart
norm score is  -26.8573332063
doing updates with learning rate  0.0199948747138
Deleting 0 entries of the total 2004
done io
WATCH	that 's not a cup .
WATCH	83	((S\NP)\NP)	0.55817290227
WATCH	83	((S\NP)/NP)	0.021622088989
WATCH	83	((S/NP)/NP)	0.416893152415
WATCH	83	((S/NP)\NP)	0.00331185632659
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  that 's the top .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  that 's the top .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's the top .

got training pair
Sent : that 's the top .
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['that', "'s", 'the', 'top']
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  553
got chart
norm score is  -16.3903917432
doing updates with learning rate  0.0198754129766
Deleting 0 entries of the total 2230
done io
WATCH	that 's the top .
WATCH	84	((S\NP)\NP)	0.517949127049
WATCH	84	((S\NP)/NP)	0.0200537783614
WATCH	84	((S/NP)/NP)	0.458826211284
WATCH	84	((S/NP)\NP)	0.00317088330549
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  116
got chart
norm score is  -10.0320025278
doing updates with learning rate  0.0197575452474
Deleting 0 entries of the total 2288
done io
WATCH	what is that ?
WATCH	85	((S\NP)\NP)	0.535203725668
WATCH	85	((S\NP)/NP)	0.0187251448098
WATCH	85	((S/NP)/NP)	0.442991859064
WATCH	85	((S/NP)\NP)	0.0030792704583
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
size of chart is  70
got chart
norm score is  -9.17684354162
doing updates with learning rate  0.0196412386841
Deleting 0 entries of the total 2299
done io
WATCH	what is that ?
WATCH	86	((S\NP)\NP)	0.550475294465
WATCH	86	((S\NP)/NP)	0.0175443707975
WATCH	86	((S/NP)/NP)	0.428986992914
WATCH	86	((S/NP)\NP)	0.0029933418233
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  what is it ?

got training pair
Sent : what is it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sentence is  ['what', 'is', 'it']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
size of chart is  125
got chart
norm score is  -14.6207168577
doing updates with learning rate  0.0195264613563
Deleting 0 entries of the total 2348
done io
WATCH	what is it ?
WATCH	87	((S\NP)\NP)	0.555851089513
WATCH	87	((S\NP)/NP)	0.0169490260167
WATCH	87	((S/NP)/NP)	0.424258191782
WATCH	87	((S/NP)\NP)	0.00294169268823
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  the ducks say what ?
making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  the ducks say what ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  the ducks say what ?

got training pair
Sent : the ducks say what ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['the', 'ducks', 'say', 'what']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  305
got chart
norm score is  -29.8249808989
doing updates with learning rate  0.0194131822135
Deleting 0 entries of the total 2472
done io
WATCH	the ducks say what ?
WATCH	88	((S\NP)\NP)	0.568878277427
WATCH	88	((S\NP)/NP)	0.0159568562685
WATCH	88	((S/NP)/NP)	0.412317387513
WATCH	88	((S/NP)\NP)	0.00284747879069
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|radio($0)
size of chart is  119
got chart
norm score is  -8.25061803163
doing updates with learning rate  0.0193013710544
Deleting 0 entries of the total 2492
done io
WATCH	what is that ?
WATCH	89	((S\NP)\NP)	0.580720321288
WATCH	89	((S\NP)/NP)	0.0150569442602
WATCH	89	((S/NP)/NP)	0.401445281479
WATCH	89	((S/NP)\NP)	0.00277745297232
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  radio .
making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  radio .
making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  radio .

got training pair
Sent : radio .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sentence is  ['radio']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|radio($0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
size of chart is  3
got chart
norm score is  -8.07691317143
doing updates with learning rate  0.0191909984985
Deleting 0 entries of the total 2495
done io
WATCH	radio .
WATCH	90	((S\NP)\NP)	0.580733800758
WATCH	90	((S\NP)/NP)	0.0150490261328
WATCH	90	((S/NP)/NP)	0.401450053643
WATCH	90	((S/NP)\NP)	0.00276711946559
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  what 'll you do with it ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  what 'll you do with it ?
making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  what 'll you do with it ?

got training pair
Sent : what 'll you do with it ?
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
sentence is  ['what', "'ll", 'you', 'do', 'with', 'it']
sem is  lambda $0_{e}.n|radio($0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|hat($0)
size of chart is  4709
got chart
norm score is  -35.1526954997
doing updates with learning rate  0.0190820359572
Deleting 2294 entries of the total 3632
done io
WATCH	what 'll you do with it ?
WATCH	91	((S\NP)\NP)	0.580335875836
WATCH	91	((S\NP)/NP)	0.0142322823469
WATCH	91	((S/NP)/NP)	0.402666829919
WATCH	91	((S/NP)\NP)	0.00276501189767
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  hat ?
making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  hat ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  hat ?

got training pair
Sent : hat ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
sentence is  ['hat']
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sem is  lambda $0_{e}.n|hat($0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
size of chart is  3
got chart
norm score is  -4.34633720495
doing updates with learning rate  0.0189744556078
Deleting 0 entries of the total 1340
done io
WATCH	hat ?
WATCH	92	((S\NP)\NP)	0.58034809203
WATCH	92	((S\NP)/NP)	0.0142272414275
WATCH	92	((S/NP)/NP)	0.402670203137
WATCH	92	((S/NP)\NP)	0.00275446340517
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  where is your hat ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  where is your hat ?
making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  where is your hat ?

got training pair
Sent : where is your hat ?
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sentence is  ['where', 'is', 'your', 'hat']
sem is  lambda $0_{e}.n|hat($0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|hat($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|hat($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
size of chart is  432
got chart
norm score is  -35.6593871313
doing updates with learning rate  0.0188682303675
Deleting 0 entries of the total 1619
done io
WATCH	where is your hat ?
WATCH	93	((S\NP)\NP)	0.582623930257
WATCH	93	((S\NP)/NP)	0.0142398773367
WATCH	93	((S/NP)/NP)	0.400416003893
WATCH	93	((S/NP)\NP)	0.00272018851378
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  I don 't have it .
making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  I don 't have it .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  I don 't have it .

got training pair
Sent : I don 't have it .
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
sentence is  ['I', 'don', "'t", 'have', 'it']
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|hat($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|hat($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  3411
got chart
norm score is  -33.9394603659
doing updates with learning rate  0.0187633338683
Deleting 0 entries of the total 3005
done io
WATCH	I don 't have it .
WATCH	94	((S\NP)\NP)	0.592381468202
WATCH	94	((S\NP)/NP)	0.0143382046223
WATCH	94	((S/NP)/NP)	0.390630198656
WATCH	94	((S/NP)\NP)	0.00265012851924
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  what do you want me to do ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want me to do ?
making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  what do you want me to do ?

got training pair
Sent : what do you want me to do ?
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
sentence is  ['what', 'do', 'you', 'want', 'me', 'to', 'do']
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|book($0)
size of chart is  9002
got chart
norm score is  -44.2153032657
doing updates with learning rate  0.0186597404342
Deleting 0 entries of the total 5806
done io
WATCH	what do you want me to do ?
WATCH	95	((S\NP)\NP)	0.581122721299
WATCH	95	((S\NP)/NP)	0.0140546137288
WATCH	95	((S/NP)/NP)	0.402451262711
WATCH	95	((S/NP)\NP)	0.0023714022613
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  book .
making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  book .
making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  book .

got training pair
Sent : book .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sentence is  ['book', '.']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|book($0)
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
size of chart is  61
got chart
norm score is  -18.719699835
doing updates with learning rate  0.0185574250577
Deleting 0 entries of the total 5852
done io
WATCH	book .
WATCH	96	((S\NP)\NP)	0.581017753429
WATCH	96	((S\NP)/NP)	0.0140465073448
WATCH	96	((S/NP)/NP)	0.402573117224
WATCH	96	((S/NP)\NP)	0.00236262200152
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  is that Racketyboom ?
making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  is that Racketyboom ?
making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  is that Racketyboom ?

got training pair
Sent : is that Racketyboom ?
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
Cat : Swh:lambda $0_{e}.n|stool($0)
sentence is  ['is', 'that', 'Racketyboom']
sem is  lambda $0_{e}.n|book($0)
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sem is  lambda $0_{e}.n|stool($0)
size of chart is  97
got chart
norm score is  -18.6572486188
doing updates with learning rate  0.018456363378
Deleting 0 entries of the total 5923
done io
WATCH	is that Racketyboom ?
WATCH	97	((S\NP)\NP)	0.58102924278
WATCH	97	((S\NP)/NP)	0.0140411471847
WATCH	97	((S/NP)/NP)	0.402576538897
WATCH	97	((S/NP)\NP)	0.00235307113821
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  stool .
making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  stool .
making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  stool .

got training pair
Sent : stool .
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
Cat : Swh:lambda $0_{e}.n|stool($0)
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sentence is  ['stool', '.']
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sem is  lambda $0_{e}.n|stool($0)
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
size of chart is  45
got chart
norm score is  -19.8257681423
doing updates with learning rate  0.0183565316606
Deleting 0 entries of the total 5957
done io
WATCH	stool .
WATCH	98	((S\NP)\NP)	0.581040852553
WATCH	98	((S\NP)/NP)	0.0140357191372
WATCH	98	((S/NP)/NP)	0.402579980068
WATCH	98	((S/NP)\NP)	0.00234344824231
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  you going to sit on that stool ?
making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  you going to sit on that stool ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you going to sit on that stool ?

got training pair
Sent : you going to sit on that stool ?
Cat : Swh:lambda $0_{e}.n|stool($0)
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['you', 'going', 'to', 'sit', 'on', 'that', 'stool']
sem is  lambda $0_{e}.n|stool($0)
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  15684
got chart
norm score is  -50.3438530542
doing updates with learning rate  0.0182579067764
Deleting 0 entries of the total 9841
done io
WATCH	you going to sit on that stool ?
WATCH	99	((S\NP)\NP)	0.584028209423
WATCH	99	((S\NP)/NP)	0.0143657972657
WATCH	99	((S/NP)/NP)	0.399291323914
WATCH	99	((S/NP)\NP)	0.00231466939738
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
sentence is  ['what', 'are', 'you', 'doing']
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1324
got chart
norm score is  -15.5112335155
doing updates with learning rate  0.0181604661828
Deleting 0 entries of the total 10420
done io
WATCH	what are you doing ?
WATCH	100	((S\NP)\NP)	0.595558934827
WATCH	100	((S\NP)/NP)	0.0135740890514
WATCH	100	((S/NP)/NP)	0.388623593227
WATCH	100	((S/NP)\NP)	0.00224338289484
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
making  v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
making  n:prop|Jenny
making  n:prop|Jacob
making  $0
sentence is  Jenny daxed Jacob .

got training pair
Sent : Jenny daxed Jacob .
Sent : Jenny daxed Jacob .
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
sentence is  ['Jenny', 'daxed', 'Jacob']
sem is  lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
size of chart is  48
got chart
norm score is  -21.6713318015
doing updates with learning rate  0.0180641879049
Deleting 8972 entries of the total 10462
done io
WATCH	Jenny daxed Jacob .
WATCH	101	((S\NP)\NP)	0.594413647566
WATCH	101	((S\NP)/NP)	0.0132424160372
WATCH	101	((S/NP)/NP)	0.39016826216
WATCH	101	((S/NP)\NP)	0.00217567423678
getting topparses
top parse:
[('Jenny', 'NP', 'n:prop|Jacob'), ('daxed', 'NP', 'n:prop|Jenny'), ('Jacob', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|dax&PAST($0,$1,$2)')]
-20.8794140613


outputting cat probs
done with sent


returning sentence count  101
Done.
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
making  v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  det|the($2,n|baby($2))
making  n|baby($2)
making  $2
making  $0
sentence is  the man daxed the baby .
making  lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
making  v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
making  det|the($1,n|baby($1))
making  n|baby($1)
making  $1
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
sentence is  the man daxed the baby .

got training pair
Sent : the man daxed the baby .
Sent : the man daxed the baby .
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
sentence is  ['the', 'man', 'daxed', 'the', 'baby']
sem is  lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
sem is  lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
size of chart is  952
got chart
norm score is  -25.7329764528
doing updates with learning rate  0.0180641879049
Deleting 9476 entries of the total 10957
done io
WATCH	the man daxed the baby .
WATCH	101	((S\NP)\NP)	0.588818174378
WATCH	101	((S\NP)/NP)	0.038789989564
WATCH	101	((S/NP)/NP)	0.365146085184
WATCH	101	((S/NP)\NP)	0.0072457508742
getting topparses
top parse:
[('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('man', 'N', 'lambda $0_{e}.n|man($0)'), ('daxed', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|dax&PAST($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)')]
-25.2316576676


outputting cat probs
done with sent


returning sentence count  101
Done.
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  prep|corp(n:prop|Mommy,$0),$0)
making  n:prop|Mommy
making  $0
making  $0)
Is Q
sentence is  this is corp Mommy
making  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  pro:dem|this,det|the($1,n|corp($1)),$0)
making  det|the($1,n|corp($1)),$0)
making  n|corp($1)
making  $1
making  $0)
Is Q
sentence is  this is corp Mommy

got training pair
Sent : this is corp Mommy
Sent : this is corp Mommy
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
sentence is  ['this', 'is', 'corp', 'Mommy']
sem is  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
size of chart is  407
got chart
norm score is  -28.5167775345
doing updates with learning rate  0.0180641879049
Deleting 9203 entries of the total 10704
done io
WATCH	this is corp Mommy
WATCH	101	((S\NP)\NP)	0.595499389333
WATCH	101	((S\NP)/NP)	0.0140082906264
WATCH	101	((S/NP)/NP)	0.388308658815
WATCH	101	((S/NP)\NP)	0.00218366122556
getting topparses
top parse:
[('this', 'NP', 'pro:dem|this'), ('is', '((S\\NP)/PP)', 'lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0($2),$2)'), ('corp', '(PP/NP)', 'lambda $0_{e}.lambda $1_{ev}.prep|corp($0,$1)'), ('Mommy', 'NP', 'n:prop|Mommy')]
-27.7398117231


outputting cat probs
done with sent


returning sentence count  101
Done.
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  prep|corp(n:prop|Mommy,$0),$0)
making  n:prop|Mommy
making  $0
making  $0)
Is Q
sentence is  this is the corp
making  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  pro:dem|this,det|the($1,n|corp($1)),$0)
making  det|the($1,n|corp($1)),$0)
making  n|corp($1)
making  $1
making  $0)
Is Q
sentence is  this is the corp

got training pair
Sent : this is the corp
Sent : this is the corp
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
sentence is  ['this', 'is', 'the', 'corp']
sem is  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
size of chart is  407
got chart
norm score is  -25.1487181328
doing updates with learning rate  0.0180641879049
Deleting 9213 entries of the total 10707
done io
WATCH	this is the corp
WATCH	101	((S\NP)\NP)	0.577660662576
WATCH	101	((S\NP)/NP)	0.0487035331858
WATCH	101	((S/NP)/NP)	0.371535481653
WATCH	101	((S/NP)\NP)	0.00210032258482
getting topparses
top parse:
[('this', 'NP', 'pro:dem|this'), ('is', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('corp', 'N', 'lambda $0_{e}.n|corp($0)')]
-34.2358327374


outputting cat probs
done with sent


returning sentence count  101
Done.
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  who 's sitting ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  who 's sitting ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  who 's sitting ?

got training pair
Sent : who 's sitting ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
sentence is  ['who', "'s", 'sitting', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
size of chart is  378
got chart
norm score is  -32.6365536174
doing updates with learning rate  0.0180641879049
Deleting 9118 entries of the total 10592
done io
WATCH	who 's sitting ?
WATCH	101	((S\NP)\NP)	0.583250069112
WATCH	101	((S\NP)/NP)	0.0132896227521
WATCH	101	((S/NP)/NP)	0.401155069045
WATCH	101	((S/NP)\NP)	0.00230523909168
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  Neil ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Neil ?
making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  Neil ?

got training pair
Sent : Neil ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sentence is  ['Neil']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
size of chart is  3
got chart
norm score is  -9.24452771886
doing updates with learning rate  0.0179690505174
Deleting 0 entries of the total 1477
done io
WATCH	Neil ?
WATCH	102	((S\NP)\NP)	0.583260591531
WATCH	102	((S\NP)/NP)	0.0132871733157
WATCH	102	((S/NP)/NP)	0.401156872374
WATCH	102	((S/NP)\NP)	0.00229536277938
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Eve 's sitting on the stool .
making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  Eve 's sitting on the stool .
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Eve 's sitting on the stool .

got training pair
Sent : Eve 's sitting on the stool .
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
sentence is  ['Eve', "'s", 'sitting', 'on', 'the', 'stool', '.']
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
size of chart is  8677
got chart
norm score is  -31.0884606619
doing updates with learning rate  0.0178750331276
Deleting 0 entries of the total 4881
done io
WATCH	Eve 's sitting on the stool .
WATCH	103	((S\NP)\NP)	0.585879631716
WATCH	103	((S\NP)/NP)	0.0136591637497
WATCH	103	((S/NP)/NP)	0.398192683999
WATCH	103	((S/NP)\NP)	0.00226852053531
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  Neil ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Neil ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  Neil ?

got training pair
Sent : Neil ?
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sentence is  ['Neil']
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
size of chart is  3
got chart
norm score is  -7.95040059932
doing updates with learning rate  0.0177821153585
Deleting 0 entries of the total 4882
done io
WATCH	Neil ?
WATCH	104	((S\NP)\NP)	0.585888295862
WATCH	104	((S\NP)/NP)	0.0136603877024
WATCH	104	((S/NP)/NP)	0.398192744399
WATCH	104	((S/NP)\NP)	0.00225857203713
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?

got training pair
Sent : get what ?
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sentence is  ['get', 'what']
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
size of chart is  22
got chart
norm score is  -15.112768132
doing updates with learning rate  0.0176902773332
Deleting 0 entries of the total 4898
done io
WATCH	get what ?
WATCH	105	((S\NP)\NP)	0.588769886904
WATCH	105	((S\NP)/NP)	0.0137286133105
WATCH	105	((S/NP)/NP)	0.395269450714
WATCH	105	((S/NP)\NP)	0.00223204907175
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  pro:dem|that
sentence is  get what ?

got training pair
Sent : get what ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : NP:pro:dem|that
sentence is  ['get', 'what']
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  pro:dem|that
size of chart is  18
got chart
norm score is  -8.84980214778
doing updates with learning rate  0.0175994996591
Deleting 0 entries of the total 4903
done io
WATCH	get what ?
WATCH	106	((S\NP)\NP)	0.591438959872
WATCH	106	((S\NP)/NP)	0.0137919058219
WATCH	106	((S/NP)/NP)	0.392562310894
WATCH	106	((S/NP)\NP)	0.0022068234123
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  that .
making  pro:dem|that
sentence is  that .
making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  that .

got training pair
Sent : that .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : NP:pro:dem|that
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sentence is  ['that']
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  pro:dem|that
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
size of chart is  3
got chart
norm score is  -10.0148887039
doing updates with learning rate  0.0175097634136
Deleting 0 entries of the total 4906
done io
WATCH	that .
WATCH	107	((S\NP)\NP)	0.59144771766
WATCH	107	((S\NP)/NP)	0.013793179156
WATCH	107	((S/NP)/NP)	0.392562282817
WATCH	107	((S/NP)\NP)	0.00219682036738
getting topparses
outputting cat probs
done with sent


making  pro:dem|that
sentence is  Neil sit .
making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  Neil sit .
making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  Neil sit .

got training pair
Sent : Neil sit .
Cat : NP:pro:dem|that
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
sentence is  ['Neil', 'sit']
sem is  pro:dem|that
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
size of chart is  19
got chart
norm score is  -14.8068905057
doing updates with learning rate  0.017421050129
Deleting 0 entries of the total 4925
done io
WATCH	Neil sit .
WATCH	108	((S\NP)\NP)	0.593864550299
WATCH	108	((S\NP)/NP)	0.0138506283878
WATCH	108	((S/NP)/NP)	0.390111718069
WATCH	108	((S/NP)\NP)	0.00217310324362
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  good girl .
making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  good girl .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  good girl .

got training pair
Sent : good girl .
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sentence is  ['good', 'girl']
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
size of chart is  35
got chart
norm score is  -22.6668936608
doing updates with learning rate  0.0173333417797
Deleting 0 entries of the total 4960
done io
WATCH	good girl .
WATCH	109	((S\NP)\NP)	0.595361236105
WATCH	109	((S\NP)/NP)	0.013886637107
WATCH	109	((S/NP)/NP)	0.388597485268
WATCH	109	((S/NP)\NP)	0.0021546415196
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  that was a good girl .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  that was a good girl .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  that was a good girl .

got training pair
Sent : that was a good girl .
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['that', 'was', 'a', 'good', 'girl']
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  2415
got chart
norm score is  -34.403811614
doing updates with learning rate  0.0172466207683
Deleting 0 entries of the total 5815
done io
WATCH	that was a good girl .
WATCH	110	((S\NP)\NP)	0.554698909878
WATCH	110	((S\NP)/NP)	0.0129394328615
WATCH	110	((S/NP)/NP)	0.430287083458
WATCH	110	((S/NP)\NP)	0.00207457380212
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sentence is  ['what', 'are', 'you', 'doing']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
size of chart is  917
got chart
norm score is  -14.818394777
doing updates with learning rate  0.0171608699128
Deleting 4792 entries of the total 6286
done io
WATCH	what are you doing ?
WATCH	111	((S\NP)\NP)	0.56801628781
WATCH	111	((S\NP)/NP)	0.0122206232257
WATCH	111	((S/NP)/NP)	0.417758454401
WATCH	111	((S/NP)\NP)	0.00200463456306
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  that 's a seat .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  that 's a seat .
making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  that 's a seat .

got training pair
Sent : that 's a seat .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sentence is  ['that', "'s", 'a', 'seat', '.']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
size of chart is  1123
got chart
norm score is  -21.3193909508
doing updates with learning rate  0.0170760724348
Deleting 0 entries of the total 2044
done io
WATCH	that 's a seat .
WATCH	112	((S\NP)\NP)	0.526606440576
WATCH	112	((S\NP)/NP)	0.0113306306364
WATCH	112	((S/NP)/NP)	0.460142763302
WATCH	112	((S/NP)\NP)	0.0019201654857
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  are you alright ?
making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  are you alright ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  are you alright ?

got training pair
Sent : are you alright ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['are', 'you', 'alright']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  168
got chart
norm score is  -22.7108138818
doing updates with learning rate  0.0169922119472
Deleting 0 entries of the total 2160
done io
WATCH	are you alright ?
WATCH	113	((S\NP)\NP)	0.526630248706
WATCH	113	((S\NP)/NP)	0.0113320681823
WATCH	113	((S/NP)/NP)	0.460126871431
WATCH	113	((S/NP)\NP)	0.00191081168091
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  n:prop|Sambo
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:n:prop|Sambo
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  n:prop|Sambo
size of chart is  114
got chart
norm score is  -8.48312754333
doing updates with learning rate  0.0169092724428
Deleting 0 entries of the total 2219
done io
WATCH	what is that ?
WATCH	114	((S\NP)\NP)	0.539192468693
WATCH	114	((S\NP)/NP)	0.0107355834619
WATCH	114	((S/NP)/NP)	0.448213676607
WATCH	114	((S/NP)\NP)	0.00185827123738
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  Sambo .
making  n:prop|Sambo
sentence is  Sambo .
making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  Sambo .

got training pair
Sent : Sambo .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:n:prop|Sambo
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sentence is  ['Sambo']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  n:prop|Sambo
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
size of chart is  3
got chart
norm score is  -12.1114683461
doing updates with learning rate  0.0168272382832
Deleting 0 entries of the total 2222
done io
WATCH	Sambo .
WATCH	115	((S\NP)\NP)	0.539199714513
WATCH	115	((S\NP)/NP)	0.0107366245156
WATCH	115	((S/NP)/NP)	0.448214544815
WATCH	115	((S/NP)\NP)	0.00184911615641
getting topparses
outputting cat probs
done with sent


making  n:prop|Sambo
sentence is  you read Sambo .
making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  you read Sambo .
making  adj|busy(pro|I)
making  pro|I
sentence is  you read Sambo .

got training pair
Sent : you read Sambo .
Cat : NP:n:prop|Sambo
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
Cat : St:adj|busy(pro|I)
sentence is  ['you', 'read', 'Sambo']
sem is  n:prop|Sambo
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sem is  adj|busy(pro|I)
size of chart is  78
got chart
norm score is  -21.4135927199
doing updates with learning rate  0.0167460941884
Deleting 0 entries of the total 2282
done io
WATCH	you read Sambo .
WATCH	116	((S\NP)\NP)	0.565829719266
WATCH	116	((S\NP)/NP)	0.0112436584904
WATCH	116	((S/NP)/NP)	0.421197643672
WATCH	116	((S/NP)\NP)	0.00172897857133
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  because I 'm busy .
making  adj|busy(pro|I)
making  pro|I
sentence is  because I 'm busy .
making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  because I 'm busy .

got training pair
Sent : because I 'm busy .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sentence is  ['because', 'I', "'m", 'busy']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
size of chart is  363
got chart
norm score is  -30.6579039632
doing updates with learning rate  0.0166658252261
Deleting 0 entries of the total 2546
done io
WATCH	because I 'm busy .
WATCH	117	((S\NP)\NP)	0.57287132326
WATCH	117	((S\NP)/NP)	0.0113843418834
WATCH	117	((S/NP)/NP)	0.414053235663
WATCH	117	((S/NP)\NP)	0.00169109919415
getting topparses
outputting cat probs
done with sent


making  adj|busy(pro|I)
making  pro|I
sentence is  I 'm making lunch .
making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  I 'm making lunch .
making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  I 'm making lunch .

got training pair
Sent : I 'm making lunch .
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
sentence is  ['I', "'m", 'making', 'lunch']
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  493
got chart
norm score is  -28.6725183264
doing updates with learning rate  0.016586416802
Deleting 0 entries of the total 2751
done io
WATCH	I 'm making lunch .
WATCH	118	((S\NP)\NP)	0.579393415182
WATCH	118	((S\NP)/NP)	0.0115147223046
WATCH	118	((S/NP)/NP)	0.40743624855
WATCH	118	((S/NP)\NP)	0.00165561396333
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  what did you do ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what did you do ?
making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  what did you do ?

got training pair
Sent : what did you do ?
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sentence is  ['what', 'did', 'you', 'do']
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
size of chart is  595
got chart
norm score is  -17.3995957242
doing updates with learning rate  0.0165078546502
Deleting 0 entries of the total 3109
done io
WATCH	what did you do ?
WATCH	119	((S\NP)\NP)	0.588963815959
WATCH	119	((S\NP)/NP)	0.0109284707674
WATCH	119	((S/NP)/NP)	0.398506465485
WATCH	119	((S/NP)\NP)	0.00160124778808
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you hit your head .
making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  you hit your head .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you hit your head .

got training pair
Sent : you hit your head .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
sentence is  ['you', 'hit', 'your', 'head']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  563
got chart
norm score is  -20.0066502228
doing updates with learning rate  0.016430124824
Deleting 0 entries of the total 3374
done io
WATCH	you hit your head .
WATCH	120	((S\NP)\NP)	0.611295882552
WATCH	120	((S\NP)/NP)	0.0124209975418
WATCH	120	((S/NP)/NP)	0.374785015936
WATCH	120	((S/NP)\NP)	0.00149810397074
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  what do you want ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want ?
making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  what do you want ?

got training pair
Sent : what do you want ?
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|paper($0)
sentence is  ['what', 'do', 'you', 'want']
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|paper($0)
size of chart is  452
got chart
norm score is  -18.9810373653
doing updates with learning rate  0.0163532136865
Deleting 2019 entries of the total 3537
done io
WATCH	what do you want ?
WATCH	121	((S\NP)\NP)	0.612578808765
WATCH	121	((S\NP)/NP)	0.0121156960258
WATCH	121	((S/NP)/NP)	0.373935530115
WATCH	121	((S/NP)\NP)	0.00136996509429
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  paper .
making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  paper .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  paper .

got training pair
Sent : paper .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|paper($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sentence is  ['paper']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
sem is  lambda $0_{e}.n|paper($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
size of chart is  3
got chart
norm score is  -8.00466196462
doing updates with learning rate  0.0162771079026
Deleting 0 entries of the total 1521
done io
WATCH	paper .
WATCH	122	((S\NP)\NP)	0.612586555913
WATCH	122	((S\NP)/NP)	0.0121162248141
WATCH	122	((S/NP)/NP)	0.373934511183
WATCH	122	((S/NP)\NP)	0.00136270808984
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  that 's my paper .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  that 's my paper .
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  that 's my paper .

got training pair
Sent : that 's my paper .
Cat : Swh:lambda $0_{e}.n|paper($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sentence is  ['that', "'s", 'my', 'paper', '.']
sem is  lambda $0_{e}.n|paper($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
size of chart is  697
got chart
norm score is  -20.6700875181
doing updates with learning rate  0.0162017944299
Deleting 0 entries of the total 1924
done io
WATCH	that 's my paper .
WATCH	123	((S\NP)\NP)	0.573589856348
WATCH	123	((S\NP)/NP)	0.0113452722779
WATCH	123	((S/NP)/NP)	0.41374336055
WATCH	123	((S/NP)\NP)	0.00132151082392
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  your diaper ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  your diaper ?
making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  your diaper ?

got training pair
Sent : your diaper ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sentence is  ['your', 'diaper']
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
size of chart is  49
got chart
norm score is  -15.1117327714
doing updates with learning rate  0.0161272605114
Deleting 0 entries of the total 1969
done io
WATCH	your diaper ?
WATCH	124	((S\NP)\NP)	0.573597310733
WATCH	124	((S\NP)/NP)	0.0113457785326
WATCH	124	((S/NP)/NP)	0.413742541722
WATCH	124	((S/NP)\NP)	0.00131436901192
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  I 'm going upstairs .
making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  I 'm going upstairs .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  I 'm going upstairs .

got training pair
Sent : I 'm going upstairs .
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Cat : S:lambda $0_{ev}.adv:loc|there($0)
sentence is  ['I', "'m", 'going', 'upstairs']
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sem is  lambda $0_{ev}.adv:loc|there($0)
size of chart is  462
got chart
norm score is  -32.7381971008
doing updates with learning rate  0.016053493667
Deleting 0 entries of the total 2308
done io
WATCH	I 'm going upstairs .
WATCH	125	((S\NP)\NP)	0.578079374412
WATCH	125	((S\NP)/NP)	0.0114347991729
WATCH	125	((S/NP)/NP)	0.409193002579
WATCH	125	((S/NP)\NP)	0.00129282383642
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  there .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  there .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  there .

got training pair
Sent : there .
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['there']
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  3
got chart
norm score is  -5.15301664171
doing updates with learning rate  0.0159804816862
Deleting 0 entries of the total 2309
done io
WATCH	there .
WATCH	126	((S\NP)\NP)	0.578086468194
WATCH	126	((S\NP)/NP)	0.0114353083636
WATCH	126	((S/NP)/NP)	0.409192524384
WATCH	126	((S/NP)\NP)	0.00128569905878
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
size of chart is  83
got chart
norm score is  -8.77811635988
doing updates with learning rate  0.015908212621
Deleting 0 entries of the total 2348
done io
WATCH	what 's that ?
WATCH	127	((S\NP)\NP)	0.588198163544
WATCH	127	((S\NP)/NP)	0.0108808478367
WATCH	127	((S/NP)/NP)	0.399669236531
WATCH	127	((S/NP)\NP)	0.00125175208818
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  read .

got training pair
Sent : read .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sentence is  ['read']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
size of chart is  2
got chart
norm score is  -10.701993295
doing updates with learning rate  0.0158366747785
Deleting 0 entries of the total 2350
done io
WATCH	read .
WATCH	128	((S\NP)\NP)	0.588205487143
WATCH	128	((S\NP)/NP)	0.0108813349585
WATCH	128	((S/NP)/NP)	0.399668451551
WATCH	128	((S/NP)\NP)	0.00124472634762
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  you read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  you read .
making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  you read .

got training pair
Sent : you read .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sentence is  ['you', 'read', '.']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
size of chart is  165
got chart
norm score is  -10.9727566926
doing updates with learning rate  0.0157658567141
Deleting 0 entries of the total 2468
done io
WATCH	you read .
WATCH	129	((S\NP)\NP)	0.596048512517
WATCH	129	((S\NP)/NP)	0.0110267844983
WATCH	129	((S/NP)/NP)	0.391711668628
WATCH	129	((S/NP)\NP)	0.00121303435732
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  can you get your chair ?
making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  can you get your chair ?
making  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  pro|you
making  pro|me
making  det|the($1,n|cheese($1))
making  n|cheese($1)
making  $1
making  $0
sentence is  can you get your chair ?

got training pair
Sent : can you get your chair ?
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
sentence is  ['can', 'you', 'get', 'your', 'chair']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
size of chart is  2327
got chart
norm score is  -31.44063216
doing updates with learning rate  0.015695747225
Deleting 0 entries of the total 3712
done io
WATCH	can you get your chair ?
WATCH	130	((S\NP)\NP)	0.560280444313
WATCH	130	((S\NP)/NP)	0.0103708162149
WATCH	130	((S/NP)/NP)	0.428175204277
WATCH	130	((S/NP)\NP)	0.00117353519561
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  give me the cheese .
making  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  pro|you
making  pro|me
making  det|the($1,n|cheese($1))
making  n|cheese($1)
making  $1
making  $0
sentence is  give me the cheese .
making  pro:dem|that
sentence is  give me the cheese .

got training pair
Sent : give me the cheese .
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
Cat : NP:pro:dem|that
sentence is  ['give', 'me', 'the', 'cheese']
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
sem is  pro:dem|that
size of chart is  902
got chart
norm score is  -24.5223309586
doing updates with learning rate  0.0156263353437
Deleting 2778 entries of the total 4339
done io
WATCH	give me the cheese .
WATCH	131	((S\NP)\NP)	0.524957736597
WATCH	131	((S\NP)/NP)	0.00971900642433
WATCH	131	((S/NP)/NP)	0.464192856323
WATCH	131	((S/NP)\NP)	0.00113040065499
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  pro|you
making  pro|me
making  det|the($1,n|cheese($1))
making  n|cheese($1)
making  $1
making  $0
sentence is  that .
making  pro:dem|that
sentence is  that .
making  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  v|like(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  that .

got training pair
Sent : that .
Cat : S:lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
Cat : NP:pro:dem|that
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
sentence is  ['that', '.']
sem is  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
sem is  pro:dem|that
sem is  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
size of chart is  45
got chart
norm score is  -17.054980605
doing updates with learning rate  0.015557610332
Deleting 0 entries of the total 1602
done io
WATCH	that .
WATCH	132	((S\NP)\NP)	0.525712852339
WATCH	132	((S\NP)/NP)	0.00973330795286
WATCH	132	((S/NP)/NP)	0.463431874916
WATCH	132	((S/NP)\NP)	0.001121964793
getting topparses
outputting cat probs
done with sent


making  pro:dem|that
sentence is  do you like it ?
making  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  v|like(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  do you like it ?
making  adj|good(pro|it)
making  pro|it
sentence is  do you like it ?

got training pair
Sent : do you like it ?
Cat : NP:pro:dem|that
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
Cat : St:adj|good(pro|it)
sentence is  ['do', 'you', 'like', 'it']
sem is  pro:dem|that
sem is  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
sem is  adj|good(pro|it)
size of chart is  382
got chart
norm score is  -26.315594098
doing updates with learning rate  0.0154895616745
Deleting 0 entries of the total 1863
done io
WATCH	do you like it ?
WATCH	133	((S\NP)\NP)	0.53451891342
WATCH	133	((S\NP)/NP)	0.00936899717314
WATCH	133	((S/NP)/NP)	0.455020760796
WATCH	133	((S/NP)\NP)	0.00109132861036
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  v|like(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  it 's good .
making  adj|good(pro|it)
making  pro|it
sentence is  it 's good .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  det|a($1,n|+n|tape+n|recorder($1)),$0)
making  n|+n|tape+n|recorder($1)
making  $1
making  $0)
sentence is  it 's good .

got training pair
Sent : it 's good .
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
Cat : St:adj|good(pro|it)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
sentence is  ['it', "'s", 'good']
sem is  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
sem is  adj|good(pro|it)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
size of chart is  197
got chart
norm score is  -21.1370091482
doing updates with learning rate  0.0154221790733
Deleting 0 entries of the total 1989
done io
WATCH	it 's good .
WATCH	134	((S\NP)\NP)	0.536801266625
WATCH	134	((S\NP)/NP)	0.00932704451593
WATCH	134	((S/NP)/NP)	0.452805426545
WATCH	134	((S/NP)\NP)	0.00106626231408
getting topparses
outputting cat probs
done with sent


making  adj|good(pro|it)
making  pro|it
sentence is  that 's a taperecorder .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  det|a($1,n|+n|tape+n|recorder($1)),$0)
making  n|+n|tape+n|recorder($1)
making  $1
making  $0)
sentence is  that 's a taperecorder .
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  that 's a taperecorder .

got training pair
Sent : that 's a taperecorder .
Cat : St:adj|good(pro|it)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
sentence is  ['that', "'s", 'a', 'taperecorder']
sem is  adj|good(pro|it)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
size of chart is  291
got chart
norm score is  -22.7337143717
doing updates with learning rate  0.0153554524422
Deleting 0 entries of the total 2169
done io
WATCH	that 's a taperecorder .
WATCH	135	((S\NP)\NP)	0.504392287826
WATCH	135	((S\NP)/NP)	0.00876420850952
WATCH	135	((S/NP)/NP)	0.485818666766
WATCH	135	((S/NP)\NP)	0.0010248368994
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
making  det|a($1,n|+n|tape+n|recorder($1)),$0)
making  n|+n|tape+n|recorder($1)
making  $1
making  $0)
sentence is  taperecorder .
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  taperecorder .

got training pair
Sent : taperecorder .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['taperecorder']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  3
got chart
norm score is  -4.58329891311
doing updates with learning rate  0.0152893719008
Deleting 0 entries of the total 2170
done io
WATCH	taperecorder .
WATCH	136	((S\NP)\NP)	0.504397529494
WATCH	136	((S\NP)/NP)	0.00876457951807
WATCH	136	((S/NP)/NP)	0.48581926127
WATCH	136	((S/NP)\NP)	0.00101862971801
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|soup($0)
making  n|soup($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soup($0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soup($0)
size of chart is  74
got chart
norm score is  -8.88134621236
doing updates with learning rate  0.01522392777
Deleting 0 entries of the total 2205
done io
WATCH	what is that ?
WATCH	137	((S\NP)\NP)	0.514362104307
WATCH	137	((S\NP)/NP)	0.00836852979178
WATCH	137	((S/NP)/NP)	0.476275068736
WATCH	137	((S/NP)\NP)	0.00099429716545
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  soup  soup .
making  lambda $0_{e}.n|soup($0)
making  n|soup($0)
making  $0
sentence is  soup  soup .
making  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
making  v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
making  pro|you
making  lambda $1_{e}.n|soup($1)
making  n|soup($1)
making  $1
making  $0
sentence is  soup  soup .

got training pair
Sent : soup  soup .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soup($0)
Cat : S:lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
sentence is  ['soup', 'soup']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soup($0)
sem is  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
size of chart is  29
got chart
norm score is  -20.3417405288
doing updates with learning rate  0.0151591105662
Deleting 0 entries of the total 2219
done io
WATCH	soup  soup .
WATCH	138	((S\NP)\NP)	0.514921226542
WATCH	138	((S\NP)/NP)	0.00837789409279
WATCH	138	((S/NP)/NP)	0.475713876675
WATCH	138	((S/NP)\NP)	0.00098700269076
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|soup($0)
making  n|soup($0)
making  $0
sentence is  you have soup .
making  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
making  v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
making  pro|you
making  lambda $1_{e}.n|soup($1)
making  n|soup($1)
making  $1
making  $0
sentence is  you have soup .
making  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
making  Q(qn|more($1,n|pudding($1)),$0)
making  qn|more($1,n|pudding($1)),$0)
making  n|pudding($1)
making  $1
making  $0)
Is Q
sentence is  you have soup .

got training pair
Sent : you have soup .
Cat : Swh:lambda $0_{e}.n|soup($0)
Cat : S:lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
sentence is  ['you', 'have', 'soup', '.']
sem is  lambda $0_{e}.n|soup($0)
sem is  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
sem is  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
size of chart is  261
got chart
norm score is  -24.8352209251
doing updates with learning rate  0.0150949109968
Deleting 0 entries of the total 2377
done io
WATCH	you have soup .
WATCH	139	((S\NP)\NP)	0.522576208472
WATCH	139	((S\NP)/NP)	0.00850271643314
WATCH	139	((S/NP)/NP)	0.467956209171
WATCH	139	((S/NP)\NP)	0.000964865923462
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
making  v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
making  pro|you
making  lambda $1_{e}.n|soup($1)
making  n|soup($1)
making  $1
making  $0
sentence is  more pudding ?
making  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
making  Q(qn|more($1,n|pudding($1)),$0)
making  qn|more($1,n|pudding($1)),$0)
making  n|pudding($1)
making  $1
making  $0)
Is Q
sentence is  more pudding ?
making  qn|more($0,n|pudding($0))
making  n|pudding($0)
making  $0
sentence is  more pudding ?

got training pair
Sent : more pudding ?
Cat : S:lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
Cat : NP:qn|more($0,n|pudding($0))
sentence is  ['more', 'pudding']
sem is  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
sem is  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
sem is  qn|more($0,n|pudding($0))
size of chart is  31
got chart
norm score is  -17.7473340873
doing updates with learning rate  0.0150313199548
Deleting 0 entries of the total 2404
done io
WATCH	more pudding ?
WATCH	140	((S\NP)\NP)	0.522582106467
WATCH	140	((S\NP)/NP)	0.00850308871998
WATCH	140	((S/NP)/NP)	0.467955998302
WATCH	140	((S/NP)\NP)	0.000958806510343
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
making  Q(qn|more($1,n|pudding($1)),$0)
making  qn|more($1,n|pudding($1)),$0)
making  n|pudding($1)
making  $1
making  $0)
Is Q
sentence is  more pudding .
making  qn|more($0,n|pudding($0))
making  n|pudding($0)
making  $0
sentence is  more pudding .
making  qn|more($0,n|pudding($0))
making  n|pudding($0)
making  $0
sentence is  more pudding .

got training pair
Sent : more pudding .
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
Cat : NP:qn|more($0,n|pudding($0))
Cat : NP:qn|more($0,n|pudding($0))
sentence is  ['more', 'pudding']
sem is  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
sem is  qn|more($0,n|pudding($0))
sem is  qn|more($0,n|pudding($0))
size of chart is  18
got chart
norm score is  -8.80013047494
doing updates with learning rate  0.0149683285149
Deleting 841 entries of the total 2404
done io
WATCH	more pudding .
WATCH	141	((S\NP)\NP)	0.522587800471
WATCH	141	((S\NP)/NP)	0.00850346009934
WATCH	141	((S/NP)/NP)	0.467956008995
WATCH	141	((S/NP)\NP)	0.00095273043426
getting topparses
outputting cat probs
done with sent


making  qn|more($0,n|pudding($0))
making  n|pudding($0)
making  $0
sentence is  more pudding .
making  qn|more($0,n|pudding($0))
making  n|pudding($0)
making  $0
sentence is  more pudding .
making  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  pro|you
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  det|a($2,n|cracker($2))
making  n|cracker($2)
making  $2
making  $0
making  $0)
Is Q
sentence is  more pudding .

got training pair
Sent : more pudding .
Cat : NP:qn|more($0,n|pudding($0))
Cat : NP:qn|more($0,n|pudding($0))
Cat : Syn:lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
sentence is  ['more', 'pudding', '.']
sem is  qn|more($0,n|pudding($0))
sem is  qn|more($0,n|pudding($0))
sem is  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
size of chart is  209
got chart
norm score is  -27.5241964485
doing updates with learning rate  0.0149059279282
Deleting 0 entries of the total 1733
done io
WATCH	more pudding .
WATCH	142	((S\NP)\NP)	0.524939865635
WATCH	142	((S\NP)/NP)	0.00854201490793
WATCH	142	((S/NP)/NP)	0.465576295643
WATCH	142	((S/NP)\NP)	0.000941823814601
getting topparses
outputting cat probs
done with sent


making  qn|more($0,n|pudding($0))
making  n|pudding($0)
making  $0
sentence is  give the man a cracker ?
making  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  pro|you
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  det|a($2,n|cracker($2))
making  n|cracker($2)
making  $2
making  $0
making  $0)
Is Q
sentence is  give the man a cracker ?
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  give the man a cracker ?

got training pair
Sent : give the man a cracker ?
Cat : NP:qn|more($0,n|pudding($0))
Cat : Syn:lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
sentence is  ['give', 'the', 'man', 'a', 'cracker']
sem is  qn|more($0,n|pudding($0))
sem is  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
size of chart is  3127
got chart
norm score is  -35.7620911246
doing updates with learning rate  0.0148441096183
Deleting 0 entries of the total 3314
done io
WATCH	give the man a cracker ?
WATCH	143	((S\NP)\NP)	0.511592666216
WATCH	143	((S\NP)/NP)	0.00832146253407
WATCH	143	((S/NP)/NP)	0.479164185076
WATCH	143	((S/NP)\NP)	0.000921686173708
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
making  pro|you
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  det|a($2,n|cracker($2))
making  n|cracker($2)
making  $2
making  $0
making  $0)
Is Q
sentence is  taperecorder ?
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder ?
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder ?

got training pair
Sent : taperecorder ?
Cat : Syn:lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
sentence is  ['taperecorder']
sem is  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
size of chart is  2
got chart
norm score is  -4.29048871424
doing updates with learning rate  0.0147828651769
Deleting 0 entries of the total 3315
done io
WATCH	taperecorder ?
WATCH	144	((S\NP)\NP)	0.511598100308
WATCH	144	((S\NP)/NP)	0.00832183062072
WATCH	144	((S/NP)/NP)	0.479164384253
WATCH	144	((S/NP)\NP)	0.000915684818782
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder ?
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder ?
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder ?

got training pair
Sent : taperecorder ?
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
sentence is  ['taperecorder']
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
size of chart is  1
got chart
norm score is  -3.95982320663
cell is  0:1 :: taperecorder :: Swh :: lambda $0_{e}.n|+n|tape+n|recorder($0)
entry inside is  -2.89643463575
inside sum is  -inf
lex score  =  -2.89643463575
outside is  -1.06338857087
norm score is  -3.95982320663
doing updates with learning rate  0.0147221863595
Deleting 0 entries of the total 3315
done io
WATCH	taperecorder ?
WATCH	145	((S\NP)\NP)	0.511603567661
WATCH	145	((S\NP)/NP)	0.00832220161128
WATCH	145	((S/NP)/NP)	0.479164561835
WATCH	145	((S/NP)\NP)	0.000909668893062
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder .
making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  taperecorder .
making  lambda $0_{ev}.Q(adv:loc|down($0),$0)
making  Q(adv:loc|down($0),$0)
making  adv:loc|down($0),$0)
making  $0
making  $0)
Is Q
sentence is  taperecorder .

got training pair
Sent : taperecorder .
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Syn:lambda $0_{ev}.Q(adv:loc|down($0),$0)
sentence is  ['taperecorder', '.']
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{ev}.Q(adv:loc|down($0),$0)
size of chart is  14
got chart
norm score is  -15.1977297602
doing updates with learning rate  0.0146620650818
Deleting 0 entries of the total 3325
done io
WATCH	taperecorder .
WATCH	146	((S\NP)\NP)	0.511609068172
WATCH	146	((S\NP)/NP)	0.00832257550447
WATCH	146	((S/NP)/NP)	0.479164717356
WATCH	146	((S/NP)\NP)	0.000903638968087
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|+n|tape+n|recorder($0)
making  n|+n|tape+n|recorder($0)
making  $0
sentence is  down ?
making  lambda $0_{ev}.Q(adv:loc|down($0),$0)
making  Q(adv:loc|down($0),$0)
making  adv:loc|down($0),$0)
making  $0
making  $0)
Is Q
sentence is  down ?
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|apple($1),$0)
making  pro|you
making  lambda $1_{e}.n|apple($1)
making  n|apple($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  down ?

got training pair
Sent : down ?
Cat : Swh:lambda $0_{e}.n|+n|tape+n|recorder($0)
Cat : Syn:lambda $0_{ev}.Q(adv:loc|down($0),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
sentence is  ['down']
sem is  lambda $0_{e}.n|+n|tape+n|recorder($0)
sem is  lambda $0_{ev}.Q(adv:loc|down($0),$0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
size of chart is  3
got chart
norm score is  -10.8722743919
doing updates with learning rate  0.0146024934151
Deleting 0 entries of the total 3328
done io
WATCH	down ?
WATCH	147	((S\NP)\NP)	0.511614601735
WATCH	147	((S\NP)/NP)	0.00832295229867
WATCH	147	((S/NP)/NP)	0.479164850347
WATCH	147	((S/NP)\NP)	0.000897595618749
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(adv:loc|down($0),$0)
making  Q(adv:loc|down($0),$0)
making  adv:loc|down($0),$0)
making  $0
making  $0)
Is Q
sentence is  you don 't want apple .
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|apple($1),$0)
making  pro|you
making  lambda $1_{e}.n|apple($1)
making  n|apple($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you don 't want apple .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you don 't want apple .

got training pair
Sent : you don 't want apple .
Cat : Syn:lambda $0_{ev}.Q(adv:loc|down($0),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
sentence is  ['you', 'don', "'t", 'want', 'apple']
sem is  lambda $0_{ev}.Q(adv:loc|down($0),$0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1255
got chart
norm score is  -29.6653729342
doing updates with learning rate  0.0145434635834
Deleting 0 entries of the total 3981
done io
WATCH	you don 't want apple .
WATCH	148	((S\NP)\NP)	0.516128728023
WATCH	148	((S\NP)/NP)	0.0083967133319
WATCH	148	((S/NP)/NP)	0.474591528598
WATCH	148	((S/NP)\NP)	0.000883030047283
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|apple($1),$0)
making  pro|you
making  lambda $1_{e}.n|apple($1)
making  n|apple($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  what do you want ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what do you want ?

got training pair
Sent : what do you want ?
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['what', 'do', 'you', 'want']
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  609
got chart
norm score is  -15.1132583388
doing updates with learning rate  0.0144849679589
Deleting 0 entries of the total 4236
done io
WATCH	what do you want ?
WATCH	149	((S\NP)\NP)	0.520963823714
WATCH	149	((S\NP)/NP)	0.00825277004947
WATCH	149	((S/NP)/NP)	0.469971612839
WATCH	149	((S/NP)\NP)	0.000811793397115
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
size of chart is  140
got chart
norm score is  -8.93077352772
doing updates with learning rate  0.0144269990591
Deleting 0 entries of the total 4292
done io
WATCH	what is that ?
WATCH	150	((S\NP)\NP)	0.531582100015
WATCH	150	((S\NP)/NP)	0.00786032303114
WATCH	150	((S/NP)/NP)	0.459767653551
WATCH	150	((S/NP)\NP)	0.000789923402441
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  part|go-PROG(pro|it,$0)
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  what is it ?

got training pair
Sent : what is it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Syn:lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
sentence is  ['what', 'is', 'it', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
size of chart is  340
got chart
norm score is  -23.801884947
doing updates with learning rate  0.0143695495427
Deleting 2850 entries of the total 4455
done io
WATCH	what is it ?
WATCH	151	((S\NP)\NP)	0.535974935013
WATCH	151	((S\NP)/NP)	0.00790763352836
WATCH	151	((S/NP)/NP)	0.455340309709
WATCH	151	((S/NP)\NP)	0.000777121749378
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  is it going ?
making  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  part|go-PROG(pro|it,$0)
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  is it going ?
making  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  aux|do&3S(v|go(pro|it,$0),$0)
making  v|go(pro|it,$0)
making  pro|it
making  $0
making  $0
making  adv|far($0)
making  $0
making  $0)
Is Q
sentence is  is it going ?

got training pair
Sent : is it going ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Syn:lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
sentence is  ['is', 'it', 'going', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
size of chart is  706
got chart
norm score is  -21.2529074802
doing updates with learning rate  0.0143126122068
Deleting 0 entries of the total 2061
done io
WATCH	is it going ?
WATCH	152	((S\NP)\NP)	0.543182773232
WATCH	152	((S\NP)/NP)	0.00801425507437
WATCH	152	((S/NP)/NP)	0.448043641186
WATCH	152	((S/NP)\NP)	0.000759330507168
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
making  part|go-PROG(pro|it,$0)
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  does it go far ?
making  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  aux|do&3S(v|go(pro|it,$0),$0)
making  v|go(pro|it,$0)
making  pro|it
making  $0
making  $0
making  adv|far($0)
making  $0
making  $0)
Is Q
sentence is  does it go far ?
making  lambda $0_{e}.n|celery($0)
making  n|celery($0)
making  $0
sentence is  does it go far ?

got training pair
Sent : does it go far ?
Cat : Syn:lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
Cat : Swh:lambda $0_{e}.n|celery($0)
sentence is  ['does', 'it', 'go', 'far']
sem is  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
sem is  lambda $0_{e}.n|celery($0)
size of chart is  629
got chart
norm score is  -27.044145103
doing updates with learning rate  0.0142561799834
Deleting 0 entries of the total 2451
done io
WATCH	does it go far ?
WATCH	153	((S\NP)\NP)	0.549559134822
WATCH	153	((S\NP)/NP)	0.0081086179976
WATCH	153	((S/NP)/NP)	0.441589125365
WATCH	153	((S/NP)\NP)	0.000743121815206
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
making  aux|do&3S(v|go(pro|it,$0),$0)
making  v|go(pro|it,$0)
making  pro|it
making  $0
making  $0
making  adv|far($0)
making  $0
making  $0)
Is Q
sentence is  celery .
making  lambda $0_{e}.n|celery($0)
making  n|celery($0)
making  $0
sentence is  celery .
making  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
making  v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
making  det|the($1,n|doll-DIM($1))
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|his($2,n|celery($2))
making  n|celery($2)
making  $2
making  $0
sentence is  celery .

got training pair
Sent : celery .
Cat : Syn:lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
Cat : Swh:lambda $0_{e}.n|celery($0)
Cat : S:lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
sentence is  ['celery']
sem is  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
sem is  lambda $0_{e}.n|celery($0)
sem is  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
size of chart is  3
got chart
norm score is  -8.56398311332
doing updates with learning rate  0.0142002459362
Deleting 0 entries of the total 2454
done io
WATCH	celery .
WATCH	154	((S\NP)\NP)	0.549564602067
WATCH	154	((S\NP)/NP)	0.00810898534793
WATCH	154	((S/NP)/NP)	0.441588569503
WATCH	154	((S/NP)\NP)	0.000737843082124
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|celery($0)
making  n|celery($0)
making  $0
sentence is  the dolly eats his celery .
making  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
making  v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
making  det|the($1,n|doll-DIM($1))
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|his($2,n|celery($2))
making  n|celery($2)
making  $2
making  $0
sentence is  the dolly eats his celery .
making  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  v|like(pro|she,pro|it,$0)
making  pro|she
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  the dolly eats his celery .

got training pair
Sent : the dolly eats his celery .
Cat : Swh:lambda $0_{e}.n|celery($0)
Cat : S:lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
sentence is  ['the', 'dolly', 'eats', 'his', 'celery', '.']
sem is  lambda $0_{e}.n|celery($0)
sem is  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
sem is  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
size of chart is  2813
got chart
norm score is  -29.9212512551
doing updates with learning rate  0.0141448032574
Deleting 0 entries of the total 3812
done io
WATCH	the dolly eats his celery .
WATCH	155	((S\NP)\NP)	0.547391878119
WATCH	155	((S\NP)/NP)	0.0330699954658
WATCH	155	((S/NP)/NP)	0.418843648865
WATCH	155	((S/NP)\NP)	0.000694477549795
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
making  v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
making  det|the($1,n|doll-DIM($1))
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|his($2,n|celery($2))
making  n|celery($2)
making  $2
making  $0
sentence is  does she like it ?
making  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  v|like(pro|she,pro|it,$0)
making  pro|she
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  does she like it ?
making  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0)
making  det|the($1,n|doll-DIM($1))
making  n|doll-DIM($1)
making  $1
making  det|a($2,n|name($2))
making  n|name($2)
making  $2
making  $0
making  $0
making  $0)
Is Q
sentence is  does she like it ?

got training pair
Sent : does she like it ?
Cat : S:lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
sentence is  ['does', 'she', 'like', 'it', '?']
sem is  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
sem is  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
size of chart is  3359
got chart
norm score is  -26.3610907519
doing updates with learning rate  0.014089845265
Deleting 0 entries of the total 5559
done io
WATCH	does she like it ?
WATCH	156	((S\NP)\NP)	0.545986467532
WATCH	156	((S\NP)/NP)	0.0393427250363
WATCH	156	((S/NP)/NP)	0.413996578249
WATCH	156	((S/NP)\NP)	0.00067422918206
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
making  v|like(pro|she,pro|it,$0)
making  pro|she
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  does the dolly have a name ?
making  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0)
making  det|the($1,n|doll-DIM($1))
making  n|doll-DIM($1)
making  $1
making  det|a($2,n|name($2))
making  n|name($2)
making  $2
making  $0
making  $0
making  $0)
Is Q
sentence is  does the dolly have a name ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  $0,pro:poss:det|her($2,n|name($2)),$1)
making  pro:poss:det|her($2,n|name($2)),$1)
making  n|name($2)
making  $2
making  $1)
sentence is  does the dolly have a name ?

got training pair
Sent : does the dolly have a name ?
Cat : Syn:lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
sentence is  ['does', 'the', 'dolly', 'have', 'a', 'name']
sem is  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
size of chart is  6257
got chart
norm score is  -34.1210407644
doing updates with learning rate  0.0140353653997
Deleting 0 entries of the total 7779
done io
WATCH	does the dolly have a name ?
WATCH	157	((S\NP)\NP)	0.544377161214
WATCH	157	((S\NP)/NP)	0.0392379066757
WATCH	157	((S/NP)/NP)	0.415717103718
WATCH	157	((S/NP)\NP)	0.000667828392493
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
making  v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0)
making  det|the($1,n|doll-DIM($1))
making  n|doll-DIM($1)
making  $1
making  det|a($2,n|name($2))
making  n|name($2)
making  $2
making  $0
making  $0
making  $0)
Is Q
sentence is  what 's her name ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  $0,pro:poss:det|her($2,n|name($2)),$1)
making  pro:poss:det|her($2,n|name($2)),$1)
making  n|name($2)
making  $2
making  $1)
sentence is  what 's her name ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what 's her name ?

got training pair
Sent : what 's her name ?
Cat : Syn:lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['what', "'s", 'her', 'name']
sem is  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1186
got chart
norm score is  -27.6831748197
doing updates with learning rate  0.0139813572221
Deleting 0 entries of the total 8352
done io
WATCH	what 's her name ?
WATCH	158	((S\NP)\NP)	0.531596319835
WATCH	158	((S\NP)/NP)	0.0527887638448
WATCH	158	((S/NP)/NP)	0.414960199668
WATCH	158	((S/NP)\NP)	0.000654716652159
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  eq($0,pro:poss:det|her($2,n|name($2)),$1)
making  $0,pro:poss:det|her($2,n|name($2)),$1)
making  pro:poss:det|her($2,n|name($2)),$1)
making  n|name($2)
making  $2
making  $1)
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
making  Q(qn|more($1,n|celery($1)),$0)
making  qn|more($1,n|celery($1)),$0)
making  n|celery($1)
making  $1
making  $0)
Is Q
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
sentence is  ['what', 'are', 'you', 'doing', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
size of chart is  1063
got chart
norm score is  -18.973803516
doing updates with learning rate  0.0139278144099
Deleting 0 entries of the total 8738
done io
WATCH	what are you doing ?
WATCH	159	((S\NP)\NP)	0.537583895351
WATCH	159	((S\NP)/NP)	0.0498474436816
WATCH	159	((S/NP)/NP)	0.41192355015
WATCH	159	((S/NP)\NP)	0.000645110817518
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  more celery ?
making  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
making  Q(qn|more($1,n|celery($1)),$0)
making  qn|more($1,n|celery($1)),$0)
making  n|celery($1)
making  $1
making  $0)
Is Q
sentence is  more celery ?
making  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
making  lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
making  v|have(lambda $2_{e}.n|man($2),$0,$1)
making  lambda $2_{e}.n|man($2)
making  n|man($2)
making  $2
making  $0
making  $1
sentence is  more celery ?

got training pair
Sent : more celery ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
sentence is  ['more', 'celery']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
size of chart is  43
got chart
norm score is  -8.49101601829
doing updates with learning rate  0.0138747307551
Deleting 0 entries of the total 8767
done io
WATCH	more celery ?
WATCH	160	((S\NP)\NP)	0.537592057766
WATCH	160	((S\NP)/NP)	0.0498432239941
WATCH	160	((S/NP)/NP)	0.411924425175
WATCH	160	((S/NP)\NP)	0.000640293065085
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
making  Q(qn|more($1,n|celery($1)),$0)
making  qn|more($1,n|celery($1)),$0)
making  n|celery($1)
making  $1
making  $0)
Is Q
sentence is  man have what ?
making  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
making  lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
making  v|have(lambda $2_{e}.n|man($2),$0,$1)
making  lambda $2_{e}.n|man($2)
making  n|man($2)
making  $2
making  $0
making  $1
sentence is  man have what ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  man have what ?

got training pair
Sent : man have what ?
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sentence is  ['man', 'have', 'what']
sem is  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
size of chart is  136
got chart
norm score is  -15.733239439
doing updates with learning rate  0.0138221001619
Deleting 7177 entries of the total 8830
done io
WATCH	man have what ?
WATCH	161	((S\NP)\NP)	0.532129604599
WATCH	161	((S\NP)/NP)	0.0493317935946
WATCH	161	((S/NP)/NP)	0.417893923053
WATCH	161	((S/NP)\NP)	0.000644678753149
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
making  lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
making  v|have(lambda $2_{e}.n|man($2),$0,$1)
making  lambda $2_{e}.n|man($2)
making  n|man($2)
making  $2
making  $0
making  $1
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what is it ?

got training pair
Sent : what is it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
sentence is  ['what', 'is', 'it']
sem is  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  158
got chart
norm score is  -18.3843294751
doing updates with learning rate  0.0137699166436
Deleting 0 entries of the total 1735
done io
WATCH	what is it ?
WATCH	162	((S\NP)\NP)	0.515561647104
WATCH	162	((S\NP)/NP)	0.0693206728686
WATCH	162	((S/NP)/NP)	0.41449594399
WATCH	162	((S/NP)\NP)	0.000621736037878
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what do you want ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want ?
making  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
making  lambda $1_{ev}.v|find(pro|you,$0,$1)
making  v|find(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  what do you want ?

got training pair
Sent : what do you want ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
sentence is  ['what', 'do', 'you', 'want']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
size of chart is  351
got chart
norm score is  -14.9062188923
doing updates with learning rate  0.0137181743204
Deleting 0 entries of the total 1861
done io
WATCH	what do you want ?
WATCH	163	((S\NP)\NP)	0.518908706891
WATCH	163	((S\NP)/NP)	0.0681363895935
WATCH	163	((S/NP)/NP)	0.412383825729
WATCH	163	((S/NP)\NP)	0.000571077786388
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  find what ?
making  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
making  lambda $1_{ev}.v|find(pro|you,$0,$1)
making  v|find(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  find what ?
making  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  v|want(pro|you,pro:dem|this,$0)
making  pro|you
making  pro:dem|this
making  $0
making  $0
making  $0)
Is Q
sentence is  find what ?

got training pair
Sent : find what ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
sentence is  ['find', 'what', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
sem is  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
size of chart is  198
got chart
norm score is  -21.4582007617
doing updates with learning rate  0.0136668674168
Deleting 0 entries of the total 1970
done io
WATCH	find what ?
WATCH	164	((S\NP)\NP)	0.520221850809
WATCH	164	((S\NP)/NP)	0.0683007832323
WATCH	164	((S/NP)/NP)	0.410912729165
WATCH	164	((S/NP)\NP)	0.000564636793191
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
making  lambda $1_{ev}.v|find(pro|you,$0,$1)
making  v|find(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  do you want this ?
making  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  v|want(pro|you,pro:dem|this,$0)
making  pro|you
making  pro:dem|this
making  $0
making  $0
making  $0)
Is Q
sentence is  do you want this ?
making  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0)
making  pro|you
making  lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1))
making  and(n|doll-DIM($1),n|shoe($1))
making  n|doll-DIM($1)
making  $1
making  n|shoe($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  do you want this ?

got training pair
Sent : do you want this ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
sentence is  ['do', 'you', 'want', 'this', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
sem is  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
sem is  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
size of chart is  3775
got chart
norm score is  -28.3687103386
doing updates with learning rate  0.0136159902598
Deleting 0 entries of the total 3304
done io
WATCH	do you want this ?
WATCH	165	((S\NP)\NP)	0.531039332911
WATCH	165	((S\NP)/NP)	0.0664200671264
WATCH	165	((S/NP)/NP)	0.402002048378
WATCH	165	((S/NP)\NP)	0.000538551584648
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
making  v|want(pro|you,pro:dem|this,$0)
making  pro|you
making  pro:dem|this
making  $0
making  $0
making  $0)
Is Q
sentence is  do you want dolly 's shoe ?
making  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0)
making  pro|you
making  lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1))
making  and(n|doll-DIM($1),n|shoe($1))
making  n|doll-DIM($1)
making  $1
making  n|shoe($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  do you want dolly 's shoe ?
making  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
making  aux|will(v|find(pro|we,pro|it,$0),$0)
making  v|find(pro|we,pro|it,$0)
making  pro|we
making  pro|it
making  $0
making  $0
sentence is  do you want dolly 's shoe ?

got training pair
Sent : do you want dolly 's shoe ?
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
sentence is  ['do', 'you', 'want', 'dolly', "'s", 'shoe']
sem is  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
sem is  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
sem is  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
size of chart is  8685
got chart
norm score is  -42.7098133924
doing updates with learning rate  0.0135655372758
Deleting 0 entries of the total 5152
done io
WATCH	do you want dolly 's shoe ?
WATCH	166	((S\NP)\NP)	0.53972589091
WATCH	166	((S\NP)/NP)	0.064978287258
WATCH	166	((S/NP)/NP)	0.394772948437
WATCH	166	((S/NP)\NP)	0.000522873394578
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0)
making  pro|you
making  lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1))
making  and(n|doll-DIM($1),n|shoe($1))
making  n|doll-DIM($1)
making  $1
making  n|shoe($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  we 'll find it .
making  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
making  aux|will(v|find(pro|we,pro|it,$0),$0)
making  v|find(pro|we,pro|it,$0)
making  pro|we
making  pro|it
making  $0
making  $0
sentence is  we 'll find it .
making  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
making  and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
making  v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0)
making  pro|you
making  det|that($1,n|shoe($1))
making  n|shoe($1)
making  $1
making  $0
making  prep|on(lambda $2_{e}.n|doll-DIM($2),$0)
making  lambda $2_{e}.n|doll-DIM($2)
making  n|doll-DIM($2)
making  $2
making  $0
sentence is  we 'll find it .

got training pair
Sent : we 'll find it .
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
Cat : S:lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
sentence is  ['we', "'ll", 'find', 'it']
sem is  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
sem is  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
sem is  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
size of chart is  1976
got chart
norm score is  -24.7776290903
doing updates with learning rate  0.0135155029893
Deleting 0 entries of the total 6323
done io
WATCH	we 'll find it .
WATCH	167	((S\NP)\NP)	0.522049758845
WATCH	167	((S\NP)/NP)	0.0636374336256
WATCH	167	((S/NP)/NP)	0.413803714804
WATCH	167	((S/NP)\NP)	0.000509092725257
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
making  aux|will(v|find(pro|we,pro|it,$0),$0)
making  v|find(pro|we,pro|it,$0)
making  pro|we
making  pro|it
making  $0
making  $0
sentence is  you put that shoe on dolly .
making  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
making  and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
making  v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0)
making  pro|you
making  det|that($1,n|shoe($1))
making  n|shoe($1)
making  $1
making  $0
making  prep|on(lambda $2_{e}.n|doll-DIM($2),$0)
making  lambda $2_{e}.n|doll-DIM($2)
making  n|doll-DIM($2)
making  $2
making  $0
sentence is  you put that shoe on dolly .
making  adj|good(pro|you)
making  pro|you
sentence is  you put that shoe on dolly .

got training pair
Sent : you put that shoe on dolly .
Cat : S:lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
Cat : S:lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
Cat : St:adj|good(pro|you)
sentence is  ['you', 'put', 'that', 'shoe', 'on', 'dolly']
sem is  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
sem is  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
sem is  adj|good(pro|you)
size of chart is  6573
got chart
norm score is  -33.6117315111
doing updates with learning rate  0.0134658820199
Deleting 0 entries of the total 9092
done io
WATCH	you put that shoe on dolly .
WATCH	168	((S\NP)\NP)	0.508829974955
WATCH	168	((S\NP)/NP)	0.0910879020119
WATCH	168	((S/NP)/NP)	0.399594458174
WATCH	168	((S/NP)\NP)	0.000487664859652
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
making  and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
making  v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0)
making  pro|you
making  det|that($1,n|shoe($1))
making  n|shoe($1)
making  $1
making  $0
making  prep|on(lambda $2_{e}.n|doll-DIM($2),$0)
making  lambda $2_{e}.n|doll-DIM($2)
making  n|doll-DIM($2)
making  $2
making  $0
sentence is  you are good .
making  adj|good(pro|you)
making  pro|you
sentence is  you are good .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you are good .

got training pair
Sent : you are good .
Cat : S:lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
Cat : St:adj|good(pro|you)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['you', 'are', 'good']
sem is  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
sem is  adj|good(pro|you)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  262
got chart
norm score is  -24.249904328
doing updates with learning rate  0.0134166690808
Deleting 0 entries of the total 9232
done io
WATCH	you are good .
WATCH	169	((S\NP)\NP)	0.521541908778
WATCH	169	((S\NP)/NP)	0.0933685570348
WATCH	169	((S/NP)/NP)	0.384623917471
WATCH	169	((S/NP)\NP)	0.000465616716393
getting topparses
outputting cat probs
done with sent


making  adj|good(pro|you)
making  pro|you
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|spool($0)
making  n|spool($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : St:adj|good(pro|you)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|spool($0)
sentence is  ['what', 'is', 'that']
sem is  adj|good(pro|you)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|spool($0)
size of chart is  95
got chart
norm score is  -9.02475925977
doing updates with learning rate  0.0133678589765
Deleting 0 entries of the total 9266
done io
WATCH	what is that ?
WATCH	170	((S\NP)\NP)	0.532423777643
WATCH	170	((S\NP)/NP)	0.0896326266982
WATCH	170	((S/NP)/NP)	0.377488953111
WATCH	170	((S/NP)\NP)	0.000454642548012
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  spool .
making  lambda $0_{e}.n|spool($0)
making  n|spool($0)
making  $0
sentence is  spool .
making  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
making  eqLoc(det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  spool .

got training pair
Sent : spool .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|spool($0)
Cat : Swh:lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
sentence is  ['spool']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|spool($0)
sem is  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
size of chart is  3
got chart
norm score is  -7.9445598763
doing updates with learning rate  0.0133194466009
Deleting 7488 entries of the total 9269
done io
WATCH	spool .
WATCH	171	((S\NP)\NP)	0.532431512941
WATCH	171	((S\NP)/NP)	0.0896280588389
WATCH	171	((S/NP)/NP)	0.377489495422
WATCH	171	((S/NP)\NP)	0.000450932797813
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|spool($0)
making  n|spool($0)
making  $0
sentence is  where 's the top ?
making  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
making  eqLoc(det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  where 's the top ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  where 's the top ?

got training pair
Sent : where 's the top ?
Cat : Swh:lambda $0_{e}.n|spool($0)
Cat : Swh:lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['where', "'s", 'the', 'top']
sem is  lambda $0_{e}.n|spool($0)
sem is  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:det|the($0,n|top($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(det|the($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(det|the($2,$0($2)),$1) N:lambda $0_{e}.n|top($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(det|the($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  271
got chart
norm score is  -22.0808350364
doing updates with learning rate  0.0132714269353
Deleting 0 entries of the total 1899
done io
WATCH	where 's the top ?
WATCH	172	((S\NP)\NP)	0.532439303938
WATCH	172	((S\NP)/NP)	0.089623443301
WATCH	172	((S/NP)/NP)	0.377490028724
WATCH	172	((S/NP)\NP)	0.000447224036884
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
making  eqLoc(det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
making  not(pro:poss:det|your($1,n|spoon($1)),$0)
making  pro:poss:det|your($1,n|spoon($1)),$0)
making  n|spoon($1)
making  $1
making  $0)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:det|the($0,n|top($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(det|the($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(det|the($2,$0($2)),$1) N:lambda $0_{e}.n|top($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(det|the($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
size of chart is  143
got chart
norm score is  -8.63421293578
doing updates with learning rate  0.0132237950467
Deleting 0 entries of the total 1982
done io
WATCH	what is that ?
WATCH	173	((S\NP)\NP)	0.542780278869
WATCH	173	((S\NP)/NP)	0.0860749170921
WATCH	173	((S/NP)/NP)	0.370708098769
WATCH	173	((S/NP)\NP)	0.000436705270398
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  not your spoon .
making  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
making  not(pro:poss:det|your($1,n|spoon($1)),$0)
making  pro:poss:det|your($1,n|spoon($1)),$0)
making  n|spoon($1)
making  $1
making  $0)
sentence is  not your spoon .
making  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
making  and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
making  v|belong-3S(pro|it,$0)
making  pro|it
making  $0
making  prep|to(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  $0
sentence is  not your spoon .

got training pair
Sent : not your spoon .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
Cat : S:lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
sentence is  ['not', 'your', 'spoon']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
sem is  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
size of chart is  235
got chart
norm score is  -18.5330292091
doing updates with learning rate  0.0131765460857
Deleting 0 entries of the total 2158
done io
WATCH	not your spoon .
WATCH	174	((S\NP)\NP)	0.540433277028
WATCH	174	((S\NP)/NP)	0.0856969034507
WATCH	174	((S/NP)/NP)	0.373433575063
WATCH	174	((S/NP)\NP)	0.00043624445815
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
making  not(pro:poss:det|your($1,n|spoon($1)),$0)
making  pro:poss:det|your($1,n|spoon($1)),$0)
making  n|spoon($1)
making  $1
making  $0)
sentence is  it belongs to the man .
making  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
making  and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
making  v|belong-3S(pro|it,$0)
making  pro|it
making  $0
making  prep|to(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  $0
sentence is  it belongs to the man .
making  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
making  v|get(pro|you,det|the($1,n|napkin($1)),$0)
making  pro|you
making  det|the($1,n|napkin($1))
making  n|napkin($1)
making  $1
making  $0
sentence is  it belongs to the man .

got training pair
Sent : it belongs to the man .
Cat : S:lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
Cat : S:lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
sentence is  ['it', 'belongs', 'to', 'the', 'man']
sem is  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
sem is  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
sem is  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
size of chart is  2107
got chart
norm score is  -27.8184569673
doing updates with learning rate  0.0131296752847
Deleting 0 entries of the total 3353
done io
WATCH	it belongs to the man .
WATCH	175	((S\NP)\NP)	0.541359130666
WATCH	175	((S\NP)/NP)	0.0858575141002
WATCH	175	((S/NP)/NP)	0.372352044737
WATCH	175	((S/NP)\NP)	0.000431310496112
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
making  and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
making  v|belong-3S(pro|it,$0)
making  pro|it
making  $0
making  prep|to(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  $0
sentence is  get the napkin .
making  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
making  v|get(pro|you,det|the($1,n|napkin($1)),$0)
making  pro|you
making  det|the($1,n|napkin($1))
making  n|napkin($1)
making  $1
making  $0
sentence is  get the napkin .
making  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
making  eq(pro:dem|that,pro|it,$0)
making  pro:dem|that,pro|it,$0)
making  pro|it,$0)
making  $0)
sentence is  get the napkin .

got training pair
Sent : get the napkin .
Cat : S:lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
sentence is  ['get', 'the', 'napkin']
sem is  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
sem is  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
size of chart is  237
got chart
norm score is  -17.7310601392
doing updates with learning rate  0.0130831779566
Deleting 0 entries of the total 3514
done io
WATCH	get the napkin .
WATCH	176	((S\NP)\NP)	0.534877420806
WATCH	176	((S\NP)/NP)	0.0848238324573
WATCH	176	((S/NP)/NP)	0.379862466649
WATCH	176	((S/NP)\NP)	0.000436280087878
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
making  v|get(pro|you,det|the($1,n|napkin($1)),$0)
making  pro|you
making  det|the($1,n|napkin($1))
making  n|napkin($1)
making  $1
making  $0
sentence is  that 's it .
making  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
making  eq(pro:dem|that,pro|it,$0)
making  pro:dem|that,pro|it,$0)
making  pro|it,$0)
making  $0)
sentence is  that 's it .
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
making  and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  prep|to(det|the($1,n|kitchen($1)),$0)
making  det|the($1,n|kitchen($1))
making  n|kitchen($1)
making  $1
making  $0
sentence is  that 's it .

got training pair
Sent : that 's it .
Cat : S:lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
sentence is  ['that', "'s", 'it']
sem is  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
size of chart is  271
got chart
norm score is  -10.9272578774
doing updates with learning rate  0.0130370494927
Deleting 0 entries of the total 3695
done io
WATCH	that 's it .
WATCH	177	((S\NP)\NP)	0.507115000672
WATCH	177	((S\NP)/NP)	0.0804156539254
WATCH	177	((S/NP)/NP)	0.412047392487
WATCH	177	((S/NP)\NP)	0.000421952914974
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
making  eq(pro:dem|that,pro|it,$0)
making  pro:dem|that,pro|it,$0)
making  pro|it,$0)
making  $0)
sentence is  you bring it to the kitchen .
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
making  and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  prep|to(det|the($1,n|kitchen($1)),$0)
making  det|the($1,n|kitchen($1))
making  n|kitchen($1)
making  $1
making  $0
sentence is  you bring it to the kitchen .
making  lambda $0_{e}.n|mouth($0)
making  n|mouth($0)
making  $0
sentence is  you bring it to the kitchen .

got training pair
Sent : you bring it to the kitchen .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
Cat : Swh:lambda $0_{e}.n|mouth($0)
sentence is  ['you', 'bring', 'it', 'to', 'the', 'kitchen']
sem is  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
sem is  lambda $0_{e}.n|mouth($0)
size of chart is  5457
got chart
norm score is  -31.5940015559
doing updates with learning rate  0.0129912853609
Deleting 0 entries of the total 5793
done io
WATCH	you bring it to the kitchen .
WATCH	178	((S\NP)\NP)	0.493950047099
WATCH	178	((S\NP)/NP)	0.105850894724
WATCH	178	((S/NP)/NP)	0.399793179133
WATCH	178	((S/NP)\NP)	0.000405879044429
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
making  and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  prep|to(det|the($1,n|kitchen($1)),$0)
making  det|the($1,n|kitchen($1))
making  n|kitchen($1)
making  $1
making  $0
sentence is  mouth .
making  lambda $0_{e}.n|mouth($0)
making  n|mouth($0)
making  $0
sentence is  mouth .
making  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  lambda $1_{e}.n|man($1)
making  n|man($1)
making  $1
making  pro|it
making  $0
making  $0)
Is Q
sentence is  mouth .

got training pair
Sent : mouth .
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
Cat : Swh:lambda $0_{e}.n|mouth($0)
Cat : Syn:lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
sentence is  ['mouth', '.']
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
sem is  lambda $0_{e}.n|mouth($0)
sem is  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
size of chart is  49
got chart
norm score is  -13.8241820741
doing updates with learning rate  0.0129458811047
Deleting 0 entries of the total 5837
done io
WATCH	mouth .
WATCH	179	((S\NP)\NP)	0.493956844074
WATCH	179	((S\NP)/NP)	0.105846893367
WATCH	179	((S/NP)/NP)	0.399793904401
WATCH	179	((S/NP)\NP)	0.000402358158281
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|mouth($0)
making  n|mouth($0)
making  $0
sentence is  man taste it ?
making  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  lambda $1_{e}.n|man($1)
making  n|man($1)
making  $1
making  pro|it
making  $0
making  $0)
Is Q
sentence is  man taste it ?
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  man taste it ?

got training pair
Sent : man taste it ?
Cat : Swh:lambda $0_{e}.n|mouth($0)
Cat : Syn:lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
sentence is  ['man', 'taste', 'it']
sem is  lambda $0_{e}.n|mouth($0)
sem is  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
size of chart is  145
got chart
norm score is  -24.6993701887
doing updates with learning rate  0.012900832341
Deleting 0 entries of the total 5929
done io
WATCH	man taste it ?
WATCH	180	((S\NP)\NP)	0.493728680477
WATCH	180	((S\NP)/NP)	0.105792494702
WATCH	180	((S/NP)/NP)	0.400079699362
WATCH	180	((S/NP)\NP)	0.00039912545906
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
making  lambda $1_{e}.n|man($1)
making  n|man($1)
making  $1
making  pro|it
making  $0
making  $0)
Is Q
sentence is  I 'm not sure .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I 'm not sure .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I 'm not sure .

got training pair
Sent : I 'm not sure .
Cat : Syn:lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
sentence is  ['I', "'m", 'not', 'sure']
sem is  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
size of chart is  373
got chart
norm score is  -37.2953536313
doing updates with learning rate  0.012856134759
Deleting 4348 entries of the total 6165
done io
WATCH	I 'm not sure .
WATCH	181	((S\NP)\NP)	0.495354844634
WATCH	181	((S\NP)/NP)	0.106135359926
WATCH	181	((S/NP)/NP)	0.398116127766
WATCH	181	((S/NP)\NP)	0.000393667674848
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I 'm not sure .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I 'm not sure .
making  lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
making  Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
making  v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
making  pro|you
making  pro:poss:det|your($1,n|record($1))
making  n|record($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  I 'm not sure .

got training pair
Sent : I 'm not sure .
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
sentence is  ['I', "'m", 'not', 'sure', '.']
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
size of chart is  1206
got chart
norm score is  -26.1921298647
doing updates with learning rate  0.0128117841184
Deleting 0 entries of the total 2452
done io
WATCH	I 'm not sure .
WATCH	182	((S\NP)\NP)	0.497510966201
WATCH	182	((S\NP)/NP)	0.106591531786
WATCH	182	((S/NP)/NP)	0.395509883995
WATCH	182	((S/NP)\NP)	0.000387618017168
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  change your record would you ?
making  lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
making  Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
making  v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
making  pro|you
making  pro:poss:det|your($1,n|record($1))
making  n|record($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  change your record would you ?
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|fireplace($1)),$0)
making  eq(pro:dem|that,det|the($1,n|fireplace($1)),$0)
making  pro:dem|that,det|the($1,n|fireplace($1)),$0)
making  det|the($1,n|fireplace($1)),$0)
making  n|fireplace($1)
making  $1
making  $0)
sentence is  change your record would you ?

got training pair
Sent : change your record would you ?
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|fireplace($1)),$0)
sentence is  ['change', 'your', 'record', 'would', 'you']
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|fireplace($1)),$0)

Sent : more juice ?
update weight =  0.043047096028
0
Cat : Syn:lambda $0_{ev}.Q(and(aux|will&COND(v|do(pro:dem|that,$0),$0),adv|as_well($0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|here($0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
top parse:
[('more', 'NP', 'pro|you'), ('juice', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)')]
-15.2249407577


Sent : where 's your cup ?
update weight =  0.0423835495277
1
Cat : S:lambda $0_{ev}.adv:loc|here($0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
top parse:
[('where', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)'), ("'s", 'NP', 'n:prop|Fraser'), ('your', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|say-PROG(pro|you,$0,$1)'), ('cup', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)'), ('?', '((Syn\\S)\\(Syn\\S))', 'lambda $0_{<<ev,t>,<ev,t>>}.$0')]
-38.2078990442


Sent : I took it .
update weight =  0.0417425815524
2
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('I', 'NP', 'pro:dem|that'), ('took', '(Swh\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', '((Swh\\NP)\\(Swh\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.$0')]
-26.2434690701


Sent : I 'm not sure .
update weight =  0.0411230191652
3
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('I', 'N', 'lambda $0_{e}.n|cup($0)'), ("'m", '(NP\\N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('not', '(((St\\NP)\\N)\\(NP\\N))', 'lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)'), ('sure', '(Swh\\(St\\NP))', 'lambda $0_{<e,t>}.$0')]
-30.0788836463


Sent : are you saying Fraser ?
update weight =  0.0405237706188
4
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
top parse:
[('are', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ('you', '(((St/NP)/N)/(NP/N))', 'lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)'), ('saying', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('Fraser', 'N', 'lambda $0_{e}.n|cup($0)')]
-36.5847015796


Sent : what is that ?
update weight =  0.0399438183829
5
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
top parse:
[('what', 'NP', 'pro|you'), ('is', 'NP', 'det|a($0,n|fly($0))'), ('that', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($1,$0,$2)')]
-29.7727183832


Sent : what is that ?
update weight =  0.0393822128836
6
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
top parse:
[('what', 'NP', 'pro|you'), ('is', 'NP', 'det|a($0,n|fly($0))'), ('that', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($1,$0,$2)')]
-27.43954122


Sent : a fly .
update weight =  0.0388380668695
7
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
top parse:
[('a', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('fly', 'N', 'lambda $0_{e}.n|telephone($0)')]
-14.5090724686


Sent : you get a fly .
update weight =  0.0383105503327
8
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
top parse:
[('you', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('get', 'N', 'lambda $0_{e}.n|telephone($0)'), ('a', 'NP', 'pro|he'), ('fly', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,pro|you,$1,$2)')]
-24.3153487722


Sent : you get one .
update weight =  0.0377988859211
9
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
top parse:
[('you', 'NP', 'pro|you'), ('get', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)'), ('one', '(Swh\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]
-17.114189127


Sent : go and get your telephone .
update weight =  0.0373023447888
10
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
top parse:
[('go', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('and', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('get', 'N', 'lambda $0_{e}.n|telephone($0)'), ('your', 'NP', 'pro|you'), ('telephone', '(((S\\NP)\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($0,$1,$2,$3)'), ('.', 'NP', 'pro|he')]
-69.0173779976


Sent : he gave you your telephone .
update weight =  0.0368202428339
11
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
top parse:
[('he', '(((S/NP)/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($2,$1,$0,$3)'), ('gave', 'N', 'lambda $0_{e}.n|telephone($0)'), ('you', '(NP\\N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('your', 'NP', 'pro|you'), ('telephone', 'NP', 'pro|he')]
-48.0032011394


Sent : who are you calling ?
update weight =  0.0363519372845
12
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
top parse:
[('who', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('are', 'N', 'lambda $0_{e}.n|cookie($0)'), ('you', 'NP', 'pro|you'), ('calling', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]
-47.4266144334


Sent : who ?
update weight =  0.0358968235937
13
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
top parse:
[('who', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)'), ('?', '(Swh\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]
-16.3616001293


Sent : what 's the man doing ?
update weight =  0.0354543326123
14
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('what', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ("'s", 'N', 'lambda $0_{e}.n|man($0)'), ('the', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)'), ('man', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)'), ('doing', '(Swh\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0')]
-58.0770747287


Sent : you want a cookie ?
update weight =  0.0350239280111
15
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('you', 'NP', 'pro|you'), ('want', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)'), ('a', '(((S\\NP)\\NP)\\((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)'), ('cookie', '(Swh\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0')]
-38.0003687453


Sent : can you do it ?
update weight =  0.034605103925
16
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
top parse:
[('can', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('you', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('do', 'N', 'lambda $0_{e}.n|baby($0)'), ('it', 'NP', 'pro|it')]
-33.3107718834


Sent : there .
update weight =  0.0341973828006
17
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)')]
-13.866314857


Sent : what 's that ?
update weight =  0.0338003134226
18
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
top parse:
[('what', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ("'s", 'NP', 'n:prop|Mommy'), ('that', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.aux|can(v|read&ZERO($0,$1),$1)')]
-26.2572996767


Sent : it 's a baby .
update weight =  0.0334134691061
19
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
top parse:
[('it', 'NP', 'pro|you'), ("'s", '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('a', 'N', 'lambda $0_{e}.n|book($0)'), ('baby', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|read&ZERO($1,$0,$2)')]
-31.7323530042


Sent : Mommy can 't read .
update weight =  0.0330364460353
20
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
top parse:
[('Mommy', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)'), ('can', 'NP', 'pro:dem|that'), ("'t", '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('read', 'N', 'lambda $0_{e}.n|stool($0)')]
-40.0414879713


Sent : I 'm busy .
update weight =  0.0326688617368
21
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
top parse:
[('I', 'NP', 'pro|it'), ("'m", 'NP', 'pro|you'), ('busy', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($0,$1,$2)'), ('.', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&PAST($0($1),$1),$1)')]
-32.3008718637


Sent : you read the book .
update weight =  0.0323103536745
22
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
top parse:
[('you', 'NP', 'pro|you'), ('read', 'NP', 'pro|it'), ('the', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|eat($1,$0,$2),$2)'), ('book', '((Syn\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)')]
-39.9412619877


Sent : that 's the stool .
update weight =  0.0319605779545
23
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
top parse:
[('that', 'NP', 'n:prop|Mommy'), ("'s", '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|read&ZERO($0,$1)'), ('the', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ('stool', '((S\\S)\\(S\\S))', 'lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)')]
-39.3257736931


Sent : did you eat it ?
update weight =  0.0316192081304
24
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
top parse:
[('did', 'NP', 'pro|it'), ('you', 'NP', 'pro|you'), ('eat', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|eat($0,$1,$2),$2)'), ('it', '((Syn\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)')]
-26.0419880515


Sent : you ate it .
update weight =  0.0312859340997
25
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
top parse:
[('you', 'NP', 'pro|you'), ('ate', 'NP', 'det|the($0,n|book($0))'), ('it', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|read&ZERO($1,$0,$2)')]
-32.7528434981


Sent : milk ?
update weight =  0.0309604610838
26
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('milk', 'Swh', 'lambda $0_{e}.n|milk($0)')]
-13.1526335028


Sent : you don 't want milk .
update weight =  0.030642508684
27
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
top parse:
[('you', 'NP', 'pro|you'), ('don', '(NP/N)', 'lambda $0_{<e,t>}.qn|some($1,$0($1))'), ("'t", 'N', 'lambda $0_{e}.n|juice($0)'), ('want', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|have(part|have&PERF($1,$0,$2),$2)'), ('milk', '(((S\\NP)\\NP)\\((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:int|just($3))')]
-29.9864717753


Sent : you 've just had some juice .
update weight =  0.0303318100061
28
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('you', 'NP', 'pro|you'), ("'ve", '(NP/N)', 'lambda $0_{<e,t>}.qn|some($1,$0($1))'), ('just', 'N', 'lambda $0_{e}.n|juice($0)'), ('had', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,$0,$2)'), ('some', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)'), ('juice', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:int|just($2))')]
-67.4563868028


Sent : what is that ?
update weight =  0.0300281108495
29
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
top parse:
[('what', 'NP', 'det|the($0,n|water($0))'), ('is', 'NP', 'pro|you'), ('that', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($0,$1,$2)')]
-36.9624474932


Sent : drink the water .
update weight =  0.0297311689541
30
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
top parse:
[('drink', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|his($1,$0($1))'), ('the', 'N', 'lambda $0_{e}.n|coffee($0)'), ('water', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|drink-PROG(pro|he,$0,$1),$1)')]
-34.8379878862


Sent : what is that ?
update weight =  0.0294407533
31
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
top parse:
[('what', 'NP', 'det|the($0,n|water($0))'), ('is', 'NP', 'pro|you'), ('that', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($0,$1,$2)')]
-27.1058310239


Sent : coffee .
update weight =  0.0291566434574
32
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
top parse:
[('coffee', 'Swh', 'lambda $0_{e}.n|coffee($0)')]
-11.4082240582


Sent : he 's drinking his coffee .
update weight =  0.02887862898
33
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
top parse:
[('he', 'NP', 'pro|we'), ("'s", 'NP', 'det|a($0,n|cookie($0))'), ('drinking', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)'), ('his', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)'), ('coffee', '((S\\S)\\(S\\S))', 'lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv|later($2))')]
-58.6014631989


Sent : you go .
update weight =  0.0286065088411
34
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('you', 'NP', 'pro|you'), ('go', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)')]
-20.6829850653


Sent : later we 'll have a cookie .
update weight =  0.0283400909068
35
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
top parse:
[('later', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|drink-PROG($1,$0,$2)'), ('we', '((NP/N)/(NP/N))', 'lambda $0_{<<e,t>,e>}.$0'), ("'ll", '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|his($1,$0($1))'), ('have', 'N', 'lambda $0_{e}.n|coffee($0)'), ('a', 'NP', 'pro|he'), ('cookie', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)'), ('.', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-74.9835138828


Sent : we 'll have a cookie later .
update weight =  0.0280791914453
36
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
top parse:
[('we', '((NP/N)/(NP/N))', 'lambda $0_{<<e,t>,e>}.$0'), ("'ll", '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|his($1,$0($1))'), ('have', 'N', 'lambda $0_{e}.n|coffee($0)'), ('a', 'NP', 'pro|he'), ('cookie', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|drink-PROG($0,$1,$2)'), ('later', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)')]
-52.0641244924


Sent : what 's that ?
update weight =  0.0278236346674
37
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
top parse:
[('what', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ("'s", 'N', 'lambda $0_{e}.n|bottle($0)'), ('that', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)')]
-25.2862153018


Sent : your hat ?
update weight =  0.0275732522983
38
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
top parse:
[('your', 'NP', 'pro|you'), ('hat', '(Swh\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|do-PROG($0,$1,$2),$2)')]
-18.4107841419


Sent : and what did you do with it ?
update weight =  0.0273278831761
39
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
top parse:
[('and', '((Swh/(S\\NP))/PP)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('what', '(PP/PP)', 'lambda $0_{<ev,t>}.$0'), ('did', 'PP', 'lambda $0_{ev}.prep|with(pro|it,$0)'), ('you', 'NP', 'pro|you'), ('do', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)'), ('with', '(((S\\NP)\\NP)\\((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do&PAST($0($1,$2,$3),$3)'), ('it', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0')]
-67.1229048594


Sent : give dolly her bottle .
update weight =  0.0270873728761
40
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
top parse:
[('give', '((Swh/(S\\NP))/PP)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|do&PAST($1($2,$3),$3),$0($3))'), ('dolly', '(PP/NP)', 'lambda $0_{e}.lambda $1_{ev}.prep|with($0,$1)'), ('her', 'NP', 'pro|it'), ('bottle', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)')]
-43.0969765137


Sent : what are you doing ?
update weight =  0.0268515733591
41
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
top parse:
[('what', 'PP', 'lambda $0_{ev}.prep|with(pro|it,$0)'), ('are', '((Swh/(S\\NP))\\PP)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('you', 'NP', 'pro|you'), ('doing', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)'), ('?', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)')]
-36.33825225


Sent : what are you doing ?
update weight =  0.0266203426413
42
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
top parse:
[('what', 'PP', 'lambda $0_{ev}.prep|with(pro|it,$0)'), ('are', '((Swh/(S\\NP))\\PP)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('you', 'NP', 'pro|you'), ('doing', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)')]
-48.1440728666


Sent : bottle ?
update weight =  0.026393544485
43
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('bottle', 'Swh', 'lambda $0_{e}.n|bottle($0)')]
-11.7518785846


Sent : the hat ?
update weight =  0.0261710481075
44
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
top parse:
[('the', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)'), ('hat', '(Swh\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]
-15.6807144355


Sent : he doesn 't have a hat .
update weight =  0.0259527279087
45
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
top parse:
[('he', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)'), ('doesn', '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do&3S($0($1,$2,$3),$3)'), ("'t", '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)'), ('have', '(NP/NP)', 'lambda $0_{e}.$0'), ('a', 'NP', 'pro|he'), ('hat', 'NP', 'det|a($0,n|hat($0))')]
-61.8225956066


Sent : what is that ?
update weight =  0.0257384632137
46
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))'), ('is', 'NP', 'pro|you'), ('that', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)')]
-24.8882819192


Sent : soldiers .
update weight =  0.025528138032
47
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
top parse:
[('soldiers', 'Swh', 'lambda $0_{e}.n|soldier-PL($0)')]
-13.0673463313


Sent : bring it here .
update weight =  0.0253216408296
48
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
top parse:
[('bring', 'NP', 'n:prop|Jack'), ('it', 'NP', 'n:prop|Jill'), ('here', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq(pro:dem|that,and($1,$0),$2)')]
-27.5314642116


Sent : what 's that ?
update weight =  0.0251188643151
49
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
top parse:
[('what', 'NP', 'pro|it'), ("'s", '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)'), ('that', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))')]
-21.5310470728


Sent : that 's Jack and Jill .
update weight =  0.0249197052378
50
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
top parse:
[('that', 'NP', 'pro|it'), ("'s", 'NP', 'pro|you'), ('Jack', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($0,$1,$2)'), ('and', '(((S\\NP)\\NP)\\((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(part|go-PROG(pro|you,$3),$0($1,$2,$3))'), ('Jill', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]
-38.7021257684


Sent : he doesn 't have a hat .
update weight =  0.0247240641974
51
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('he', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)'), ('doesn', '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do&3S($0($1,$2,$3),$3)'), ("'t", '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)'), ('have', '(NP/NP)', 'lambda $0_{e}.$0'), ('a', 'NP', 'pro|he'), ('hat', 'NP', 'det|a($0,n|hat($0))')]
-60.2868203518


Sent : Eve has a hat .
update weight =  0.0245318454645
52
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
top parse:
[('Eve', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|have($0,$1,$2),$2)'), ('has', '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)'), ('a', 'NP', 'pro|he'), ('hat', 'NP', 'det|a($0,n|hat($0))')]
-31.6032130247


Sent : you 're gonna find it .
update weight =  0.0243429568107
53
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
top parse:
[('you', 'NP', 'pro|you'), ("'re", '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)'), ('gonna', '(((S\\NP)\\(S\\NP))/S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($1($2,$3),$0($3)),$3)'), ('find', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)'), ('it', 'NP', 'pro|it')]
-39.6497674258


Sent : there .
update weight =  0.0241573093489
54
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)'), ('.', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-19.0995673899


Sent : man ?
update weight =  0.0239748173813
55
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
top parse:
[('man', 'Swh', 'lambda $0_{e}.n|man($0)')]
-12.7793473032


Sent : who is that man ?
update weight =  0.0237953982564
56
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
top parse:
[('who', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),$0($1)),$1)'), ('is', 'NP', 'pro|you'), ('that', 'NP', 'pro|it'), ('man', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($1,$0,$2)')]
-31.6139471619


Sent : Eve ?
update weight =  0.0236189722338
57
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
top parse:
[('Eve', 'S', 'lambda $0_{ev}.adv:loc|down($0)')]
-9.60679252564


Sent : you 're Eve .
update weight =  0.0234454623554
58
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
top parse:
[('you', 'NP', 'pro|you'), ("'re", 'NP', 'det|a($0,n|letter($0))'), ('Eve', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)'), ('.', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-31.9497405533


Sent : down .
update weight =  0.023274794324
59
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
top parse:
[('down', 'Swh', 'lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)')]
-11.9937102711


Sent : you write a letter .
update weight =  0.0231068963886
60
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
top parse:
[('you', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('write', 'N', 'lambda $0_{e}.n|pencil($0)'), ('a', 'NP', 'pro:dem|that'), ('letter', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)'), ('.', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-45.9070447002


Sent : the pencil ?
update weight =  0.0229416992343
61
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
top parse:
[('the', '(Syn/N)', 'lambda $0_{<e,t>}.lambda $1_{ev}.Q(det|the($2,$0($2)),$1)'), ('pencil', 'N', 'lambda $0_{e}.n|man($0)')]
-22.1119370393


Sent : that 's your pencil .
update weight =  0.0227791358797
62
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
top parse:
[('that', '(PP/NP)', 'lambda $0_{e}.lambda $1_{ev}.prep|in($0,$1)'), ("'s", 'NP', 'det|the($0,n|corner($0))'), ('your', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)'), ('pencil', '((Swh\\PP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))')]
-32.293314312


Sent : the man ?
update weight =  0.0226191415778
63
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('the', '(Syn/N)', 'lambda $0_{<e,t>}.lambda $1_{ev}.Q(det|the($2,$0($2)),$1)'), ('man', 'N', 'lambda $0_{e}.n|man($0)')]
-7.98015865939


Sent : what are you doing in the corner ?
update weight =  0.0224616537229
64
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
top parse:
[('what', '(PP/PP)', 'lambda $0_{<ev,t>}.$0'), ('are', 'PP', 'lambda $0_{ev}.prep|in(det|the($1,n|corner($1)),$0)'), ('you', 'NP', 'pro|you'), ('doing', '(((S\\NP)\\NP)/((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.$0'), ('in', '(((S\\NP)\\NP)/((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)'), ('the', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)'), ('corner', '((Swh\\PP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))')]
-54.3076187544


Sent : you 're going to read .
update weight =  0.0223066117621
65
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
top parse:
[('you', 'NP', 'pro|you'), ("'re", '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)'), ('going', '(((S\\NP)\\(S\\NP))/S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('to', 'S', 'lambda $0_{ev}.v|read&ZERO(pro|you,$0)'), ('read', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]
-53.9214978558


Sent : what is that ?
update weight =  0.022153957111
66
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
top parse:
[('what', 'N', 'lambda $0_{e}.n|man($0)'), ('is', '(NP\\N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('that', '((Syn\\N)\\(NP\\N))', 'lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)')]
-34.2259061902


Sent : shoe .
update weight =  0.0220036330731
67
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
top parse:
[('shoe', 'Swh', 'lambda $0_{e}.n|shoe($0)')]
-17.3383181638


Sent : that 's Racketyboom .
update weight =  0.0218555847641
68
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
top parse:
[('that', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ("'s", 'NP', 'n:prop|Eve'), ('Racketyboom', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|read&ZERO($0,lambda $2_{e}.n|book($2),$1)')]
-29.3950419112


Sent : that 's Racketyboom .
update weight =  0.0217097590391
69
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
top parse:
[('that', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ("'s", 'NP', 'n:prop|Eve'), ('Racketyboom', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|read&ZERO($0,lambda $2_{e}.n|book($2),$1)')]
-18.5165162036


Sent : Eve read book .
update weight =  0.0215661044238
70
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
top parse:
[('Eve', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ('read', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('book', 'S', 'lambda $0_{ev}.aux|can(v|read&ZERO(n:prop|Mommy,$0),$0)')]
-30.932112018


Sent : you read the book .
update weight =  0.0214245710482
71
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
top parse:
[('you', 'NP', 'pro|you'), ('read', 'N', 'lambda $0_{e}.n|book($0)'), ('the', '((S\\NP)\\N)', 'lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|read&ZERO($1,det|the($3,$0($3)),$2)'), ('book', '(((S\\NP)\\N)\\((S\\NP)\\N))', 'lambda $0_{<<e,t>,<e,<ev,t>>>}.$0')]
-37.7179533746


Sent : Mommy can 't read .
update weight =  0.0212851105845
72
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
top parse:
[('Mommy', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)'), ('can', 'NP', 'pro:dem|that'), ("'t", 'NP', 'n:prop|Racketyboom'), ('read', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-29.1697065535


Sent : Mommy 's busy .
update weight =  0.0211476761869
73
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
top parse:
[('Mommy', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|read&ZERO(pro|you,$0,$1)'), ("'s", '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('busy', 'N', 'lambda $0_{e}.n|book($0)')]
-24.447255476


Sent : Eve read .
update weight =  0.0210122224352
74
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
top parse:
[('Eve', 'S', 'lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)'), ('read', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-16.9656647516


Sent : you read about the choochoo .
update weight =  0.0208787052798
75
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
top parse:
[('you', 'NP', 'pro|you'), ('read', '(PP/PP)', 'lambda $0_{<ev,t>}.$0'), ('about', '(PP/NP)', 'lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)'), ('the', 'NP', 'det|the($0,n|+on|choo+on|choo($0))'), ('choochoo', '((S\\NP)\\PP)', 'lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|read&ZERO($1,$2),$0($2))'), ('.', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-50.2211422263


Sent : Mommy 'll read later .
update weight =  0.0207470819903
76
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
top parse:
[('Mommy', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ("'ll", '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will(v|read&ZERO(pro|I,$1),$1),$0($1))'), ('read', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('later', 'S', 'lambda $0_{ev}.adv|later($0)'), ('.', '(S\\S)', 'lambda $0_{<ev,t>}.$0')]
-38.1706068157


Sent : I 'll read to you later .
update weight =  0.0206173111058
77
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
top parse:
[('I', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)'), ("'ll", 'NP', 'pro|I'), ('read', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|read&ZERO($0,$1)'), ('to', '((S\\S)/S)', 'lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))'), ('you', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('later', 'S', 'lambda $0_{ev}.adv|later($0)')]
-51.7570603864


Sent : come ?
update weight =  0.0204893523878
78
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
top parse:
[('come', 'Swh', 'lambda $0_{e}.n|cup($0)')]
-17.3062302805


Sent : you want some milk ?
update weight =  0.0203631667747
79
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
top parse:
[('you', 'NP', 'pro|you'), ('want', 'NP', 'qn|some($0,n|milk($0))'), ('some', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)'), ('milk', '((Syn\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)')]
-34.5811936962


Sent : we 'll have milk for lunch .
update weight =  0.020238716339
80
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
top parse:
[('we', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))'), ("'ll", 'NP', 'pro|we'), ('have', '(NP\\NP)', 'lambda $0_{e}.$0'), ('milk', 'N', 'lambda $0_{e}.n|milk($0)'), ('for', '((S\\NP)\\N)', 'lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)'), ('lunch', '(((S\\NP)\\N)\\((S\\NP)\\N))', 'lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)')]
-47.2393932028


Sent : cup ?
update weight =  0.0201159642459
81
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('cup', 'Swh', 'lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)')]
-14.5879626064


Sent : that 's not a cup .
update weight =  0.0199948747138
82
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('that', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ("'s", '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('not', 'N', 'lambda $0_{e}.n|cup($0)'), ('a', 'NP', 'pro:dem|that'), ('cup', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)')]
-56.1808664894


Sent : that 's the top .
update weight =  0.0198754129766
83
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", 'N', 'lambda $0_{e}.n|cup($0)'), ('the', '(((S\\NP)\\N)/((S\\NP)\\N))', 'lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)'), ('top', '((S\\NP)\\N)', 'lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,det|a($3,$0($3)),$2)')]
-32.4232858474


Sent : what is that ?
update weight =  0.0197575452474
84
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
top parse:
[('what', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('is', 'N', 'lambda $0_{e}.n|duck-PL($0)'), ('that', '(Swh\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)')]
-27.2054691053


Sent : what is that ?
update weight =  0.0196412386841
85
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('is', 'N', 'lambda $0_{e}.n|duck-PL($0)'), ('that', '(Swh\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)')]
-27.4177364669


Sent : what is it ?
update weight =  0.0195264613563
86
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
top parse:
[('what', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('is', 'N', 'lambda $0_{e}.n|duck-PL($0)'), ('it', '(Swh\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)')]
-24.9004197807


Sent : the ducks say what ?
update weight =  0.0194131822135
87
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
top parse:
[('the', '((Swh/PP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))'), ('ducks', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|do($0,$1,$2),$2)'), ('say', 'NP', 'pro|you'), ('what', 'PP', 'lambda $0_{ev}.prep|with(pro|it,$0)')]
-41.706979626


Sent : what is that ?
update weight =  0.0193013710544
88
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
top parse:
[('what', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('is', 'N', 'lambda $0_{e}.n|duck-PL($0)'), ('that', '(Swh\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)')]
-26.3885145459


Sent : radio .
update weight =  0.0191909984985
89
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
top parse:
[('radio', 'Swh', 'lambda $0_{e}.n|radio($0)')]
-6.53655579763


Sent : what 'll you do with it ?
update weight =  0.0190820359572
90
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
top parse:
[('what', 'PP', 'lambda $0_{ev}.prep|with(pro|it,$0)'), ("'ll", '((Swh/(S\\NP))\\PP)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))'), ('you', 'NP', 'pro|you'), ('do', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)'), ('with', '(((S\\NP)\\NP)\\((S\\NP)\\NP))', 'lambda $0_{<e,<e,<ev,t>>>}.$0'), ('it', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0')]
-51.6722380517


Sent : hat ?
update weight =  0.0189744556078
91
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
top parse:
[('hat', 'Swh', 'lambda $0_{e}.n|hat($0)')]
-4.63298898498


Sent : where is your hat ?
update weight =  0.0188682303675
92
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
top parse:
[('where', 'NP', 'pro|me'), ('is', 'NP', 'pro|you'), ('your', '(((S\\NP)\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|want(pro|you,$1,$3),v|do($0,$2,$3))'), ('hat', '(Swh\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)')]
-39.71462493


Sent : I don 't have it .
update weight =  0.0187633338683
93
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
top parse:
[('I', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)'), ('don', '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)'), ("'t", '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)'), ('have', '(NP/NP)', 'lambda
['SemLearn.py', 'i_n', '-', '5']
build or check is  i_n
Number of possible LFs in training:5
testout =  None
put in sent coutn =  0
K k=-0.8
making  lambda $0_{ev}.adv:loc|here($0)
making  adv:loc|here($0)
making  $0
sentence is  more juice ?
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  more juice ?
making  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
making  Q(qn|more($1,n|juice($1)),$0)
making  qn|more($1,n|juice($1)),$0)
making  n|juice($1)
making  $1
making  $0)
Is Q
sentence is  more juice ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  more juice ?
making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  more juice ?

got training pair
Sent : more juice ?
Cat : S:lambda $0_{ev}.adv:loc|here($0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sentence is  ['more', 'juice']
sem is  lambda $0_{ev}.adv:loc|here($0)
adding  S  to START
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
adding  Syn  to START
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
adding  Swh  to START
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
size of chart is  45
got chart
norm score is  -16.3917546899
doing updates with learning rate  0.043047096028
Deleting 0 entries of the total 39
done io
WATCH	more juice ?
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  where 's your cup ?
making  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
making  Q(qn|more($1,n|juice($1)),$0)
making  qn|more($1,n|juice($1)),$0)
making  n|juice($1)
making  $1
making  $0)
Is Q
sentence is  where 's your cup ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  where 's your cup ?
making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  where 's your cup ?
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  where 's your cup ?

got training pair
Sent : where 's your cup ?
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
sentence is  ['where', "'s", 'your', 'cup']
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
size of chart is  469
got chart
norm score is  -36.2769657746
doing updates with learning rate  0.0423835495277
Deleting 0 entries of the total 358
done io
WATCH	where 's your cup ?
WATCH	2	((S\NP)\NP)	0.447420026463
WATCH	2	((S\NP)/NP)	0.052579973537
WATCH	2	((S/NP)/NP)	0.447420026463
WATCH	2	((S/NP)\NP)	0.052579973537
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
making  Q(qn|more($1,n|juice($1)),$0)
making  qn|more($1,n|juice($1)),$0)
making  n|juice($1)
making  $1
making  $0)
Is Q
sentence is  I took it .
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  I took it .
making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  I took it .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I took it .
making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  I took it .

got training pair
Sent : I took it .
Cat : Syn:lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sentence is  ['I', 'took', 'it', '.']
sem is  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
size of chart is  710
got chart
norm score is  -27.6430112961
doing updates with learning rate  0.0417425815524
Deleting 0 entries of the total 844
done io
WATCH	I took it .
WATCH	3	((S\NP)\NP)	0.454817389557
WATCH	3	((S\NP)/NP)	0.0451826104426
WATCH	3	((S/NP)/NP)	0.454817389557
WATCH	3	((S/NP)\NP)	0.0451826104426
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
making  pro:poss:det|your($1,n|cup($1)),$0)
making  n|cup($1)
making  $1
making  $0)
sentence is  I 'm not sure .
making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  I 'm not sure .
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  I 'm not sure .
making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  I 'm not sure .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  I 'm not sure .

got training pair
Sent : I 'm not sure .
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['I', "'m", 'not', 'sure']
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|cup($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|cup($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  714
got chart
norm score is  -30.3822347195
doing updates with learning rate  0.0411230191652
Deleting 0 entries of the total 1229
done io
WATCH	I 'm not sure .
WATCH	4	((S\NP)\NP)	0.788721773062
WATCH	4	((S\NP)/NP)	0.00799956540611
WATCH	4	((S/NP)/NP)	0.15415744641
WATCH	4	((S/NP)\NP)	0.0491212151218
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
making  v|take&PAST(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
sentence is  are you saying Fraser ?
making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  are you saying Fraser ?
making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  are you saying Fraser ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  are you saying Fraser ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  are you saying Fraser ?

got training pair
Sent : are you saying Fraser ?
Cat : S:lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['are', 'you', 'saying', 'Fraser']
sem is  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  601
got chart
norm score is  -41.0981445644
doing updates with learning rate  0.0405237706188
Deleting 0 entries of the total 1615
done io
WATCH	are you saying Fraser ?
WATCH	5	((S\NP)\NP)	0.788982185809
WATCH	5	((S\NP)/NP)	0.0047833647755
WATCH	5	((S/NP)/NP)	0.171191366395
WATCH	5	((S/NP)\NP)	0.0350430830203
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(adj|sure(pro|I),$0)
making  not(adj|sure(pro|I),$0)
making  adj|sure(pro|I),$0)
making  pro|I
making  $0)
sentence is  what is that ?
making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.not(adj|sure(pro|I),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.not(adj|sure(pro|I),$0)
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  det|a($0,n|fly($0))
adding  NP  to START
size of chart is  225
got chart
norm score is  -29.4524276022
doing updates with learning rate  0.0399438183829
Deleting 0 entries of the total 1783
done io
WATCH	what is that ?
WATCH	6	((S\NP)\NP)	0.78742934175
WATCH	6	((S\NP)/NP)	0.00431596177449
WATCH	6	((S/NP)/NP)	0.172863815165
WATCH	6	((S/NP)\NP)	0.0353908813108
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
making  part|say-PROG(pro|you,n:prop|Fraser,$0)
making  pro|you
making  n:prop|Fraser
making  $0
making  $0
making  $0)
Is Q
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  what is that ?
making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Syn:lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  det|a($0,n|fly($0))
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
size of chart is  225
got chart
norm score is  -12.4147422573
doing updates with learning rate  0.0393822128836
Deleting 0 entries of the total 1819
done io
WATCH	what is that ?
WATCH	7	((S\NP)\NP)	0.816342152482
WATCH	7	((S\NP)/NP)	0.00306730156743
WATCH	7	((S/NP)/NP)	0.146824774831
WATCH	7	((S/NP)\NP)	0.033765771119
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  a fly .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  a fly .
making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  a fly .
making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  a fly .
making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  a fly .

got training pair
Sent : a fly .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sentence is  ['a', 'fly']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  det|a($0,n|fly($0))
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
size of chart is  42
got chart
norm score is  -11.425637407
doing updates with learning rate  0.0388380668695
Deleting 0 entries of the total 1857
done io
WATCH	a fly .
WATCH	8	((S\NP)\NP)	0.821438130879
WATCH	8	((S\NP)/NP)	0.0030377015614
WATCH	8	((S/NP)/NP)	0.142796149637
WATCH	8	((S/NP)\NP)	0.0327280179228
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you get a fly .
making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  you get a fly .
making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  you get a fly .
making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  you get a fly .
making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  you get a fly .

got training pair
Sent : you get a fly .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
sentence is  ['you', 'get', 'a', 'fly']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  det|a($0,n|fly($0))
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sem is  pro:poss:det|your($0,n|telephone($0))
size of chart is  400
got chart
norm score is  -26.4774649843
doing updates with learning rate  0.0383105503327
Deleting 0 entries of the total 2078
done io
WATCH	you get a fly .
WATCH	9	((S\NP)\NP)	0.727365388432
WATCH	9	((S\NP)/NP)	0.00397334234524
WATCH	9	((S/NP)/NP)	0.24385554489
WATCH	9	((S/NP)\NP)	0.0248057243326
getting topparses
outputting cat probs
done with sent


making  det|a($0,n|fly($0))
making  n|fly($0)
making  $0
sentence is  you get one .
making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  you get one .
making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  you get one .
making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  you get one .
making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  you get one .

got training pair
Sent : you get one .
Cat : NP:det|a($0,n|fly($0))
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sentence is  ['you', 'get', 'one']
sem is  det|a($0,n|fly($0))
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sem is  pro:poss:det|your($0,n|telephone($0))
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
size of chart is  189
got chart
norm score is  -18.1364275492
doing updates with learning rate  0.0377988859211
Deleting 0 entries of the total 2181
done io
WATCH	you get one .
WATCH	10	((S\NP)\NP)	0.77310323736
WATCH	10	((S\NP)/NP)	0.00413996462691
WATCH	10	((S/NP)/NP)	0.200726970745
WATCH	10	((S/NP)\NP)	0.0220298272681
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
making  v|get(pro|you,det|a($1,n|fly($1)),$0)
making  pro|you
making  det|a($1,n|fly($1))
making  n|fly($1)
making  $1
making  $0
sentence is  go and get your telephone .
making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  go and get your telephone .
making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  go and get your telephone .
making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  go and get your telephone .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  go and get your telephone .

got training pair
Sent : go and get your telephone .
Cat : S:lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
sentence is  ['go', 'and', 'get', 'your', 'telephone']
sem is  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sem is  pro:poss:det|your($0,n|telephone($0))
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1665
got chart
norm score is  -42.9569357531
doing updates with learning rate  0.0373023447888
Deleting 2695 entries of the total 3055
done io
WATCH	go and get your telephone .
WATCH	11	((S\NP)\NP)	0.72475600308
WATCH	11	((S\NP)/NP)	0.00405922859128
WATCH	11	((S/NP)/NP)	0.252236413005
WATCH	11	((S/NP)\NP)	0.0189483553233
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
making  v|get(pro|you,pro:indef|one,$0)
making  pro|you
making  pro:indef|one
making  $0
sentence is  he gave you your telephone .
making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  he gave you your telephone .
making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  he gave you your telephone .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  he gave you your telephone .
making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  he gave you your telephone .

got training pair
Sent : he gave you your telephone .
Cat : S:lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
sentence is  ['he', 'gave', 'you', 'your', 'telephone', '.']
sem is  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
sem is  pro:poss:det|your($0,n|telephone($0))
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
size of chart is  2757
got chart
norm score is  -40.6719325038
doing updates with learning rate  0.0368202428339
Deleting 0 entries of the total 1587
done io
WATCH	he gave you your telephone .
WATCH	12	((S\NP)\NP)	0.715136073938
WATCH	12	((S\NP)/NP)	0.0051350795895
WATCH	12	((S/NP)/NP)	0.262210859624
WATCH	12	((S/NP)\NP)	0.0175179868483
getting topparses
outputting cat probs
done with sent


making  pro:poss:det|your($0,n|telephone($0))
making  n|telephone($0)
making  $0
sentence is  who are you calling ?
making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  who are you calling ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  who are you calling ?
making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  who are you calling ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  who are you calling ?

got training pair
Sent : who are you calling ?
Cat : NP:pro:poss:det|your($0,n|telephone($0))
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
sentence is  ['who', 'are', 'you', 'calling']
sem is  pro:poss:det|your($0,n|telephone($0))
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  910
got chart
norm score is  -24.9465624915
doing updates with learning rate  0.0363519372845
Deleting 0 entries of the total 2050
done io
WATCH	who are you calling ?
WATCH	13	((S\NP)\NP)	0.729455842555
WATCH	13	((S\NP)/NP)	0.00408325640427
WATCH	13	((S/NP)/NP)	0.25031113819
WATCH	13	((S/NP)\NP)	0.0161497628508
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
making  pro|he
making  pro|you
making  pro:poss:det|your($1,n|telephone($1))
making  n|telephone($1)
making  $1
making  $0
sentence is  who ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  who ?
making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  who ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  who ?
making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  who ?

got training pair
Sent : who ?
Cat : S:lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sentence is  ['who', '?']
sem is  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
size of chart is  87
got chart
norm score is  -13.0206433408
doing updates with learning rate  0.0358968235937
Deleting 0 entries of the total 2096
done io
WATCH	who ?
WATCH	14	((S\NP)\NP)	0.710992705042
WATCH	14	((S\NP)/NP)	0.00398321124786
WATCH	14	((S/NP)/NP)	0.267806135592
WATCH	14	((S/NP)\NP)	0.0172179481187
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
making  part|call-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what 's the man doing ?
making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  what 's the man doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  what 's the man doing ?
making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  what 's the man doing ?
making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  what 's the man doing ?

got training pair
Sent : what 's the man doing ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sentence is  ['what', "'s", 'the', 'man', 'doing', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|call-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
size of chart is  4291
got chart
norm score is  -46.9890654992
doing updates with learning rate  0.0354543326123
Deleting 0 entries of the total 3883
done io
WATCH	what 's the man doing ?
WATCH	15	((S\NP)\NP)	0.639275313626
WATCH	15	((S\NP)/NP)	0.00355387572061
WATCH	15	((S/NP)/NP)	0.340026466904
WATCH	15	((S/NP)\NP)	0.0171443437491
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(pro:wh|who,$0)
making  Q(pro:wh|who,$0)
making  pro:wh|who,$0)
making  $0)
Is Q
sentence is  you want a cookie ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  you want a cookie ?
making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  you want a cookie ?
making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  you want a cookie ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  you want a cookie ?

got training pair
Sent : you want a cookie ?
Cat : Syn:lambda $0_{ev}.Q(pro:wh|who,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
sentence is  ['you', 'want', 'a', 'cookie']
sem is  lambda $0_{ev}.Q(pro:wh|who,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
size of chart is  981
got chart
norm score is  -31.3360693998
doing updates with learning rate  0.0350239280111
Deleting 0 entries of the total 4451
done io
WATCH	you want a cookie ?
WATCH	16	((S\NP)\NP)	0.649802794942
WATCH	16	((S\NP)/NP)	0.00349071070295
WATCH	16	((S/NP)/NP)	0.314599338399
WATCH	16	((S/NP)\NP)	0.0321071559559
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
making  part|do-PROG(det|the($2,n|man($2)),$0,$1)
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
making  $1
making  $1
sentence is  can you do it ?
making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  can you do it ?
making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  can you do it ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  can you do it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  can you do it ?

got training pair
Sent : can you do it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['can', 'you', 'do', 'it']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(det|the($2,n|man($2)),$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  1018
got chart
norm score is  -30.2019293878
doing updates with learning rate  0.034605103925
Deleting 0 entries of the total 4965
done io
WATCH	can you do it ?
WATCH	17	((S\NP)\NP)	0.66160305761
WATCH	17	((S\NP)/NP)	0.00306394850136
WATCH	17	((S/NP)/NP)	0.30593723159
WATCH	17	((S/NP)\NP)	0.0293957622989
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
making  pro|you
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  there .
making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  there .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  there .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  there .
making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  there .

got training pair
Sent : there .
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sentence is  ['there']
sem is  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
size of chart is  5
got chart
norm score is  -11.5440496333
doing updates with learning rate  0.0341973828006
Deleting 0 entries of the total 4970
done io
WATCH	there .
WATCH	18	((S\NP)\NP)	0.661631863398
WATCH	18	((S\NP)/NP)	0.00306581006446
WATCH	18	((S/NP)/NP)	0.305953584586
WATCH	18	((S/NP)\NP)	0.0293487419509
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  aux|can(v|do(pro|you,pro|it,$0),$0),$0)
making  v|do(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  what 's that ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  what 's that ?
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
size of chart is  275
got chart
norm score is  -16.6250359342
doing updates with learning rate  0.0338003134226
Deleting 0 entries of the total 5113
done io
WATCH	what 's that ?
WATCH	19	((S\NP)\NP)	0.671016551502
WATCH	19	((S\NP)/NP)	0.00277886324313
WATCH	19	((S/NP)/NP)	0.297311691037
WATCH	19	((S/NP)\NP)	0.0288928942183
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  it 's a baby .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  it 's a baby .
making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  it 's a baby .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  it 's a baby .
making  adj|busy(pro|I)
making  pro|I
sentence is  it 's a baby .

got training pair
Sent : it 's a baby .
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
sentence is  ['it', "'s", 'a', 'baby']
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(pro|I)
adding  St  to START
size of chart is  531
got chart
norm score is  -25.331110103
doing updates with learning rate  0.0334134691061
Deleting 0 entries of the total 5406
done io
WATCH	it 's a baby .
WATCH	20	((S\NP)\NP)	0.665580305977
WATCH	20	((S\NP)/NP)	0.00279496627696
WATCH	20	((S/NP)/NP)	0.304808113857
WATCH	20	((S/NP)\NP)	0.0268166138885
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  Mommy can 't read .
making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  Mommy can 't read .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Mommy can 't read .
making  adj|busy(pro|I)
making  pro|I
sentence is  Mommy can 't read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  Mommy can 't read .

got training pair
Sent : Mommy can 't read .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sentence is  ['Mommy', 'can', "'t", 'read']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
size of chart is  662
got chart
norm score is  -29.6120079217
doing updates with learning rate  0.0330364460353
Deleting 5306 entries of the total 5860
done io
WATCH	Mommy can 't read .
WATCH	21	((S\NP)\NP)	0.66456935207
WATCH	21	((S\NP)/NP)	0.00251158383285
WATCH	21	((S/NP)/NP)	0.309680570039
WATCH	21	((S/NP)\NP)	0.0232384940585
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
making  eq(pro|it,det|a($1,n|baby($1)),$0)
making  pro|it,det|a($1,n|baby($1)),$0)
making  det|a($1,n|baby($1)),$0)
making  n|baby($1)
making  $1
making  $0)
sentence is  I 'm busy .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  I 'm busy .
making  adj|busy(pro|I)
making  pro|I
sentence is  I 'm busy .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  I 'm busy .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  I 'm busy .

got training pair
Sent : I 'm busy .
Cat : S:lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sentence is  ['I', "'m", 'busy']
sem is  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
size of chart is  271
got chart
norm score is  -22.6188196822
doing updates with learning rate  0.0326688617368
Deleting 0 entries of the total 790
done io
WATCH	I 'm busy .
WATCH	22	((S\NP)\NP)	0.667468727291
WATCH	22	((S\NP)/NP)	0.00251247346021
WATCH	22	((S/NP)/NP)	0.307127889149
WATCH	22	((S/NP)\NP)	0.0228909100998
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  you read the book .
making  adj|busy(pro|I)
making  pro|I
sentence is  you read the book .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  you read the book .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  you read the book .
making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  you read the book .

got training pair
Sent : you read the book .
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sentence is  ['you', 'read', 'the', 'book', '.']
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
size of chart is  1743
got chart
norm score is  -30.9744025481
doing updates with learning rate  0.0323103536745
Deleting 0 entries of the total 1864
done io
WATCH	you read the book .
WATCH	23	((S\NP)\NP)	0.706190380234
WATCH	23	((S\NP)/NP)	0.00254555671111
WATCH	23	((S/NP)/NP)	0.270832457215
WATCH	23	((S/NP)\NP)	0.0204316058399
getting topparses
outputting cat probs
done with sent


making  adj|busy(pro|I)
making  pro|I
sentence is  that 's the stool .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  that 's the stool .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  that 's the stool .
making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  that 's the stool .
making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  that 's the stool .

got training pair
Sent : that 's the stool .
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sentence is  ['that', "'s", 'the', 'stool']
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
size of chart is  754
got chart
norm score is  -30.2660227905
doing updates with learning rate  0.0319605779545
Deleting 0 entries of the total 2322
done io
WATCH	that 's the stool .
WATCH	24	((S\NP)\NP)	0.687235974741
WATCH	24	((S\NP)/NP)	0.00246389254056
WATCH	24	((S/NP)/NP)	0.291363168361
WATCH	24	((S/NP)\NP)	0.0189369643577
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  did you eat it ?
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  did you eat it ?
making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  did you eat it ?
making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  did you eat it ?
making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  did you eat it ?

got training pair
Sent : did you eat it ?
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
sentence is  ['did', 'you', 'eat', 'it']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sem is  lambda $0_{e}.n|milk($0)
size of chart is  715
got chart
norm score is  -24.8958900726
doing updates with learning rate  0.0316192081304
Deleting 0 entries of the total 2762
done io
WATCH	did you eat it ?
WATCH	25	((S\NP)\NP)	0.698301266773
WATCH	25	((S\NP)/NP)	0.00219185341049
WATCH	25	((S/NP)/NP)	0.282055836084
WATCH	25	((S/NP)\NP)	0.0174510437328
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  eq(pro:dem|that,det|the($1,n|stool($1)),$0)
making  pro:dem|that,det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1)),$0)
making  n|stool($1)
making  $1
making  $0)
sentence is  you ate it .
making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  you ate it .
making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  you ate it .
making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  you ate it .
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you ate it .

got training pair
Sent : you ate it .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sentence is  ['you', 'ate', 'it']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sem is  lambda $0_{e}.n|milk($0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
size of chart is  289
got chart
norm score is  -16.4649550747
doing updates with learning rate  0.0312859340997
Deleting 0 entries of the total 2907
done io
WATCH	you ate it .
WATCH	26	((S\NP)\NP)	0.693592607505
WATCH	26	((S\NP)/NP)	0.00217728396117
WATCH	26	((S/NP)/NP)	0.286533408306
WATCH	26	((S/NP)\NP)	0.0176967002275
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
making  v|eat(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  milk ?
making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  milk ?
making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  milk ?
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  milk ?
making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  milk ?

got training pair
Sent : milk ?
Cat : Syn:lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sentence is  ['milk']
sem is  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sem is  lambda $0_{e}.n|milk($0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
size of chart is  5
got chart
norm score is  -12.0193628453
doing updates with learning rate  0.0309604610838
Deleting 0 entries of the total 2912
done io
WATCH	milk ?
WATCH	27	((S\NP)\NP)	0.693616483977
WATCH	27	((S\NP)/NP)	0.00217796751352
WATCH	27	((S/NP)/NP)	0.286541548484
WATCH	27	((S/NP)\NP)	0.017664000025
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
making  v|eat&PAST(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
sentence is  you don 't want milk .
making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  you don 't want milk .
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you don 't want milk .
making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  you don 't want milk .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you don 't want milk .

got training pair
Sent : you don 't want milk .
Cat : S:lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['you', 'don', "'t", 'want', 'milk']
sem is  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
sem is  lambda $0_{e}.n|milk($0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  3251
got chart
norm score is  -30.0058166918
doing updates with learning rate  0.030642508684
Deleting 0 entries of the total 4746
done io
WATCH	you don 't want milk .
WATCH	28	((S\NP)\NP)	0.715057636432
WATCH	28	((S\NP)/NP)	0.00220783996224
WATCH	28	((S/NP)/NP)	0.266348988207
WATCH	28	((S/NP)\NP)	0.016385535398
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|milk($0)
making  n|milk($0)
making  $0
sentence is  you 've just had some juice .
making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you 've just had some juice .
making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  you 've just had some juice .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you 've just had some juice .
making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  you 've just had some juice .

got training pair
Sent : you 've just had some juice .
Cat : Swh:lambda $0_{e}.n|milk($0)
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sentence is  ['you', "'ve", 'just', 'had', 'some', 'juice']
sem is  lambda $0_{e}.n|milk($0)
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
size of chart is  6509
got chart
norm score is  -48.6201191931
doing updates with learning rate  0.0303318100061
Deleting 0 entries of the total 7777
done io
WATCH	you 've just had some juice .
WATCH	29	((S\NP)\NP)	0.718320510701
WATCH	29	((S\NP)/NP)	0.00219613807911
WATCH	29	((S/NP)/NP)	0.263681045
WATCH	29	((S/NP)\NP)	0.0158023062201
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
making  v|want(pro|you,lambda $1_{e}.n|milk($1),$0)
making  pro|you
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  what is that ?
making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  363
got chart
norm score is  -11.4518021568
doing updates with learning rate  0.0300281108495
Deleting 0 entries of the total 8057
done io
WATCH	what is that ?
WATCH	30	((S\NP)\NP)	0.730370713605
WATCH	30	((S\NP)/NP)	0.00195720640679
WATCH	30	((S/NP)/NP)	0.252315271176
WATCH	30	((S/NP)\NP)	0.0153568088124
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
making  aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0)
making  part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0)
making  pro|you
making  qn|some($1,n|juice($1))
making  n|juice($1)
making  $1
making  $0
making  $0
making  adv:int|just($0)
making  $0
sentence is  drink the water .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  drink the water .
making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  drink the water .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  drink the water .
making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  drink the water .

got training pair
Sent : drink the water .
Cat : S:lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
sentence is  ['drink', 'the', 'water']
sem is  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|coffee($0)
size of chart is  292
got chart
norm score is  -24.4369756547
doing updates with learning rate  0.0297311689541
Deleting 7491 entries of the total 8278
done io
WATCH	drink the water .
WATCH	31	((S\NP)\NP)	0.734986894291
WATCH	31	((S\NP)/NP)	0.00180087279806
WATCH	31	((S/NP)/NP)	0.249589981483
WATCH	31	((S/NP)\NP)	0.0136222514287
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  what is that ?
making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|coffee($0)
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
size of chart is  218
got chart
norm score is  -9.93252456926
doing updates with learning rate  0.0294407533
Deleting 0 entries of the total 950
done io
WATCH	what is that ?
WATCH	32	((S\NP)\NP)	0.743830878426
WATCH	32	((S\NP)/NP)	0.0016297759804
WATCH	32	((S/NP)/NP)	0.241256067722
WATCH	32	((S/NP)\NP)	0.0132832778712
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
making  v|drink(pro|you,det|the($1,n|water($1)),$0)
making  pro|you
making  det|the($1,n|water($1))
making  n|water($1)
making  $1
making  $0
sentence is  coffee .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  coffee .
making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  coffee .
making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  coffee .
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  coffee .

got training pair
Sent : coffee .
Cat : S:lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
sentence is  ['coffee']
sem is  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|coffee($0)
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sem is  lambda $0_{ev}.v|go(pro|you,$0)
size of chart is  5
got chart
norm score is  -10.0531526393
doing updates with learning rate  0.0291566434574
Deleting 0 entries of the total 955
done io
WATCH	coffee .
WATCH	33	((S\NP)\NP)	0.743855146883
WATCH	33	((S\NP)/NP)	0.00162982542113
WATCH	33	((S/NP)/NP)	0.241258914498
WATCH	33	((S/NP)\NP)	0.0132561131982
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  he 's drinking his coffee .
making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  he 's drinking his coffee .
making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  he 's drinking his coffee .
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  he 's drinking his coffee .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  he 's drinking his coffee .

got training pair
Sent : he 's drinking his coffee .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sentence is  ['he', "'s", 'drinking', 'his', 'coffee']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|coffee($0)
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
size of chart is  3215
got chart
norm score is  -34.0013137541
doing updates with learning rate  0.02887862898
Deleting 0 entries of the total 2802
done io
WATCH	he 's drinking his coffee .
WATCH	34	((S\NP)\NP)	0.701646235021
WATCH	34	((S\NP)/NP)	0.00157441774615
WATCH	34	((S/NP)/NP)	0.284703931306
WATCH	34	((S/NP)\NP)	0.0120754159272
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|coffee($0)
making  n|coffee($0)
making  $0
sentence is  you go .
making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  you go .
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  you go .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you go .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you go .

got training pair
Sent : you go .
Cat : Swh:lambda $0_{e}.n|coffee($0)
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sentence is  ['you', 'go']
sem is  lambda $0_{e}.n|coffee($0)
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
size of chart is  58
got chart
norm score is  -12.7449413557
doing updates with learning rate  0.0286065088411
Deleting 0 entries of the total 2857
done io
WATCH	you go .
WATCH	35	((S\NP)\NP)	0.714062747746
WATCH	35	((S\NP)/NP)	0.00160211096043
WATCH	35	((S/NP)/NP)	0.272789617881
WATCH	35	((S/NP)\NP)	0.0115455234123
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
making  part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0)
making  pro|he
making  pro:poss:det|his($1,n|coffee($1))
making  n|coffee($1)
making  $1
making  $0
making  $0
sentence is  later we 'll have a cookie .
making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  later we 'll have a cookie .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  later we 'll have a cookie .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  later we 'll have a cookie .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  later we 'll have a cookie .

got training pair
Sent : later we 'll have a cookie .
Cat : S:lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['later', 'we', "'ll", 'have', 'a', 'cookie']
sem is  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  6190
got chart
norm score is  -44.4250807661
doing updates with learning rate  0.0283400909068
Deleting 0 entries of the total 5881
done io
WATCH	later we 'll have a cookie .
WATCH	36	((S\NP)\NP)	0.689483570674
WATCH	36	((S\NP)/NP)	0.00155179402625
WATCH	36	((S/NP)/NP)	0.298255796923
WATCH	36	((S/NP)\NP)	0.0107088383776
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|go(pro|you,$0)
making  v|go(pro|you,$0)
making  pro|you
making  $0
sentence is  we 'll have a cookie later .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  we 'll have a cookie later .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  we 'll have a cookie later .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  we 'll have a cookie later .
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  we 'll have a cookie later .

got training pair
Sent : we 'll have a cookie later .
Cat : S:lambda $0_{ev}.v|go(pro|you,$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sentence is  ['we', "'ll", 'have', 'a', 'cookie', 'later', '.']
sem is  lambda $0_{ev}.v|go(pro|you,$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
size of chart is  9091
got chart
norm score is  -33.2880708409
doing updates with learning rate  0.0280791914453
Deleting 0 entries of the total 7543
done io
WATCH	we 'll have a cookie later .
WATCH	37	((S\NP)\NP)	0.645642265963
WATCH	37	((S\NP)/NP)	0.00145292303994
WATCH	37	((S/NP)/NP)	0.342839567606
WATCH	37	((S/NP)\NP)	0.0100652433919
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  510
got chart
norm score is  -14.2145443017
doing updates with learning rate  0.0278236346674
Deleting 0 entries of the total 7807
done io
WATCH	what 's that ?
WATCH	38	((S\NP)\NP)	0.640940783951
WATCH	38	((S\NP)/NP)	0.00142887229494
WATCH	38	((S/NP)/NP)	0.347448100329
WATCH	38	((S/NP)\NP)	0.0101822434249
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
making  aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0)
making  v|have(pro|we,det|a($1,n|cookie($1)),$0)
making  pro|we
making  det|a($1,n|cookie($1))
making  n|cookie($1)
making  $1
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  your hat ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  your hat ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  your hat ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  your hat ?
making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  your hat ?

got training pair
Sent : your hat ?
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sentence is  ['your', 'hat']
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
size of chart is  105
got chart
norm score is  -17.7019767741
doing updates with learning rate  0.0275732522983
Deleting 0 entries of the total 7896
done io
WATCH	your hat ?
WATCH	39	((S\NP)\NP)	0.640111883686
WATCH	39	((S\NP)/NP)	0.00142679487821
WATCH	39	((S/NP)/NP)	0.348278117117
WATCH	39	((S/NP)\NP)	0.0101832043192
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  and what did you do with it ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  and what did you do with it ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  and what did you do with it ?
making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  and what did you do with it ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  and what did you do with it ?

got training pair
Sent : and what did you do with it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['and', 'what', 'did', 'you', 'do', 'with', 'it']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  11712
got chart
norm score is  -47.5783548234
doing updates with learning rate  0.0273278831761
Deleting 0 entries of the total 11135
done io
WATCH	and what did you do with it ?
WATCH	40	((S\NP)\NP)	0.619214548019
WATCH	40	((S\NP)/NP)	0.00134001713263
WATCH	40	((S/NP)/NP)	0.370055075332
WATCH	40	((S/NP)\NP)	0.00939035951611
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
making  Q(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  give dolly her bottle .
making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  give dolly her bottle .
making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  give dolly her bottle .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  give dolly her bottle .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  give dolly her bottle .

got training pair
Sent : give dolly her bottle .
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['give', 'dolly', 'her', 'bottle']
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
size of chart is  1594
got chart
norm score is  -41.210131068
doing updates with learning rate  0.0270873728761
Deleting 10891 entries of the total 11869
done io
WATCH	give dolly her bottle .
WATCH	41	((S\NP)\NP)	0.608778105762
WATCH	41	((S\NP)/NP)	0.0012970118861
WATCH	41	((S/NP)/NP)	0.38031598249
WATCH	41	((S/NP)\NP)	0.0096088998617
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  what are you doing ?
making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
sentence is  ['what', 'are', 'you', 'doing']
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&PAST($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sem is  lambda $0_{e}.n|bottle($0)
size of chart is  1493
got chart
norm score is  -26.8919044888
doing updates with learning rate  0.0268515733591
Deleting 0 entries of the total 1647
done io
WATCH	what are you doing ?
WATCH	42	((S\NP)\NP)	0.591458250477
WATCH	42	((S\NP)/NP)	0.0012545318715
WATCH	42	((S/NP)/NP)	0.3989763168
WATCH	42	((S/NP)\NP)	0.00831090085109
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
making  pro|you
making  lambda $1_{e}.n|doll-DIM($1)
making  n|doll-DIM($1)
making  $1
making  pro:poss:det|her($2,n|bottle($2))
making  n|bottle($2)
making  $2
making  $0
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  what are you doing ?
making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : S:lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sentence is  ['what', 'are', 'you', 'doing', '?']
sem is  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sem is  lambda $0_{e}.n|bottle($0)
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
size of chart is  1648
got chart
norm score is  -29.2443660276
doing updates with learning rate  0.0266203426413
Deleting 0 entries of the total 2093
done io
WATCH	what are you doing ?
WATCH	43	((S\NP)\NP)	0.577026984911
WATCH	43	((S\NP)/NP)	0.00114925568575
WATCH	43	((S/NP)/NP)	0.413675171005
WATCH	43	((S/NP)\NP)	0.00814858839877
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  bottle ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  bottle ?
making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  bottle ?
making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  bottle ?
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  bottle ?

got training pair
Sent : bottle ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sentence is  ['bottle']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sem is  lambda $0_{e}.n|bottle($0)
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
size of chart is  4
got chart
norm score is  -9.49845840211
doing updates with learning rate  0.026393544485
Deleting 0 entries of the total 2096
done io
WATCH	bottle ?
WATCH	44	((S\NP)\NP)	0.577038578027
WATCH	44	((S\NP)/NP)	0.0011490476648
WATCH	44	((S/NP)/NP)	0.413683862747
WATCH	44	((S/NP)\NP)	0.00812851156206
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  the hat ?
making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  the hat ?
making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  the hat ?
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  the hat ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  the hat ?

got training pair
Sent : the hat ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['the', 'hat']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|bottle($0)
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  71
got chart
norm score is  -13.2242921546
doing updates with learning rate  0.0261710481075
Deleting 0 entries of the total 2152
done io
WATCH	the hat ?
WATCH	45	((S\NP)\NP)	0.577049449367
WATCH	45	((S\NP)/NP)	0.00114882169457
WATCH	45	((S/NP)/NP)	0.413693565463
WATCH	45	((S/NP)\NP)	0.00810816347541
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|bottle($0)
making  n|bottle($0)
making  $0
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  he doesn 't have a hat .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  he doesn 't have a hat .
making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  he doesn 't have a hat .

got training pair
Sent : he doesn 't have a hat .
Cat : Swh:lambda $0_{e}.n|bottle($0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
sentence is  ['he', 'doesn', "'t", 'have', 'a', 'hat']
sem is  lambda $0_{e}.n|bottle($0)
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soldier-PL($0)
size of chart is  3185
got chart
norm score is  -39.6606934931
doing updates with learning rate  0.0259527279087
Deleting 0 entries of the total 3704
done io
WATCH	he doesn 't have a hat .
WATCH	46	((S\NP)\NP)	0.58076865093
WATCH	46	((S\NP)/NP)	0.00115663445994
WATCH	46	((S/NP)/NP)	0.410102032124
WATCH	46	((S/NP)\NP)	0.00797268248622
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
making  Q(det|the($1,n|hat($1)),$0)
making  det|the($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
Is Q
sentence is  what is that ?
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  what is that ?
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soldier-PL($0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
size of chart is  326
got chart
norm score is  -9.96342446068
doing updates with learning rate  0.0257384632137
Deleting 0 entries of the total 3933
done io
WATCH	what is that ?
WATCH	47	((S\NP)\NP)	0.59514819997
WATCH	47	((S\NP)/NP)	0.00105594915925
WATCH	47	((S/NP)/NP)	0.395798668944
WATCH	47	((S/NP)\NP)	0.00799718192625
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  soldiers .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  soldiers .
making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  soldiers .
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  soldiers .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  soldiers .

got training pair
Sent : soldiers .
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['soldiers']
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soldier-PL($0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  4
got chart
norm score is  -10.3934777993
doing updates with learning rate  0.025528138032
Deleting 0 entries of the total 3937
done io
WATCH	soldiers .
WATCH	48	((S\NP)\NP)	0.595159396163
WATCH	48	((S\NP)/NP)	0.00105568889873
WATCH	48	((S/NP)/NP)	0.395808073998
WATCH	48	((S/NP)\NP)	0.00797684094036
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  bring it here .
making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  bring it here .
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  bring it here .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  bring it here .
making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  bring it here .

got training pair
Sent : bring it here .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sentence is  ['bring', 'it', 'here']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|soldier-PL($0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
size of chart is  237
got chart
norm score is  -21.0670542038
doing updates with learning rate  0.0253216408296
Deleting 0 entries of the total 4120
done io
WATCH	bring it here .
WATCH	49	((S\NP)\NP)	0.599572987426
WATCH	49	((S\NP)/NP)	0.00101743364239
WATCH	49	((S/NP)/NP)	0.39179533146
WATCH	49	((S/NP)\NP)	0.00761424747083
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|soldier-PL($0)
making  n|soldier-PL($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  what 's that ?
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : Swh:lambda $0_{e}.n|soldier-PL($0)
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{e}.n|soldier-PL($0)
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
size of chart is  358
got chart
norm score is  -11.8064853884
doing updates with learning rate  0.0251188643151
Deleting 0 entries of the total 4287
done io
WATCH	what 's that ?
WATCH	50	((S\NP)\NP)	0.598521422495
WATCH	50	((S\NP)/NP)	0.00101293283126
WATCH	50	((S/NP)/NP)	0.392848490938
WATCH	50	((S/NP)\NP)	0.00761715373576
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
making  v|bring(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  adv:loc|here($0)
making  $0
sentence is  that 's Jack and Jill .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's Jack and Jill .
making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  that 's Jack and Jill .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  that 's Jack and Jill .
making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  that 's Jack and Jill .

got training pair
Sent : that 's Jack and Jill .
Cat : S:lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sentence is  ['that', "'s", 'Jack', 'and', 'Jill']
sem is  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
size of chart is  3093
got chart
norm score is  -28.9998910502
doing updates with learning rate  0.0249197052378
Deleting 4922 entries of the total 5973
done io
WATCH	that 's Jack and Jill .
WATCH	51	((S\NP)\NP)	0.576272194428
WATCH	51	((S\NP)/NP)	0.00097490488973
WATCH	51	((S/NP)/NP)	0.415437658329
WATCH	51	((S/NP)\NP)	0.00731524235354
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  he doesn 't have a hat .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  he doesn 't have a hat .

got training pair
Sent : he doesn 't have a hat .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sentence is  ['he', 'doesn', "'t", 'have', 'a', 'hat']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
size of chart is  8873
got chart
norm score is  -21.5293376637
doing updates with learning rate  0.0247240641974
Deleting 0 entries of the total 5205
done io
WATCH	he doesn 't have a hat .
WATCH	52	((S\NP)\NP)	0.556834482782
WATCH	52	((S\NP)/NP)	0.000941642930274
WATCH	52	((S/NP)/NP)	0.435041437568
WATCH	52	((S/NP)\NP)	0.00718243671948
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
making  and(n:prop|Jack,n:prop|Jill),$0)
making  n:prop|Jack
making  n:prop|Jill
making  $0)
sentence is  Eve has a hat .
making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  Eve has a hat .
making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  Eve has a hat .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  Eve has a hat .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  Eve has a hat .

got training pair
Sent : Eve has a hat .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
sentence is  ['Eve', 'has', 'a', 'hat']
sem is  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
size of chart is  1633
got chart
norm score is  -24.3177894693
doing updates with learning rate  0.0245318454645
Deleting 0 entries of the total 5888
done io
WATCH	Eve has a hat .
WATCH	53	((S\NP)\NP)	0.547264300663
WATCH	53	((S\NP)/NP)	0.000937937208455
WATCH	53	((S/NP)/NP)	0.444659186932
WATCH	53	((S/NP)\NP)	0.00713857519646
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
making  v|have(pro|he,det|a($1,n|hat($1)),$0)
making  pro|he
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
making  $0
making  $0)
sentence is  you 're gonna find it .
making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  you 're gonna find it .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  you 're gonna find it .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  you 're gonna find it .
making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  you 're gonna find it .

got training pair
Sent : you 're gonna find it .
Cat : S:lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
sentence is  ['you', "'re", 'gonna', 'find', 'it']
sem is  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.n|man($0)
size of chart is  3821
got chart
norm score is  -35.8831073019
doing updates with learning rate  0.0243429568107
Deleting 0 entries of the total 8045
done io
WATCH	you 're gonna find it .
WATCH	54	((S\NP)\NP)	0.579132786383
WATCH	54	((S\NP)/NP)	0.000959060867361
WATCH	54	((S/NP)/NP)	0.413273822649
WATCH	54	((S/NP)\NP)	0.00663433010091
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
making  n:prop|Eve
making  det|a($1,n|hat($1))
making  n|hat($1)
making  $1
making  $0
sentence is  there .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  there .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  there .
making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  there .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  there .

got training pair
Sent : there .
Cat : S:lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sentence is  ['there']
sem is  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.n|man($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
size of chart is  5
got chart
norm score is  -5.73069244249
doing updates with learning rate  0.0241573093489
Deleting 0 entries of the total 8049
done io
WATCH	there .
WATCH	55	((S\NP)\NP)	0.579141127629
WATCH	55	((S\NP)/NP)	0.000958472693441
WATCH	55	((S/NP)/NP)	0.413284228966
WATCH	55	((S/NP)\NP)	0.0066161707116
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|find(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
sentence is  man ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  man ?
making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  man ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  man ?
making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  man ?

got training pair
Sent : man ?
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
sentence is  ['man', '?']
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.n|man($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
size of chart is  59
got chart
norm score is  -18.5918795376
doing updates with learning rate  0.0239748173813
Deleting 0 entries of the total 8101
done io
WATCH	man ?
WATCH	56	((S\NP)\NP)	0.578207051132
WATCH	56	((S\NP)/NP)	0.000956305290341
WATCH	56	((S/NP)/NP)	0.414224026665
WATCH	56	((S/NP)\NP)	0.00661261691268
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  who is that man ?
making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  who is that man ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  who is that man ?
making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  who is that man ?
making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  who is that man ?

got training pair
Sent : who is that man ?
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sentence is  ['who', 'is', 'that', 'man']
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.n|man($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
size of chart is  386
got chart
norm score is  -25.6442213087
doing updates with learning rate  0.0237953982564
Deleting 0 entries of the total 8281
done io
WATCH	who is that man ?
WATCH	57	((S\NP)\NP)	0.586747849134
WATCH	57	((S\NP)/NP)	0.000873300748545
WATCH	57	((S/NP)/NP)	0.405749424829
WATCH	57	((S/NP)\NP)	0.00662942528892
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|man($0)
making  n|man($0)
making  $0
sentence is  Eve ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  Eve ?
making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  Eve ?
making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  Eve ?
making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  Eve ?

got training pair
Sent : Eve ?
Cat : Swh:lambda $0_{e}.n|man($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
sentence is  ['Eve']
sem is  lambda $0_{e}.n|man($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sem is  lambda $0_{ev}.adv:loc|down($0)
size of chart is  5
got chart
norm score is  -7.3598659959
doing updates with learning rate  0.0236189722338
Deleting 0 entries of the total 8286
done io
WATCH	Eve ?
WATCH	58	((S\NP)\NP)	0.586756936185
WATCH	58	((S\NP)/NP)	0.00087270554702
WATCH	58	((S/NP)/NP)	0.405759525196
WATCH	58	((S/NP)\NP)	0.00661083307247
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
making  eq($0,det|that($2,n|man($2)),$1)
making  $0,det|that($2,n|man($2)),$1)
making  det|that($2,n|man($2)),$1)
making  n|man($2)
making  $2
making  $1)
sentence is  you 're Eve .
making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  you 're Eve .
making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  you 're Eve .
making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  you 're Eve .
making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  you 're Eve .

got training pair
Sent : you 're Eve .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sentence is  ['you', "'re", 'Eve']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sem is  lambda $0_{ev}.adv:loc|down($0)
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
size of chart is  207
got chart
norm score is  -16.2480035756
doing updates with learning rate  0.0234454623554
Deleting 0 entries of the total 8389
done io
WATCH	you 're Eve .
WATCH	59	((S\NP)\NP)	0.620493579231
WATCH	59	((S\NP)/NP)	0.000894874991378
WATCH	59	((S/NP)/NP)	0.372562818644
WATCH	59	((S/NP)\NP)	0.00604872713326
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(n:prop|Eve,$0)
making  Q(n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
Is Q
sentence is  down .
making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  down .
making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  down .
making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  down .
making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  down .

got training pair
Sent : down .
Cat : Syn:lambda $0_{ev}.Q(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sentence is  ['down', '.']
sem is  lambda $0_{ev}.Q(n:prop|Eve,$0)
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sem is  lambda $0_{ev}.adv:loc|down($0)
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
size of chart is  45
got chart
norm score is  -16.4490764761
doing updates with learning rate  0.023274794324
Deleting 0 entries of the total 8431
done io
WATCH	down .
WATCH	60	((S\NP)\NP)	0.620728907246
WATCH	60	((S\NP)/NP)	0.000894432437052
WATCH	60	((S/NP)/NP)	0.372349022907
WATCH	60	((S/NP)\NP)	0.00602763740934
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
making  eq(pro|you,n:prop|Eve,$0)
making  pro|you,n:prop|Eve,$0)
making  n:prop|Eve,$0)
making  $0)
sentence is  you write a letter .
making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  you write a letter .
making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  you write a letter .
making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  you write a letter .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  you write a letter .

got training pair
Sent : you write a letter .
Cat : S:lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sentence is  ['you', 'write', 'a', 'letter']
sem is  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
sem is  lambda $0_{ev}.adv:loc|down($0)
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
size of chart is  522
got chart
norm score is  -29.6980746813
doing updates with learning rate  0.0231068963886
Deleting 7584 entries of the total 8766
done io
WATCH	you write a letter .
WATCH	61	((S\NP)\NP)	0.648564519624
WATCH	61	((S\NP)/NP)	0.00166330280152
WATCH	61	((S/NP)/NP)	0.344272378864
WATCH	61	((S/NP)\NP)	0.00549979871003
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|down($0)
making  adv:loc|down($0)
making  $0
sentence is  the pencil ?
making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  the pencil ?
making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  the pencil ?
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  the pencil ?
making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  the pencil ?

got training pair
Sent : the pencil ?
Cat : S:lambda $0_{ev}.adv:loc|down($0)
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sentence is  ['the', 'pencil', '?']
sem is  lambda $0_{ev}.adv:loc|down($0)
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
size of chart is  201
got chart
norm score is  -26.1419199759
doing updates with learning rate  0.0229416992343
Deleting 0 entries of the total 1346
done io
WATCH	the pencil ?
WATCH	62	((S\NP)\NP)	0.671968858834
WATCH	62	((S\NP)/NP)	0.0016101277558
WATCH	62	((S/NP)/NP)	0.32132409941
WATCH	62	((S/NP)\NP)	0.0050969139999
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
making  v|write(pro|you,det|a($1,n|letter($1)),$0)
making  pro|you
making  det|a($1,n|letter($1))
making  n|letter($1)
making  $1
making  $0
sentence is  that 's your pencil .
making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  that 's your pencil .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  that 's your pencil .
making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  that 's your pencil .
making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  that 's your pencil .

got training pair
Sent : that 's your pencil .
Cat : S:lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
sentence is  ['that', "'s", 'your', 'pencil']
sem is  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  1801
got chart
norm score is  -23.2862242451
doing updates with learning rate  0.0227791358797
Deleting 0 entries of the total 2105
done io
WATCH	that 's your pencil .
WATCH	63	((S\NP)\NP)	0.669018356407
WATCH	63	((S\NP)/NP)	0.00159987479546
WATCH	63	((S/NP)/NP)	0.324328305767
WATCH	63	((S/NP)\NP)	0.00505346303106
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
making  Q(det|the($1,n|pencil($1)),$0)
making  det|the($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
Is Q
sentence is  the man ?
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  the man ?
making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  the man ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  the man ?
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  the man ?

got training pair
Sent : the man ?
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sentence is  ['the', 'man']
sem is  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
size of chart is  95
got chart
norm score is  -15.1073743491
doing updates with learning rate  0.0226191415778
Deleting 0 entries of the total 2166
done io
WATCH	the man ?
WATCH	64	((S\NP)\NP)	0.673198045161
WATCH	64	((S\NP)/NP)	0.00160657320192
WATCH	64	((S/NP)/NP)	0.320221314342
WATCH	64	((S/NP)\NP)	0.00497406729489
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
making  pro:poss:det|your($1,n|pencil($1)),$0)
making  n|pencil($1)
making  $1
making  $0)
sentence is  what are you doing in the corner ?
making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  what are you doing in the corner ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  what are you doing in the corner ?
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  what are you doing in the corner ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what are you doing in the corner ?

got training pair
Sent : what are you doing in the corner ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['what', 'are', 'you', 'doing', 'in', 'the', 'corner']
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  16654
got chart
norm score is  -45.4521210779
doing updates with learning rate  0.0224616537229
Deleting 0 entries of the total 6560
done io
WATCH	what are you doing in the corner ?
WATCH	65	((S\NP)\NP)	0.6568113884
WATCH	65	((S\NP)/NP)	0.0015709517476
WATCH	65	((S/NP)/NP)	0.337181297751
WATCH	65	((S/NP)\NP)	0.00443636210127
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
making  Q(det|the($1,n|man($1)),$0)
making  det|the($1,n|man($1)),$0)
making  n|man($1)
making  $1
making  $0)
Is Q
sentence is  you 're going to read .
making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  you 're going to read .
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  you 're going to read .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you 're going to read .
making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  you 're going to read .

got training pair
Sent : you 're going to read .
Cat : Syn:lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
sentence is  ['you', "'re", 'going', 'to', 'read']
sem is  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|shoe($0)
size of chart is  5147
got chart
norm score is  -38.555571298
doing updates with learning rate  0.0223066117621
Deleting 0 entries of the total 8143
done io
WATCH	you 're going to read .
WATCH	66	((S\NP)\NP)	0.656487167059
WATCH	66	((S\NP)/NP)	0.00156722638638
WATCH	66	((S/NP)/NP)	0.337518799069
WATCH	66	((S/NP)\NP)	0.00442680748534
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|in(det|the($2,n|corner($2)),$1)
making  det|the($2,n|corner($2))
making  n|corner($2)
making  $2
making  $1
sentence is  what is that ?
making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  what is that ?
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|be&PRES($0($1),$1),prep|in(det|the($2,n|corner($2)),$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|shoe($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
size of chart is  501
got chart
norm score is  -9.74357713818
doing updates with learning rate  0.022153957111
Deleting 0 entries of the total 8312
done io
WATCH	what is that ?
WATCH	67	((S\NP)\NP)	0.669019301548
WATCH	67	((S\NP)/NP)	0.00145823171644
WATCH	67	((S/NP)/NP)	0.325178803153
WATCH	67	((S/NP)\NP)	0.00434366358292
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
making  and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0))
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  $0
sentence is  shoe .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  shoe .
making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  shoe .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  shoe .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  shoe .

got training pair
Sent : shoe .
Cat : S:lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sentence is  ['shoe']
sem is  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|shoe($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
size of chart is  4
got chart
norm score is  -7.66017835499
doing updates with learning rate  0.0220036330731
Deleting 0 entries of the total 8316
done io
WATCH	shoe .
WATCH	68	((S\NP)\NP)	0.669030309724
WATCH	68	((S\NP)/NP)	0.00145540950698
WATCH	68	((S/NP)/NP)	0.325184484384
WATCH	68	((S/NP)\NP)	0.00432979638476
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's Racketyboom .
making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  that 's Racketyboom .

got training pair
Sent : that 's Racketyboom .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sentence is  ['that', "'s", 'Racketyboom']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|shoe($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
size of chart is  137
got chart
norm score is  -23.2363345339
doing updates with learning rate  0.0218555847641
Deleting 0 entries of the total 8385
done io
WATCH	that 's Racketyboom .
WATCH	69	((S\NP)\NP)	0.668120199675
WATCH	69	((S\NP)/NP)	0.00145056232109
WATCH	69	((S/NP)/NP)	0.326103247784
WATCH	69	((S/NP)\NP)	0.00432599021994
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|shoe($0)
making  n|shoe($0)
making  $0
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  that 's Racketyboom .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  that 's Racketyboom .

got training pair
Sent : that 's Racketyboom .
Cat : Swh:lambda $0_{e}.n|shoe($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sentence is  ['that', "'s", 'Racketyboom']
sem is  lambda $0_{e}.n|shoe($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
size of chart is  152
got chart
norm score is  -11.5165251228
doing updates with learning rate  0.0217097590391
Deleting 0 entries of the total 8425
done io
WATCH	that 's Racketyboom .
WATCH	70	((S\NP)\NP)	0.66750170586
WATCH	70	((S\NP)/NP)	0.00144630275732
WATCH	70	((S/NP)/NP)	0.326731962798
WATCH	70	((S/NP)\NP)	0.00432002858408
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  Eve read book .
making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  Eve read book .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  Eve read book .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  Eve read book .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Eve read book .

got training pair
Sent : Eve read book .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sentence is  ['Eve', 'read', 'book']
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
size of chart is  203
got chart
norm score is  -24.5188279364
doing updates with learning rate  0.0215661044238
Deleting 7317 entries of the total 8588
done io
WATCH	Eve read book .
WATCH	71	((S\NP)\NP)	0.672125108993
WATCH	71	((S\NP)/NP)	0.0014735028253
WATCH	71	((S/NP)/NP)	0.322071104082
WATCH	71	((S/NP)\NP)	0.0043302840992
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0)
making  pro:dem|that,n:prop|Racketyboom,$0)
making  n:prop|Racketyboom,$0)
making  $0)
sentence is  you read the book .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  you read the book .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  you read the book .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  you read the book .
making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  you read the book .

got training pair
Sent : you read the book .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
sentence is  ['you', 'read', 'the', 'book']
sem is  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(n:prop|Mommy)
size of chart is  555
got chart
norm score is  -20.1897974718
doing updates with learning rate  0.0214245710482
Deleting 0 entries of the total 1679
done io
WATCH	you read the book .
WATCH	72	((S\NP)\NP)	0.68606923751
WATCH	72	((S\NP)/NP)	0.00152198934421
WATCH	72	((S/NP)/NP)	0.308277783112
WATCH	72	((S/NP)\NP)	0.00413099003367
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
making  n:prop|Eve
making  lambda $1_{e}.n|book($1)
making  n|book($1)
making  $1
making  $0
sentence is  Mommy can 't read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  Mommy can 't read .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Mommy can 't read .
making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  Mommy can 't read .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  Mommy can 't read .

got training pair
Sent : Mommy can 't read .
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sentence is  ['Mommy', 'can', "'t", 'read']
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(n:prop|Mommy)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
size of chart is  497
got chart
norm score is  -24.4865392175
doing updates with learning rate  0.0212851105845
Deleting 0 entries of the total 2009
done io
WATCH	Mommy can 't read .
WATCH	73	((S\NP)\NP)	0.678480378433
WATCH	73	((S\NP)/NP)	0.00149280179775
WATCH	73	((S/NP)/NP)	0.315830782092
WATCH	73	((S/NP)\NP)	0.00419603767797
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
making  pro|you
making  det|the($1,n|book($1))
making  n|book($1)
making  $1
making  $0
sentence is  Mommy 's busy .
making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Mommy 's busy .
making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  Mommy 's busy .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  Mommy 's busy .
making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  Mommy 's busy .

got training pair
Sent : Mommy 's busy .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sentence is  ['Mommy', "'s", 'busy']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(n:prop|Mommy)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
size of chart is  291
got chart
norm score is  -24.1936259856
doing updates with learning rate  0.0211476761869
Deleting 0 entries of the total 2212
done io
WATCH	Mommy 's busy .
WATCH	74	((S\NP)\NP)	0.68451242026
WATCH	74	((S\NP)/NP)	0.00148932246265
WATCH	74	((S/NP)/NP)	0.309980675635
WATCH	74	((S/NP)\NP)	0.00401758164186
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  $0)
sentence is  Eve read .
making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  Eve read .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  Eve read .
making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  Eve read .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  Eve read .

got training pair
Sent : Eve read .
Cat : S:lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sentence is  ['Eve', 'read']
sem is  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
sem is  adj|busy(n:prop|Mommy)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
size of chart is  69
got chart
norm score is  -12.3839689487
doing updates with learning rate  0.0210122224352
Deleting 0 entries of the total 2261
done io
WATCH	Eve read .
WATCH	75	((S\NP)\NP)	0.691537428578
WATCH	75	((S\NP)/NP)	0.00150127178999
WATCH	75	((S/NP)/NP)	0.30304721347
WATCH	75	((S/NP)\NP)	0.00391408616128
getting topparses
outputting cat probs
done with sent


making  adj|busy(n:prop|Mommy)
making  n:prop|Mommy
sentence is  you read about the choochoo .
making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  you read about the choochoo .
making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  you read about the choochoo .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you read about the choochoo .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you read about the choochoo .

got training pair
Sent : you read about the choochoo .
Cat : St:adj|busy(n:prop|Mommy)
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sentence is  ['you', 'read', 'about', 'the', 'choochoo']
sem is  adj|busy(n:prop|Mommy)
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
size of chart is  2541
got chart
norm score is  -36.9958421668
doing updates with learning rate  0.0208787052798
Deleting 0 entries of the total 3560
done io
WATCH	you read about the choochoo .
WATCH	76	((S\NP)\NP)	0.692675237674
WATCH	76	((S\NP)/NP)	0.00154495756445
WATCH	76	((S/NP)/NP)	0.301894464762
WATCH	76	((S/NP)\NP)	0.00388533999924
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
making  v|read&ZERO(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
sentence is  Mommy 'll read later .
making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  Mommy 'll read later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  Mommy 'll read later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  Mommy 'll read later .
making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  Mommy 'll read later .

got training pair
Sent : Mommy 'll read later .
Cat : S:lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sentence is  ['Mommy', "'ll", 'read', 'later', '.']
sem is  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
size of chart is  2641
got chart
norm score is  -30.7751103898
doing updates with learning rate  0.0207470819903
Deleting 0 entries of the total 4803
done io
WATCH	Mommy 'll read later .
WATCH	77	((S\NP)\NP)	0.699612807752
WATCH	77	((S\NP)/NP)	0.00155773488141
WATCH	77	((S/NP)/NP)	0.295045785416
WATCH	77	((S/NP)\NP)	0.00378367194997
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
making  prep|about(det|the($1,n|+on|choo+on|choo($1)),$0)
making  det|the($1,n|+on|choo+on|choo($1))
making  n|+on|choo+on|choo($1)
making  $1
making  $0
sentence is  I 'll read to you later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  I 'll read to you later .
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  I 'll read to you later .
making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  I 'll read to you later .
making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  I 'll read to you later .

got training pair
Sent : I 'll read to you later .
Cat : S:lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sentence is  ['I', "'ll", 'read', 'to', 'you', 'later', '.']
sem is  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
size of chart is  10532
got chart
norm score is  -42.3103217033
doing updates with learning rate  0.0206173111058
Deleting 0 entries of the total 7902
done io
WATCH	I 'll read to you later .
WATCH	78	((S\NP)\NP)	0.700934318498
WATCH	78	((S\NP)/NP)	0.00155789627976
WATCH	78	((S/NP)/NP)	0.29375434904
WATCH	78	((S/NP)\NP)	0.00375343618217
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(n:prop|Mommy,$0),$0)
making  v|read&ZERO(n:prop|Mommy,$0)
making  n:prop|Mommy
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  come ?
making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  come ?
making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  come ?
making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  come ?
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  come ?

got training pair
Sent : come ?
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sentence is  ['come']
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
size of chart is  5
got chart
norm score is  -15.3685584693
doing updates with learning rate  0.0204893523878
Deleting 0 entries of the total 7907
done io
WATCH	come ?
WATCH	79	((S\NP)\NP)	0.700946036179
WATCH	79	((S\NP)/NP)	0.00155514643231
WATCH	79	((S/NP)/NP)	0.293759038431
WATCH	79	((S/NP)\NP)	0.00373977895813
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
making  aux|will(v|read&ZERO(pro|I,$0),$0)
making  v|read&ZERO(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv|later($0)
making  $0
sentence is  you want some milk ?
making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  you want some milk ?
making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  you want some milk ?
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  you want some milk ?
making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  you want some milk ?

got training pair
Sent : you want some milk ?
Cat : S:lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
sentence is  ['you', 'want', 'some', 'milk']
sem is  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sem is  lambda $0_{e}.n|cup($0)
size of chart is  1600
got chart
norm score is  -26.1265606336
doing updates with learning rate  0.0203631667747
Deleting 0 entries of the total 8855
done io
WATCH	you want some milk ?
WATCH	80	((S\NP)\NP)	0.700960603038
WATCH	80	((S\NP)/NP)	0.00155222442801
WATCH	80	((S/NP)/NP)	0.293761204824
WATCH	80	((S/NP)\NP)	0.00372596771041
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
making  Q(v|come(pro|you,$0),$0)
making  v|come(pro|you,$0),$0)
making  pro|you
making  $0
making  $0)
Is Q
sentence is  we 'll have milk for lunch .
making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  we 'll have milk for lunch .
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  we 'll have milk for lunch .
making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  we 'll have milk for lunch .
making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  we 'll have milk for lunch .

got training pair
Sent : we 'll have milk for lunch .
Cat : Syn:lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sentence is  ['we', "'ll", 'have', 'milk', 'for', 'lunch']
sem is  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sem is  lambda $0_{e}.n|cup($0)
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
size of chart is  8515
got chart
norm score is  -43.5838883247
doing updates with learning rate  0.020238716339
Deleting 10982 entries of the total 12344
done io
WATCH	we 'll have milk for lunch .
WATCH	81	((S\NP)\NP)	0.706556638922
WATCH	81	((S\NP)/NP)	0.00156174310691
WATCH	81	((S/NP)/NP)	0.288239389395
WATCH	81	((S/NP)\NP)	0.00364222857564
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
making  pro|you
making  qn|some($1,n|milk($1))
making  n|milk($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  cup ?
making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  cup ?
making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  cup ?
making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  cup ?
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  cup ?

got training pair
Sent : cup ?
Cat : Syn:lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sentence is  ['cup']
sem is  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sem is  lambda $0_{e}.n|cup($0)
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
size of chart is  5
got chart
norm score is  -6.97910238001
doing updates with learning rate  0.0201159642459
Deleting 0 entries of the total 1366
done io
WATCH	cup ?
WATCH	82	((S\NP)\NP)	0.706568771046
WATCH	82	((S\NP)/NP)	0.00155885846226
WATCH	82	((S/NP)/NP)	0.288243906605
WATCH	82	((S/NP)\NP)	0.00362846388667
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
making  aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0)
making  v|have(pro|we,lambda $1_{e}.n|milk($1),$0)
making  pro|we
making  lambda $1_{e}.n|milk($1)
making  n|milk($1)
making  $1
making  $0
making  $0
making  prep|for(lambda $2_{e}.n|lunch($2),$0)
making  lambda $2_{e}.n|lunch($2)
making  n|lunch($2)
making  $2
making  $0
sentence is  that 's not a cup .
making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  that 's not a cup .
making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  that 's not a cup .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  that 's not a cup .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's not a cup .

got training pair
Sent : that 's not a cup .
Cat : S:lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['that', "'s", 'not', 'a', 'cup']
sem is  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
sem is  lambda $0_{e}.n|cup($0)
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  3709
got chart
norm score is  -27.6162375236
doing updates with learning rate  0.0199948747138
Deleting 0 entries of the total 3394
done io
WATCH	that 's not a cup .
WATCH	83	((S\NP)\NP)	0.693853854073
WATCH	83	((S\NP)/NP)	0.00152791271107
WATCH	83	((S/NP)/NP)	0.301086882717
WATCH	83	((S/NP)\NP)	0.00353135049911
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|cup($0)
making  n|cup($0)
making  $0
sentence is  that 's the top .
making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  that 's the top .
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  that 's the top .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's the top .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's the top .

got training pair
Sent : that 's the top .
Cat : Swh:lambda $0_{e}.n|cup($0)
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['that', "'s", 'the', 'top']
sem is  lambda $0_{e}.n|cup($0)
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  560
got chart
norm score is  -16.7771953624
doing updates with learning rate  0.0198754129766
Deleting 0 entries of the total 3619
done io
WATCH	that 's the top .
WATCH	84	((S\NP)\NP)	0.694032861038
WATCH	84	((S\NP)/NP)	0.00152537171256
WATCH	84	((S/NP)/NP)	0.300930109228
WATCH	84	((S/NP)\NP)	0.00351165802104
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  pro:dem|that,det|a($1,n|cup($1)),$0),$0)
making  det|a($1,n|cup($1)),$0),$0)
making  n|cup($1)
making  $1
making  $0),$0)
making  $0)
sentence is  what is that ?
making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
size of chart is  211
got chart
norm score is  -10.5456491202
doing updates with learning rate  0.0197575452474
Deleting 0 entries of the total 3737
done io
WATCH	what is that ?
WATCH	85	((S\NP)\NP)	0.707127724579
WATCH	85	((S\NP)/NP)	0.00140198688959
WATCH	85	((S/NP)/NP)	0.288052588736
WATCH	85	((S/NP)\NP)	0.00341769979463
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  eq(pro:dem|that,det|the($1,n|top($1)),$0)
making  pro:dem|that,det|the($1,n|top($1)),$0)
making  det|the($1,n|top($1)),$0)
making  n|top($1)
making  $1
making  $0)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
size of chart is  179
got chart
norm score is  -9.6645559218
doing updates with learning rate  0.0196412386841
Deleting 0 entries of the total 3767
done io
WATCH	what is that ?
WATCH	86	((S\NP)\NP)	0.718735555475
WATCH	86	((S\NP)/NP)	0.00129493564582
WATCH	86	((S/NP)/NP)	0.276646822664
WATCH	86	((S/NP)\NP)	0.00332268621551
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  what is it ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is it ?

got training pair
Sent : what is it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['what', 'is', 'it']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  125
got chart
norm score is  -15.9163842002
doing updates with learning rate  0.0195264613563
Deleting 0 entries of the total 3797
done io
WATCH	what is it ?
WATCH	87	((S\NP)\NP)	0.724906584238
WATCH	87	((S\NP)/NP)	0.00123867663493
WATCH	87	((S/NP)/NP)	0.270610405816
WATCH	87	((S/NP)\NP)	0.00324433331079
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  the ducks say what ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  the ducks say what ?
making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  the ducks say what ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  the ducks say what ?
making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  the ducks say what ?

got training pair
Sent : the ducks say what ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
sentence is  ['the', 'ducks', 'say', 'what']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|radio($0)
size of chart is  321
got chart
norm score is  -26.5479101111
doing updates with learning rate  0.0194131822135
Deleting 0 entries of the total 3932
done io
WATCH	the ducks say what ?
WATCH	88	((S\NP)\NP)	0.733639056457
WATCH	88	((S\NP)/NP)	0.00115254109471
WATCH	88	((S/NP)/NP)	0.262078803637
WATCH	88	((S/NP)\NP)	0.00312959881112
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
making  lambda $1_{ev}.eq($0,pro|it,$1)
making  eq($0,pro|it,$1)
making  $0,pro|it,$1)
making  pro|it,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|radio($0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  362
got chart
norm score is  -8.39006385911
doing updates with learning rate  0.0193013710544
Deleting 0 entries of the total 4045
done io
WATCH	what is that ?
WATCH	89	((S\NP)\NP)	0.741508722953
WATCH	89	((S\NP)/NP)	0.0010758350696
WATCH	89	((S/NP)/NP)	0.254360217464
WATCH	89	((S/NP)\NP)	0.00305522451345
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  v|say(det|the($2,n|duck-PL($2)),$0,$1)
making  det|the($2,n|duck-PL($2))
making  n|duck-PL($2)
making  $2
making  $0
making  $1
sentence is  radio .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  radio .
making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  radio .
making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  radio .
making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  radio .

got training pair
Sent : radio .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
sentence is  ['radio']
sem is  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|radio($0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sem is  lambda $0_{e}.n|hat($0)
size of chart is  5
got chart
norm score is  -7.53139466642
doing updates with learning rate  0.0191909984985
Deleting 0 entries of the total 4050
done io
WATCH	radio .
WATCH	90	((S\NP)\NP)	0.741520598941
WATCH	90	((S\NP)/NP)	0.00107356644342
WATCH	90	((S/NP)/NP)	0.254362873872
WATCH	90	((S/NP)\NP)	0.00304296074415
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 'll you do with it ?
making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  what 'll you do with it ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  what 'll you do with it ?
making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  what 'll you do with it ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  what 'll you do with it ?

got training pair
Sent : what 'll you do with it ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
sentence is  ['what', "'ll", 'you', 'do', 'with', 'it']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{e}.n|radio($0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|hat($0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|hat($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|hat($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
size of chart is  5247
got chart
norm score is  -38.9924595675
doing updates with learning rate  0.0190820359572
Deleting 4015 entries of the total 5368
done io
WATCH	what 'll you do with it ?
WATCH	91	((S\NP)\NP)	0.724742320072
WATCH	91	((S\NP)/NP)	0.00102605046512
WATCH	91	((S/NP)/NP)	0.271433594821
WATCH	91	((S/NP)\NP)	0.00279803464146
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|radio($0)
making  n|radio($0)
making  $0
sentence is  hat ?
making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  hat ?
making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  hat ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  hat ?
making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  hat ?

got training pair
Sent : hat ?
Cat : Swh:lambda $0_{e}.n|radio($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sentence is  ['hat']
sem is  lambda $0_{e}.n|radio($0)
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
sem is  lambda $0_{e}.n|hat($0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
size of chart is  5
got chart
norm score is  -4.3983204789
doing updates with learning rate  0.0189744556078
Deleting 0 entries of the total 1357
done io
WATCH	hat ?
WATCH	92	((S\NP)\NP)	0.724753232097
WATCH	92	((S\NP)/NP)	0.00102385078932
WATCH	92	((S/NP)/NP)	0.271436383628
WATCH	92	((S/NP)\NP)	0.00278653348521
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
making  aux|will(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
making  prep|with(pro|it,$1)
making  pro|it
making  $1
sentence is  where is your hat ?
making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  where is your hat ?
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  where is your hat ?
making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  where is your hat ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  where is your hat ?

got training pair
Sent : where is your hat ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
sentence is  ['where', 'is', 'your', 'hat']
sem is  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.aux|will(v|do(pro|you,$0,$1),$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1)) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),prep|with(pro|it,$1))   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|hat($0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|hat($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|hat($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  2294
got chart
norm score is  -34.9546210772
doing updates with learning rate  0.0188682303675
Deleting 0 entries of the total 2320
done io
WATCH	where is your hat ?
WATCH	93	((S\NP)\NP)	0.721711829261
WATCH	93	((S\NP)/NP)	0.00101129789633
WATCH	93	((S/NP)/NP)	0.274486678914
WATCH	93	((S/NP)\NP)	0.0027901939282
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|hat($0)
making  n|hat($0)
making  $0
sentence is  I don 't have it .
making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  I don 't have it .
making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  I don 't have it .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  I don 't have it .
making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  I don 't have it .

got training pair
Sent : I don 't have it .
Cat : Swh:lambda $0_{e}.n|hat($0)
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
sentence is  ['I', 'don', "'t", 'have', 'it']
sem is  lambda $0_{e}.n|hat($0)
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|hat($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|hat($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|book($0)
size of chart is  3441
got chart
norm score is  -34.5671639746
doing updates with learning rate  0.0187633338683
Deleting 0 entries of the total 3725
done io
WATCH	I don 't have it .
WATCH	94	((S\NP)\NP)	0.706322651805
WATCH	94	((S\NP)/NP)	0.000987515470855
WATCH	94	((S/NP)/NP)	0.289908621759
WATCH	94	((S/NP)\NP)	0.00278121096571
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
making  pro:poss:det|your($1,n|hat($1)),$0)
making  n|hat($1)
making  $1
making  $0)
sentence is  what do you want me to do ?
making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  what do you want me to do ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want me to do ?
making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  what do you want me to do ?
making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  what do you want me to do ?

got training pair
Sent : what do you want me to do ?
Cat : Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sentence is  ['what', 'do', 'you', 'want', 'me', 'to', 'do', '?']
sem is  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
types dont match 2 :  (Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

(Swh/NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1) NP:pro:poss:det|your($0,n|hat($0))
NOT ADDING THIS
types dont match 3 :  (Swh\NP):lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)   <e,<e,<ev,t>>>   <e,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1) N:lambda $0_{e}.n|hat($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.eqLoc(pro:poss:det|your($2,$0($2)),$1)   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|book($0)
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
size of chart is  15290
got chart
norm score is  -58.2103744539
doing updates with learning rate  0.0186597404342
Deleting 0 entries of the total 8339
done io
WATCH	what do you want me to do ?
WATCH	95	((S\NP)\NP)	0.689490149108
WATCH	95	((S\NP)/NP)	0.000928815141013
WATCH	95	((S/NP)/NP)	0.307115963371
WATCH	95	((S/NP)\NP)	0.00246507237974
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  aux|do(v|have(pro|I,pro|it,$0),$0),$0)
making  v|have(pro|I,pro|it,$0)
making  pro|I
making  pro|it
making  $0
making  $0
making  $0)
sentence is  book .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  book .
making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  book .
making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  book .
making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  book .

got training pair
Sent : book .
Cat : S:lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
Cat : Swh:lambda $0_{e}.n|stool($0)
sentence is  ['book']
sem is  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
sem is  lambda $0_{e}.n|book($0)
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sem is  lambda $0_{e}.n|stool($0)
size of chart is  5
got chart
norm score is  -6.5560364521
doing updates with learning rate  0.0185574250577
Deleting 0 entries of the total 8344
done io
WATCH	book .
WATCH	96	((S\NP)\NP)	0.689498644719
WATCH	96	((S\NP)/NP)	0.000926696883245
WATCH	96	((S/NP)/NP)	0.307120092924
WATCH	96	((S/NP)\NP)	0.00245456547345
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
making  and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
making  v|want(pro|you,pro|me,$1)
making  pro|you
making  pro|me
making  $1
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  is that Racketyboom ?
making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  is that Racketyboom ?
making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  is that Racketyboom ?
making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  is that Racketyboom ?
making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  is that Racketyboom ?

got training pair
Sent : is that Racketyboom ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
Cat : Swh:lambda $0_{e}.n|stool($0)
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sentence is  ['is', 'that', 'Racketyboom', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1))
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),$0($1)),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|book($0)
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sem is  lambda $0_{e}.n|stool($0)
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
size of chart is  2239
got chart
norm score is  -25.6811227293
doing updates with learning rate  0.018456363378
Deleting 0 entries of the total 9313
done io
WATCH	is that Racketyboom ?
WATCH	97	((S\NP)\NP)	0.66227262405
WATCH	97	((S\NP)/NP)	0.0505157740518
WATCH	97	((S/NP)/NP)	0.284947077407
WATCH	97	((S/NP)\NP)	0.00226452449188
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|book($0)
making  n|book($0)
making  $0
sentence is  stool .
making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  stool .
making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  stool .
making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  stool .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  stool .

got training pair
Sent : stool .
Cat : Swh:lambda $0_{e}.n|book($0)
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
Cat : Swh:lambda $0_{e}.n|stool($0)
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['stool']
sem is  lambda $0_{e}.n|book($0)
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sem is  lambda $0_{e}.n|stool($0)
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
size of chart is  5
got chart
norm score is  -10.9383103498
doing updates with learning rate  0.0183565316606
Deleting 0 entries of the total 9318
done io
WATCH	stool .
WATCH	98	((S\NP)\NP)	0.662287832568
WATCH	98	((S\NP)/NP)	0.0505037826786
WATCH	98	((S/NP)/NP)	0.284953710307
WATCH	98	((S/NP)\NP)	0.00225467444607
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
making  pro:dem|that,n:prop|Racketyboom,$0),$0)
making  n:prop|Racketyboom,$0),$0)
making  $0),$0)
making  $0)
Is Q
sentence is  you going to sit on that stool ?
making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  you going to sit on that stool ?
making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  you going to sit on that stool ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you going to sit on that stool ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  you going to sit on that stool ?

got training pair
Sent : you going to sit on that stool ?
Cat : Syn:lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
Cat : Swh:lambda $0_{e}.n|stool($0)
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
sentence is  ['you', 'going', 'to', 'sit', 'on', 'that', 'stool']
sem is  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
sem is  lambda $0_{e}.n|stool($0)
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  16412
got chart
norm score is  -50.0279970908
doing updates with learning rate  0.0182579067764
Deleting 0 entries of the total 13470
done io
WATCH	you going to sit on that stool ?
WATCH	99	((S\NP)\NP)	0.64727477004
WATCH	99	((S\NP)/NP)	0.0493463942882
WATCH	99	((S/NP)/NP)	0.301007667893
WATCH	99	((S/NP)\NP)	0.00237116777903
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|stool($0)
making  n|stool($0)
making  $0
sentence is  what are you doing ?
making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : Swh:lambda $0_{e}.n|stool($0)
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
sentence is  ['what', 'are', 'you', 'doing', '?']
sem is  lambda $0_{e}.n|stool($0)
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
size of chart is  4161
got chart
norm score is  -20.0476235207
doing updates with learning rate  0.0181604661828
Deleting 0 entries of the total 14817
done io
WATCH	what are you doing ?
WATCH	100	((S\NP)\NP)	0.631064849762
WATCH	100	((S\NP)/NP)	0.0480977470788
WATCH	100	((S/NP)/NP)	0.318698009384
WATCH	100	((S/NP)\NP)	0.00213939377491
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
making  v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
making  n:prop|Jenny
making  n:prop|Jacob
making  $0
sentence is  Jenny daxed Jacob .

got training pair
Sent : Jenny daxed Jacob .
Sent : Jenny daxed Jacob .
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
sentence is  ['Jenny', 'daxed', 'Jacob']
sem is  lambda $0_{ev}.v|dax&PAST(n:prop|Jenny,n:prop|Jacob,$0)
size of chart is  48
got chart
norm score is  -21.4866225768
doing updates with learning rate  0.0180641879049
Deleting 13358 entries of the total 14859
done io
WATCH	Jenny daxed Jacob .
WATCH	101	((S\NP)\NP)	0.63570264133
WATCH	101	((S\NP)/NP)	0.0471690365404
WATCH	101	((S/NP)/NP)	0.315073131477
WATCH	101	((S/NP)\NP)	0.00205519065274
getting topparses
top parse:
[('Jenny', 'NP', 'n:prop|Jacob'), ('daxed', 'NP', 'n:prop|Jenny'), ('Jacob', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|dax&PAST($0,$1,$2)')]
-20.7473344615


outputting cat probs
done with sent


returning sentence count  101
Done.
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
making  v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
making  det|the($1,n|man($1))
making  n|man($1)
making  $1
making  det|the($2,n|baby($2))
making  n|baby($2)
making  $2
making  $0
sentence is  the man daxed the baby .
making  lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
making  v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
making  det|the($1,n|baby($1))
making  n|baby($1)
making  $1
making  det|the($2,n|man($2))
making  n|man($2)
making  $2
making  $0
sentence is  the man daxed the baby .

got training pair
Sent : the man daxed the baby .
Sent : the man daxed the baby .
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
Cat : S:lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
sentence is  ['the', 'man', 'daxed', 'the', 'baby']
sem is  lambda $0_{ev}.v|dax&PAST(det|the($1,n|man($1)),det|the($2,n|baby($2)),$0)
sem is  lambda $0_{ev}.v|dax&PAST(det|the($1,n|baby($1)),det|the($2,n|man($2)),$0)
size of chart is  952
got chart
norm score is  -24.8734102753
doing updates with learning rate  0.0180641879049
Deleting 13860 entries of the total 15354
done io
WATCH	the man daxed the baby .
WATCH	101	((S\NP)\NP)	0.608923466639
WATCH	101	((S\NP)/NP)	0.0918255988187
WATCH	101	((S/NP)/NP)	0.295478952535
WATCH	101	((S/NP)\NP)	0.00377198200671
getting topparses
top parse:
[('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('man', 'N', 'lambda $0_{e}.n|man($0)'), ('daxed', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|dax&PAST($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)')]
-24.1998749327


outputting cat probs
done with sent


returning sentence count  101
Done.
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  prep|corp(n:prop|Mommy,$0),$0)
making  n:prop|Mommy
making  $0
making  $0)
Is Q
sentence is  this is corp Mommy
making  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  pro:dem|this,det|the($1,n|corp($1)),$0)
making  det|the($1,n|corp($1)),$0)
making  n|corp($1)
making  $1
making  $0)
Is Q
sentence is  this is corp Mommy

got training pair
Sent : this is corp Mommy
Sent : this is corp Mommy
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
sentence is  ['this', 'is', 'corp', 'Mommy']
sem is  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
size of chart is  407
got chart
norm score is  -24.3989398895
doing updates with learning rate  0.0180641879049
Deleting 13593 entries of the total 15097
done io
WATCH	this is corp Mommy
WATCH	101	((S\NP)\NP)	0.639458066671
WATCH	101	((S\NP)/NP)	0.0487677052537
WATCH	101	((S/NP)/NP)	0.309705327598
WATCH	101	((S/NP)\NP)	0.00206890047733
getting topparses
top parse:
[('this', 'NP', 'pro:dem|this'), ('is', '((S\\NP)/PP)', 'lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0($2),$2)'), ('corp', '(PP/NP)', 'lambda $0_{e}.lambda $1_{ev}.prep|corp($0,$1)'), ('Mommy', 'NP', 'n:prop|Mommy')]
-23.6620415101


outputting cat probs
done with sent


returning sentence count  101
Done.
testout =  None
put in sent coutn =  100
K k=-0.8
making  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
making  prep|corp(n:prop|Mommy,$0),$0)
making  n:prop|Mommy
making  $0
making  $0)
Is Q
sentence is  this is the corp
making  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  eq(pro:dem|this,det|the($1,n|corp($1)),$0)
making  pro:dem|this,det|the($1,n|corp($1)),$0)
making  det|the($1,n|corp($1)),$0)
making  n|corp($1)
making  $1
making  $0)
Is Q
sentence is  this is the corp

got training pair
Sent : this is the corp
Sent : this is the corp
update weight =  0.0180641879049
100
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
Cat : S:lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
sentence is  ['this', 'is', 'the', 'corp']
sem is  lambda $0_{ev}.eq(pro:dem|this,prep|corp(n:prop|Mommy,$0),$0)
sem is  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|corp($1)),$0)
size of chart is  407
got chart
norm score is  -21.730572033
doing updates with learning rate  0.0180641879049
Deleting 13600 entries of the total 15096
done io
WATCH	this is the corp
WATCH	101	((S\NP)\NP)	0.620253776268
WATCH	101	((S\NP)/NP)	0.0754544941508
WATCH	101	((S/NP)/NP)	0.302280469582
WATCH	101	((S/NP)\NP)	0.00201125999947
getting topparses
top parse:
[('this', 'NP', 'pro:dem|this'), ('is', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('corp', 'N', 'lambda $0_{e}.n|corp($0)')]
-30.175174106


outputting cat probs
done with sent


returning sentence count  101
Done.
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
making  part|go-PROG(pro|you,$0)
making  pro|you
making  $0
making  prep|on(det|that($1,n|stool($1)),$0)
making  det|that($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
making  $0)
Is Q
sentence is  who 's sitting ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  who 's sitting ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  who 's sitting ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  who 's sitting ?
making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  who 's sitting ?

got training pair
Sent : who 's sitting ?
Cat : Syn:lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sentence is  ['who', "'s", 'sitting']
sem is  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
size of chart is  500
got chart
norm score is  -25.1776420008
doing updates with learning rate  0.0180641879049
Deleting 13649 entries of the total 15165
done io
WATCH	who 's sitting ?
WATCH	101	((S\NP)\NP)	0.635073443146
WATCH	101	((S\NP)/NP)	0.0483895925802
WATCH	101	((S/NP)/NP)	0.314435736208
WATCH	101	((S/NP)\NP)	0.00210122806497
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  Neil ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  Neil ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Neil ?
making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  Neil ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Neil ?

got training pair
Sent : Neil ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
sentence is  ['Neil', '?']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
size of chart is  72
got chart
norm score is  -14.0013628126
doing updates with learning rate  0.0179690505174
Deleting 0 entries of the total 1571
done io
WATCH	Neil ?
WATCH	102	((S\NP)\NP)	0.635051248407
WATCH	102	((S\NP)/NP)	0.0483746519402
WATCH	102	((S/NP)/NP)	0.314482166794
WATCH	102	((S/NP)\NP)	0.00209193285843
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
making  aux|be&3S(part|sit-PROG($0,$1),$1)
making  part|sit-PROG($0,$1)
making  $0
making  $1
making  $1
sentence is  Eve 's sitting on the stool .
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Eve 's sitting on the stool .
making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  Eve 's sitting on the stool .
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Eve 's sitting on the stool .
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  Eve 's sitting on the stool .

got training pair
Sent : Eve 's sitting on the stool .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sentence is  ['Eve', "'s", 'sitting', 'on', 'the', 'stool']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
size of chart is  5578
got chart
norm score is  -35.6802005197
doing updates with learning rate  0.0178750331276
Deleting 0 entries of the total 3975
done io
WATCH	Eve 's sitting on the stool .
WATCH	103	((S\NP)\NP)	0.637301394921
WATCH	103	((S\NP)/NP)	0.0485326125895
WATCH	103	((S/NP)/NP)	0.312099501971
WATCH	103	((S/NP)\NP)	0.00206649051788
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Neil ?
making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  Neil ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  Neil ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  Neil ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  Neil ?

got training pair
Sent : Neil ?
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sentence is  ['Neil']
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
size of chart is  3
got chart
norm score is  -9.24802810062
doing updates with learning rate  0.0177821153585
Deleting 0 entries of the total 3976
done io
WATCH	Neil ?
WATCH	104	((S\NP)\NP)	0.637316250117
WATCH	104	((S\NP)/NP)	0.04852011607
WATCH	104	((S/NP)/NP)	0.312106747106
WATCH	104	((S/NP)\NP)	0.0020568867067
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
making  aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0)
making  part|sit-PROG(n:prop|Eve,$0)
making  n:prop|Eve
making  $0
making  $0
making  prep|on(det|the($1,n|stool($1)),$0)
making  det|the($1,n|stool($1))
making  n|stool($1)
making  $1
making  $0
sentence is  get what ?
making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  pro:dem|that
sentence is  get what ?

got training pair
Sent : get what ?
Cat : S:lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : NP:pro:dem|that
sentence is  ['get', 'what']
sem is  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  pro:dem|that
size of chart is  56
got chart
norm score is  -14.2404026448
doing updates with learning rate  0.0176902773332
Deleting 0 entries of the total 4022
done io
WATCH	get what ?
WATCH	105	((S\NP)\NP)	0.633796595478
WATCH	105	((S\NP)/NP)	0.0482384389696
WATCH	105	((S/NP)/NP)	0.315892954306
WATCH	105	((S/NP)\NP)	0.00207201124708
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(n:prop|Neil,$0)
making  Q(n:prop|Neil,$0)
making  n:prop|Neil,$0)
making  $0)
Is Q
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  get what ?
making  pro:dem|that
sentence is  get what ?
making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  get what ?

got training pair
Sent : get what ?
Cat : Syn:lambda $0_{ev}.Q(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : NP:pro:dem|that
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sentence is  ['get', 'what']
sem is  lambda $0_{ev}.Q(n:prop|Neil,$0)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  pro:dem|that
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
size of chart is  34
got chart
norm score is  -8.13076381698
doing updates with learning rate  0.0175994996591
Deleting 0 entries of the total 4027
done io
WATCH	get what ?
WATCH	106	((S\NP)\NP)	0.630154727065
WATCH	106	((S\NP)/NP)	0.0479474485102
WATCH	106	((S/NP)/NP)	0.31981012811
WATCH	106	((S/NP)\NP)	0.00208769631488
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  that .
making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  that .
making  pro:dem|that
sentence is  that .
making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  that .
making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  that .

got training pair
Sent : that .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : NP:pro:dem|that
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
sentence is  ['that']
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  pro:dem|that
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
size of chart is  4
got chart
norm score is  -9.83180231753
doing updates with learning rate  0.0175097634136
Deleting 0 entries of the total 4031
done io
WATCH	that .
WATCH	107	((S\NP)\NP)	0.630169925813
WATCH	107	((S\NP)/NP)	0.0479346300127
WATCH	107	((S/NP)/NP)	0.319817764792
WATCH	107	((S/NP)\NP)	0.00207767938238
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
making  lambda $1_{ev}.v|get(pro|you,$0,$1)
making  v|get(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
sentence is  Neil sit .
making  pro:dem|that
sentence is  Neil sit .
making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  Neil sit .
making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  Neil sit .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  Neil sit .

got training pair
Sent : Neil sit .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
Cat : NP:pro:dem|that
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sentence is  ['Neil', 'sit']
sem is  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
sem is  pro:dem|that
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
size of chart is  51
got chart
norm score is  -10.8385131925
doing updates with learning rate  0.017421050129
Deleting 0 entries of the total 4073
done io
WATCH	Neil sit .
WATCH	108	((S\NP)\NP)	0.639210747891
WATCH	108	((S\NP)/NP)	0.0486079841759
WATCH	108	((S/NP)/NP)	0.310176044213
WATCH	108	((S/NP)\NP)	0.0020052237201
getting topparses
outputting cat probs
done with sent


making  pro:dem|that
sentence is  good girl .
making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  good girl .
making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  good girl .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  good girl .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  good girl .

got training pair
Sent : good girl .
Cat : NP:pro:dem|that
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
sentence is  ['good', 'girl']
sem is  pro:dem|that
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  59
got chart
norm score is  -21.7841548963
doing updates with learning rate  0.0173333417797
Deleting 0 entries of the total 4124
done io
WATCH	good girl .
WATCH	109	((S\NP)\NP)	0.636258767401
WATCH	109	((S\NP)/NP)	0.0483690522485
WATCH	109	((S/NP)/NP)	0.313356371035
WATCH	109	((S/NP)\NP)	0.00201580931544
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
making  v|sit(n:prop|Neil,$0)
making  n:prop|Neil
making  $0
sentence is  that was a good girl .
making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  that was a good girl .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  that was a good girl .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  that was a good girl .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  that was a good girl .

got training pair
Sent : that was a good girl .
Cat : S:lambda $0_{ev}.v|sit(n:prop|Neil,$0)
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sentence is  ['that', 'was', 'a', 'good', 'girl']
sem is  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
size of chart is  2527
got chart
norm score is  -33.3763006473
doing updates with learning rate  0.0172466207683
Deleting 0 entries of the total 5057
done io
WATCH	that was a good girl .
WATCH	110	((S\NP)\NP)	0.643612818048
WATCH	110	((S\NP)/NP)	0.0487425966849
WATCH	110	((S/NP)/NP)	0.305732420965
WATCH	110	((S/NP)\NP)	0.00191216430253
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.and(adj|good($0),n|girl($0))
making  and(adj|good($0),n|girl($0))
making  adj|good($0)
making  $0
making  n|girl($0)
making  $0
sentence is  what are you doing ?
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  what are you doing ?
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what are you doing ?
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  what are you doing ?
making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  what are you doing ?

got training pair
Sent : what are you doing ?
Cat : Swh:lambda $0_{e}.and(adj|good($0),n|girl($0))
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sentence is  ['what', 'are', 'you', 'doing', '?']
sem is  lambda $0_{e}.and(adj|good($0),n|girl($0))
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1)) N:lambda $0_{e}.adj|good($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
types dont match 2 :  (Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

(Swh/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1)) N:lambda $0_{e}.n|girl($0)
NOT ADDING THIS
types dont match 3 :  (Swh\N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))   <<e,t>,<e,<ev,t>>>   <<e,t>,<e,t>>  comp is  False 

NOT ADDING THIS
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
size of chart is  2687
got chart
norm score is  -17.4966258717
doing updates with learning rate  0.0171608699128
Deleting 4526 entries of the total 6083
done io
WATCH	what are you doing ?
WATCH	111	((S\NP)\NP)	0.626584080029
WATCH	111	((S\NP)/NP)	0.0474384378069
WATCH	111	((S/NP)/NP)	0.324244704394
WATCH	111	((S/NP)\NP)	0.00173277776996
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
making  det|a($1,and(adj|good($1),n|girl($1))),$0)
making  and(adj|good($1),n|girl($1))
making  adj|good($1)
making  $1
making  n|girl($1)
making  $1
making  $0)
sentence is  that 's a seat .
making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  that 's a seat .
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  that 's a seat .
making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  that 's a seat .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  that 's a seat .

got training pair
Sent : that 's a seat .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['that', "'s", 'a', 'seat']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  1077
got chart
norm score is  -20.2469264858
doing updates with learning rate  0.0170760724348
Deleting 0 entries of the total 2098
done io
WATCH	that 's a seat .
WATCH	112	((S\NP)\NP)	0.621888004503
WATCH	112	((S\NP)/NP)	0.0470683110445
WATCH	112	((S/NP)/NP)	0.329292900404
WATCH	112	((S/NP)\NP)	0.00175078404834
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
making  part|do-PROG(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  are you alright ?
making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  are you alright ?
making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  are you alright ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  are you alright ?
making  n:prop|Sambo
sentence is  are you alright ?

got training pair
Sent : are you alright ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:n:prop|Sambo
sentence is  ['are', 'you', 'alright']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  n:prop|Sambo
size of chart is  241
got chart
norm score is  -20.645256557
doing updates with learning rate  0.0169922119472
Deleting 0 entries of the total 2249
done io
WATCH	are you alright ?
WATCH	113	((S\NP)\NP)	0.599953660612
WATCH	113	((S\NP)/NP)	0.0453874379831
WATCH	113	((S/NP)/NP)	0.353028784875
WATCH	113	((S/NP)\NP)	0.00163011652964
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  eq(pro:dem|that,det|a($1,n|seat($1)),$0)
making  pro:dem|that,det|a($1,n|seat($1)),$0)
making  det|a($1,n|seat($1)),$0)
making  n|seat($1)
making  $1
making  $0)
sentence is  what is that ?
making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  what is that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what is that ?
making  n:prop|Sambo
sentence is  what is that ?
making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  what is that ?

got training pair
Sent : what is that ?
Cat : S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:n:prop|Sambo
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sentence is  ['what', 'is', 'that']
sem is  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  n:prop|Sambo
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
size of chart is  200
got chart
norm score is  -9.06435644896
doing updates with learning rate  0.0169092724428
Deleting 0 entries of the total 2363
done io
WATCH	what is that ?
WATCH	114	((S\NP)\NP)	0.614978819274
WATCH	114	((S\NP)/NP)	0.0424497414179
WATCH	114	((S/NP)/NP)	0.340948153513
WATCH	114	((S/NP)\NP)	0.00162328579461
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
making  Q(adj|alright(pro|you),$0)
making  adj|alright(pro|you),$0)
making  pro|you
making  $0)
Is Q
sentence is  Sambo .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  Sambo .
making  n:prop|Sambo
sentence is  Sambo .
making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  Sambo .
making  adj|busy(pro|I)
making  pro|I
sentence is  Sambo .

got training pair
Sent : Sambo .
Cat : Syn:lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:n:prop|Sambo
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
Cat : St:adj|busy(pro|I)
sentence is  ['Sambo']
sem is  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  n:prop|Sambo
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sem is  adj|busy(pro|I)
size of chart is  5
got chart
norm score is  -11.2087951768
doing updates with learning rate  0.0168272382832
Deleting 0 entries of the total 2368
done io
WATCH	Sambo .
WATCH	115	((S\NP)\NP)	0.614991981311
WATCH	115	((S\NP)/NP)	0.0424369624973
WATCH	115	((S/NP)/NP)	0.340956026691
WATCH	115	((S/NP)\NP)	0.00161502950138
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you read Sambo .
making  n:prop|Sambo
sentence is  you read Sambo .
making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  you read Sambo .
making  adj|busy(pro|I)
making  pro|I
sentence is  you read Sambo .
making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  you read Sambo .

got training pair
Sent : you read Sambo .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : NP:n:prop|Sambo
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sentence is  ['you', 'read', 'Sambo']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  n:prop|Sambo
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
size of chart is  188
got chart
norm score is  -17.3760764257
doing updates with learning rate  0.0167460941884
Deleting 0 entries of the total 2491
done io
WATCH	you read Sambo .
WATCH	116	((S\NP)\NP)	0.59436771337
WATCH	116	((S\NP)/NP)	0.0903349145626
WATCH	116	((S/NP)/NP)	0.313818437022
WATCH	116	((S/NP)\NP)	0.00147893504559
getting topparses
outputting cat probs
done with sent


making  n:prop|Sambo
sentence is  because I 'm busy .
making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  because I 'm busy .
making  adj|busy(pro|I)
making  pro|I
sentence is  because I 'm busy .
making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  because I 'm busy .
making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  because I 'm busy .

got training pair
Sent : because I 'm busy .
Cat : NP:n:prop|Sambo
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
sentence is  ['because', 'I', "'m", 'busy']
sem is  n:prop|Sambo
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  561
got chart
norm score is  -33.460852736
doing updates with learning rate  0.0166658252261
Deleting 0 entries of the total 2833
done io
WATCH	because I 'm busy .
WATCH	117	((S\NP)\NP)	0.600148908347
WATCH	117	((S\NP)/NP)	0.0911960296264
WATCH	117	((S/NP)/NP)	0.307214918082
WATCH	117	((S/NP)\NP)	0.00144014394464
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  v|read&ZERO(pro|you,n:prop|Sambo,$0)
making  pro|you
making  n:prop|Sambo
making  $0
sentence is  I 'm making lunch .
making  adj|busy(pro|I)
making  pro|I
sentence is  I 'm making lunch .
making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  I 'm making lunch .
making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  I 'm making lunch .
making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  I 'm making lunch .

got training pair
Sent : I 'm making lunch .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sentence is  ['I', "'m", 'making', 'lunch']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
size of chart is  702
got chart
norm score is  -30.9255496059
doing updates with learning rate  0.016586416802
Deleting 0 entries of the total 3159
done io
WATCH	I 'm making lunch .
WATCH	118	((S\NP)\NP)	0.606990876696
WATCH	118	((S\NP)/NP)	0.0920959188258
WATCH	118	((S/NP)/NP)	0.299518196815
WATCH	118	((S/NP)\NP)	0.0013950076639
getting topparses
outputting cat probs
done with sent


making  adj|busy(pro|I)
making  pro|I
sentence is  what did you do ?
making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  what did you do ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what did you do ?
making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  what did you do ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what did you do ?

got training pair
Sent : what did you do ?
Cat : St:adj|busy(pro|I)
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
sentence is  ['what', 'did', 'you', 'do']
sem is  adj|busy(pro|I)
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
size of chart is  768
got chart
norm score is  -20.2030681904
doing updates with learning rate  0.0165078546502
Deleting 0 entries of the total 3583
done io
WATCH	what did you do ?
WATCH	119	((S\NP)\NP)	0.582928220509
WATCH	119	((S\NP)/NP)	0.0884222980532
WATCH	119	((S/NP)/NP)	0.327317982459
WATCH	119	((S/NP)\NP)	0.00133149897867
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
making  part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0)
making  pro|I
making  lambda $1_{e}.n|lunch($1)
making  n|lunch($1)
making  $1
making  $0
making  $0
sentence is  you hit your head .
making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you hit your head .
making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  you hit your head .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  you hit your head .
making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  you hit your head .

got training pair
Sent : you hit your head .
Cat : S:lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|paper($0)
sentence is  ['you', 'hit', 'your', 'head']
sem is  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|paper($0)
size of chart is  738
got chart
norm score is  -22.3482493815
doing updates with learning rate  0.016430124824
Deleting 0 entries of the total 3959
done io
WATCH	you hit your head .
WATCH	120	((S\NP)\NP)	0.588249113832
WATCH	120	((S\NP)/NP)	0.0946392100954
WATCH	120	((S/NP)/NP)	0.315833788615
WATCH	120	((S/NP)\NP)	0.00127788745845
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  aux|do&PAST(v|do(pro|you,$0,$1),$1)
making  v|do(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want ?
making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  what do you want ?
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  what do you want ?
making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  what do you want ?
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  what do you want ?

got training pair
Sent : what do you want ?
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|paper($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sentence is  ['what', 'do', 'you', 'want']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|paper($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
size of chart is  711
got chart
norm score is  -18.6792320591
doing updates with learning rate  0.0163532136865
Deleting 2673 entries of the total 4243
done io
WATCH	what do you want ?
WATCH	121	((S\NP)\NP)	0.577450715051
WATCH	121	((S\NP)/NP)	0.0928883164529
WATCH	121	((S/NP)/NP)	0.328485844209
WATCH	121	((S/NP)\NP)	0.00117512428637
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|head($1))
making  n|head($1)
making  $1
making  $0
sentence is  paper .
making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  paper .
making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  paper .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  paper .
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  paper .

got training pair
Sent : paper .
Cat : S:lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|paper($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sentence is  ['paper', '.']
sem is  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|paper($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
size of chart is  67
got chart
norm score is  -17.2406113678
doing updates with learning rate  0.0162771079026
Deleting 0 entries of the total 1626
done io
WATCH	paper .
WATCH	122	((S\NP)\NP)	0.577312034508
WATCH	122	((S\NP)/NP)	0.0928525348576
WATCH	122	((S/NP)/NP)	0.32866609504
WATCH	122	((S/NP)\NP)	0.00116933559448
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
making  aux|do(v|want(pro|you,$0,$1),$1)
making  v|want(pro|you,$0,$1)
making  pro|you
making  $0
making  $1
making  $1
sentence is  that 's my paper .
making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  that 's my paper .
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  that 's my paper .
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  that 's my paper .
making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  that 's my paper .

got training pair
Sent : that 's my paper .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Cat : Swh:lambda $0_{e}.n|paper($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sentence is  ['that', "'s", 'my', 'paper']
sem is  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
types dont match 2 :  (Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S/NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S/NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
types dont match 2 :  (Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

(Swh/(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1) (S\NP):lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
NOT ADDING THIS
types dont match 3 :  (Swh\(S\NP)):lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)   <<e,<ev,t>>,<e,<ev,t>>>   <<ev,t>,<ev,t>>  comp is  False 

NOT ADDING THIS
got back to orig 
sem is  lambda $0_{e}.n|paper($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
size of chart is  840
got chart
norm score is  -21.8531474693
doing updates with learning rate  0.0162017944299
Deleting 0 entries of the total 2142
done io
WATCH	that 's my paper .
WATCH	123	((S\NP)\NP)	0.572258244857
WATCH	123	((S\NP)/NP)	0.0920258418701
WATCH	123	((S/NP)/NP)	0.334532629154
WATCH	123	((S/NP)\NP)	0.00118328411872
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.n|paper($0)
making  n|paper($0)
making  $0
sentence is  your diaper ?
making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  your diaper ?
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  your diaper ?
making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  your diaper ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  your diaper ?

got training pair
Sent : your diaper ?
Cat : Swh:lambda $0_{e}.n|paper($0)
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Cat : S:lambda $0_{ev}.adv:loc|there($0)
sentence is  ['your', 'diaper']
sem is  lambda $0_{e}.n|paper($0)
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sem is  lambda $0_{ev}.adv:loc|there($0)
size of chart is  55
got chart
norm score is  -19.4731523349
doing updates with learning rate  0.0161272605114
Deleting 0 entries of the total 2194
done io
WATCH	your diaper ?
WATCH	124	((S\NP)\NP)	0.572266540672
WATCH	124	((S\NP)/NP)	0.0920135116036
WATCH	124	((S/NP)/NP)	0.334543226393
WATCH	124	((S/NP)\NP)	0.00117672133069
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
making  pro:poss:det|my($1,n|paper($1)),$0)
making  n|paper($1)
making  $1
making  $0)
sentence is  I 'm going upstairs .
making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  I 'm going upstairs .
making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  I 'm going upstairs .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  I 'm going upstairs .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  I 'm going upstairs .

got training pair
Sent : I 'm going upstairs .
Cat : S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sentence is  ['I', "'m", 'going', 'upstairs']
sem is  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
size of chart is  718
got chart
norm score is  -32.4478806596
doing updates with learning rate  0.016053493667
Deleting 0 entries of the total 2680
done io
WATCH	I 'm going upstairs .
WATCH	125	((S\NP)\NP)	0.572992942549
WATCH	125	((S\NP)/NP)	0.0921162123502
WATCH	125	((S/NP)/NP)	0.333723619792
WATCH	125	((S/NP)\NP)	0.00116722530813
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  Q(pro:poss:det|your($1,n|diaper($1)),$0)
making  pro:poss:det|your($1,n|diaper($1)),$0)
making  n|diaper($1)
making  $1
making  $0)
Is Q
sentence is  there .
making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  there .
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  there .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  there .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  there .

got training pair
Sent : there .
Cat : Syn:lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sentence is  ['there']
sem is  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
size of chart is  5
got chart
norm score is  -5.03909438457
doing updates with learning rate  0.0159804816862
Deleting 0 entries of the total 2684
done io
WATCH	there .
WATCH	126	((S\NP)\NP)	0.573004357429
WATCH	126	((S\NP)/NP)	0.0921040522853
WATCH	126	((S/NP)/NP)	0.333730974576
WATCH	126	((S/NP)\NP)	0.00116061570979
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
making  aux|be&1S(part|go-PROG(pro|I,$0),$0)
making  part|go-PROG(pro|I,$0)
making  pro|I
making  $0
making  $0
making  adv:loc|upstairs($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  what 's that ?
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  what 's that ?
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  what 's that ?
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  what 's that ?

got training pair
Sent : what 's that ?
Cat : S:lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sentence is  ['what', "'s", 'that']
sem is  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
size of chart is  173
got chart
norm score is  -12.0549236189
doing updates with learning rate  0.015908212621
Deleting 0 entries of the total 2761
done io
WATCH	what 's that ?
WATCH	127	((S\NP)\NP)	0.578846161297
WATCH	127	((S\NP)/NP)	0.09293995112
WATCH	127	((S/NP)/NP)	0.327082470313
WATCH	127	((S/NP)\NP)	0.00113141727007
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.adv:loc|there($0)
making  adv:loc|there($0)
making  $0
sentence is  read .
making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  read .
making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  read .

got training pair
Sent : read .
Cat : S:lambda $0_{ev}.adv:loc|there($0)
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sentence is  ['read', '.']
sem is  lambda $0_{ev}.adv:loc|there($0)
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
size of chart is  48
got chart
norm score is  -14.6917131308
doing updates with learning rate  0.0158366747785
Deleting 0 entries of the total 2796
done io
WATCH	read .
WATCH	128	((S\NP)\NP)	0.573548630671
WATCH	128	((S\NP)/NP)	0.0920750617997
WATCH	128	((S/NP)/NP)	0.333230299122
WATCH	128	((S/NP)\NP)	0.00114600840727
getting topparses
outputting cat probs
done with sent


making  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  lambda $1_{ev}.eq($0,pro:dem|that,$1)
making  eq($0,pro:dem|that,$1)
making  $0,pro:dem|that,$1)
making  pro:dem|that,$1)
making  $1)
sentence is  you read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  you read .
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  you read .
making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  you read .
making  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  pro|you
making  pro|me
making  det|the($1,n|cheese($1))
making  n|cheese($1)
making  $1
making  $0
sentence is  you read .

got training pair
Sent : you read .
Cat : Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
sentence is  ['you', 'read']
sem is  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
size of chart is  62
got chart
norm score is  -6.79587813349
doing updates with learning rate  0.0157658567141
Deleting 0 entries of the total 2832
done io
WATCH	you read .
WATCH	129	((S\NP)\NP)	0.579990707855
WATCH	129	((S\NP)/NP)	0.0930946085178
WATCH	129	((S/NP)/NP)	0.325800774979
WATCH	129	((S/NP)\NP)	0.00111390864916
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  can you get your chair ?
making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  can you get your chair ?
making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  can you get your chair ?
making  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  pro|you
making  pro|me
making  det|the($1,n|cheese($1))
making  n|cheese($1)
making  $1
making  $0
sentence is  can you get your chair ?
making  pro:dem|that
sentence is  can you get your chair ?

got training pair
Sent : can you get your chair ?
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
Cat : NP:pro:dem|that
sentence is  ['can', 'you', 'get', 'your', 'chair']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
sem is  pro:dem|that
size of chart is  2344
got chart
norm score is  -32.4738679184
doing updates with learning rate  0.015695747225
Deleting 0 entries of the total 4099
done io
WATCH	can you get your chair ?
WATCH	130	((S\NP)\NP)	0.57793516998
WATCH	130	((S\NP)/NP)	0.101488295773
WATCH	130	((S/NP)/NP)	0.319503758345
WATCH	130	((S/NP)\NP)	0.00107277590127
getting topparses
outputting cat probs
done with sent


making  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
making  v|read&ZERO(pro|you,$0)
making  pro|you
making  $0
sentence is  give me the cheese .
making  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
making  v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0)
making  pro|you
making  pro:poss:det|your($1,n|chair($1))
making  n|chair($1)
making  $1
making  $0
making  $0
making  $0)
Is Q
sentence is  give me the cheese .
making  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
making  pro|you
making  pro|me
making  det|the($1,n|cheese($1))
making  n|cheese($1)
making  $1
making  $0
sentence is  give me the cheese .
making  pro:dem|that
sentence is  give me the cheese .
making  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  aux|do(v|like(pro|you,pro|it,$0),$0),$0)
making  v|like(pro|you,pro|it,$0)
making  pro|you
making  pro|it
making  $0
making  $0
making  $0)
Is Q
sentence is  give me the cheese .

got training pair
Sent : give me the cheese .
Cat : S:lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Cat : Syn:lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
Cat : S:lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
Cat : NP:pro:dem|that
Cat : Syn:lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
sentence is  ['give', 'me', 'the', 'cheese', '.']
sem is  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
sem is  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
sem is  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)

trained on up to  trainFiles/trainPairs.filtered.ready_1  testing on  trainFiles/trainPairs.filtered.ready_20
['you', 'like', 'the', 'grape']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
grape : NP : placeholderC
grape : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
grape : N : lambda $0_{e}.placeholderP($0)
grape : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
grape : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
grape : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
grape : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
grape : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
grape : Swh : lambda $0_{e}.placeholderP($0)
grape : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
grape : S : lambda $0_{ev}.placeholderP($0)
grape : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
grape : (NP\NP) : lambda $0_{e}.$0
grape : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
grape : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
grape : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
grape : (St\NP) : lambda $0_{e}.placeholderP($0)
grape : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
grape : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
grape : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.v|like(pro|you,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|like(pro|you,det|the($1,placeholderP($1)),$0)
lambda $0_{ev}.v|like(pro|you,det|the($1,n|grape($1)),$0)
CORRECTPlaceholder
lambda $0_{ev}.v|like(pro|you,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|like(pro|you,det|the($1,placeholderP($1)),$0)
top parse:
[('you', 'NP', 'pro|you'), ('like', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('grape', 'N', 'lambda $0_{e}.placeholderP($0)')]


['what', 'else', '?']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
else : NP : placeholderC
else : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
else : N : lambda $0_{e}.placeholderP($0)
else : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
else : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
else : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
else : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
else : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
else : Swh : lambda $0_{e}.placeholderP($0)
else : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : S : lambda $0_{ev}.placeholderP($0)
else : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (NP\NP) : lambda $0_{e}.$0
else : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (St\NP) : lambda $0_{e}.placeholderP($0)
else : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
else : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
else : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
else : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
else : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
else : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
else : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
else : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Fraser,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Fraser,$1)
lambda $0_{ev}.Q(pro:wh|what,$0)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('else', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('?', 'NP', 'n:prop|Fraser')]


['icecubes']
icecubes : NP : placeholderC
icecubes : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecubes : N : lambda $0_{e}.placeholderP($0)
icecubes : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
icecubes : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
icecubes : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
icecubes : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecubes : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
icecubes : Swh : lambda $0_{e}.placeholderP($0)
icecubes : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : S : lambda $0_{ev}.placeholderP($0)
icecubes : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (NP\NP) : lambda $0_{e}.$0
icecubes : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (St\NP) : lambda $0_{e}.placeholderP($0)
icecubes : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
icecubes : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
icecubes : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
icecubes : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
icecubes : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
icecubes : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
icecubes : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
icecubes : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
icecubes : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
icecubes : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
icecubes : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
icecubes : (NP/NP) : lambda $0_{e}.$0
icecubes : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
icecubes : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
icecubes : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
icecubes : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecubes : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
icecubes : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
icecubes : (Swh/N) : lambda $0_{<e,t>}.$0
icecubes : (Syn/Syn) : lambda $0_{<ev,t>}.$0
icecubes : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
icecubes : (St\St) : lambda $0_{t}.$0
icecubes : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
icecubes : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
icecubes : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
icecubes : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
icecubes : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
icecubes : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecubes : (Swh\N) : lambda $0_{<e,t>}.$0
icecubes : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
icecubes : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
icecubes : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{e}.n|+n|ice+n|cube-PL($0)
CORRECTPlaceholder
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
top parse:
[('icecubes', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['do', 'you', 'like', 'icecubes', '?']
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
icecubes : NP : placeholderC
icecubes : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecubes : N : lambda $0_{e}.placeholderP($0)
icecubes : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
icecubes : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
icecubes : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
icecubes : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecubes : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
icecubes : Swh : lambda $0_{e}.placeholderP($0)
icecubes : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : S : lambda $0_{ev}.placeholderP($0)
icecubes : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (NP\NP) : lambda $0_{e}.$0
icecubes : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecubes : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|do(v|like(pro|you,placeholderC,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do(v|like(pro|you,placeholderC,$0),$0),$0)
lambda $0_{ev}.Q(aux|do(v|like(pro|you,lambda $1_{e}.n|+n|ice+n|cube-PL($1),$0),$0),$0)
top parse:
[('do', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ('you', 'NP', 'pro|you'), ('like', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)'), ('icecubes', 'NP', 'placeholderC'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['and', 'what', "'s", 'she', 'doing', 'there']
and : (S/S) : lambda $0_{<ev,t>}.$0
and : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(lambda $2_{e}.n|bed($2),$1))
and : N : lambda $0_{e}.n|bed($0)
and : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|watch($0,$1,$2)
and : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
and : N : lambda $0_{e}.n|telephone($0)
and : (((S/N)/(PP/N))/S) : lambda $0_{<ev,t>}.lambda $1_{<<e,t>,<ev,t>>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($0($3),$1($2,$3))
and : (NP\NP) : lambda $0_{e}.and($0,n:prop|Jill)
and : (NP\NP) : lambda $0_{e}.and(n:prop|Jack,$0)
and : ((NP\NP)/NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : ((NP/NP)\NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : (NP/NP) : lambda $0_{e}.and($0,n:prop|Jill)
and : (NP/NP) : lambda $0_{e}.and(n:prop|Jack,$0)
and : ((NP\NP)/(NP\NP)) : lambda $0_{<e,e>}.$0
and : ((NP/NP)\(NP/NP)) : lambda $0_{<e,e>}.$0
and : ((NP\NP)\NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : ((NP\NP)\(NP\NP)) : lambda $0_{<e,e>}.$0
and : (PP/PP) : lambda $0_{<ev,t>}.$0
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
doing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)/S)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
NO PARSE
['a', 'blue', 'truck']
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
blue : NP : placeholderC
blue : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
blue : N : lambda $0_{e}.placeholderP($0)
blue : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
blue : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
blue : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
blue : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
blue : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
blue : Swh : lambda $0_{e}.placeholderP($0)
blue : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : S : lambda $0_{ev}.placeholderP($0)
blue : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (NP\NP) : lambda $0_{e}.$0
blue : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (St\NP) : lambda $0_{e}.placeholderP($0)
blue : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
blue : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
blue : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
blue : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
blue : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
blue : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
blue : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
blue : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
truck : NP : placeholderC
truck : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
truck : N : lambda $0_{e}.placeholderP($0)
truck : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
truck : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
truck : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
truck : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
truck : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
truck : Swh : lambda $0_{e}.placeholderP($0)
truck : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
truck : S : lambda $0_{ev}.placeholderP($0)
truck : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
truck : (NP\NP) : lambda $0_{e}.$0
truck : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
truck : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
truck : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
truck : (St\NP) : lambda $0_{e}.placeholderP($0)
truck : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
truck : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
truck : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
truck : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
truck : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
truck : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
truck : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
truck : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.placeholderP(det|a($1,placeholderP($1)),$0)
S:lambda $0_{ev}.placeholderP(det|a($1,placeholderP($1)),$0)
det|a($0,and(adj|blue($0),n|truck($0)))
top parse:
[('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('blue', 'N', 'lambda $0_{e}.placeholderP($0)'), ('truck', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['that', "'s", 'my', 'pencil']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
my : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))
my : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))
pencil : N : lambda $0_{e}.n|pencil($0)
pencil : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|pencil($1))
pencil : (St\NP) : lambda $0_{e}.n|pencil($0)
pencil : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|pencil($1))
CORRECT
lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|pencil($1)),$0)
S:lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|pencil($1)),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('my', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))'), ('pencil', 'N', 'lambda $0_{e}.n|pencil($0)')]


['Eve']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
CORRECT
n:prop|Eve
NP:n:prop|Eve
top parse:
[('Eve', 'NP', 'n:prop|Eve')]


['you', 'stay', 'down', 'here']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
stay : NP : placeholderC
stay : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
stay : N : lambda $0_{e}.placeholderP($0)
stay : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
stay : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
stay : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
stay : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
stay : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
stay : Swh : lambda $0_{e}.placeholderP($0)
stay : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
stay : S : lambda $0_{ev}.placeholderP($0)
stay : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
stay : (NP\NP) : lambda $0_{e}.$0
stay : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
stay : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
stay : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
stay : (St\NP) : lambda $0_{e}.placeholderP($0)
stay : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
stay : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
stay : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
down : S : lambda $0_{ev}.adv:loc|down($0)
down : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|down($1))
down : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))
down : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG($0,$1),adv:loc|down($1))
down : S : lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv:loc|down($0))
down : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|down($1))
down : (S/NP) : lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG($0,$1),adv:loc|down($1))
down : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
WRONG
lambda $0_{ev}.and(placeholderP(pro|you,$0),adv:loc|down($0))
S:lambda $0_{ev}.and(placeholderP(pro|you,$0),adv:loc|down($0))
lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|down($0))
CORRECTPlaceholder
lambda $0_{ev}.and(placeholderP(pro|you,$0),adv:loc|down($0))
S:lambda $0_{ev}.and(placeholderP(pro|you,$0),adv:loc|down($0))
top parse:
[('you', 'NP', 'pro|you'), ('stay', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)'), ('down', 'S', 'lambda $0_{ev}.adv:loc|down($0)'), ('here', '((S\\S)\\S)', 'lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))')]


['Sarah', 'is', 'sleeping']
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sarah : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sarah : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sarah : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sarah : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sarah : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
sleeping : NP : placeholderC
sleeping : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sleeping : N : lambda $0_{e}.placeholderP($0)
sleeping : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
sleeping : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sleeping : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sleeping : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sleeping : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
sleeping : Swh : lambda $0_{e}.placeholderP($0)
sleeping : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sleeping : S : lambda $0_{ev}.placeholderP($0)
sleeping : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sleeping : (NP\NP) : lambda $0_{e}.$0
sleeping : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sleeping : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sleeping : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sleeping : (St\NP) : lambda $0_{e}.placeholderP($0)
sleeping : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sleeping : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sleeping : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
sleeping : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
sleeping : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
sleeping : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
sleeping : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
sleeping : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.eq(placeholderC,placeholderC,$0)
S:lambda $0_{ev}.eq(placeholderC,placeholderC,$0)
lambda $0_{ev}.aux|be&3S(part|sleep-PROG(n:prop|Sarah,$0),$0)
top parse:
[('Sarah', 'NP', 'placeholderC'), ('is', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('sleeping', 'NP', 'placeholderC')]


['she', "'s", 'not', 'crying']
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
not : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(eq($1,$0,$2),$2)
not : (St\NP) : lambda $0_{e}.adj|sure($0)
not : NP : pro:poss|yours
not : (S\NP) : lambda $0_{e}.lambda $1_{ev}.not(adj|sure($0),$1)
not : N : lambda $0_{e}.n|cup($0)
not : (S/NP) : lambda $0_{e}.lambda $1_{ev}.not($0,$1)
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.$0
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
not : St : adj|sure(pro|I)
not : NP : det|a($0,n|fox($0))
not : (S/NP) : lambda $0_{e}.lambda $1_{ev}.not(adj|sure($0),$1)
not : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|be&PRES($0($1,$2,$3),$3),$3)
not : NP : det|a($0,n|cup($0))
not : (((S\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
not : (S/NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
not : (((S/NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
not : S : lambda $0_{ev}.not(adj|sure(pro|I),$0)
not : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(eq($1,$0,$2),$2)
crying : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PAST&13S($0($1,$2),$2)
crying : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|cry-PROG($0,$1),$1)
crying : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
crying : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PAST&13S($0($1),$1)
crying : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PAST&13S(part|cry-PROG($0,$1),$1)
crying : S : lambda $0_{ev}.part|cry-PROG(n:prop|Kathy,$0)
WRONG
lambda $0_{ev}.aux|be&PAST&13S(eq(pro|she,pro:poss|yours,$0),$0)
S:lambda $0_{ev}.aux|be&PAST&13S(eq(pro|she,pro:poss|yours,$0),$0)
lambda $0_{ev}.not(aux|be&3S(part|cry-PROG(pro|she,$0),$0),$0)
top parse:
[('she', 'NP', 'pro|she'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('not', 'NP', 'pro:poss|yours'), ('crying', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PAST&13S($0($1,$2),$2)')]


['Eve']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
CORRECT
n:prop|Eve
NP:n:prop|Eve
top parse:
[('Eve', 'NP', 'n:prop|Eve')]


['Eve', 'dear']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
dear : NP : placeholderC
dear : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
dear : N : lambda $0_{e}.placeholderP($0)
dear : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
dear : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
dear : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
dear : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
dear : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
dear : Swh : lambda $0_{e}.placeholderP($0)
dear : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
dear : S : lambda $0_{ev}.placeholderP($0)
dear : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
dear : (NP\NP) : lambda $0_{e}.$0
dear : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
dear : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
dear : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
dear : (St\NP) : lambda $0_{e}.placeholderP($0)
dear : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
dear : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
dear : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
dear : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
dear : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
dear : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
dear : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
dear : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
dear : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
dear : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
dear : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
dear : (NP/NP) : lambda $0_{e}.$0
dear : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
dear : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
dear : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
dear : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(n:prop|Eve,$0)
S:lambda $0_{ev}.placeholderP(n:prop|Eve,$0)
n:prop|Eve
top parse:
[('Eve', 'NP', 'n:prop|Eve'), ('dear', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['can', 'you', 'peek', 'with', 'Sarah', '?']
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
peek : NP : placeholderC
peek : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
peek : N : lambda $0_{e}.placeholderP($0)
peek : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
peek : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
peek : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
peek : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
peek : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
peek : Swh : lambda $0_{e}.placeholderP($0)
peek : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
peek : S : lambda $0_{ev}.placeholderP($0)
peek : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
peek : (NP\NP) : lambda $0_{e}.$0
peek : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
with : (S/S) : lambda $0_{<ev,t>}.$0
with : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|with($0,$1)
with : (S\S) : lambda $0_{<ev,t>}.$0
with : PP : lambda $0_{ev}.prep|with(pro|it,$0)
with : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|with($0,$1)
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|can(not(placeholderP(placeholderP($0),$0),$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|can(not(placeholderP(placeholderP($0),$0),$0),$0),$0)
lambda $0_{ev}.Q(and(aux|can(v|peek(pro|you,$0),$0),prep|with(n:prop|Sarah,$0)),$0)
top parse:
[('can', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ('you', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ('peek', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('with', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('Sarah', 'S', 'lambda $0_{ev}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['it', 'certainly', 'is']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
certainly : NP : placeholderC
certainly : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
certainly : N : lambda $0_{e}.placeholderP($0)
certainly : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
certainly : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
certainly : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
certainly : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
certainly : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
certainly : Swh : lambda $0_{e}.placeholderP($0)
certainly : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
certainly : S : lambda $0_{ev}.placeholderP($0)
certainly : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
certainly : (NP\NP) : lambda $0_{e}.$0
certainly : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
certainly : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
certainly : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
certainly : (St\NP) : lambda $0_{e}.placeholderP($0)
certainly : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
certainly : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
certainly : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
certainly : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
certainly : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
certainly : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
certainly : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
certainly : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
WRONG
lambda $0_{ev}.eq(pro|it,placeholderC,$0)
S:lambda $0_{ev}.eq(pro|it,placeholderC,$0)
pro|it
top parse:
[('it', 'NP', 'pro|it'), ('certainly', 'NP', 'placeholderC'), ('is', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)')]


['that', '?']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(pro:dem|that,$0)
Syn:lambda $0_{ev}.Q(pro:dem|that,$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ('?', '(Syn\\NP)', 'lambda $0_{e}.lambda $1_{ev}.Q($0,$1)')]


['what', 'is', 'Papa', 'doing']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
Papa : NP : n:prop|Papa
Papa : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
doing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)/S)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,n:prop|Papa,$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,n:prop|Papa,$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Papa,$0,$1),$1)
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('Papa', 'NP', 'n:prop|Papa'), ('doing', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]


['who', "'s", 'that']
who : NP : pro:wh|who
who : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
who : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)
who : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
WRONG
lambda $0_{ev}.eq(pro:wh|who,pro:dem|that,$0)
S:lambda $0_{ev}.eq(pro:wh|who,pro:dem|that,$0)
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('who', 'NP', 'pro:wh|who'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['it', 'looks', 'like', 'a', 'lady', '?']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
looks : NP : placeholderC
looks : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
looks : N : lambda $0_{e}.placeholderP($0)
looks : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
looks : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
looks : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
looks : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
looks : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
looks : Swh : lambda $0_{e}.placeholderP($0)
looks : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
looks : S : lambda $0_{ev}.placeholderP($0)
looks : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
looks : (NP\NP) : lambda $0_{e}.$0
looks : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
lady : NP : placeholderC
lady : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
lady : N : lambda $0_{e}.placeholderP($0)
lady : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
lady : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
lady : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
lady : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
lady : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
lady : Swh : lambda $0_{e}.placeholderP($0)
lady : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
lady : S : lambda $0_{ev}.placeholderP($0)
lady : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
lady : (NP\NP) : lambda $0_{e}.$0
lady : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(v|like(pro|it,det|a($1,placeholderP($1)),$0),$0)
Syn:lambda $0_{ev}.Q(v|like(pro|it,det|a($1,placeholderP($1)),$0),$0)
lambda $0_{ev}.Q(and(v|look-3S(pro|it,$0),prep|like(det|a($1,n|lady($1)),$0)),$0)
top parse:
[('it', 'NP', 'pro|it'), ('looks', '(NP\\NP)', 'lambda $0_{e}.$0'), ('like', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('lady', 'N', 'lambda $0_{e}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['is', 'that', 'Sarah', '?']
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(eq(placeholderC,pro:dem|that,$0),$0)
Syn:lambda $0_{ev}.Q(eq(placeholderC,pro:dem|that,$0),$0)
lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Sarah,$0),$0)
top parse:
[('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that'), ('Sarah', 'NP', 'placeholderC'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'a', 'man', '?']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
man : N : lambda $0_{e}.n|man($0)
man : Swh : lambda $0_{e}.n|man($0)
man : NP : det|the($0,n|man($0))
man : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('man', 'N', 'lambda $0_{e}.n|man($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'another', 'man']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
another : NP : placeholderC
another : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : N : lambda $0_{e}.placeholderP($0)
another : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
another : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
another : Swh : lambda $0_{e}.placeholderP($0)
another : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : S : lambda $0_{ev}.placeholderP($0)
another : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (NP\NP) : lambda $0_{e}.$0
another : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (St\NP) : lambda $0_{e}.placeholderP($0)
another : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
man : N : lambda $0_{e}.n|man($0)
man : Swh : lambda $0_{e}.n|man($0)
man : NP : det|the($0,n|man($0))
man : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
WRONG
lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|man($1)),$0)
S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|man($1)),$0)
lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|man($1)),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('another', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('man', 'N', 'lambda $0_{e}.n|man($0)')]


['what', "'s", 'Sarah', 'doing']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
doing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)/S)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,placeholderC,$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,placeholderC,$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Sarah,$0,$1),$1)
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('Sarah', 'NP', 'placeholderC'), ('doing', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]


['where', "'s", 'your', 'crayon']
where : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
where : (Swh/(St\NP)) : lambda $0_{<e,t>}.$0
where : ((St/NP)/(St/NP)) : lambda $0_{<e,t>}.$0
where : ((St\NP)/(St\NP)) : lambda $0_{<e,t>}.$0
where : (N/N) : lambda $0_{<e,t>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
your : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : NP : pro:poss:det|your($0,n|telephone($0))
your : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
your : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : NP : pro:poss:det|your($0,n|spoon($0))
your : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
crayon : NP : placeholderC
crayon : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
crayon : N : lambda $0_{e}.placeholderP($0)
crayon : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
crayon : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
crayon : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
crayon : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
crayon : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
crayon : Swh : lambda $0_{e}.placeholderP($0)
crayon : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
crayon : S : lambda $0_{ev}.placeholderP($0)
crayon : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
crayon : (NP\NP) : lambda $0_{e}.$0
crayon : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
crayon : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
crayon : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
crayon : (St\NP) : lambda $0_{e}.placeholderP($0)
crayon : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
crayon : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
crayon : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|crayon($1)),$0)
CORRECTPlaceholder
lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
top parse:
[('where', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ("'s", '((St/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)'), ('your', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('crayon', 'N', 'lambda $0_{e}.placeholderP($0)')]


['what', "'s", 'the', 'baby', 'doing']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
doing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)/S)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,det|the($2,n|baby($2)),$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,det|the($2,n|baby($2)),$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)'), ('doing', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]


['what', "'s", 'the', 'baby', 'doing']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
doing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)/S)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,det|the($2,n|baby($2)),$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,det|the($2,n|baby($2)),$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)'), ('doing', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]


['that', "'s", 'a', 'red', 'baby']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
red : NP : placeholderC
red : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
red : N : lambda $0_{e}.placeholderP($0)
red : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
red : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
red : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
red : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
red : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
red : Swh : lambda $0_{e}.placeholderP($0)
red : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
red : S : lambda $0_{ev}.placeholderP($0)
red : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (NP\NP) : lambda $0_{e}.$0
red : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
WRONG
lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(placeholderP($1),n|baby($1))),$0)
S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(placeholderP($1),n|baby($1))),$0)
lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|red($1),n|baby($1))),$0)
CORRECTPlaceholder
lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(placeholderP($1),n|baby($1))),$0)
S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(placeholderP($1),n|baby($1))),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '((NP/N)/N)', 'lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))'), ('red', 'N', 'lambda $0_{e}.placeholderP($0)'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['we', "'ll", 'make', 'a', 'fat', 'baby']
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
'll : NP : pro|we
'll : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will(v|hurt&ZERO($2,$0($1),$3),$3)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|do($0,$1,$2),$2)
'll : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|turn($0,$1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|turn($0,$1,$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
'll : S : lambda $0_{ev}.v|play(pro|we,$0)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
make : NP : placeholderC
make : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : N : lambda $0_{e}.placeholderP($0)
make : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
make : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
make : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
make : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
make : Swh : lambda $0_{e}.placeholderP($0)
make : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : S : lambda $0_{ev}.placeholderP($0)
make : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (NP\NP) : lambda $0_{e}.$0
make : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
fat : NP : placeholderC
fat : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
fat : N : lambda $0_{e}.placeholderP($0)
fat : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
fat : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
fat : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
fat : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
fat : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
fat : Swh : lambda $0_{e}.placeholderP($0)
fat : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
fat : S : lambda $0_{ev}.placeholderP($0)
fat : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
fat : (NP\NP) : lambda $0_{e}.$0
fat : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
WRONG
lambda $0_{ev}.aux|will(v|turn(det|the($1,adj|nice($1)),det|the($2,n|baby($2)),$0),$0)
S:lambda $0_{ev}.aux|will(v|turn(det|the($1,adj|nice($1)),det|the($2,n|baby($2)),$0),$0)
lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|fat($1),n|baby($1))),$0),$0)
top parse:
[('we', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)'), ("'ll", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|turn($0,$1,$2)'), ('make', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('a', 'N', 'lambda $0_{e}.adj|nice($0)'), ('fat', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)')]


['does', 'this', 'baby', 'have', 'hair', '?']
does : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&3S($0($1),$1)
does : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|far($1))
does : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&3S($0($1),$1),adv|far($1))
does : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&3S($0($1),$1)
this : NP : pro:dem|this
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (((S\NP)/PP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : (((S/NP)/PP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)/PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)\PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)
have : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
have : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
have : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
have : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)
have : (((S\NP)/PP)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|have($2,$0,$3),$1($3))
have : ((NP/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.$0
have : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,lambda $2_{e}.n|tapioca($2),$1)
have : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,lambda $2_{e}.n|milk($2),$1)
have : S : lambda $0_{ev}.part|go-PROG(n:prop|Mommy,$0)
have : (((S/PP)/N)\NP) : lambda $0_{e}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and(v|have($0,$1,$3),$2($3))
have : N : lambda $0_{e}.n|pencil-PL($0)
have : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have(n:prop|Mommy,$0,$1)
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|have(n:prop|Mommy,$0,$2))
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(n:prop|Mommy,$2),v|have($1,$0,$2))
have : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
have : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
have : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have(pro|he,$0,$1)
have : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($1($2,$3),v|have(n:prop|Mommy,$0,$3)),$3)
hair : NP : placeholderC
hair : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
hair : N : lambda $0_{e}.placeholderP($0)
hair : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
hair : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
hair : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
hair : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
hair : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
hair : Swh : lambda $0_{e}.placeholderP($0)
hair : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hair : S : lambda $0_{ev}.placeholderP($0)
hair : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
hair : (NP\NP) : lambda $0_{e}.$0
hair : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|do&3S(v|have(lambda $1_{e}.n|baby($1),pro:dem|this,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do&3S(v|have(lambda $1_{e}.n|baby($1),pro:dem|this,$0),$0),$0)
lambda $0_{ev}.Q(aux|do&3S(v|have(det|this($1,n|baby($1)),lambda $2_{e}.n|hair($2),$0),$0),$0)
top parse:
[('does', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&3S($0($1),$1)'), ('this', 'NP', 'pro:dem|this'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)'), ('have', '((S\\NP)\\N)', 'lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)'), ('hair', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['what', "'s", 'that']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['isn', "'t", 'that', 'blue', '?']
isn : NP : placeholderC
isn : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
isn : N : lambda $0_{e}.placeholderP($0)
isn : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
isn : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
isn : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
isn : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
isn : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
isn : Swh : lambda $0_{e}.placeholderP($0)
isn : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : S : lambda $0_{ev}.placeholderP($0)
isn : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (NP\NP) : lambda $0_{e}.$0
isn : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
blue : NP : placeholderC
blue : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
blue : N : lambda $0_{e}.placeholderP($0)
blue : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
blue : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
blue : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
blue : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
blue : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
blue : Swh : lambda $0_{e}.placeholderP($0)
blue : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : S : lambda $0_{ev}.placeholderP($0)
blue : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (NP\NP) : lambda $0_{e}.$0
blue : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
blue : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(placeholderP(v|like(pro:dem|that,placeholderC,$0),$0),$0)
Syn:lambda $0_{ev}.Q(placeholderP(v|like(pro:dem|that,placeholderC,$0),$0),$0)
lambda $0_{ev}.Q(not(adj|blue(pro:dem|that),$0),$0)
top parse:
[('isn', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ("'t", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)'), ('that', 'NP', 'pro:dem|that'), ('blue', 'NP', 'placeholderC'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['you', 'put', 'yours', 'on', 'top']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
yours : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not($0($1,$2),$2)
yours : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not($0($1,$2),$2)
on : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|on($0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($2),$1($2))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|on($1))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|on($2))
on : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($1($2,$3),$3),prep|on($0,$3))
on : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|be&3S($1($2),$2),prep|on($0,$2))
on : (((S\S)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),prep|on($0($1),$3))
on : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($0($2,$3),$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on(det|the($3,$0($3)),$2))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),prep|on(lambda $3_{e}.n|doll-DIM($3),$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|on(lambda $2_{e}.n|doll-DIM($2),$1))
on : (((S\S)\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($0($1,$3),$2($3))
top : N : lambda $0_{e}.n|top($0)
WRONG
lambda $0_{ev}.and(not(v|put&ZERO(pro|I,pro|you,$0),$0),prep|on(lambda $1_{e}.n|top($1),$0))
S:lambda $0_{ev}.and(not(v|put&ZERO(pro|I,pro|you,$0),$0),prep|on(lambda $1_{e}.n|top($1),$0))
lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss|yours,$0),prep|on(lambda $1_{e}.n|top($1),$0))
top parse:
[('you', 'NP', 'pro|you'), ('put', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)'), ('yours', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not($0($1,$2),$2)'), ('on', '((S\\S)/N)', 'lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))'), ('top', 'N', 'lambda $0_{e}.n|top($0)')]


['what', "'s", 'Sarah', 'doing']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
doing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : (((S/NP)/S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
doing : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
doing : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
doing : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
doing : ((Swh\S)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($0($2,$3),$3),$1($3))
doing : (((S\NP)/S)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,placeholderC,$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(eq($0,placeholderC,$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Sarah,$0,$1),$1)
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('Sarah', 'NP', 'placeholderC'), ('doing', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)')]


['what', 'does', 'she', 'have']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
does : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&3S($0($1),$1)
does : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|far($1))
does : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|do&3S($0($1),$1),adv|far($1))
does : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&3S($0($1),$1)
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)
have : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
have : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
have : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
have : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($1,$0,$2)
have : (((S\NP)/PP)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|have($2,$0,$3),$1($3))
have : ((NP/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.$0
have : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,lambda $2_{e}.n|tapioca($2),$1)
have : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,lambda $2_{e}.n|milk($2),$1)
have : S : lambda $0_{ev}.part|go-PROG(n:prop|Mommy,$0)
have : (((S/PP)/N)\NP) : lambda $0_{e}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and(v|have($0,$1,$3),$2($3))
have : N : lambda $0_{e}.n|pencil-PL($0)
have : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have(n:prop|Mommy,$0,$1)
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|have(n:prop|Mommy,$0,$2))
have : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(n:prop|Mommy,$2),v|have($1,$0,$2))
have : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
have : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
have : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have(pro|he,$0,$1)
have : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($1($2,$3),v|have(n:prop|Mommy,$0,$3)),$3)
NO PARSE
['what', "'d", 'you', 'do']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
'd : NP : placeholderC
'd : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
'd : N : lambda $0_{e}.placeholderP($0)
'd : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
'd : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
'd : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
'd : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
'd : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
'd : Swh : lambda $0_{e}.placeholderP($0)
'd : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : S : lambda $0_{ev}.placeholderP($0)
'd : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : (NP\NP) : lambda $0_{e}.$0
'd : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : (St\NP) : lambda $0_{e}.placeholderP($0)
'd : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
'd : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
'd : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|do(eq($0,pro|you,$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|do(eq($0,pro|you,$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'d", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('you', 'NP', 'pro|you'), ('do', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)')]


['magic']
magic : NP : placeholderC
magic : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : N : lambda $0_{e}.placeholderP($0)
magic : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
magic : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
magic : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
magic : Swh : lambda $0_{e}.placeholderP($0)
magic : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : S : lambda $0_{ev}.placeholderP($0)
magic : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (NP\NP) : lambda $0_{e}.$0
magic : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (St\NP) : lambda $0_{e}.placeholderP($0)
magic : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
magic : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
magic : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
magic : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
magic : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
magic : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
magic : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
magic : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
magic : (NP/NP) : lambda $0_{e}.$0
magic : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
magic : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
magic : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
magic : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
magic : (Swh/N) : lambda $0_{<e,t>}.$0
magic : (Syn/Syn) : lambda $0_{<ev,t>}.$0
magic : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
magic : (St\St) : lambda $0_{t}.$0
magic : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
magic : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
magic : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
magic : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
magic : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : (Swh\N) : lambda $0_{<e,t>}.$0
magic : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
magic : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
magic : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{e}.n|magic($0)
CORRECTPlaceholder
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
top parse:
[('magic', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['magic']
magic : NP : placeholderC
magic : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : N : lambda $0_{e}.placeholderP($0)
magic : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
magic : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
magic : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
magic : Swh : lambda $0_{e}.placeholderP($0)
magic : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : S : lambda $0_{ev}.placeholderP($0)
magic : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (NP\NP) : lambda $0_{e}.$0
magic : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (St\NP) : lambda $0_{e}.placeholderP($0)
magic : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
magic : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
magic : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
magic : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
magic : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
magic : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
magic : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
magic : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
magic : (NP/NP) : lambda $0_{e}.$0
magic : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
magic : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
magic : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
magic : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
magic : (Swh/N) : lambda $0_{<e,t>}.$0
magic : (Syn/Syn) : lambda $0_{<ev,t>}.$0
magic : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
magic : (St\St) : lambda $0_{t}.$0
magic : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
magic : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
magic : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
magic : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
magic : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : (Swh\N) : lambda $0_{<e,t>}.$0
magic : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
magic : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
magic : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{e}.n|magic($0)
CORRECTPlaceholder
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
top parse:
[('magic', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['magic']
magic : NP : placeholderC
magic : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : N : lambda $0_{e}.placeholderP($0)
magic : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
magic : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
magic : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
magic : Swh : lambda $0_{e}.placeholderP($0)
magic : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : S : lambda $0_{ev}.placeholderP($0)
magic : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (NP\NP) : lambda $0_{e}.$0
magic : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (St\NP) : lambda $0_{e}.placeholderP($0)
magic : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
magic : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
magic : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
magic : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
magic : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
magic : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
magic : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
magic : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
magic : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
magic : (NP/NP) : lambda $0_{e}.$0
magic : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
magic : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
magic : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
magic : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
magic : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
magic : (Swh/N) : lambda $0_{<e,t>}.$0
magic : (Syn/Syn) : lambda $0_{<ev,t>}.$0
magic : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
magic : (St\St) : lambda $0_{t}.$0
magic : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
magic : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
magic : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
magic : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
magic : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
magic : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
magic : (Swh\N) : lambda $0_{<e,t>}.$0
magic : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
magic : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
magic : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{e}.n|magic($0)
CORRECTPlaceholder
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
top parse:
[('magic', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['there']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
CORRECT
lambda $0_{ev}.adv:loc|there($0)
S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)')]


['there', 'it', 'goes']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
goes : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|go-3S($1,$2),$0($2))
goes : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go-3S($0,$1)
goes : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
goes : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go-3S($0,$1)
goes : ((S/NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|go-3S($1,$2),$0($2))
goes : ((S/NP)\PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|go-3S($1,$2),$0($2))
NO PARSE
['it', "'s", 'going', 'away']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)
going : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),v|read&ZERO(pro|you,$2))
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|cook($0,pro|it,$1)
going : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(pro|I,$1),$0($1))
going : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|read&ZERO(pro|you,$1))
going : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|I,$2),$0($1,$2))
going : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
going : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
going : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)
going : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|go-PROG($0,$1),$1)
going : ((S\S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&PRES(and($1($2),$0($2)),$2)
going : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES(and($0($1),v|read&ZERO(pro|you,$1)),$1)
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|go-PROG($0,$1),$1)
going : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$1),$0($1)),$1)
going : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
going : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
going : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|read&ZERO(pro|you,$1))
going : S : lambda $0_{ev}.part|go-PROG(pro|you,$0)
going : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
away : NP : placeholderC
away : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
away : N : lambda $0_{e}.placeholderP($0)
away : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
away : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
away : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
away : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
away : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
away : Swh : lambda $0_{e}.placeholderP($0)
away : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
away : S : lambda $0_{ev}.placeholderP($0)
away : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
away : (NP\NP) : lambda $0_{e}.$0
away : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
away : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
away : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
away : (St\NP) : lambda $0_{e}.placeholderP($0)
away : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
away : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
away : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.Q(part|go-PROG(pro|it,$0),$0)
Syn:lambda $0_{ev}.Q(part|go-PROG(pro|it,$0),$0)
lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|away($0))
top parse:
[('it', 'NP', 'pro|it'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('going', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)'), ('away', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['here']
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
CORRECT
lambda $0_{ev}.adv:loc|here($0)
S:lambda $0_{ev}.adv:loc|here($0)
top parse:
[('here', 'S', 'lambda $0_{ev}.adv:loc|here($0)')]


['there']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
CORRECT
lambda $0_{ev}.adv:loc|there($0)
S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)')]


['there']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
CORRECT
lambda $0_{ev}.adv:loc|there($0)
S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)')]


['isn', "'t", 'that', 'awful']
isn : NP : placeholderC
isn : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
isn : N : lambda $0_{e}.placeholderP($0)
isn : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
isn : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
isn : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
isn : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
isn : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
isn : Swh : lambda $0_{e}.placeholderP($0)
isn : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : S : lambda $0_{ev}.placeholderP($0)
isn : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (NP\NP) : lambda $0_{e}.$0
isn : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
isn : (St\NP) : lambda $0_{e}.placeholderP($0)
isn : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
isn : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
isn : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
awful : NP : placeholderC
awful : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
awful : N : lambda $0_{e}.placeholderP($0)
awful : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
awful : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
awful : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
awful : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
awful : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
awful : Swh : lambda $0_{e}.placeholderP($0)
awful : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
awful : S : lambda $0_{ev}.placeholderP($0)
awful : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
awful : (NP\NP) : lambda $0_{e}.$0
awful : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
awful : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
awful : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
awful : (St\NP) : lambda $0_{e}.placeholderP($0)
awful : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
awful : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
awful : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.v|like(det|that($2,placeholderP($2)),$0,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.v|like(det|that($2,placeholderP($2)),$0,$1)
lambda $0_{ev}.not(adj|awful(pro:dem|that),$0)
top parse:
[('isn', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'t", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)'), ('that', '(NP/N)', 'lambda $0_{<e,t>}.det|that($1,$0($1))'), ('awful', 'N', 'lambda $0_{e}.placeholderP($0)')]


['you', 'made', 'a', 'baby']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
made : NP : placeholderC
made : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
made : N : lambda $0_{e}.placeholderP($0)
made : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
made : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
made : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
made : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
made : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
made : Swh : lambda $0_{e}.placeholderP($0)
made : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
made : S : lambda $0_{ev}.placeholderP($0)
made : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
made : (NP\NP) : lambda $0_{e}.$0
made : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
made : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
made : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
made : (St\NP) : lambda $0_{e}.placeholderP($0)
made : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
made : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
made : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
WRONG
lambda $0_{ev}.eq(pro|you,det|a($1,n|baby($1)),$0)
S:lambda $0_{ev}.eq(pro|you,det|a($1,n|baby($1)),$0)
lambda $0_{ev}.v|make&PAST(pro|you,det|a($1,n|baby($1)),$0)
top parse:
[('you', 'NP', 'pro|you'), ('made', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)')]


['you', 'drew', 'a', 'little', 'baby']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
drew : NP : placeholderC
drew : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
drew : N : lambda $0_{e}.placeholderP($0)
drew : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
drew : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
drew : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
drew : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
drew : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
drew : Swh : lambda $0_{e}.placeholderP($0)
drew : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
drew : S : lambda $0_{ev}.placeholderP($0)
drew : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
drew : (NP\NP) : lambda $0_{e}.$0
drew : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
drew : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
drew : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
little : NP : placeholderC
little : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
little : N : lambda $0_{e}.placeholderP($0)
little : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
little : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
little : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
little : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
little : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
little : Swh : lambda $0_{e}.placeholderP($0)
little : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
little : S : lambda $0_{ev}.placeholderP($0)
little : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
little : (NP\NP) : lambda $0_{e}.$0
little : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
little : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
little : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
WRONG
lambda $0_{ev}.not(placeholderP(eq(pro|it,det|a($1,placeholderP($1)),$0),$0),$0)
S:lambda $0_{ev}.not(placeholderP(eq(pro|it,det|a($1,placeholderP($1)),$0),$0),$0)
lambda $0_{ev}.v|draw&PAST(pro|you,det|a($1,and(adj|little($1),n|baby($1))),$0)
top parse:
[('you', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ('drew', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('little', 'N', 'lambda $0_{e}.placeholderP($0)'), ('baby', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)')]


['that', "'s", 'your', 'card', '?']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
your : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : NP : pro:poss:det|your($0,n|telephone($0))
your : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
your : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : NP : pro:poss:det|your($0,n|spoon($0))
your : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
card : NP : placeholderC
card : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
card : N : lambda $0_{e}.placeholderP($0)
card : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
card : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
card : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
card : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
card : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
card : Swh : lambda $0_{e}.placeholderP($0)
card : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
card : S : lambda $0_{ev}.placeholderP($0)
card : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
card : (NP\NP) : lambda $0_{e}.$0
card : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
card : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
card : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,placeholderP($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,placeholderP($1)),$0),$0)
lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|card($1)),$0),$0)
CORRECTPlaceholder
lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,placeholderP($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,placeholderP($1)),$0),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('your', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('card', 'N', 'lambda $0_{e}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['write', 'Eve', '?']
write : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
write : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
write : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.v|write(n:prop|Fraser,n:prop|Eve,$0)
S:lambda $0_{ev}.v|write(n:prop|Fraser,n:prop|Eve,$0)
lambda $0_{ev}.Q(v|write(pro|you,n:prop|Eve,$0),$0)
top parse:
[('write', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)'), ('Eve', 'NP', 'n:prop|Eve'), ('?', 'NP', 'n:prop|Fraser')]


['el', 'vl', 'el', 'Eve']
el : NP : placeholderC
el : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
el : N : lambda $0_{e}.placeholderP($0)
el : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
el : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
el : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
el : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
el : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
el : Swh : lambda $0_{e}.placeholderP($0)
el : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
el : S : lambda $0_{ev}.placeholderP($0)
el : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (NP\NP) : lambda $0_{e}.$0
el : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (St\NP) : lambda $0_{e}.placeholderP($0)
el : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
el : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
el : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
vl : NP : placeholderC
vl : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
vl : N : lambda $0_{e}.placeholderP($0)
vl : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
vl : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
vl : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
vl : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
vl : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
vl : Swh : lambda $0_{e}.placeholderP($0)
vl : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
vl : S : lambda $0_{ev}.placeholderP($0)
vl : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
vl : (NP\NP) : lambda $0_{e}.$0
vl : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
vl : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
vl : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
vl : (St\NP) : lambda $0_{e}.placeholderP($0)
vl : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
vl : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
vl : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
el : NP : placeholderC
el : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
el : N : lambda $0_{e}.placeholderP($0)
el : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
el : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
el : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
el : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
el : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
el : Swh : lambda $0_{e}.placeholderP($0)
el : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
el : S : lambda $0_{ev}.placeholderP($0)
el : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (NP\NP) : lambda $0_{e}.$0
el : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
el : (St\NP) : lambda $0_{e}.placeholderP($0)
el : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
el : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
el : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
WRONG
lambda $0_{ev}.eq(det|the($1,placeholderP($1)),n:prop|Eve,$0)
S:lambda $0_{ev}.eq(det|the($1,placeholderP($1)),n:prop|Eve,$0)
n:prop|Eve
top parse:
[('el', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('vl', 'N', 'lambda $0_{e}.placeholderP($0)'), ('el', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('Eve', 'NP', 'n:prop|Eve')]


['I', 'wouldn', "'t", 'put', 'that']
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
wouldn : NP : placeholderC
wouldn : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wouldn : N : lambda $0_{e}.placeholderP($0)
wouldn : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
wouldn : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
wouldn : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
wouldn : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wouldn : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
wouldn : Swh : lambda $0_{e}.placeholderP($0)
wouldn : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wouldn : S : lambda $0_{ev}.placeholderP($0)
wouldn : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
wouldn : (NP\NP) : lambda $0_{e}.$0
wouldn : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wouldn : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wouldn : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
WRONG
lambda $0_{ev}.aux|be&1S(v|put&ZERO(det|the($1,n|tomato($1)),pro:dem|that,$0),$0)
S:lambda $0_{ev}.aux|be&1S(v|put&ZERO(det|the($1,n|tomato($1)),pro:dem|that,$0),$0)
lambda $0_{ev}.not(aux|will&COND(v|put&ZERO(pro|I,pro:dem|that,$0),$0),$0)
top parse:
[('I', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)'), ('wouldn', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ("'t", 'N', 'lambda $0_{e}.n|tomato($0)'), ('put', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['do', 'not', 'do', 'it', 'again']
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
not : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(eq($1,$0,$2),$2)
not : (St\NP) : lambda $0_{e}.adj|sure($0)
not : NP : pro:poss|yours
not : (S\NP) : lambda $0_{e}.lambda $1_{ev}.not(adj|sure($0),$1)
not : N : lambda $0_{e}.n|cup($0)
not : (S/NP) : lambda $0_{e}.lambda $1_{ev}.not($0,$1)
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.$0
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
not : St : adj|sure(pro|I)
not : NP : det|a($0,n|fox($0))
not : (S/NP) : lambda $0_{e}.lambda $1_{ev}.not(adj|sure($0),$1)
not : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
not : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|be&PRES($0($1,$2,$3),$3),$3)
not : NP : det|a($0,n|cup($0))
not : (((S\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
not : (S/NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
not : (((S/NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
not : S : lambda $0_{ev}.not(adj|sure(pro|I),$0)
not : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(eq($1,$0,$2),$2)
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
again : NP : placeholderC
again : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : N : lambda $0_{e}.placeholderP($0)
again : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
again : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
again : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
again : Swh : lambda $0_{e}.placeholderP($0)
again : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : S : lambda $0_{ev}.placeholderP($0)
again : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (NP\NP) : lambda $0_{e}.$0
again : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.Q(aux|do(v|do(pro:poss|yours,pro|it,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do(v|do(pro:poss|yours,pro|it,$0),$0),$0)
lambda $0_{ev}.not(and(aux|do(v|do(pro|you,pro|it,$0),$0),adv|again($0)),$0)
top parse:
[('do', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ('not', 'NP', 'pro:poss|yours'), ('do', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)'), ('it', 'NP', 'pro|it'), ('again', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'an', 'icecube']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
an : NP : placeholderC
an : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : N : lambda $0_{e}.placeholderP($0)
an : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
an : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
an : Swh : lambda $0_{e}.placeholderP($0)
an : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : S : lambda $0_{ev}.placeholderP($0)
an : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (NP\NP) : lambda $0_{e}.$0
an : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (St\NP) : lambda $0_{e}.placeholderP($0)
an : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
icecube : NP : placeholderC
icecube : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecube : N : lambda $0_{e}.placeholderP($0)
icecube : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
icecube : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
icecube : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
icecube : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
icecube : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
icecube : Swh : lambda $0_{e}.placeholderP($0)
icecube : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecube : S : lambda $0_{ev}.placeholderP($0)
icecube : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
icecube : (NP\NP) : lambda $0_{e}.$0
icecube : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecube : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
icecube : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
icecube : (St\NP) : lambda $0_{e}.placeholderP($0)
icecube : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
icecube : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
icecube : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.eq(pro:dem|that,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,placeholderP($1)),$0)
lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|ice+n|cube($1)),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('an', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('icecube', 'N', 'lambda $0_{e}.placeholderP($0)')]


['I', 'put', 'it', 'on', 'your', 'stool']
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
on : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|on($0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($2),$1($2))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|on($1))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|on($2))
on : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($1($2,$3),$3),prep|on($0,$3))
on : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|be&3S($1($2),$2),prep|on($0,$2))
on : (((S\S)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),prep|on($0($1),$3))
on : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($0($2,$3),$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on(det|the($3,$0($3)),$2))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),prep|on(lambda $3_{e}.n|doll-DIM($3),$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|on(lambda $2_{e}.n|doll-DIM($2),$1))
on : (((S\S)\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($0($1,$3),$2($3))
your : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : NP : pro:poss:det|your($0,n|telephone($0))
your : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
your : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : NP : pro:poss:det|your($0,n|spoon($0))
your : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
stool : N : lambda $0_{e}.n|stool($0)
stool : Swh : lambda $0_{e}.n|stool($0)
CORRECT
lambda $0_{ev}.and(v|put&ZERO(pro|I,pro|it,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
S:lambda $0_{ev}.and(v|put&ZERO(pro|I,pro|it,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
top parse:
[('I', 'NP', 'pro|I'), ('put', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)'), ('it', 'NP', 'pro|it'), ('on', '(((S\\NP)\\(S\\NP))/NP)', 'lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))'), ('your', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('stool', 'N', 'lambda $0_{e}.n|stool($0)')]


['do', 'you', 'see', 'it', '?']
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|it,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|it,$0),$0),$0)
top parse:
[('do', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ('you', 'NP', 'pro|you'), ('see', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)'), ('it', 'NP', 'pro|it'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['where', 'is', 'it']
where : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
where : (Swh/(St\NP)) : lambda $0_{<e,t>}.$0
where : ((St/NP)/(St/NP)) : lambda $0_{<e,t>}.$0
where : ((St\NP)/(St\NP)) : lambda $0_{<e,t>}.$0
where : (N/N) : lambda $0_{<e,t>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{e}.eqLoc(pro|it,$0)
Swh:lambda $0_{e}.eqLoc(pro|it,$0)
top parse:
[('where', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ('is', '((St/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)'), ('it', 'NP', 'pro|it')]


['here']
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
CORRECT
lambda $0_{ev}.adv:loc|here($0)
S:lambda $0_{ev}.adv:loc|here($0)
top parse:
[('here', 'S', 'lambda $0_{ev}.adv:loc|here($0)')]


['a', 'big', 'bottle', '?']
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
big : NP : placeholderC
big : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
big : N : lambda $0_{e}.placeholderP($0)
big : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
big : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
big : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
big : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
big : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
big : Swh : lambda $0_{e}.placeholderP($0)
big : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
big : S : lambda $0_{ev}.placeholderP($0)
big : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
big : (NP\NP) : lambda $0_{e}.$0
big : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
big : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
big : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
big : (St\NP) : lambda $0_{e}.placeholderP($0)
big : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
big : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
big : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
bottle : Swh : lambda $0_{e}.n|bottle($0)
bottle : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$0,$1,$2)
bottle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,lambda $3_{e}.n|doll-DIM($3),$0,$2)
bottle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($0,lambda $3_{e}.n|doll-DIM($3),$1,$2)
bottle : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),det|a($2,placeholderP($2)),$0),$0)
Syn:lambda $0_{ev}.Q(v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),det|a($2,placeholderP($2)),$0),$0)
lambda $0_{ev}.Q(det|a($1,and(adj|big($1),n|bottle($1))),$0)
top parse:
[('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('big', 'N', 'lambda $0_{e}.placeholderP($0)'), ('bottle', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['and', 'what', "'ll", 'we', 'put', 'in', 'the', 'bottle']
and : (S/S) : lambda $0_{<ev,t>}.$0
and : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(lambda $2_{e}.n|bed($2),$1))
and : N : lambda $0_{e}.n|bed($0)
and : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|watch($0,$1,$2)
and : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
and : N : lambda $0_{e}.n|telephone($0)
and : (((S/N)/(PP/N))/S) : lambda $0_{<ev,t>}.lambda $1_{<<e,t>,<ev,t>>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($0($3),$1($2,$3))
and : (NP\NP) : lambda $0_{e}.and($0,n:prop|Jill)
and : (NP\NP) : lambda $0_{e}.and(n:prop|Jack,$0)
and : ((NP\NP)/NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : ((NP/NP)\NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : (NP/NP) : lambda $0_{e}.and($0,n:prop|Jill)
and : (NP/NP) : lambda $0_{e}.and(n:prop|Jack,$0)
and : ((NP\NP)/(NP\NP)) : lambda $0_{<e,e>}.$0
and : ((NP/NP)\(NP/NP)) : lambda $0_{<e,e>}.$0
and : ((NP\NP)\NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : ((NP\NP)\(NP\NP)) : lambda $0_{<e,e>}.$0
and : (PP/PP) : lambda $0_{<ev,t>}.$0
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
'll : NP : pro|we
'll : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will(v|hurt&ZERO($2,$0($1),$3),$3)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|do($0,$1,$2),$2)
'll : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|turn($0,$1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|turn($0,$1,$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
'll : S : lambda $0_{ev}.v|play(pro|we,$0)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
in : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : (((S\N)\S)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\S)/N)\(PP/N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\S)\N)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S\N)\S)/((S\N)\S)) : lambda $0_{<<ev,t>,<<e,t>,<ev,t>>>}.$0
in : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|he,$0,$1)
in : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\N)\S)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (((S\S)\N)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)\(S\NP))\N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S/NP)\N)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
bottle : Swh : lambda $0_{e}.n|bottle($0)
bottle : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$0,$1,$2)
bottle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,lambda $3_{e}.n|doll-DIM($3),$0,$2)
bottle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($0,lambda $3_{e}.n|doll-DIM($3),$1,$2)
bottle : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
NO PARSE
['that', "'s", 'good']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
good : N : lambda $0_{e}.and(adj|good($0),n|girl($0))
good : (St\NP) : lambda $0_{e}.adj|good($0)
good : N : lambda $0_{e}.adj|good($0)
good : N : lambda $0_{e}.n|girl($0)
good : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : St : adj|good(pro|it)
good : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((NP/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
good : ((NP\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
good : ((NP\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
good : (St\NP) : lambda $0_{e}.n|girl($0)
good : ((St/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : ((St/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((St\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((St/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : (St/NP) : lambda $0_{e}.adj|good($0)
CORRECT
adj|good(pro:dem|that)
St:adj|good(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('good', '(St\\NP)', 'lambda $0_{e}.adj|good($0)')]


['what', 'shall', 'we', 'put', 'in', 'that', 'bottle']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
shall : NP : placeholderC
shall : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
shall : N : lambda $0_{e}.placeholderP($0)
shall : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
shall : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
shall : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
shall : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
shall : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
shall : Swh : lambda $0_{e}.placeholderP($0)
shall : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : S : lambda $0_{ev}.placeholderP($0)
shall : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
in : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : (((S\N)\S)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\S)/N)\(PP/N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\S)\N)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S\N)\S)/((S\N)\S)) : lambda $0_{<<ev,t>,<<e,t>,<ev,t>>>}.$0
in : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|he,$0,$1)
in : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\N)\S)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (((S\S)\N)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)\(S\NP))\N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S/NP)\N)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
bottle : Swh : lambda $0_{e}.n|bottle($0)
bottle : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$0,$1,$2)
bottle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,lambda $3_{e}.n|doll-DIM($3),$0,$2)
bottle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($0,lambda $3_{e}.n|doll-DIM($3),$1,$2)
bottle : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
NO PARSE
['Fizzie']
Fizzie : NP : placeholderC
Fizzie : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Fizzie : N : lambda $0_{e}.placeholderP($0)
Fizzie : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Fizzie : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Fizzie : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Fizzie : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Fizzie : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Fizzie : Swh : lambda $0_{e}.placeholderP($0)
Fizzie : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Fizzie : S : lambda $0_{ev}.placeholderP($0)
Fizzie : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Fizzie : (NP\NP) : lambda $0_{e}.$0
Fizzie : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Fizzie : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Fizzie : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Fizzie : (St\NP) : lambda $0_{e}.placeholderP($0)
Fizzie : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Fizzie : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Fizzie : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Fizzie : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Fizzie : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Fizzie : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Fizzie : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Fizzie : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Fizzie : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
Fizzie : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Fizzie : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
Fizzie : (NP/NP) : lambda $0_{e}.$0
Fizzie : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Fizzie : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Fizzie : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Fizzie : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
Fizzie : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Fizzie : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
Fizzie : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
Fizzie : (Swh/N) : lambda $0_{<e,t>}.$0
Fizzie : (Syn/Syn) : lambda $0_{<ev,t>}.$0
Fizzie : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
Fizzie : (St\St) : lambda $0_{t}.$0
Fizzie : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Fizzie : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Fizzie : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
Fizzie : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Fizzie : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
Fizzie : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Fizzie : (Swh\N) : lambda $0_{<e,t>}.$0
Fizzie : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
Fizzie : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Fizzie : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
n:prop|Fizzie
top parse:
[('Fizzie', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['what', "'s", 'a', 'matter']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
matter : NP : placeholderC
matter : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
matter : N : lambda $0_{e}.placeholderP($0)
matter : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
matter : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
matter : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
matter : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
matter : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
matter : Swh : lambda $0_{e}.placeholderP($0)
matter : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : S : lambda $0_{ev}.placeholderP($0)
matter : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (NP\NP) : lambda $0_{e}.$0
matter : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (St\NP) : lambda $0_{e}.placeholderP($0)
matter : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
matter : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
matter : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,placeholderP($2)),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,placeholderP($2)),$1)
lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,n|matter($2)),$1)
CORRECTPlaceholder
lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,placeholderP($2)),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,placeholderP($2)),$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('matter', 'N', 'lambda $0_{e}.placeholderP($0)')]


['what', "'re", 'you', 'putting', 'in']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
're : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : NP : pro|they
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|have-PROG($1,$0,$2),$2)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call($1,$0,$2)
're : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(pro|you,$1),$0($1))
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|find($0,pro|it,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|call($0,n:prop|Granma,$1)
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|be&PRES(part|have-PROG($1,$0,$2),$2),$2)
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (((S/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.part|do-PROG($0($1),$2,$3)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|call(pro|you,$0,$2))
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|call($1,$0,$2))
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
're : S : lambda $0_{ev}.part|swim-PROG(pro|they,$0)
're : ((S\N)\NP) : lambda $0_{e}.lambda $1_{<e,t>}.lambda $2_{ev}.part|have-PROG($0,$1,$2)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
putting : NP : placeholderC
putting : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
putting : N : lambda $0_{e}.placeholderP($0)
putting : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
putting : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
putting : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
putting : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
putting : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
putting : Swh : lambda $0_{e}.placeholderP($0)
putting : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
putting : S : lambda $0_{ev}.placeholderP($0)
putting : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
putting : (NP\NP) : lambda $0_{e}.$0
putting : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
putting : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
putting : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
in : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : (((S\N)\S)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\S)/N)\(PP/N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\S)\N)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S\N)\S)/((S\N)\S)) : lambda $0_{<<ev,t>,<<e,t>,<ev,t>>>}.$0
in : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|he,$0,$1)
in : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\N)\S)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (((S\S)\N)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)\(S\NP))\N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S/NP)\N)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
WRONG
lambda $0_{ev}.and(part|swim-PROG(pro|you,$0),prep|in(lambda $1_{e}.placeholderP($1),$0))
S:lambda $0_{ev}.and(part|swim-PROG(pro|you,$0),prep|in(lambda $1_{e}.placeholderP($1),$0))
lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|put-PROG(pro|you,$0,$1),$1),adv:loc|in($1))
top parse:
[('what', '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'re", '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)'), ('you', 'NP', 'pro|you'), ('putting', 'N', 'lambda $0_{e}.placeholderP($0)'), ('in', '((S\\S)\\N)', 'lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))')]


['put', 'another', 'milk']
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
another : NP : placeholderC
another : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : N : lambda $0_{e}.placeholderP($0)
another : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
another : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
another : Swh : lambda $0_{e}.placeholderP($0)
another : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : S : lambda $0_{ev}.placeholderP($0)
another : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (NP\NP) : lambda $0_{e}.$0
another : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (St\NP) : lambda $0_{e}.placeholderP($0)
another : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
another : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
another : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
another : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
another : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
another : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
milk : N : lambda $0_{e}.n|milk($0)
milk : Swh : lambda $0_{e}.n|milk($0)
milk : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do($0($1,$2),$2),$2)
milk : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
milk : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
milk : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
milk : (((S\NP)\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
milk : (((S\S)\(S\S))\((S\S)\(S\S))) : lambda $0_{<<<ev,t>,<ev,t>>,<<ev,t>,<ev,t>>>}.$0
milk : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do($0($1,$2),$2),$2)
milk : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
milk : (((S\S)\(S\S))/((S\S)\(S\S))) : lambda $0_{<<<ev,t>,<ev,t>>,<<ev,t>,<ev,t>>>}.$0
milk : (((S/S)/(S/S))\((S/S)/(S/S))) : lambda $0_{<<<ev,t>,<ev,t>>,<<ev,t>,<ev,t>>>}.$0
WRONG
lambda $0_{ev}.v|put&ZERO(pro|you,det|the($1,n|milk($1)),$0)
S:lambda $0_{ev}.v|put&ZERO(pro|you,det|the($1,n|milk($1)),$0)
lambda $0_{ev}.v|put&ZERO(pro|you,qn|another($1,n|milk($1)),$0)
top parse:
[('put', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)'), ('another', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('milk', 'N', 'lambda $0_{e}.n|milk($0)')]


['where', "'s", 'your', 'toy']
where : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
where : (Swh/(St\NP)) : lambda $0_{<e,t>}.$0
where : ((St/NP)/(St/NP)) : lambda $0_{<e,t>}.$0
where : ((St\NP)/(St\NP)) : lambda $0_{<e,t>}.$0
where : (N/N) : lambda $0_{<e,t>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
your : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : NP : pro:poss:det|your($0,n|telephone($0))
your : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
your : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : NP : pro:poss:det|your($0,n|spoon($0))
your : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
toy : NP : placeholderC
toy : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
toy : N : lambda $0_{e}.placeholderP($0)
toy : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
toy : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
toy : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
toy : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
toy : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
toy : Swh : lambda $0_{e}.placeholderP($0)
toy : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
toy : S : lambda $0_{ev}.placeholderP($0)
toy : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
toy : (NP\NP) : lambda $0_{e}.$0
toy : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
toy : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
toy : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
toy : (St\NP) : lambda $0_{e}.placeholderP($0)
toy : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
toy : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
toy : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|toy($1)),$0)
CORRECTPlaceholder
lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
top parse:
[('where', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ("'s", '((St/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)'), ('your', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('toy', 'N', 'lambda $0_{e}.placeholderP($0)')]


['Sarah', 'can', "'t", 'find', 'her', 'rattle']
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
find : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($1,$0,$2)
find : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
find : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
find : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$2),$0($1,$2)),$2)
find : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),$0($1)),$1)
find : S : lambda $0_{ev}.v|find(pro|you,pro|it,$0)
find : (((S\S)/NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.aux|be&PRES(and($2($3),$0($1,$3)),$3)
find : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|find(pro|you,$0,$2))
find : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|find($1,$0,$2))
find : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($1,$0,$2)
find : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|find(pro|you,$0,$2))
find : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|find($1,$0,$2))
find : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($1,$0,$2)
find : (((S\S)\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.aux|be&PRES(and($2($3),$0($1,$3)),$3)
find : (((S/S)\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.aux|be&PRES(and($2($3),$0($1,$3)),$3)
find : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|find(pro|you,$0,$2))
find : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|find($1,$0,$2))
find : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$2),$0($1,$2)),$2)
find : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($1,$0,$2)
find : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),$0($1)),$1)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
rattle : NP : placeholderC
rattle : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
rattle : N : lambda $0_{e}.placeholderP($0)
rattle : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
rattle : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
rattle : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
rattle : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
rattle : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
rattle : Swh : lambda $0_{e}.placeholderP($0)
rattle : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
rattle : S : lambda $0_{ev}.placeholderP($0)
rattle : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
rattle : (NP\NP) : lambda $0_{e}.$0
rattle : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.placeholderP(aux|can(v|find(n:prop|Kathy,pro:poss:det|her($1,placeholderP($1)),$0),$0),$0)
S:lambda $0_{ev}.placeholderP(aux|can(v|find(n:prop|Kathy,pro:poss:det|her($1,placeholderP($1)),$0),$0),$0)
lambda $0_{ev}.not(aux|can(v|find(n:prop|Sarah,pro:poss:det|her($1,n|rattle($1)),$0),$0),$0)
top parse:
[('Sarah', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('can', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ("'t", 'NP', 'n:prop|Kathy'), ('find', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|find($1,$0,$2)'), ('her', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ('rattle', 'N', 'lambda $0_{e}.placeholderP($0)')]


['that', "'s", 'it']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
S:lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['that', "'s", 'it']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
S:lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['don', "'t", 'twist', 'it']
don : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : N : lambda $0_{e}.n|apple($0)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
don : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : N : lambda $0_{e}.and(n|tomato($0),n|soup($0))
don : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($0($4),$1($4)),$3)
don : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($0,$1,$2),$2)
don : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
twist : NP : placeholderC
twist : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
twist : N : lambda $0_{e}.placeholderP($0)
twist : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
twist : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
twist : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
twist : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
twist : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
twist : Swh : lambda $0_{e}.placeholderP($0)
twist : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
twist : S : lambda $0_{ev}.placeholderP($0)
twist : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
twist : (NP\NP) : lambda $0_{e}.$0
twist : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
twist : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
twist : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
twist : (St\NP) : lambda $0_{e}.placeholderP($0)
twist : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
twist : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
twist : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
WRONG
lambda $0_{ev}.aux|do(eq(n:prop|Kathy,pro|it,$0),$0)
S:lambda $0_{ev}.aux|do(eq(n:prop|Kathy,pro|it,$0),$0)
lambda $0_{ev}.not(aux|do(v|twist(pro|you,pro|it,$0),$0),$0)
top parse:
[('don', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ("'t", 'NP', 'n:prop|Kathy'), ('twist', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['we', 'go']
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG(pro|we,$1),v|go($0,$1))
(S/NP):lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG(pro|we,$1),v|go($0,$1))
lambda $0_{ev}.v|go(pro|we,$0)
top parse:
[('we', '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))'), ('go', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)')]


['there']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
CORRECT
lambda $0_{ev}.adv:loc|there($0)
S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)')]


['you', 'must', 'thank', 'her']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
must : NP : placeholderC
must : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
must : N : lambda $0_{e}.placeholderP($0)
must : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
must : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
must : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
must : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
must : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
must : Swh : lambda $0_{e}.placeholderP($0)
must : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
must : S : lambda $0_{ev}.placeholderP($0)
must : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
must : (NP\NP) : lambda $0_{e}.$0
must : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
must : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
must : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
must : (St\NP) : lambda $0_{e}.placeholderP($0)
must : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
must : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
must : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
thank : NP : placeholderC
thank : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
thank : N : lambda $0_{e}.placeholderP($0)
thank : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
thank : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
thank : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
thank : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
thank : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
thank : Swh : lambda $0_{e}.placeholderP($0)
thank : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
thank : S : lambda $0_{ev}.placeholderP($0)
thank : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
thank : (NP\NP) : lambda $0_{e}.$0
thank : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
thank : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
thank : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
thank : (St\NP) : lambda $0_{e}.placeholderP($0)
thank : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
thank : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
thank : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
WRONG
lambda $0_{ev}.eq(pro|you,pro:poss:det|her($1,placeholderP($1)),$0)
S:lambda $0_{ev}.eq(pro|you,pro:poss:det|her($1,placeholderP($1)),$0)
lambda $0_{ev}.aux|must(v|thank(pro|you,pro|her,$0),$0)
top parse:
[('you', 'NP', 'pro|you'), ('must', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('thank', 'N', 'lambda $0_{e}.placeholderP($0)'), ('her', '(NP\\N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))')]


['I', 'don', "'t", 'like', 'that', 'noise']
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
don : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : N : lambda $0_{e}.n|apple($0)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
don : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : N : lambda $0_{e}.and(n|tomato($0),n|soup($0))
don : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($0($4),$1($4)),$3)
don : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($0,$1,$2),$2)
don : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
noise : NP : placeholderC
noise : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
noise : N : lambda $0_{e}.placeholderP($0)
noise : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
noise : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
noise : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
noise : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
noise : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
noise : Swh : lambda $0_{e}.placeholderP($0)
noise : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : S : lambda $0_{ev}.placeholderP($0)
noise : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : (NP\NP) : lambda $0_{e}.$0
noise : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.aux|be&1S(aux|do(v|like(n:prop|Kathy,det|that($1,placeholderP($1)),$0),$0),$0)
S:lambda $0_{ev}.aux|be&1S(aux|do(v|like(n:prop|Kathy,det|that($1,placeholderP($1)),$0),$0),$0)
lambda $0_{ev}.not(aux|do(v|like(pro|I,det|that($1,n|noise($1)),$0),$0),$0)
top parse:
[('I', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)'), ('don', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ("'t", 'NP', 'n:prop|Kathy'), ('like', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)'), ('that', '(NP/N)', 'lambda $0_{<e,t>}.det|that($1,$0($1))'), ('noise', 'N', 'lambda $0_{e}.placeholderP($0)')]


['the', 'spoon']
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
spoon : N : lambda $0_{e}.n|spoon($0)
spoon : (S\NP) : lambda $0_{e}.lambda $1_{ev}.not($0,$1)
CORRECT
det|the($0,n|spoon($0))
NP:det|the($0,n|spoon($0))
top parse:
[('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('spoon', 'N', 'lambda $0_{e}.n|spoon($0)')]


['what', "'d", 'you', 'put', 'on', 'the', 'spoon']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
'd : NP : placeholderC
'd : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
'd : N : lambda $0_{e}.placeholderP($0)
'd : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
'd : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
'd : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
'd : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
'd : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
'd : Swh : lambda $0_{e}.placeholderP($0)
'd : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : S : lambda $0_{ev}.placeholderP($0)
'd : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
on : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|on($0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($2),$1($2))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|on($1))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|on($2))
on : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($1($2,$3),$3),prep|on($0,$3))
on : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|be&3S($1($2),$2),prep|on($0,$2))
on : (((S\S)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),prep|on($0($1),$3))
on : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($0($2,$3),$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on(det|the($3,$0($3)),$2))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),prep|on(lambda $3_{e}.n|doll-DIM($3),$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|on(lambda $2_{e}.n|doll-DIM($2),$1))
on : (((S\S)\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($0($1,$3),$2($3))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
spoon : N : lambda $0_{e}.n|spoon($0)
spoon : (S\NP) : lambda $0_{e}.lambda $1_{ev}.not($0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.and(v|put&ZERO($0,det|the($2,n|telephone($2)),$1),prep|on(det|the($3,n|spoon($3)),$1))
Swh:lambda $0_{e}.lambda $1_{ev}.and(v|put&ZERO($0,det|the($2,n|telephone($2)),$1),prep|on(det|the($3,n|spoon($3)),$1))
lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|put&ZERO(pro|you,$0,$1),$1),prep|on(det|the($2,n|spoon($2)),$1))
top parse:
[('what', '(Swh/(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'d", '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('you', 'N', 'lambda $0_{e}.n|telephone($0)'), ('put', '((S\\NP)\\NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)'), ('on', '(((S\\NP)\\(S\\NP))/NP)', 'lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('spoon', 'N', 'lambda $0_{e}.n|spoon($0)')]


['put', 'some', 'jello', 'in']
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
some : (NP/N) : lambda $0_{<e,t>}.qn|some($1,$0($1))
some : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)
some : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)
some : S : lambda $0_{ev}.adv:int|just($0)
some : (((S\S)\(S\S))/S) : lambda $0_{<ev,t>}.lambda $1_{<<ev,t>,<ev,t>>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($1($2,$3),$0($3))
some : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : (NP\N) : lambda $0_{<e,t>}.qn|some($1,$0($1))
some : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)
some : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\S)\(S\S))\S) : lambda $0_{<ev,t>}.lambda $1_{<<ev,t>,<ev,t>>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($1($2,$3),$0($3))
some : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)
jello : NP : placeholderC
jello : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
jello : N : lambda $0_{e}.placeholderP($0)
jello : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
jello : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
jello : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
jello : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
jello : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
jello : Swh : lambda $0_{e}.placeholderP($0)
jello : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
jello : S : lambda $0_{ev}.placeholderP($0)
jello : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
jello : (NP\NP) : lambda $0_{e}.$0
jello : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
jello : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
jello : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
jello : (St\NP) : lambda $0_{e}.placeholderP($0)
jello : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
jello : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
jello : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
in : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : (((S\N)\S)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|in($0,$1)
in : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\S)/N)\(PP/N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\S)\N)/(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S\N)\S)/((S\N)\S)) : lambda $0_{<<ev,t>,<<e,t>,<ev,t>>>}.$0
in : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|he,$0,$1)
in : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))
in : (((S\NP)\N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
in : (((S\N)\S)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($1($3),$0($2,$3))
in : (((S\S)\N)\(PP\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
in : (((S\NP)\(S\NP))\N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|in($0,$3))
in : (((S/NP)\N)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|in($1,$3))
WRONG
lambda $0_{ev}.and(aux|have(v|put&ZERO(pro|you,pro:dem|this,$0),$0),prep|in(lambda $1_{e}.placeholderP($1),$0))
S:lambda $0_{ev}.and(aux|have(v|put&ZERO(pro|you,pro:dem|this,$0),$0),prep|in(lambda $1_{e}.placeholderP($1),$0))
lambda $0_{ev}.and(v|put&ZERO(pro|you,qn|some($1,n|jello($1)),$0),adv:loc|in($0))
top parse:
[('put', 'S', 'lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)'), ('some', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)'), ('jello', 'N', 'lambda $0_{e}.placeholderP($0)'), ('in', '((S\\S)\\N)', 'lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|in($0,$2))')]


['that', "'s", 'another', 'spoon']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
another : NP : placeholderC
another : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : N : lambda $0_{e}.placeholderP($0)
another : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
another : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
another : Swh : lambda $0_{e}.placeholderP($0)
another : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : S : lambda $0_{ev}.placeholderP($0)
another : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (NP\NP) : lambda $0_{e}.$0
another : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (St\NP) : lambda $0_{e}.placeholderP($0)
another : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
spoon : N : lambda $0_{e}.n|spoon($0)
spoon : (S\NP) : lambda $0_{e}.lambda $1_{ev}.not($0,$1)
WRONG
lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|spoon($1)),$0)
S:lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|spoon($1)),$0)
lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|spoon($1)),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('another', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('spoon', 'N', 'lambda $0_{e}.n|spoon($0)')]


['write', 'Sarah', '?']
write : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
write : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
write : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sarah : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sarah : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sarah : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sarah : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sarah : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.v|write(n:prop|Fraser,placeholderC,$0)
S:lambda $0_{ev}.v|write(n:prop|Fraser,placeholderC,$0)
lambda $0_{ev}.Q(v|write(pro|you,n:prop|Sarah,$0),$0)
top parse:
[('write', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)'), ('Sarah', 'NP', 'placeholderC'), ('?', 'NP', 'n:prop|Fraser')]


['write', 'Sarah']
write : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
write : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
write : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sarah : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sarah : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sarah : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sarah : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sarah : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sarah : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
Sarah : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
Sarah : (NP/NP) : lambda $0_{e}.$0
Sarah : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sarah : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Sarah : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{e}.lambda $1_{ev}.v|write($0,placeholderC,$1)
(S/NP):lambda $0_{e}.lambda $1_{ev}.v|write($0,placeholderC,$1)
lambda $0_{ev}.v|write(pro|you,lambda $1_{e}.n|quote($1),$0)
top parse:
[('write', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|write($1,$0,$2)'), ('Sarah', 'NP', 'placeholderC')]


['you', 'make', 'the', 'eyebrows']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
make : NP : placeholderC
make : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : N : lambda $0_{e}.placeholderP($0)
make : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
make : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
make : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
make : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
make : Swh : lambda $0_{e}.placeholderP($0)
make : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : S : lambda $0_{ev}.placeholderP($0)
make : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (NP\NP) : lambda $0_{e}.$0
make : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (St\NP) : lambda $0_{e}.placeholderP($0)
make : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
make : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
make : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
eyebrows : NP : placeholderC
eyebrows : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : N : lambda $0_{e}.placeholderP($0)
eyebrows : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eyebrows : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eyebrows : Swh : lambda $0_{e}.placeholderP($0)
eyebrows : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : S : lambda $0_{ev}.placeholderP($0)
eyebrows : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (NP\NP) : lambda $0_{e}.$0
eyebrows : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (St\NP) : lambda $0_{e}.placeholderP($0)
eyebrows : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.eq(pro|you,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.eq(pro|you,det|the($1,placeholderP($1)),$0)
lambda $0_{ev}.v|make(pro|you,det|the($1,n|eyebrow-PL($1)),$0)
top parse:
[('you', 'NP', 'pro|you'), ('make', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('eyebrows', 'N', 'lambda $0_{e}.placeholderP($0)')]


['we', "'ll", 'make', 'a', 'big', 'face']
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
'll : NP : pro|we
'll : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will(v|hurt&ZERO($2,$0($1),$3),$3)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|do($0,$1,$2),$2)
'll : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|turn($0,$1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|turn($0,$1,$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
'll : S : lambda $0_{ev}.v|play(pro|we,$0)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
make : NP : placeholderC
make : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : N : lambda $0_{e}.placeholderP($0)
make : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
make : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
make : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
make : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
make : Swh : lambda $0_{e}.placeholderP($0)
make : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : S : lambda $0_{ev}.placeholderP($0)
make : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (NP\NP) : lambda $0_{e}.$0
make : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
big : NP : placeholderC
big : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
big : N : lambda $0_{e}.placeholderP($0)
big : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
big : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
big : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
big : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
big : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
big : Swh : lambda $0_{e}.placeholderP($0)
big : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
big : S : lambda $0_{ev}.placeholderP($0)
big : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
big : (NP\NP) : lambda $0_{e}.$0
big : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
face : NP : placeholderC
face : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
face : N : lambda $0_{e}.placeholderP($0)
face : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
face : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
face : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
face : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
face : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
face : Swh : lambda $0_{e}.placeholderP($0)
face : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
face : S : lambda $0_{ev}.placeholderP($0)
face : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
face : (NP\NP) : lambda $0_{e}.$0
face : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.Q(aux|will(eq(pro|we,det|a($1,placeholderP($1)),$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|will(eq(pro|we,det|a($1,placeholderP($1)),$0),$0),$0)
lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|face($1))),$0),$0)
top parse:
[('we', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)'), ("'ll", 'NP', 'pro|we'), ('make', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('big', 'N', 'lambda $0_{e}.placeholderP($0)'), ('face', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['you', 'make', 'the', 'eyebrows']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
make : NP : placeholderC
make : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : N : lambda $0_{e}.placeholderP($0)
make : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
make : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
make : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
make : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
make : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
make : Swh : lambda $0_{e}.placeholderP($0)
make : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : S : lambda $0_{ev}.placeholderP($0)
make : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (NP\NP) : lambda $0_{e}.$0
make : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
make : (St\NP) : lambda $0_{e}.placeholderP($0)
make : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
make : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
make : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
eyebrows : NP : placeholderC
eyebrows : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : N : lambda $0_{e}.placeholderP($0)
eyebrows : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eyebrows : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eyebrows : Swh : lambda $0_{e}.placeholderP($0)
eyebrows : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : S : lambda $0_{ev}.placeholderP($0)
eyebrows : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (NP\NP) : lambda $0_{e}.$0
eyebrows : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (St\NP) : lambda $0_{e}.placeholderP($0)
eyebrows : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.eq(pro|you,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.eq(pro|you,det|the($1,placeholderP($1)),$0)
lambda $0_{ev}.v|make(pro|you,det|the($1,n|eyebrow-PL($1)),$0)
top parse:
[('you', 'NP', 'pro|you'), ('make', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('eyebrows', 'N', 'lambda $0_{e}.placeholderP($0)')]


['nice', 'eyebrows']
nice : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|nice($1),$0($1))
nice : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,$0($1,$4)),$3)
nice : N : lambda $0_{e}.adj|nice($0)
nice : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|pencil($1))
nice : (St\NP) : lambda $0_{e}.adj|nice($0)
nice : ((NP\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
nice : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
nice : ((St/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|nice($1),$0($1))
nice : ((St\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|nice($1),$0($1))
nice : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|pencil($1))
nice : ((St/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|pencil($1))
nice : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|pencil($1))
nice : ((NP/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
nice : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|nice($1),$0($1))
nice : (NP\N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
nice : (((S\NP)\N)\((St\NP)\N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,$0($1,$4)),$3)
nice : ((St/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|nice($1),$0($1))
nice : (((S\NP)/N)\((St/NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,$0($1,$4)),$3)
nice : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|nice($1),$0($1))
nice : (St/NP) : lambda $0_{e}.adj|nice($0)
eyebrows : NP : placeholderC
eyebrows : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : N : lambda $0_{e}.placeholderP($0)
eyebrows : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eyebrows : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eyebrows : Swh : lambda $0_{e}.placeholderP($0)
eyebrows : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : S : lambda $0_{ev}.placeholderP($0)
eyebrows : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (NP\NP) : lambda $0_{e}.$0
eyebrows : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (St\NP) : lambda $0_{e}.placeholderP($0)
eyebrows : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
eyebrows : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
eyebrows : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
eyebrows : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
eyebrows : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
eyebrows : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eyebrows : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
eyebrows : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
eyebrows : (NP/NP) : lambda $0_{e}.$0
eyebrows : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eyebrows : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
eyebrows : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
det|a($0,and(adj|nice($0),placeholderP($0)))
NP:det|a($0,and(adj|nice($0),placeholderP($0)))
lambda $0_{e}.and(adj|nice($0),n|eyebrow-PL($0))
top parse:
[('nice', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))'), ('eyebrows', 'N', 'lambda $0_{e}.placeholderP($0)')]


['beautiful', 'eyebrows']
beautiful : NP : placeholderC
beautiful : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
beautiful : N : lambda $0_{e}.placeholderP($0)
beautiful : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
beautiful : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
beautiful : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
beautiful : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
beautiful : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
beautiful : Swh : lambda $0_{e}.placeholderP($0)
beautiful : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
beautiful : S : lambda $0_{ev}.placeholderP($0)
beautiful : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
beautiful : (NP\NP) : lambda $0_{e}.$0
beautiful : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
beautiful : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
beautiful : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
beautiful : (St\NP) : lambda $0_{e}.placeholderP($0)
beautiful : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
beautiful : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
beautiful : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
beautiful : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
beautiful : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
beautiful : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
beautiful : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
beautiful : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
beautiful : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
beautiful : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
beautiful : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
beautiful : (NP/NP) : lambda $0_{e}.$0
beautiful : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
beautiful : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
beautiful : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
beautiful : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
eyebrows : NP : placeholderC
eyebrows : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : N : lambda $0_{e}.placeholderP($0)
eyebrows : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eyebrows : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eyebrows : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eyebrows : Swh : lambda $0_{e}.placeholderP($0)
eyebrows : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : S : lambda $0_{ev}.placeholderP($0)
eyebrows : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (NP\NP) : lambda $0_{e}.$0
eyebrows : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (St\NP) : lambda $0_{e}.placeholderP($0)
eyebrows : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eyebrows : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
eyebrows : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
eyebrows : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
eyebrows : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
eyebrows : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
eyebrows : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eyebrows : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
eyebrows : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eyebrows : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
eyebrows : (NP/NP) : lambda $0_{e}.$0
eyebrows : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eyebrows : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eyebrows : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
eyebrows : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(placeholderC,$0)
S:lambda $0_{ev}.placeholderP(placeholderC,$0)
lambda $0_{e}.and(adj|beautiful($0),n|eyebrow-PL($0))
top parse:
[('beautiful', 'NP', 'placeholderC'), ('eyebrows', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['Eve']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
CORRECT
n:prop|Eve
NP:n:prop|Eve
top parse:
[('Eve', 'NP', 'n:prop|Eve')]


['would', 'you', 'like', 'that', '?']
would : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will&COND($0($1),$1)
would : N : lambda $0_{e}.n|record($0)
would : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
would : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|bring($0,$1,$2)
would : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|change(pro|you,$0,$1)
would : NP : pro:poss:det|your($0,n|record($0))
would : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|will&COND($0($2),$2),$1($2))
would : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|change(pro|you,$0,$1)
would : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will&COND($0($1),$1)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
top parse:
[('would', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will&COND($0($1),$1)'), ('you', 'NP', 'pro|you'), ('like', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)'), ('that', 'NP', 'pro:dem|that'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['this', 'side', '?']
this : NP : pro:dem|this
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (((S\NP)/PP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : (((S/NP)/PP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)/PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)\PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
side : NP : placeholderC
side : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
side : N : lambda $0_{e}.placeholderP($0)
side : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
side : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
side : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
side : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
side : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
side : Swh : lambda $0_{e}.placeholderP($0)
side : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
side : S : lambda $0_{ev}.placeholderP($0)
side : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
side : (NP\NP) : lambda $0_{e}.$0
side : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
side : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
side : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
side : (St\NP) : lambda $0_{e}.placeholderP($0)
side : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
side : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
side : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
side : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
side : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
side : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
side : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
side : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(placeholderP(pro:dem|this,$0),$0)
Syn:lambda $0_{ev}.Q(placeholderP(pro:dem|this,$0),$0)
lambda $0_{ev}.Q(det|this($1,n|side($1)),$0)
top parse:
[('this', 'NP', 'pro:dem|this'), ('side', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['what', "'s", 'this']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
this : NP : pro:dem|this
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (((S\NP)/PP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : (((S/NP)/PP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)/PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)\PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('this', 'NP', 'pro:dem|this')]


['what', "'s", 'that']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['what', 'is', 'it']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['is', 'he', '?']
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
he : NP : pro|he
he : S : lambda $0_{ev}.v|fall&PAST(pro|he,$0)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,pro|you,$1,$2)
he : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|do&3S($0($1),$1),$1)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($0,$1,$2,$3)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($2,$1,$0,$3)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,$1,pro:poss:det|your($3,n|telephone($3)),$2)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST(pro|he,$1,$0,$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.eq(n:prop|Fraser,pro|he,$0)
S:lambda $0_{ev}.eq(n:prop|Fraser,pro|he,$0)
lambda $0_{ev}.Q(pro|he,$0)
top parse:
[('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('he', 'NP', 'pro|he'), ('?', 'NP', 'n:prop|Fraser')]


['what', 'is', 'that']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['who', "'s", 'that']
who : NP : pro:wh|who
who : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
who : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)
who : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|sit-PROG($0,$1)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
WRONG
lambda $0_{ev}.eq(pro:wh|who,pro:dem|that,$0)
S:lambda $0_{ev}.eq(pro:wh|who,pro:dem|that,$0)
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('who', 'NP', 'pro:wh|who'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['Sarah']
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sarah : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sarah : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sarah : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sarah : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sarah : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sarah : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
Sarah : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
Sarah : (NP/NP) : lambda $0_{e}.$0
Sarah : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sarah : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Sarah : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
Sarah : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
Sarah : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
Sarah : (Swh/N) : lambda $0_{<e,t>}.$0
Sarah : (Syn/Syn) : lambda $0_{<ev,t>}.$0
Sarah : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
Sarah : (St\St) : lambda $0_{t}.$0
Sarah : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sarah : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sarah : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
Sarah : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
Sarah : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Swh\N) : lambda $0_{<e,t>}.$0
Sarah : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
Sarah : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Sarah : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
n:prop|Sarah
top parse:
[('Sarah', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['she', "'s", 'looking', 'out', 'that', 'window']
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
looking : NP : placeholderC
looking : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
looking : N : lambda $0_{e}.placeholderP($0)
looking : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
looking : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
looking : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
looking : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
looking : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
looking : Swh : lambda $0_{e}.placeholderP($0)
looking : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
looking : S : lambda $0_{ev}.placeholderP($0)
looking : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
looking : (NP\NP) : lambda $0_{e}.$0
looking : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
out : S : lambda $0_{ev}.adv:loc|out($0)
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|keep(pro|you,$0,$1)
out : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
out : (((S\NP)\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (((Swh\(S/NP))/S)\((Swh\(S/NP))/S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|keep(pro|you,$0,$1),adv:loc|out($1))
out : (((Swh\(S/NP))\S)/((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
out : (((S/NP)/S)\((S/NP)/S)) : lambda $0_{<<ev,t>,<e,<ev,t>>>}.$0
out : ((Swh\(S\NP))/(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (S/NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|out($1))
out : (((Swh\(S/NP))\((S\NP)\(S/NP)))/((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
out : ((Swh\(S/NP))/(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|out($1))
out : (((S/NP)/(S/NP))\((S/NP)/(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (((S\NP)/S)\((S\NP)/S)) : lambda $0_{<<ev,t>,<e,<ev,t>>>}.$0
out : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : ((Swh\S)\(Swh\S)) : lambda $0_{<<ev,t>,<e,<ev,t>>>}.$0
out : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (((S\NP)\(S\NP))/((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
window : NP : placeholderC
window : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
window : N : lambda $0_{e}.placeholderP($0)
window : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
window : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
window : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
window : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
window : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
window : Swh : lambda $0_{e}.placeholderP($0)
window : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
window : S : lambda $0_{ev}.placeholderP($0)
window : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
window : (NP\NP) : lambda $0_{e}.$0
window : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.and(part|go-PROG(n:prop|Mommy,$0),adv|hard($0))
S:lambda $0_{ev}.and(part|go-PROG(n:prop|Mommy,$0),adv|hard($0))
lambda $0_{ev}.and(aux|be&3S(part|look-PROG(pro|she,$0),$0),prep|out(det|that($1,n|window($1)),$0))
top parse:
[('she', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))'), ("'s", '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))'), ('looking', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('out', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)'), ('that', '(NP/N)', 'lambda $0_{<e,t>}.det|that($1,$0($1))'), ('window', 'N', 'lambda $0_{e}.placeholderP($0)')]


['Papa', '?']
Papa : NP : n:prop|Papa
Papa : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(n:prop|Papa,$0)
Syn:lambda $0_{ev}.Q(n:prop|Papa,$0)
top parse:
[('Papa', 'NP', 'n:prop|Papa'), ('?', '(Syn\\NP)', 'lambda $0_{e}.lambda $1_{ev}.Q($0,$1)')]


['Papa', "'s", 'wearing', 'a', 'dress']
Papa : NP : n:prop|Papa
Papa : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
wearing : NP : placeholderC
wearing : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wearing : N : lambda $0_{e}.placeholderP($0)
wearing : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
wearing : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
wearing : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
wearing : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wearing : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
wearing : Swh : lambda $0_{e}.placeholderP($0)
wearing : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wearing : S : lambda $0_{ev}.placeholderP($0)
wearing : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
wearing : (NP\NP) : lambda $0_{e}.$0
wearing : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wearing : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wearing : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
dress : NP : placeholderC
dress : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
dress : N : lambda $0_{e}.placeholderP($0)
dress : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
dress : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
dress : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
dress : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
dress : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
dress : Swh : lambda $0_{e}.placeholderP($0)
dress : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
dress : S : lambda $0_{ev}.placeholderP($0)
dress : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
dress : (NP\NP) : lambda $0_{e}.$0
dress : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
dress : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
dress : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.Q(eq(n:prop|Papa,det|the($1,adj|nice($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(n:prop|Papa,det|the($1,adj|nice($1)),$0),$0)
lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Papa,det|a($1,n|dress($1)),$0),$0)
top parse:
[('Papa', 'NP', 'n:prop|Papa'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('wearing', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('a', 'N', 'lambda $0_{e}.adj|nice($0)'), ('dress', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['popsicle']
popsicle : NP : placeholderC
popsicle : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
popsicle : N : lambda $0_{e}.placeholderP($0)
popsicle : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
popsicle : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
popsicle : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
popsicle : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
popsicle : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
popsicle : Swh : lambda $0_{e}.placeholderP($0)
popsicle : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
popsicle : S : lambda $0_{ev}.placeholderP($0)
popsicle : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
popsicle : (NP\NP) : lambda $0_{e}.$0
popsicle : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
popsicle : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
popsicle : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
popsicle : (St\NP) : lambda $0_{e}.placeholderP($0)
popsicle : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
popsicle : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
popsicle : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
popsicle : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
popsicle : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
popsicle : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
popsicle : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
popsicle : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
popsicle : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
popsicle : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
popsicle : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
popsicle : (NP/NP) : lambda $0_{e}.$0
popsicle : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
popsicle : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
popsicle : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
popsicle : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
popsicle : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
popsicle : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
popsicle : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
popsicle : (Swh/N) : lambda $0_{<e,t>}.$0
popsicle : (Syn/Syn) : lambda $0_{<ev,t>}.$0
popsicle : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
popsicle : (St\St) : lambda $0_{t}.$0
popsicle : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
popsicle : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
popsicle : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
popsicle : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
popsicle : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
popsicle : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
popsicle : (Swh\N) : lambda $0_{<e,t>}.$0
popsicle : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
popsicle : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
popsicle : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{e}.n|popsicle($0)
CORRECTPlaceholder
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
top parse:
[('popsicle', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['Eve', "'s", 'going', 'to', 'eat', 'it']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)
going : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),v|read&ZERO(pro|you,$2))
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|cook($0,pro|it,$1)
going : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(pro|I,$1),$0($1))
going : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|read&ZERO(pro|you,$1))
going : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|I,$2),$0($1,$2))
going : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
going : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
going : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)
going : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|go-PROG($0,$1),$1)
going : ((S\S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&PRES(and($1($2),$0($2)),$2)
going : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES(and($0($1),v|read&ZERO(pro|you,$1)),$1)
going : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|go-PROG($0,$1),$1)
going : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$1),$0($1)),$1)
going : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
going : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
going : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|read&ZERO(pro|you,$1))
going : S : lambda $0_{ev}.part|go-PROG(pro|you,$0)
going : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
to : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|to($0,$3))
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($1($2,$3),$0($3)),$3)
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
to : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|to($0,$1)
to : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
to : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|to($0,$2))
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),v|read&ZERO($0,$3))
to : S : lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
to : (((S\S)/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),v|read&ZERO(pro|you,$2))
to : S : lambda $0_{ev}.v|cook(pro|I,pro|it,$0)
to : (((S\NP)\S)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($1($3),$0($2,$3)),$3)
to : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|to($1,$3))
to : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|cook($0,$1,$2)
to : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
to : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),v|cook($0,pro|it,$3))
eat : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
eat : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
eat : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
eat : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
WRONG
lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),v|eat($0,pro|it,$1))
(S/NP):lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),v|eat($0,pro|it,$1))
lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|eat(n:prop|Eve,pro|it,$0)),$0)
top parse:
[('Eve', 'NP', 'n:prop|Eve'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('going', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|go-PROG($0,$1)'), ('to', '(((S/NP)/(S/NP))\\S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))'), ('eat', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['Eve', "'s", 'waving', 'to', 'Momma', 'out', 'the', 'window']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
waving : NP : placeholderC
waving : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
waving : N : lambda $0_{e}.placeholderP($0)
waving : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
waving : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
waving : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
waving : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
waving : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
waving : Swh : lambda $0_{e}.placeholderP($0)
waving : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
waving : S : lambda $0_{ev}.placeholderP($0)
to : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|to($0,$3))
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($1($2,$3),$0($3)),$3)
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
to : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|to($0,$1)
to : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
to : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|to($0,$2))
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),v|read&ZERO($0,$3))
to : S : lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
to : (((S\S)/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),v|read&ZERO(pro|you,$2))
to : S : lambda $0_{ev}.v|cook(pro|I,pro|it,$0)
to : (((S\NP)\S)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($1($3),$0($2,$3)),$3)
to : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|to($1,$3))
to : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|cook($0,$1,$2)
to : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
to : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),v|cook($0,pro|it,$3))
Momma : NP : placeholderC
Momma : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Momma : N : lambda $0_{e}.placeholderP($0)
Momma : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Momma : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Momma : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Momma : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Momma : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Momma : Swh : lambda $0_{e}.placeholderP($0)
Momma : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Momma : S : lambda $0_{ev}.placeholderP($0)
out : S : lambda $0_{ev}.adv:loc|out($0)
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|keep(pro|you,$0,$1)
out : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
out : (((S\NP)\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (((Swh\(S/NP))/S)\((Swh\(S/NP))/S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|keep(pro|you,$0,$1),adv:loc|out($1))
out : (((Swh\(S/NP))\S)/((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
out : (((S/NP)/S)\((S/NP)/S)) : lambda $0_{<<ev,t>,<e,<ev,t>>>}.$0
out : ((Swh\(S\NP))/(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (S/NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|out($1))
out : (((Swh\(S/NP))\((S\NP)\(S/NP)))/((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
out : ((Swh\(S/NP))/(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|out($1))
out : (((S/NP)/(S/NP))\((S/NP)/(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (((S\NP)/S)\((S\NP)/S)) : lambda $0_{<<ev,t>,<e,<ev,t>>>}.$0
out : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : ((Swh\S)\(Swh\S)) : lambda $0_{<<ev,t>,<e,<ev,t>>>}.$0
out : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
out : (((S\NP)\(S\NP))/((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
window : NP : placeholderC
window : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
window : N : lambda $0_{e}.placeholderP($0)
window : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
window : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
window : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
window : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
window : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
window : Swh : lambda $0_{e}.placeholderP($0)
window : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
window : S : lambda $0_{ev}.placeholderP($0)
WRONG
lambda $0_{ev}.and(eq(n:prop|Eve,placeholderC,$0),placeholderP(v|come(det|the($1,placeholderP($1)),$0),$0))
S:lambda $0_{ev}.and(eq(n:prop|Eve,placeholderC,$0),placeholderP(v|come(det|the($1,placeholderP($1)),$0),$0))
lambda $0_{ev}.and(aux|be&3S(part|wave-PROG(n:prop|Eve,$0),$0),prep|out(det|the($1,n|window($1)),$0))
top parse:
[('Eve', 'NP', 'n:prop|Eve'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('waving', 'NP', 'placeholderC'), ('to', '(((S\\NP)\\(S\\NP))/S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('Momma', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('out', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('window', 'N', 'lambda $0_{e}.placeholderP($0)')]


['see', 'her', 'hand']
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
hand : NP : placeholderC
hand : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
hand : N : lambda $0_{e}.placeholderP($0)
hand : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
hand : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
hand : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
hand : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
hand : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
hand : Swh : lambda $0_{e}.placeholderP($0)
hand : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hand : S : lambda $0_{ev}.placeholderP($0)
hand : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
hand : (NP\NP) : lambda $0_{e}.$0
hand : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hand : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hand : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
hand : (St\NP) : lambda $0_{e}.placeholderP($0)
hand : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
hand : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
hand : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
hand : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
hand : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
hand : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
hand : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
hand : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0)
lambda $0_{ev}.v|see(pro|you,pro:poss:det|her($1,n|hand($1)),$0)
CORRECTPlaceholder
lambda $0_{ev}.v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0)
top parse:
[('see', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)'), ('her', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ('hand', 'N', 'lambda $0_{e}.placeholderP($0)')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['again', '?']
again : NP : placeholderC
again : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : N : lambda $0_{e}.placeholderP($0)
again : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
again : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
again : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
again : Swh : lambda $0_{e}.placeholderP($0)
again : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : S : lambda $0_{ev}.placeholderP($0)
again : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (NP\NP) : lambda $0_{e}.$0
again : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (St\NP) : lambda $0_{e}.placeholderP($0)
again : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
again : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
again : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
again : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
again : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
again : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
again : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
again : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
again : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
again : (NP/NP) : lambda $0_{e}.$0
again : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
again : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
again : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(placeholderC,$0)
Syn:lambda $0_{ev}.Q(placeholderC,$0)
lambda $0_{ev}.Q(adv|again($0),$0)
top parse:
[('again', 'NP', 'placeholderC'), ('?', '(Syn\\NP)', 'lambda $0_{e}.lambda $1_{ev}.Q($0,$1)')]


['again']
again : NP : placeholderC
again : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : N : lambda $0_{e}.placeholderP($0)
again : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
again : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
again : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
again : Swh : lambda $0_{e}.placeholderP($0)
again : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : S : lambda $0_{ev}.placeholderP($0)
again : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (NP\NP) : lambda $0_{e}.$0
again : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (St\NP) : lambda $0_{e}.placeholderP($0)
again : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
again : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
again : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
again : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
again : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
again : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
again : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
again : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
again : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
again : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
again : (NP/NP) : lambda $0_{e}.$0
again : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
again : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
again : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
again : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
again : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
again : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
again : (Swh/N) : lambda $0_{<e,t>}.$0
again : (Syn/Syn) : lambda $0_{<ev,t>}.$0
again : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
again : (St\St) : lambda $0_{t}.$0
again : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
again : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
again : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
again : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
again : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
again : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
again : (Swh\N) : lambda $0_{<e,t>}.$0
again : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
again : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
again : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{ev}.adv|again($0)
top parse:
[('again', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['the', 'horse', 'is', 'tired']
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
horse : N : lambda $0_{e}.n|horse($0)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
tired : NP : placeholderC
tired : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
tired : N : lambda $0_{e}.placeholderP($0)
tired : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
tired : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
tired : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
tired : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
tired : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
tired : Swh : lambda $0_{e}.placeholderP($0)
tired : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
tired : S : lambda $0_{ev}.placeholderP($0)
tired : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
tired : (NP\NP) : lambda $0_{e}.$0
tired : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
tired : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
tired : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
tired : (St\NP) : lambda $0_{e}.placeholderP($0)
tired : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
tired : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
tired : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.eq(det|the($1,n|horse($1)),placeholderC,$0)
S:lambda $0_{ev}.eq(det|the($1,n|horse($1)),placeholderC,$0)
lambda $0_{ev}.aux|be&3S(part|tire-PERF(det|the($1,n|horse($1)),$0),$0)
top parse:
[('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('horse', 'N', 'lambda $0_{e}.n|horse($0)'), ('is', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('tired', 'NP', 'placeholderC')]


['my', 'leg', 'is', 'the', 'horse']
my : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))
my : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))
leg : NP : placeholderC
leg : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
leg : N : lambda $0_{e}.placeholderP($0)
leg : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
leg : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
leg : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
leg : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
leg : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
leg : Swh : lambda $0_{e}.placeholderP($0)
leg : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
leg : S : lambda $0_{ev}.placeholderP($0)
leg : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
leg : (NP\NP) : lambda $0_{e}.$0
leg : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
leg : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
leg : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
horse : N : lambda $0_{e}.n|horse($0)
WRONG
lambda $0_{ev}.eq(pro:poss:det|my($1,placeholderP($1)),det|the($2,n|horse($2)),$0)
S:lambda $0_{ev}.eq(pro:poss:det|my($1,placeholderP($1)),det|the($2,n|horse($2)),$0)
lambda $0_{ev}.eq(pro:poss:det|my($1,n|leg($1)),det|the($2,n|horse($2)),$0)
CORRECTPlaceholder
lambda $0_{ev}.eq(pro:poss:det|my($1,placeholderP($1)),det|the($2,n|horse($2)),$0)
S:lambda $0_{ev}.eq(pro:poss:det|my($1,placeholderP($1)),det|the($2,n|horse($2)),$0)
top parse:
[('my', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))'), ('leg', 'N', 'lambda $0_{e}.placeholderP($0)'), ('is', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('horse', 'N', 'lambda $0_{e}.n|horse($0)')]


['it', "'s", 'still', 'eating']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
still : NP : placeholderC
still : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
still : N : lambda $0_{e}.placeholderP($0)
still : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
still : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
still : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
still : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
still : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
still : Swh : lambda $0_{e}.placeholderP($0)
still : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
still : S : lambda $0_{ev}.placeholderP($0)
still : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
still : (NP\NP) : lambda $0_{e}.$0
still : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
still : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
still : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
still : (St\NP) : lambda $0_{e}.placeholderP($0)
still : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
still : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
still : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
eating : NP : placeholderC
eating : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eating : N : lambda $0_{e}.placeholderP($0)
eating : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eating : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eating : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eating : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eating : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eating : Swh : lambda $0_{e}.placeholderP($0)
eating : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eating : S : lambda $0_{ev}.placeholderP($0)
eating : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eating : (NP\NP) : lambda $0_{e}.$0
eating : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eating : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eating : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eating : (St\NP) : lambda $0_{e}.placeholderP($0)
eating : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eating : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eating : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.eq(pro|it,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.eq(pro|it,det|the($1,placeholderP($1)),$0)
lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|it,$0),$0),adv|still($0))
top parse:
[('it', 'NP', 'pro|it'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('still', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('eating', 'N', 'lambda $0_{e}.placeholderP($0)')]


['you', "'ll", 'give', 'the', 'horse', 'indigestion']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
'll : NP : pro|we
'll : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will(v|hurt&ZERO($2,$0($1),$3),$3)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|do($0,$1,$2),$2)
'll : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|turn($0,$1,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|turn($0,$1,$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|hurt&ZERO($1,$0,$2),$2)
'll : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
'll : S : lambda $0_{ev}.v|play(pro|we,$0)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|read&ZERO($0,$1),$1)
'll : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
'll : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
'll : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|play($0,$1),$1)
'll : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
'll : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|hurt&ZERO($1,$0,$2)
give : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$0,$1,$2)
give : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
give : N : lambda $0_{e}.n|bottle($0)
give : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($0,pro|me,$1,$2)
give : NP : pro:poss:det|her($0,n|bottle($0))
give : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($0,lambda $3_{e}.n|doll-DIM($3),$1,$2)
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
horse : N : lambda $0_{e}.n|horse($0)
indigestion : NP : placeholderC
indigestion : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
indigestion : N : lambda $0_{e}.placeholderP($0)
indigestion : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
indigestion : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
indigestion : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
indigestion : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
indigestion : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
indigestion : Swh : lambda $0_{e}.placeholderP($0)
indigestion : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
indigestion : S : lambda $0_{ev}.placeholderP($0)
indigestion : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
indigestion : (NP\NP) : lambda $0_{e}.$0
indigestion : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.not(aux|will(v|give(pro|you,det|the($1,n|horse($1)),placeholderC,$0),$0),$0)
S:lambda $0_{ev}.not(aux|will(v|give(pro|you,det|the($1,n|horse($1)),placeholderC,$0),$0),$0)
lambda $0_{ev}.aux|will(v|give(pro|you,det|the($1,n|horse($1)),lambda $2_{e}.n|indigestion($2),$0),$0)
top parse:
[('you', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ("'ll", '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)'), ('give', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$0,$1,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('horse', 'N', 'lambda $0_{e}.n|horse($0)'), ('indigestion', 'NP', 'placeholderC')]


['you']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
CORRECT
pro|you
NP:pro|you
top parse:
[('you', 'NP', 'pro|you')]


['you', "'re", 'falling', 'off', 'that', 'horse']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
're : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : NP : pro|they
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|have-PROG($1,$0,$2),$2)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call($1,$0,$2)
're : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(pro|you,$1),$0($1))
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|find($0,pro|it,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|call($0,n:prop|Granma,$1)
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|be&PRES(part|have-PROG($1,$0,$2),$2),$2)
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (((S/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.part|do-PROG($0($1),$2,$3)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|call(pro|you,$0,$2))
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|call($1,$0,$2))
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
're : S : lambda $0_{ev}.part|swim-PROG(pro|they,$0)
're : ((S\N)\NP) : lambda $0_{e}.lambda $1_{<e,t>}.lambda $2_{ev}.part|have-PROG($0,$1,$2)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
falling : NP : placeholderC
falling : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
falling : N : lambda $0_{e}.placeholderP($0)
falling : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
falling : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
falling : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
falling : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
falling : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
falling : Swh : lambda $0_{e}.placeholderP($0)
falling : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
falling : S : lambda $0_{ev}.placeholderP($0)
falling : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
falling : (NP\NP) : lambda $0_{e}.$0
falling : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
off : S : lambda $0_{ev}.adv|off($0)
off : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|off($0,$1)
off : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|off($0,$3))
off : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|off($0,$2))
off : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|fall&PAST($1,$2),prep|off($0,$2))
off : (((S\NP)/NP)\(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|off($0,$1)
off : (((S\NP)\NP)/(PP\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : ((S/S)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|off($0,$2))
off : (((S/NP)/(S/NP))\NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|off($0,$3))
off : (((S\NP)\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : (((S\NP)/NP)/(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|fall&PAST($1,$2),prep|off($0,$2))
off : (((S/NP)/NP)\(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : (((S\NP)/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : (((S/NP)\NP)/(PP\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|fall&PAST($1,$2),prep|off($0,$2))
off : (((S/NP)/NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : (((S/NP)\NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
horse : N : lambda $0_{e}.n|horse($0)
WRONG
lambda $0_{ev}.and(v|call(pro|you,placeholderC,$0),prep|off(det|that($1,n|horse($1)),$0))
S:lambda $0_{ev}.and(v|call(pro|you,placeholderC,$0),prep|off(det|that($1,n|horse($1)),$0))
lambda $0_{ev}.and(aux|be&PRES(part|fall-PROG(pro|you,$0),$0),prep|off(det|that($1,n|horse($1)),$0))
top parse:
[('you', 'NP', 'pro|you'), ("'re", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call($1,$0,$2)'), ('falling', 'NP', 'placeholderC'), ('off', '(((S\\NP)\\(S\\NP))/NP)', 'lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|off($0,$3))'), ('that', '(NP/N)', 'lambda $0_{<e,t>}.det|that($1,$0($1))'), ('horse', 'N', 'lambda $0_{e}.n|horse($0)')]


['you', "'re", 'falling', 'off', 'that', 'horse']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
're : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : NP : pro|they
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|have-PROG($1,$0,$2),$2)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call($1,$0,$2)
're : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(pro|you,$1),$0($1))
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|find($0,pro|it,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|call($0,n:prop|Granma,$1)
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|be&PRES(part|have-PROG($1,$0,$2),$2),$2)
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (((S/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.part|do-PROG($0($1),$2,$3)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|call(pro|you,$0,$2))
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|call($1,$0,$2))
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
're : S : lambda $0_{ev}.part|swim-PROG(pro|they,$0)
're : ((S\N)\NP) : lambda $0_{e}.lambda $1_{<e,t>}.lambda $2_{ev}.part|have-PROG($0,$1,$2)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
falling : NP : placeholderC
falling : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
falling : N : lambda $0_{e}.placeholderP($0)
falling : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
falling : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
falling : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
falling : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
falling : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
falling : Swh : lambda $0_{e}.placeholderP($0)
falling : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
falling : S : lambda $0_{ev}.placeholderP($0)
falling : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
falling : (NP\NP) : lambda $0_{e}.$0
falling : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
off : S : lambda $0_{ev}.adv|off($0)
off : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|off($0,$1)
off : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|off($0,$3))
off : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|off($0,$2))
off : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|fall&PAST($1,$2),prep|off($0,$2))
off : (((S\NP)/NP)\(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|off($0,$1)
off : (((S\NP)\NP)/(PP\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : ((S/S)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|off($0,$2))
off : (((S/NP)/(S/NP))\NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|off($0,$3))
off : (((S\NP)\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : (((S\NP)/NP)/(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|fall&PAST($1,$2),prep|off($0,$2))
off : (((S/NP)/NP)\(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : (((S\NP)/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : (((S/NP)\NP)/(PP\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|fall&PAST($2,$3),$0($1,$3))
off : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|fall&PAST($1,$2),prep|off($0,$2))
off : (((S/NP)/NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
off : (((S/NP)\NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|off($1,$3))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
horse : N : lambda $0_{e}.n|horse($0)
WRONG
lambda $0_{ev}.and(v|call(pro|you,placeholderC,$0),prep|off(det|that($1,n|horse($1)),$0))
S:lambda $0_{ev}.and(v|call(pro|you,placeholderC,$0),prep|off(det|that($1,n|horse($1)),$0))
lambda $0_{ev}.and(aux|be&PRES(part|fall-PROG(pro|you,$0),$0),prep|off(det|that($1,n|horse($1)),$0))
top parse:
[('you', 'NP', 'pro|you'), ("'re", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call($1,$0,$2)'), ('falling', 'NP', 'placeholderC'), ('off', '(((S\\NP)\\(S\\NP))/NP)', 'lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|off($0,$3))'), ('that', '(NP/N)', 'lambda $0_{<e,t>}.det|that($1,$0($1))'), ('horse', 'N', 'lambda $0_{e}.n|horse($0)')]


['there']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
CORRECT
lambda $0_{ev}.adv:loc|there($0)
S:lambda $0_{ev}.adv:loc|there($0)
top parse:
[('there', 'S', 'lambda $0_{ev}.adv:loc|there($0)')]


['it', "'s", 'called', 'the', 'near', 'side']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
called : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call-PAST($1,$0,$2)
called : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call-PAST($1,$0,$2)
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
near : NP : placeholderC
near : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
near : N : lambda $0_{e}.placeholderP($0)
near : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
near : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
near : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
near : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
near : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
near : Swh : lambda $0_{e}.placeholderP($0)
near : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
near : S : lambda $0_{ev}.placeholderP($0)
near : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
near : (NP\NP) : lambda $0_{e}.$0
near : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
side : NP : placeholderC
side : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
side : N : lambda $0_{e}.placeholderP($0)
side : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
side : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
side : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
side : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
side : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
side : Swh : lambda $0_{e}.placeholderP($0)
side : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
side : S : lambda $0_{ev}.placeholderP($0)
side : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
side : (NP\NP) : lambda $0_{e}.$0
side : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.Q(v|call-PAST(pro|it,det|the($1,placeholderP($1)),$0),$0)
Syn:lambda $0_{ev}.Q(v|call-PAST(pro|it,det|the($1,placeholderP($1)),$0),$0)
lambda $0_{ev}.aux|be&3S(v|call-PAST(pro|it,det|the($1,and(adj|near($1),n|side($1))),$0),$0)
top parse:
[('it', 'NP', 'pro|it'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('called', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call-PAST($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('near', 'N', 'lambda $0_{e}.placeholderP($0)'), ('side', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['that', "'s", 'it']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
S:lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['did', 'she', 'do', 'that', '?']
did : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(aux|do&PAST(v|do(pro|she,pro:dem|that,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do&PAST(v|do(pro|she,pro:dem|that,$0),$0),$0)
top parse:
[('did', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)'), ('she', 'NP', 'pro|she'), ('do', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)'), ('that', 'NP', 'pro:dem|that'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', 'silly']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
silly : NP : placeholderC
silly : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
silly : N : lambda $0_{e}.placeholderP($0)
silly : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
silly : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
silly : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
silly : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
silly : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
silly : Swh : lambda $0_{e}.placeholderP($0)
silly : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
silly : S : lambda $0_{ev}.placeholderP($0)
silly : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
silly : (NP\NP) : lambda $0_{e}.$0
silly : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
silly : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
silly : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
silly : (St\NP) : lambda $0_{e}.placeholderP($0)
silly : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
silly : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
silly : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
silly : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
silly : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
silly : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
silly : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
silly : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
silly : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
silly : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
silly : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
silly : (NP/NP) : lambda $0_{e}.$0
silly : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
silly : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
silly : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
silly : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(pro:dem|that,$0)
S:lambda $0_{ev}.placeholderP(pro:dem|that,$0)
pro:dem|that
top parse:
[('that', 'NP', 'pro:dem|that'), ('silly', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['Sarah', "'s", 'teething']
Sarah : NP : placeholderC
Sarah : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : N : lambda $0_{e}.placeholderP($0)
Sarah : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sarah : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sarah : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sarah : Swh : lambda $0_{e}.placeholderP($0)
Sarah : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : S : lambda $0_{ev}.placeholderP($0)
Sarah : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (NP\NP) : lambda $0_{e}.$0
Sarah : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sarah : (St\NP) : lambda $0_{e}.placeholderP($0)
Sarah : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sarah : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sarah : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sarah : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sarah : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sarah : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sarah : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sarah : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
teething : NP : placeholderC
teething : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
teething : N : lambda $0_{e}.placeholderP($0)
teething : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
teething : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
teething : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
teething : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
teething : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
teething : Swh : lambda $0_{e}.placeholderP($0)
teething : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
teething : S : lambda $0_{ev}.placeholderP($0)
teething : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
teething : (NP\NP) : lambda $0_{e}.$0
teething : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
teething : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
teething : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
teething : (St\NP) : lambda $0_{e}.placeholderP($0)
teething : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
teething : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
teething : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
teething : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
teething : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
teething : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
teething : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
teething : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.eq(placeholderC,placeholderC,$0)
S:lambda $0_{ev}.eq(placeholderC,placeholderC,$0)
lambda $0_{ev}.aux|be&3S(part|teethe-PROG(n:prop|Sarah,$0),$0)
top parse:
[('Sarah', 'NP', 'placeholderC'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('teething', 'NP', 'placeholderC')]


['it', "'s", 'her', 'baby', '?']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|her($1,n|baby($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|her($1,n|baby($1)),$0),$0)
top parse:
[('it', 'NP', 'pro|it'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('her', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['kiss', 'the', 'baby']
kiss : NP : placeholderC
kiss : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
kiss : N : lambda $0_{e}.placeholderP($0)
kiss : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
kiss : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
kiss : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
kiss : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
kiss : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
kiss : Swh : lambda $0_{e}.placeholderP($0)
kiss : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : S : lambda $0_{ev}.placeholderP($0)
kiss : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (NP\NP) : lambda $0_{e}.$0
kiss : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (St\NP) : lambda $0_{e}.placeholderP($0)
kiss : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
kiss : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
kiss : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
kiss : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
kiss : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
kiss : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
kiss : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
kiss : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
WRONG
lambda $0_{ev}.placeholderP(det|the($1,n|baby($1)),$0)
S:lambda $0_{ev}.placeholderP(det|the($1,n|baby($1)),$0)
lambda $0_{ev}.v|kiss(pro|you,det|the($1,n|baby($1)),$0)
top parse:
[('kiss', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)')]


['good', 'jump']
good : N : lambda $0_{e}.and(adj|good($0),n|girl($0))
good : (St\NP) : lambda $0_{e}.adj|good($0)
good : N : lambda $0_{e}.adj|good($0)
good : N : lambda $0_{e}.n|girl($0)
good : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : St : adj|good(pro|it)
good : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((NP/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
good : ((NP\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
good : ((NP\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($1($2),$0($2)))
good : (St\NP) : lambda $0_{e}.n|girl($0)
good : ((St/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : ((St/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((St\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|girl($1))
good : ((St\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : ((St/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
good : (St/NP) : lambda $0_{e}.adj|good($0)
jump : NP : placeholderC
jump : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
jump : N : lambda $0_{e}.placeholderP($0)
jump : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
jump : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
jump : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
jump : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
jump : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
jump : Swh : lambda $0_{e}.placeholderP($0)
jump : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
jump : S : lambda $0_{ev}.placeholderP($0)
jump : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
jump : (NP\NP) : lambda $0_{e}.$0
jump : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
jump : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
jump : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
jump : (St\NP) : lambda $0_{e}.placeholderP($0)
jump : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
jump : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
jump : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
jump : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
jump : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
jump : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
jump : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
jump : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
jump : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
jump : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
jump : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
jump : (NP/NP) : lambda $0_{e}.$0
jump : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
jump : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
jump : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
jump : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
((St\NP)/N):lambda $0_{<e,t>}.lambda $1_{e}.and(adj|good($1),$0($1))
lambda $0_{e}.and(adj|good($0),n|jump($0))
top parse:
[('good', '(St\\NP)', 'lambda $0_{e}.adj|good($0)'), ('jump', '(((St\\NP)/N)\\(St\\NP))', 'lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))')]


['did', 'you', 'see', 'that', '?']
did : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,pro:dem|that,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,pro:dem|that,$0),$0),$0)
top parse:
[('did', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)'), ('you', 'NP', 'pro|you'), ('see', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)'), ('that', 'NP', 'pro:dem|that'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['don', "'t", 'hit', 'that']
don : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : N : lambda $0_{e}.n|apple($0)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
don : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : N : lambda $0_{e}.and(n|tomato($0),n|soup($0))
don : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($0($4),$1($4)),$3)
don : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($0,$1,$2),$2)
don : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
hit : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
hit : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
hit : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
hit : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
WRONG
lambda $0_{ev}.aux|do(v|hit&ZERO(n:prop|Kathy,pro:dem|that,$0),$0)
S:lambda $0_{ev}.aux|do(v|hit&ZERO(n:prop|Kathy,pro:dem|that,$0),$0)
lambda $0_{ev}.not(aux|do(v|hit&ZERO(pro|you,pro:dem|that,$0),$0),$0)
top parse:
[('don', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ("'t", 'NP', 'n:prop|Kathy'), ('hit', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['that', 'would', 'hurt']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
would : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will&COND($0($1),$1)
would : N : lambda $0_{e}.n|record($0)
would : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
would : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|bring($0,$1,$2)
would : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|change(pro|you,$0,$1)
would : NP : pro:poss:det|your($0,n|record($0))
would : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|will&COND($0($2),$2),$1($2))
would : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|change(pro|you,$0,$1)
would : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will&COND($0($1),$1)
hurt : (St\NP) : lambda $0_{e}.n|horse-DIM($0)
hurt : N : lambda $0_{e}.n|horse-DIM($0)
hurt : (St/NP) : lambda $0_{e}.n|horse-DIM($0)
WRONG
n|horse-DIM(det|that($0,n|record($0)))
St:n|horse-DIM(det|that($0,n|record($0)))
lambda $0_{ev}.aux|will&COND(v|hurt&ZERO(pro:dem|that,$0),$0)
top parse:
[('that', '(NP/N)', 'lambda $0_{<e,t>}.det|that($1,$0($1))'), ('would', 'N', 'lambda $0_{e}.n|record($0)'), ('hurt', '(St\\NP)', 'lambda $0_{e}.n|horse-DIM($0)')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['here', 'we', 'go']
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
NO PARSE
['down', 'we', 'go']
down : S : lambda $0_{ev}.adv:loc|down($0)
down : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|down($1))
down : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))
down : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG($0,$1),adv:loc|down($1))
down : S : lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv:loc|down($0))
down : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|down($1))
down : (S/NP) : lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG($0,$1),adv:loc|down($1))
down : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
NO PARSE
['better', 'Papa', "'d", 'better', 'close', 'the', 'window']
better : (St\NP) : lambda $0_{e}.adj|good&CP($0)
better : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
better : ((Syn\St)/(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
better : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|good&CP($0),$1)
better : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
better : (Syn/St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
better : (Syn/NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|good&CP($0),$1)
better : ((Syn/St)\(Syn/St)) : lambda $0_{<t,<ev,t>>}.$0
better : (St/NP) : lambda $0_{e}.adj|good&CP($0)
Papa : NP : n:prop|Papa
Papa : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
'd : NP : placeholderC
'd : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
'd : N : lambda $0_{e}.placeholderP($0)
'd : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
'd : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
'd : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
'd : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
'd : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
'd : Swh : lambda $0_{e}.placeholderP($0)
'd : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
'd : S : lambda $0_{ev}.placeholderP($0)
'd : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
better : (St\NP) : lambda $0_{e}.adj|good&CP($0)
better : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
better : ((Syn\St)/(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
better : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|good&CP($0),$1)
better : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
better : (Syn/St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
better : (Syn/NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|good&CP($0),$1)
better : ((Syn/St)\(Syn/St)) : lambda $0_{<t,<ev,t>>}.$0
better : (St/NP) : lambda $0_{e}.adj|good&CP($0)
close : NP : placeholderC
close : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
close : N : lambda $0_{e}.placeholderP($0)
close : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
close : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
close : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
close : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
close : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
close : Swh : lambda $0_{e}.placeholderP($0)
close : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
close : S : lambda $0_{ev}.placeholderP($0)
close : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
window : NP : placeholderC
window : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
window : N : lambda $0_{e}.placeholderP($0)
window : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
window : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
window : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
window : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
window : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
window : Swh : lambda $0_{e}.placeholderP($0)
window : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
window : S : lambda $0_{ev}.placeholderP($0)
window : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
NO PARSE
['we', "'re", 'alright']
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
're : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
're : NP : pro|they
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|have-PROG($1,$0,$2),$2)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|call($1,$0,$2)
're : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(pro|you,$1),$0($1))
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|swim-PROG($0,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|find($0,pro|it,$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|call($0,n:prop|Granma,$1)
're : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|be&PRES(part|have-PROG($1,$0,$2),$2),$2)
're : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|swim-PROG($0,$1),$1)
're : (((S/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.part|do-PROG($0($1),$2,$3)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|call(pro|you,$0,$2))
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|you,$2),v|call($1,$0,$2))
're : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
're : S : lambda $0_{ev}.part|swim-PROG(pro|they,$0)
're : ((S\N)\NP) : lambda $0_{e}.lambda $1_{<e,t>}.lambda $2_{ev}.part|have-PROG($0,$1,$2)
're : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG($1,$2),v|read&ZERO($0,$2))
alright : (St\NP) : lambda $0_{e}.adj|alright($0)
alright : St : adj|alright(pro|you)
alright : (St/NP) : lambda $0_{e}.adj|alright($0)
NO PARSE
['she', 'hit', 'her', 'face']
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
hit : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
hit : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
hit : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
hit : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
face : NP : placeholderC
face : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
face : N : lambda $0_{e}.placeholderP($0)
face : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
face : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
face : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
face : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
face : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
face : Swh : lambda $0_{e}.placeholderP($0)
face : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
face : S : lambda $0_{ev}.placeholderP($0)
face : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
face : (NP\NP) : lambda $0_{e}.$0
face : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
face : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
face : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
face : (St\NP) : lambda $0_{e}.placeholderP($0)
face : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
face : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
face : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.v|hit&ZERO(pro|she,pro:poss:det|her($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|hit&ZERO(pro|she,pro:poss:det|her($1,placeholderP($1)),$0)
lambda $0_{ev}.v|hit&ZERO(pro|she,pro:poss:det|her($1,n|face($1)),$0)
CORRECTPlaceholder
lambda $0_{ev}.v|hit&ZERO(pro|she,pro:poss:det|her($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|hit&ZERO(pro|she,pro:poss:det|her($1,placeholderP($1)),$0)
top parse:
[('she', 'NP', 'pro|she'), ('hit', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hit&ZERO($1,$0,$2)'), ('her', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ('face', 'N', 'lambda $0_{e}.placeholderP($0)')]


['there', 'we', 'go']
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
NO PARSE
['that', '?']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(pro:dem|that,$0)
Syn:lambda $0_{ev}.Q(pro:dem|that,$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ('?', '(Syn\\NP)', 'lambda $0_{e}.lambda $1_{ev}.Q($0,$1)')]


['what', 'did', 'you', 'say']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
did : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
say : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
say : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
say : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
say : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
say : NP : det|the($0,n|duck-PL($0))
say : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|say(det|the($3,$0($3)),$1,$2)
say : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
say : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
say : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
say : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
say : (Swh\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|say(det|the($3,$0($3)),$1,$2)
say : (Swh/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|say(det|the($3,$0($3)),$1,$2)
say : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|say(det|the($3,$0($3)),$1,$2)
say : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
top parse:
[('what', '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('did', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)'), ('you', 'NP', 'pro|you'), ('say', '(Swh\\(S/NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)')]


['you', 'do', 'it', 'over', 'here']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
over : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : S : lambda $0_{ev}.adv:loc|here($0)
over : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
over : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : (((S\NP)\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
over : (((S\NP)\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
over : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
CORRECT
lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv:loc|here($0))
S:lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv:loc|here($0))
top parse:
[('you', 'NP', 'pro|you'), ('do', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)'), ('it', 'NP', 'pro|it'), ('over', '(((S\\NP)\\(S\\NP))/S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('here', 'S', 'lambda $0_{ev}.adv:loc|here($0)')]


['don', "'t", 'do', 'that']
don : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : N : lambda $0_{e}.n|apple($0)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
don : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
don : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
don : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
don : N : lambda $0_{e}.and(n|tomato($0),n|soup($0))
don : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($0($4),$1($4)),$3)
don : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($0,$1,$2),$2)
don : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
don : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
don : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
WRONG
lambda $0_{ev}.aux|do(v|do(n:prop|Kathy,pro:dem|that,$0),$0)
S:lambda $0_{ev}.aux|do(v|do(n:prop|Kathy,pro:dem|that,$0),$0)
lambda $0_{ev}.not(aux|do(v|do(pro|you,pro:dem|that,$0),$0),$0)
top parse:
[('don', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)'), ("'t", 'NP', 'n:prop|Kathy'), ('do', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['what', "'s", 'wrong']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
wrong : NP : placeholderC
wrong : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wrong : N : lambda $0_{e}.placeholderP($0)
wrong : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
wrong : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
wrong : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
wrong : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wrong : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
wrong : Swh : lambda $0_{e}.placeholderP($0)
wrong : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wrong : S : lambda $0_{ev}.placeholderP($0)
wrong : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
wrong : (NP\NP) : lambda $0_{e}.$0
wrong : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wrong : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wrong : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
wrong : (St\NP) : lambda $0_{e}.placeholderP($0)
wrong : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
wrong : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
wrong : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
wrong : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
wrong : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
wrong : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
wrong : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
wrong : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,placeholderC,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,placeholderC,$1)
lambda $0_{e}.adj|wrong($0)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('wrong', 'NP', 'placeholderC')]


['put', 'them', 'on', 'top']
put : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
put : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
put : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
put : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
put : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|put&ZERO($1,$0,$2)
them : NP : pro|them
on : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|on($0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($2),$1($2))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|on($1))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|on($2))
on : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($1($2,$3),$3),prep|on($0,$3))
on : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|be&3S($1($2),$2),prep|on($0,$2))
on : (((S\S)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),prep|on($0($1),$3))
on : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($0($2,$3),$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on(det|the($3,$0($3)),$2))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),prep|on(lambda $3_{e}.n|doll-DIM($3),$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|on(lambda $2_{e}.n|doll-DIM($2),$1))
on : (((S\S)\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($0($1,$3),$2($3))
top : N : lambda $0_{e}.n|top($0)
CORRECT
lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|on(lambda $1_{e}.n|top($1),$0))
S:lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|on(lambda $1_{e}.n|top($1),$0))
top parse:
[('put', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)'), ('them', 'NP', 'pro|them'), ('on', '((S\\S)/N)', 'lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))'), ('top', 'N', 'lambda $0_{e}.n|top($0)')]


['where', "'s", 'your', 'tablet']
where : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
where : (Swh/(St\NP)) : lambda $0_{<e,t>}.$0
where : ((St/NP)/(St/NP)) : lambda $0_{<e,t>}.$0
where : ((St\NP)/(St\NP)) : lambda $0_{<e,t>}.$0
where : (N/N) : lambda $0_{<e,t>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
your : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))
your : NP : pro:poss:det|your($0,n|telephone($0))
your : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
your : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : (((St\NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
your : NP : pro:poss:det|your($0,n|spoon($0))
your : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(pro:poss:det|your($2,$0($2)),$1)
tablet : NP : placeholderC
tablet : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
tablet : N : lambda $0_{e}.placeholderP($0)
tablet : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
tablet : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
tablet : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
tablet : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
tablet : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
tablet : Swh : lambda $0_{e}.placeholderP($0)
tablet : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
tablet : S : lambda $0_{ev}.placeholderP($0)
tablet : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
tablet : (NP\NP) : lambda $0_{e}.$0
tablet : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
tablet : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
tablet : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
tablet : (St\NP) : lambda $0_{e}.placeholderP($0)
tablet : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
tablet : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
tablet : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|tablet($1)),$0)
CORRECTPlaceholder
lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(pro:poss:det|your($1,placeholderP($1)),$0)
top parse:
[('where', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ("'s", '((St/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)'), ('your', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|your($1,$0($1))'), ('tablet', 'N', 'lambda $0_{e}.placeholderP($0)')]


['you', 'go']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
CORRECT
lambda $0_{ev}.v|go(pro|you,$0)
S:lambda $0_{ev}.v|go(pro|you,$0)
top parse:
[('you', 'NP', 'pro|you'), ('go', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)')]


['what', "'s", 'that']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['what', 'is', 'that']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['what', 'is', 'that']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that')]


['many', 'kinds']
many : NP : placeholderC
many : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
many : N : lambda $0_{e}.placeholderP($0)
many : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
many : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
many : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
many : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
many : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
many : Swh : lambda $0_{e}.placeholderP($0)
many : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
many : S : lambda $0_{ev}.placeholderP($0)
many : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
many : (NP\NP) : lambda $0_{e}.$0
many : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
many : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
many : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
many : (St\NP) : lambda $0_{e}.placeholderP($0)
many : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
many : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
many : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
many : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
many : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
many : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
many : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
many : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
many : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
many : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
many : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
many : (NP/NP) : lambda $0_{e}.$0
many : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
many : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
many : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
many : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
kinds : NP : placeholderC
kinds : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
kinds : N : lambda $0_{e}.placeholderP($0)
kinds : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
kinds : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
kinds : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
kinds : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
kinds : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
kinds : Swh : lambda $0_{e}.placeholderP($0)
kinds : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kinds : S : lambda $0_{ev}.placeholderP($0)
kinds : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
kinds : (NP\NP) : lambda $0_{e}.$0
kinds : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kinds : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kinds : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
kinds : (St\NP) : lambda $0_{e}.placeholderP($0)
kinds : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
kinds : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
kinds : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
kinds : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
kinds : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
kinds : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
kinds : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
kinds : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
kinds : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
kinds : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
kinds : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
kinds : (NP/NP) : lambda $0_{e}.$0
kinds : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
kinds : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
kinds : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
kinds : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(placeholderC,$0)
S:lambda $0_{ev}.placeholderP(placeholderC,$0)
qn|many($0,n|kind-PL($0))
top parse:
[('many', 'NP', 'placeholderC'), ('kinds', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['are', 'you', '?']
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
are : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|we,$0,$1)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|write-PROG($0,$1,$2)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|do-PROG($0,$1,$2),$2)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|write-PROG($0,$1,$2),$2)
are : NP : n:prop|Fraser
are : St : adj|alright(pro|you)
are : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
are : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
are : (S/S) : lambda $0_{<ev,t>}.$0
are : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|we,$0,$1)
are : ((Syn/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
are : (((S/NP)/(S/NP))/((S/NP)/(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
are : (NP/NP) : lambda $0_{e}.$0
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
are : St : adj|good(pro|you)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.part|write-PROG(pro|you,n:prop|Fraser,$0)
S:lambda $0_{ev}.part|write-PROG(pro|you,n:prop|Fraser,$0)
lambda $0_{ev}.Q(pro|you,$0)
top parse:
[('are', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|write-PROG($0,$1,$2)'), ('you', 'NP', 'pro|you'), ('?', 'NP', 'n:prop|Fraser')]


['go', 'back', 'soon']
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
go : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|go($0,$1),$1)
go : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|will(v|go($0,$1),$1)
back : NP : placeholderC
back : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
back : N : lambda $0_{e}.placeholderP($0)
back : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
back : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
back : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
back : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
back : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
back : Swh : lambda $0_{e}.placeholderP($0)
back : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
back : S : lambda $0_{ev}.placeholderP($0)
back : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
back : (NP\NP) : lambda $0_{e}.$0
back : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
back : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
back : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
back : (St\NP) : lambda $0_{e}.placeholderP($0)
back : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
back : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
back : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
back : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
back : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
back : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
back : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
back : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
soon : NP : placeholderC
soon : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
soon : N : lambda $0_{e}.placeholderP($0)
soon : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
soon : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
soon : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
soon : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
soon : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
soon : Swh : lambda $0_{e}.placeholderP($0)
soon : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
soon : S : lambda $0_{ev}.placeholderP($0)
soon : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
soon : (NP\NP) : lambda $0_{e}.$0
soon : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
soon : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
soon : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
soon : (St\NP) : lambda $0_{e}.placeholderP($0)
soon : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
soon : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
soon : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
soon : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
soon : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
soon : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
soon : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
soon : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.v|go(det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.v|go(det|the($1,placeholderP($1)),$0)
lambda $0_{ev}.and(v|go(pro|you,$0),adv|soon($0))
top parse:
[('go', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|go($0,$1)'), ('back', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('soon', 'N', 'lambda $0_{e}.placeholderP($0)')]


['is', 'that', 'an', 'exercise', '?']
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
an : NP : placeholderC
an : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : N : lambda $0_{e}.placeholderP($0)
an : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
an : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
an : Swh : lambda $0_{e}.placeholderP($0)
an : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : S : lambda $0_{ev}.placeholderP($0)
an : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (NP\NP) : lambda $0_{e}.$0
an : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
exercise : NP : placeholderC
exercise : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
exercise : N : lambda $0_{e}.placeholderP($0)
exercise : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
exercise : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
exercise : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
exercise : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
exercise : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
exercise : Swh : lambda $0_{e}.placeholderP($0)
exercise : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
exercise : S : lambda $0_{ev}.placeholderP($0)
exercise : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
exercise : (NP\NP) : lambda $0_{e}.$0
exercise : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
exercise : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
exercise : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|be&3S(eq(pro:dem|that,placeholderC,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|be&3S(eq(pro:dem|that,placeholderC,$0),$0),$0)
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|exercise($1)),$0),$0)
top parse:
[('is', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)'), ('that', 'NP', 'pro:dem|that'), ('an', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('exercise', 'NP', 'placeholderC'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['it', 'was', '?']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
was : (NP\NP) : lambda $0_{e}.$0
was : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
was : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PAST&13S(part|cry-PROG($0,$1),$1)
was : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,det|a($3,$0($3)),$2)
was : (((S\NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
was : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,det|a($3,and($0($3),n|girl($3))),$2)
was : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,det|a($3,and(adj|good($3),$0($3))),$2)
was : S : lambda $0_{ev}.part|cry-PROG(n:prop|Kathy,$0)
was : (S/NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
was : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
was : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
was : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
was : (NP/NP) : lambda $0_{e}.$0
was : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,det|a($3,$0($3)),$2)
was : (((S\NP)/(St/NP))/(NP/(St/NP))) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
was : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.eq($1,det|a($3,$0($3)),$2)
was : (((S\NP)/(St\NP))/(NP/(St\NP))) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
was : (S/NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&PAST&13S(part|cry-PROG($0,$1),$1)
was : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
was : (((S/NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(part|cry-PROG(pro|it,$0),$0)
Syn:lambda $0_{ev}.Q(part|cry-PROG(pro|it,$0),$0)
lambda $0_{ev}.Q(pro|it,$0)
top parse:
[('it', 'NP', 'pro|it'), ('was', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['may', 'I', 'kiss', 'it', '?']
may : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
may : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
may : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
may : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
may : NP : det|a($0,n|cracker($0))
may : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|may($0($1),$1),$1)
may : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
may : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
may : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
may : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|may($0($1),$1),$1)
may : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
kiss : NP : placeholderC
kiss : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
kiss : N : lambda $0_{e}.placeholderP($0)
kiss : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
kiss : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
kiss : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
kiss : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
kiss : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
kiss : Swh : lambda $0_{e}.placeholderP($0)
kiss : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : S : lambda $0_{ev}.placeholderP($0)
kiss : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (NP\NP) : lambda $0_{e}.$0
kiss : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
kiss : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|may(eq(pro|I,pro|it,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|may(eq(pro|I,pro|it,$0),$0),$0)
lambda $0_{ev}.Q(aux|may(v|kiss(pro|I,pro|it,$0),$0),$0)
top parse:
[('may', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)'), ('I', 'NP', 'pro|I'), ('kiss', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['eat', 'lunch']
eat : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
eat : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
eat : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
eat : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|eat($1,$0,$2)
lunch : N : lambda $0_{e}.n|lunch($0)
lunch : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))
lunch : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
lunch : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|make-PROG($0,lambda $2_{e}.n|lunch($2),$1)
lunch : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
lunch : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
lunch : PP : lambda $0_{ev}.prep|for(lambda $1_{e}.n|lunch($1),$0)
lunch : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
lunch : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
lunch : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
lunch : ((S\N)\S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
lunch : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
lunch : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
lunch : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
lunch : ((S\PP)\(S\PP)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
NO PARSE
['are', 'you', 'sure', '?']
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
are : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|we,$0,$1)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|write-PROG($0,$1,$2)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|do-PROG($0,$1,$2),$2)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|write-PROG($0,$1,$2),$2)
are : NP : n:prop|Fraser
are : St : adj|alright(pro|you)
are : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
are : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
are : (S/S) : lambda $0_{<ev,t>}.$0
are : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|we,$0,$1)
are : ((Syn/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
are : (((S/NP)/(S/NP))/((S/NP)/(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
are : (NP/NP) : lambda $0_{e}.$0
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
are : St : adj|good(pro|you)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
sure : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
sure : ((S\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.not($0($1),$2)
sure : St : adj|sure(pro|I)
sure : S : lambda $0_{ev}.not(adj|sure(pro|I),$0)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(not(not(adj|sure(pro|I),$0),$0),$0)
Syn:lambda $0_{ev}.Q(not(not(adj|sure(pro|I),$0),$0),$0)
lambda $0_{ev}.Q(adj|sure(pro|you),$0)
top parse:
[('are', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('you', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ('sure', 'S', 'lambda $0_{ev}.not(adj|sure(pro|I),$0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['what', 'do', 'you', 'want', 'for', 'lunch']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
want : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,$0($1),$3)
want : N : lambda $0_{e}.n|cookie($0)
want : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|shoe($1))
want : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,lambda $4_{e}.and($0($4),$1($4)),$3)
want : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : (((S\NP)/N)/((St/NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,$0($1),$3)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|want($1,$0,$2),$2)
want : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,lambda $3_{e}.and($0($3),n|shoe($3)),$2)
want : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|doll-DIM($1),$0($1))
want : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
for : N : lambda $0_{e}.n|lunch($0)
for : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))
for : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
for : PP : lambda $0_{ev}.prep|for(lambda $1_{e}.n|lunch($1),$0)
for : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
for : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
for : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
for : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
for : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))
for : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
for : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
for : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
for : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
for : ((S/S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))
lunch : N : lambda $0_{e}.n|lunch($0)
lunch : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))
lunch : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
lunch : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|make-PROG($0,lambda $2_{e}.n|lunch($2),$1)
lunch : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
lunch : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
lunch : PP : lambda $0_{ev}.prep|for(lambda $1_{e}.n|lunch($1),$0)
lunch : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
lunch : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
lunch : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
lunch : ((S\N)\S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
lunch : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
lunch : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
lunch : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
lunch : ((S\PP)\(S\PP)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
WRONG
lambda $0_{ev}.and(v|do(pro|you,pro|you,$0),prep|for(lambda $1_{e}.and(n|lunch($1),n|shoe($1)),$0))
S:lambda $0_{ev}.and(v|do(pro|you,pro|you,$0),prep|for(lambda $1_{e}.and(n|lunch($1),n|shoe($1)),$0))
lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|want(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
top parse:
[('what', '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('do', '(S/NP)', 'lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)'), ('you', 'NP', 'pro|you'), ('want', '(N/N)', 'lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|shoe($1))'), ('for', 'N', 'lambda $0_{e}.n|lunch($0)'), ('lunch', '((S\\S)\\N)', 'lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))')]


['cheese', 'sandwich']
cheese : N : lambda $0_{e}.n|cheese($0)
sandwich : NP : placeholderC
sandwich : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sandwich : N : lambda $0_{e}.placeholderP($0)
sandwich : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
sandwich : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sandwich : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sandwich : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sandwich : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
sandwich : Swh : lambda $0_{e}.placeholderP($0)
sandwich : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sandwich : S : lambda $0_{ev}.placeholderP($0)
sandwich : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sandwich : (NP\NP) : lambda $0_{e}.$0
sandwich : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sandwich : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sandwich : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sandwich : (St\NP) : lambda $0_{e}.placeholderP($0)
sandwich : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sandwich : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sandwich : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
sandwich : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
sandwich : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
sandwich : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
sandwich : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
sandwich : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
sandwich : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
sandwich : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sandwich : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
sandwich : (NP/NP) : lambda $0_{e}.$0
sandwich : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sandwich : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
sandwich : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
sandwich : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
NO PARSE
['eggnog']
eggnog : NP : placeholderC
eggnog : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : N : lambda $0_{e}.placeholderP($0)
eggnog : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eggnog : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eggnog : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eggnog : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eggnog : Swh : lambda $0_{e}.placeholderP($0)
eggnog : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : S : lambda $0_{ev}.placeholderP($0)
eggnog : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (NP\NP) : lambda $0_{e}.$0
eggnog : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (St\NP) : lambda $0_{e}.placeholderP($0)
eggnog : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eggnog : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eggnog : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
eggnog : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
eggnog : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
eggnog : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
eggnog : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
eggnog : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eggnog : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
eggnog : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eggnog : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
eggnog : (NP/NP) : lambda $0_{e}.$0
eggnog : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eggnog : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
eggnog : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
eggnog : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
eggnog : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
eggnog : (Swh/N) : lambda $0_{<e,t>}.$0
eggnog : (Syn/Syn) : lambda $0_{<ev,t>}.$0
eggnog : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
eggnog : (St\St) : lambda $0_{t}.$0
eggnog : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eggnog : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
eggnog : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
eggnog : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eggnog : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
eggnog : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : (Swh\N) : lambda $0_{<e,t>}.$0
eggnog : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
eggnog : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
eggnog : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
lambda $0_{e}.n|eggnog($0)
CORRECTPlaceholder
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
top parse:
[('eggnog', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['we', 'do']
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
do : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($0,$1,$2)
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
do : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST($0($1,$2),$2)
do : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($1,$0,$2)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
do : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
do : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES(and($0($3),$1($2,$3)),$3)
do : PP : lambda $0_{ev}.prep|with(pro|it,$0)
do : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)
do : ((Swh\(S/NP))/PP) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will($1($2,$3),$3),$0($3))
do : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do($0,pro|it,$1)
do : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|do(and($0($3),$1($2,$3)),$3)
do : (((S/NP)/NP)/S) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($3),v|do($1,$2,$3))
do : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
WRONG
lambda $0_{ev}.aux|do(part|go-PROG(pro|we,$0),$0)
S:lambda $0_{ev}.aux|do(part|go-PROG(pro|we,$0),$0)
lambda $0_{ev}.v|do(pro|we,$0)
top parse:
[('we', 'S', 'lambda $0_{ev}.part|go-PROG(pro|we,$0)'), ('do', '(S\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do($0($1),$1)')]


['an', 'eggnog', '?']
an : NP : placeholderC
an : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : N : lambda $0_{e}.placeholderP($0)
an : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
an : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
an : Swh : lambda $0_{e}.placeholderP($0)
an : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : S : lambda $0_{ev}.placeholderP($0)
an : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (NP\NP) : lambda $0_{e}.$0
an : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (St\NP) : lambda $0_{e}.placeholderP($0)
an : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
an : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
an : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
an : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
an : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
an : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
eggnog : NP : placeholderC
eggnog : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : N : lambda $0_{e}.placeholderP($0)
eggnog : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eggnog : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eggnog : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eggnog : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eggnog : Swh : lambda $0_{e}.placeholderP($0)
eggnog : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : S : lambda $0_{ev}.placeholderP($0)
eggnog : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (NP\NP) : lambda $0_{e}.$0
eggnog : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (St\NP) : lambda $0_{e}.placeholderP($0)
eggnog : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eggnog : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eggnog : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
eggnog : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
eggnog : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
eggnog : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
eggnog : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
eggnog : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(placeholderP(placeholderC,$0),$0)
Syn:lambda $0_{ev}.Q(placeholderP(placeholderC,$0),$0)
lambda $0_{ev}.Q(det|a($1,n|eggnog($1)),$0)
top parse:
[('an', 'NP', 'placeholderC'), ('eggnog', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['lunch']
lunch : N : lambda $0_{e}.n|lunch($0)
lunch : ((S\S)\N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|for($0,$2))
lunch : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
lunch : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|make-PROG($0,lambda $2_{e}.n|lunch($2),$1)
lunch : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
lunch : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
lunch : PP : lambda $0_{ev}.prep|for(lambda $1_{e}.n|lunch($1),$0)
lunch : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
lunch : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
lunch : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
lunch : ((S\N)\S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
lunch : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
lunch : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S($0($1,$2,$3),$3)
lunch : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|have($1,$0,$2),$2)
lunch : ((S\PP)\(S\PP)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
CORRECT
lambda $0_{e}.n|lunch($0)
N:lambda $0_{e}.n|lunch($0)
top parse:
[('lunch', 'N', 'lambda $0_{e}.n|lunch($0)')]


['hurry', 'up']
hurry : NP : placeholderC
hurry : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
hurry : N : lambda $0_{e}.placeholderP($0)
hurry : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
hurry : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
hurry : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
hurry : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
hurry : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
hurry : Swh : lambda $0_{e}.placeholderP($0)
hurry : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hurry : S : lambda $0_{ev}.placeholderP($0)
hurry : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
hurry : (NP\NP) : lambda $0_{e}.$0
hurry : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hurry : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
hurry : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
hurry : (St\NP) : lambda $0_{e}.placeholderP($0)
hurry : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
hurry : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
hurry : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
hurry : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
hurry : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
hurry : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
hurry : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
hurry : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
hurry : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
hurry : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
hurry : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
hurry : (NP/NP) : lambda $0_{e}.$0
hurry : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
hurry : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
hurry : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
hurry : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
up : NP : placeholderC
up : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
up : N : lambda $0_{e}.placeholderP($0)
up : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
up : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
up : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
up : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
up : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
up : Swh : lambda $0_{e}.placeholderP($0)
up : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
up : S : lambda $0_{ev}.placeholderP($0)
up : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
up : (NP\NP) : lambda $0_{e}.$0
up : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
up : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
up : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
up : (St\NP) : lambda $0_{e}.placeholderP($0)
up : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
up : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
up : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
up : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
up : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
up : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
up : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
up : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
up : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
up : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
up : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
up : (NP/NP) : lambda $0_{e}.$0
up : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
up : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
up : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
up : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(placeholderC,$0)
S:lambda $0_{ev}.placeholderP(placeholderC,$0)
lambda $0_{ev}.and(v|hurry(pro|you,$0),adv:loc|up($0))
top parse:
[('hurry', 'NP', 'placeholderC'), ('up', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['want', 'me', 'to', 'come', 'with', 'you', '?']
want : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,$0($1),$3)
want : N : lambda $0_{e}.n|cookie($0)
want : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|shoe($1))
want : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,lambda $4_{e}.and($0($4),$1($4)),$3)
want : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : (((S\NP)/N)/((St/NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,$0($1),$3)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|want($1,$0,$2),$2)
want : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,lambda $3_{e}.and($0($3),n|shoe($3)),$2)
want : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|doll-DIM($1),$0($1))
want : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
me : NP : pro|me
me : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$1,$0,$2)
me : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,pro|me,$0,$2)
me : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$1,$0,$2)
me : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,pro|me,$0,$2)
me : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$1,$0,$2)
me : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,pro|me,$0,$2)
to : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|to($0,$3))
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($1($2,$3),$0($3)),$3)
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
to : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|to($0,$1)
to : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
to : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|to($0,$2))
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),v|read&ZERO($0,$3))
to : S : lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
to : (((S\S)/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),$0($1,$3))
to : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
to : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),v|read&ZERO(pro|you,$2))
to : S : lambda $0_{ev}.v|cook(pro|I,pro|it,$0)
to : (((S\NP)\S)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($1($3),$0($2,$3)),$3)
to : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|to($1,$3))
to : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|cook($0,$1,$2)
to : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
to : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
to : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),v|cook($0,pro|it,$3))
come : S : lambda $0_{ev}.v|come(pro|you,$0)
come : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(v|come(pro|you,$1),$0($1))
come : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|out($1))
come : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
with : (S/S) : lambda $0_{<ev,t>}.$0
with : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|with($0,$1)
with : (S\S) : lambda $0_{<ev,t>}.$0
with : PP : lambda $0_{ev}.prep|with(pro|it,$0)
with : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|with($0,$1)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.Q(aux|will(and(v|come(pro|you,$1),v|want($0,pro|me,$1)),$1),$1)
(Syn\NP):lambda $0_{e}.lambda $1_{ev}.Q(aux|will(and(v|come(pro|you,$1),v|want($0,pro|me,$1)),$1),$1)
lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),prep|with(pro|you,$0)),$0)
top parse:
[('want', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)'), ('me', 'NP', 'pro|me'), ('to', '(((S\\NP)\\(S\\NP))/S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))'), ('come', 'S', 'lambda $0_{ev}.v|come(pro|you,$0)'), ('with', '(S\\S)', 'lambda $0_{<ev,t>}.$0'), ('you', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)'), ('?', '((Syn\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)')]


['shall', 'I', 'come', '?']
shall : NP : placeholderC
shall : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
shall : N : lambda $0_{e}.placeholderP($0)
shall : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
shall : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
shall : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
shall : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
shall : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
shall : Swh : lambda $0_{e}.placeholderP($0)
shall : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : S : lambda $0_{ev}.placeholderP($0)
shall : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : (NP\NP) : lambda $0_{e}.$0
shall : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : (St\NP) : lambda $0_{e}.placeholderP($0)
shall : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
shall : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
shall : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
come : S : lambda $0_{ev}.v|come(pro|you,$0)
come : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(v|come(pro|you,$1),$0($1))
come : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|out($1))
come : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(placeholderP(aux|be&1S(v|come(pro|you,$0),$0),$0),$0)
Syn:lambda $0_{ev}.Q(placeholderP(aux|be&1S(v|come(pro|you,$0),$0),$0),$0)
lambda $0_{ev}.Q(aux|shall(v|come(pro|I,$0),$0),$0)
top parse:
[('shall', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('I', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)'), ('come', 'S', 'lambda $0_{ev}.v|come(pro|you,$0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['are', 'you', 'coming', 'down', '?']
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG($0,$1,$2)
are : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES($0($1,$2),$2)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|we,$0,$1)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|write-PROG($0,$1,$2)
are : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|do-PROG($0,$1,$2),$2)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|call-PROG($0,$1,$2)
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&PRES(part|write-PROG($0,$1,$2),$2)
are : NP : n:prop|Fraser
are : St : adj|alright(pro|you)
are : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
are : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
are : (S/S) : lambda $0_{<ev,t>}.$0
are : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|do(pro|we,$0,$1)
are : ((Syn/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
are : (((S/NP)/(S/NP))/((S/NP)/(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&PRES($0($1,$2,$3),$3)
are : (NP/NP) : lambda $0_{e}.$0
are : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
are : St : adj|good(pro|you)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
coming : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
coming : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|come-PROG($0,$1),$1)
down : S : lambda $0_{ev}.adv:loc|down($0)
down : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|down($1))
down : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))
down : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG($0,$1),adv:loc|down($1))
down : S : lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv:loc|down($0))
down : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|down($1))
down : (S/NP) : lambda $0_{e}.lambda $1_{ev}.and(part|go-PROG($0,$1),adv:loc|down($1))
down : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(and(aux|be&3S(part|come-PROG(pro|you,$0),$0),adv:loc|down($0)),$0)
Syn:lambda $0_{ev}.Q(and(aux|be&3S(part|come-PROG(pro|you,$0),$0),adv:loc|down($0)),$0)
lambda $0_{ev}.Q(and(aux|be&PRES(part|come-PROG(pro|you,$0),$0),adv:loc|down($0)),$0)
top parse:
[('are', '(S/S)', 'lambda $0_{<ev,t>}.$0'), ('you', 'NP', 'pro|you'), ('coming', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|come-PROG($0,$1),$1)'), ('down', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|down($2))'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['what', 'is', 'it']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['shall', 'I', 'come', 'over', 'there', '?']
shall : NP : placeholderC
shall : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
shall : N : lambda $0_{e}.placeholderP($0)
shall : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
shall : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
shall : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
shall : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
shall : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
shall : Swh : lambda $0_{e}.placeholderP($0)
shall : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : S : lambda $0_{ev}.placeholderP($0)
shall : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
shall : (NP\NP) : lambda $0_{e}.$0
shall : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
come : S : lambda $0_{ev}.v|come(pro|you,$0)
come : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(v|come(pro|you,$1),$0($1))
come : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|out($1))
come : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
over : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : S : lambda $0_{ev}.adv:loc|here($0)
over : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
over : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : (((S\NP)\(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
over : (((S\NP)\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
over : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
over : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : S : lambda $0_{ev}.adv:loc|there($0)
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))
there : ((Swh\(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : ((Swh\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S/NP))\(Swh\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : (((Swh\(S/NP))\S)\((Swh\(S/NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\(S\NP))\(Swh\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : (((Swh\(S/NP))\((S\NP)\(S/NP)))\((Swh\(S/NP))\((S\NP)\(S/NP)))) : lambda $0_{<<<e,<ev,t>>,<e,<ev,t>>>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.$0
there : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|be&PRES($0($1,$2),$2),adv:loc|out($2))
there : ((((S\NP)\(S\NP))\S)\(((S\NP)\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : (((Swh\(S\NP))\S)\((Swh\(S\NP))\S)) : lambda $0_{<<ev,t>,<<e,<ev,t>>,<e,<ev,t>>>>}.$0
there : ((Swh\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&PRES($1($2,$3),$3),$0($3))
there : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
there : ((Swh\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($1,$2,$3),adv:loc|out($3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.Q(and(eq($0,pro|I,$1),adv:loc|here($1)),$1)
(Syn\NP):lambda $0_{e}.lambda $1_{ev}.Q(and(eq($0,pro|I,$1),adv:loc|here($1)),$1)
lambda $0_{ev}.Q(and(aux|shall(v|come(pro|I,$0),$0),adv:loc|there($0)),$0)
top parse:
[('shall', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('I', 'NP', 'pro|I'), ('come', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|out($1))'), ('over', 'S', 'lambda $0_{ev}.adv:loc|here($0)'), ('there', '(((S\\NP)\\(S\\NP))\\S)', 'lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),$0($3))'), ('?', '((Syn\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)')]


['can', 'you', 'see', 'me', 'now', '?']
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
me : NP : pro|me
me : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$1,$0,$2)
me : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,pro|me,$0,$2)
me : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$1,$0,$2)
me : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,pro|me,$0,$2)
me : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give(pro|you,$1,$0,$2)
me : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give($1,pro|me,$0,$2)
now : NP : placeholderC
now : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : N : lambda $0_{e}.placeholderP($0)
now : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
now : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
now : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
now : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
now : Swh : lambda $0_{e}.placeholderP($0)
now : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
now : S : lambda $0_{ev}.placeholderP($0)
now : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
now : (NP\NP) : lambda $0_{e}.$0
now : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|me,$0),$0),adv|now($0)),$0)
top parse:
[('can', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ('you', 'NP', 'pro|you'), ('see', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)'), ('me', 'NP', 'pro|me'), ('now', '((S\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['an', 'egg']
an : NP : placeholderC
an : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : N : lambda $0_{e}.placeholderP($0)
an : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
an : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
an : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
an : Swh : lambda $0_{e}.placeholderP($0)
an : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : S : lambda $0_{ev}.placeholderP($0)
an : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (NP\NP) : lambda $0_{e}.$0
an : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (St\NP) : lambda $0_{e}.placeholderP($0)
an : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
an : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
an : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
an : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
an : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
an : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
an : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
an : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
an : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
an : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
an : (NP/NP) : lambda $0_{e}.$0
an : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
an : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
an : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
an : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
egg : NP : placeholderC
egg : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
egg : N : lambda $0_{e}.placeholderP($0)
egg : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
egg : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
egg : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
egg : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
egg : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
egg : Swh : lambda $0_{e}.placeholderP($0)
egg : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
egg : S : lambda $0_{ev}.placeholderP($0)
egg : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
egg : (NP\NP) : lambda $0_{e}.$0
egg : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
egg : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
egg : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
egg : (St\NP) : lambda $0_{e}.placeholderP($0)
egg : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
egg : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
egg : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
egg : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
egg : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
egg : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
egg : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
egg : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
egg : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
egg : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
egg : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
egg : (NP/NP) : lambda $0_{e}.$0
egg : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
egg : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
egg : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
egg : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(placeholderC,$0)
S:lambda $0_{ev}.placeholderP(placeholderC,$0)
det|a($0,n|egg($0))
top parse:
[('an', 'NP', 'placeholderC'), ('egg', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['what', 'else', '?']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
else : NP : placeholderC
else : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
else : N : lambda $0_{e}.placeholderP($0)
else : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
else : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
else : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
else : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
else : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
else : Swh : lambda $0_{e}.placeholderP($0)
else : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : S : lambda $0_{ev}.placeholderP($0)
else : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (NP\NP) : lambda $0_{e}.$0
else : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (St\NP) : lambda $0_{e}.placeholderP($0)
else : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
else : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
else : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
else : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
else : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
else : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
else : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
else : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Fraser,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Fraser,$1)
lambda $0_{ev}.Q(pro:wh|what,$0)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('else', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('?', 'NP', 'n:prop|Fraser')]


['and', 'what', 'else']
and : (S/S) : lambda $0_{<ev,t>}.$0
and : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|in(lambda $2_{e}.n|bed($2),$1))
and : N : lambda $0_{e}.n|bed($0)
and : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|watch($0,$1,$2)
and : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&PAST($0,$1,$2)
and : N : lambda $0_{e}.n|telephone($0)
and : (((S/N)/(PP/N))/S) : lambda $0_{<ev,t>}.lambda $1_{<<e,t>,<ev,t>>}.lambda $2_{<e,t>}.lambda $3_{ev}.and($0($3),$1($2,$3))
and : (NP\NP) : lambda $0_{e}.and($0,n:prop|Jill)
and : (NP\NP) : lambda $0_{e}.and(n:prop|Jack,$0)
and : ((NP\NP)/NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : ((NP/NP)\NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : (NP/NP) : lambda $0_{e}.and($0,n:prop|Jill)
and : (NP/NP) : lambda $0_{e}.and(n:prop|Jack,$0)
and : ((NP\NP)/(NP\NP)) : lambda $0_{<e,e>}.$0
and : ((NP/NP)\(NP/NP)) : lambda $0_{<e,e>}.$0
and : ((NP\NP)\NP) : lambda $0_{e}.lambda $1_{e}.and($1,$0)
and : ((NP\NP)\(NP\NP)) : lambda $0_{<e,e>}.$0
and : (PP/PP) : lambda $0_{<ev,t>}.$0
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
else : NP : placeholderC
else : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
else : N : lambda $0_{e}.placeholderP($0)
else : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
else : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
else : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
else : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
else : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
else : Swh : lambda $0_{e}.placeholderP($0)
else : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : S : lambda $0_{ev}.placeholderP($0)
else : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (NP\NP) : lambda $0_{e}.$0
else : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
else : (St\NP) : lambda $0_{e}.placeholderP($0)
else : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
else : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
else : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
else : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
else : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
else : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
else : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
else : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{e}.lambda $1_{ev}.v|watch(placeholderC,$0,$1)
(S/NP):lambda $0_{e}.lambda $1_{ev}.v|watch(placeholderC,$0,$1)
lambda $0_{e}.and($0)
top parse:
[('and', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|watch($0,$1,$2)'), ('what', '(((S/NP)/NP)\\((S/NP)/NP))', 'lambda $0_{<e,<e,<ev,t>>>}.$0'), ('else', 'NP', 'placeholderC')]


['some', 'milk', '?']
some : (NP/N) : lambda $0_{<e,t>}.qn|some($1,$0($1))
some : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)
some : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)
some : S : lambda $0_{ev}.adv:int|just($0)
some : (((S\S)\(S\S))/S) : lambda $0_{<ev,t>}.lambda $1_{<<ev,t>,<ev,t>>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($1($2,$3),$0($3))
some : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : (NP\N) : lambda $0_{<e,t>}.qn|some($1,$0($1))
some : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)
some : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\S)\(S\S))\S) : lambda $0_{<ev,t>}.lambda $1_{<<ev,t>,<ev,t>>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($1($2,$3),$0($3))
some : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)
milk : N : lambda $0_{e}.n|milk($0)
milk : Swh : lambda $0_{e}.n|milk($0)
milk : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do($0($1,$2),$2),$2)
milk : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
milk : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
milk : (((S\NP)\(S\NP))\((S\NP)\(S\NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
milk : (((S\NP)\(S/NP))\((S\NP)\(S/NP))) : lambda $0_{<<e,<ev,t>>,<e,<ev,t>>>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
milk : (((S\S)\(S\S))\((S\S)\(S\S))) : lambda $0_{<<<ev,t>,<ev,t>>,<<ev,t>,<ev,t>>>}.$0
milk : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.not(aux|do($0($1,$2),$2),$2)
milk : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|for($0,$1)
milk : (((S\S)\(S\S))/((S\S)\(S\S))) : lambda $0_{<<<ev,t>,<ev,t>>,<<ev,t>,<ev,t>>>}.$0
milk : (((S/S)/(S/S))\((S/S)/(S/S))) : lambda $0_{<<<ev,t>,<ev,t>>,<<ev,t>,<ev,t>>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
CORRECT
lambda $0_{ev}.Q(qn|some($1,n|milk($1)),$0)
Syn:lambda $0_{ev}.Q(qn|some($1,n|milk($1)),$0)
top parse:
[('some', '(NP/N)', 'lambda $0_{<e,t>}.qn|some($1,$0($1))'), ('milk', 'N', 'lambda $0_{e}.n|milk($0)'), ('?', '(Syn\\NP)', 'lambda $0_{e}.lambda $1_{ev}.Q($0,$1)')]


['now', 'we', 'need', 'the', 'sugar']
now : NP : placeholderC
now : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : N : lambda $0_{e}.placeholderP($0)
now : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
now : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
now : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
now : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
now : Swh : lambda $0_{e}.placeholderP($0)
now : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
now : S : lambda $0_{ev}.placeholderP($0)
now : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
now : (NP\NP) : lambda $0_{e}.$0
now : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
now : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
now : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
need : NP : placeholderC
need : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
need : N : lambda $0_{e}.placeholderP($0)
need : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
need : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
need : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
need : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
need : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
need : Swh : lambda $0_{e}.placeholderP($0)
need : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
need : S : lambda $0_{ev}.placeholderP($0)
need : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
need : (NP\NP) : lambda $0_{e}.$0
need : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
need : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
need : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
sugar : Swh : lambda $0_{e}.n|sugar($0)
NO PARSE
['where', "'s", 'the', 'pitcher']
where : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
where : (Swh/(St\NP)) : lambda $0_{<e,t>}.$0
where : ((St/NP)/(St/NP)) : lambda $0_{<e,t>}.$0
where : ((St\NP)/(St\NP)) : lambda $0_{<e,t>}.$0
where : (N/N) : lambda $0_{<e,t>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
pitcher : NP : placeholderC
pitcher : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
pitcher : N : lambda $0_{e}.placeholderP($0)
pitcher : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
pitcher : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
pitcher : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
pitcher : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
pitcher : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
pitcher : Swh : lambda $0_{e}.placeholderP($0)
pitcher : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
pitcher : S : lambda $0_{ev}.placeholderP($0)
pitcher : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
pitcher : (NP\NP) : lambda $0_{e}.$0
pitcher : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
pitcher : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
pitcher : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
pitcher : (St\NP) : lambda $0_{e}.placeholderP($0)
pitcher : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
pitcher : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
pitcher : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.eqLoc(det|the($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(det|the($1,placeholderP($1)),$0)
lambda $0_{e}.eqLoc(det|the($1,n|pitcher($1)),$0)
CORRECTPlaceholder
lambda $0_{e}.eqLoc(det|the($1,placeholderP($1)),$0)
Swh:lambda $0_{e}.eqLoc(det|the($1,placeholderP($1)),$0)
top parse:
[('where', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ("'s", '((St/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('pitcher', 'N', 'lambda $0_{e}.placeholderP($0)')]


['slip', 'on', 'my', 'part']
slip : NP : placeholderC
slip : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
slip : N : lambda $0_{e}.placeholderP($0)
slip : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
slip : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
slip : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slip : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
slip : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
slip : Swh : lambda $0_{e}.placeholderP($0)
slip : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slip : S : lambda $0_{ev}.placeholderP($0)
slip : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slip : (NP\NP) : lambda $0_{e}.$0
slip : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slip : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slip : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slip : (St\NP) : lambda $0_{e}.placeholderP($0)
slip : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
slip : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slip : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
on : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|on($0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($2),$1($2))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on($0,$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|on($1))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|on($2))
on : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),prep|on($0,$2))
on : (((S\NP)\(S\NP))/N) : lambda $0_{<e,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),prep|on($0,$3))
on : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($1($2,$3),$3),prep|on($0,$3))
on : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|I,$0,$1)
on : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and(aux|be&3S($1($2),$2),prep|on($0,$2))
on : (((S\S)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($2($3),prep|on($0($1),$3))
on : (((S\NP)/N)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(aux|be&3S($0($2,$3),$3),prep|on($1,$3))
on : (((S\NP)/NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),prep|on($1,$3))
on : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),prep|on(det|the($3,$0($3)),$2))
on : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),prep|on(lambda $3_{e}.n|doll-DIM($3),$2))
on : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|on(lambda $2_{e}.n|doll-DIM($2),$1))
on : (((S\S)\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($0($1,$3),$2($3))
my : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))
my : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))
part : NP : placeholderC
part : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
part : N : lambda $0_{e}.placeholderP($0)
part : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
part : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
part : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
part : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
part : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
part : Swh : lambda $0_{e}.placeholderP($0)
part : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
part : S : lambda $0_{ev}.placeholderP($0)
part : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
part : (NP\NP) : lambda $0_{e}.$0
part : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
part : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
part : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
part : (St\NP) : lambda $0_{e}.placeholderP($0)
part : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
part : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
part : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.and(v|look(placeholderC,$0),prep|on(pro:poss:det|my($1,placeholderP($1)),$0))
S:lambda $0_{ev}.and(v|look(placeholderC,$0),prep|on(pro:poss:det|my($1,placeholderP($1)),$0))
lambda $0_{ev}.and(v|slip(pro|you,$0),prep|on(pro:poss:det|my($1,n|part($1)),$0))
top parse:
[('slip', 'NP', 'placeholderC'), ('on', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),prep|on($0,$2))'), ('my', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|my($1,$0($1))'), ('part', 'N', 'lambda $0_{e}.placeholderP($0)')]


['you', 'like', 'cheese', '?']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
cheese : N : lambda $0_{e}.n|cheese($0)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.Q(v|like($0,lambda $2_{e}.and(n|telephone($2),n|cheese($2)),$1),$1)
(Syn\NP):lambda $0_{e}.lambda $1_{ev}.Q(v|like($0,lambda $2_{e}.and(n|telephone($2),n|cheese($2)),$1),$1)
lambda $0_{ev}.Q(v|like(pro|you,lambda $1_{e}.n|cheese($1),$0),$0)
top parse:
[('you', 'N', 'lambda $0_{e}.n|telephone($0)'), ('like', '(((S\\NP)\\N)/N)', 'lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)'), ('cheese', 'N', 'lambda $0_{e}.n|cheese($0)'), ('?', '((Syn\\NP)\\(S\\NP))', 'lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)')]


['I', 'didn', "'t", 'hear', 'you']
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
didn : NP : placeholderC
didn : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
didn : N : lambda $0_{e}.placeholderP($0)
didn : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
didn : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
didn : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
didn : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
didn : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
didn : Swh : lambda $0_{e}.placeholderP($0)
didn : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
didn : S : lambda $0_{ev}.placeholderP($0)
didn : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
didn : (NP\NP) : lambda $0_{e}.$0
didn : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
didn : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
didn : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
't : NP : n:prop|Kathy
't : (St\NP) : lambda $0_{e}.n|tomato($0)
't : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : N : lambda $0_{e}.n|apple($0)
't : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
't : N : lambda $0_{e}.n|tomato($0)
't : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
't : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{e}.n|milk($2),$1)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
't : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
't : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|fix($0,$1,$2)
't : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
't : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
't : (((St\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.$0
't : (N\N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|soup($1))
hear : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
hear : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
hear : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
hear : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
WRONG
lambda $0_{ev}.aux|be&1S(v|hear(det|the($1,n|tomato($1)),pro|you,$0),$0)
S:lambda $0_{ev}.aux|be&1S(v|hear(det|the($1,n|tomato($1)),pro|you,$0),$0)
lambda $0_{ev}.not(aux|do&PAST(v|hear(pro|I,pro|you,$0),$0),$0)
top parse:
[('I', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)'), ('didn', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ("'t", 'N', 'lambda $0_{e}.n|tomato($0)'), ('hear', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)'), ('you', 'NP', 'pro|you')]


['orange', 'cheese']
orange : NP : placeholderC
orange : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
orange : N : lambda $0_{e}.placeholderP($0)
orange : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
orange : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
orange : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
orange : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
orange : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
orange : Swh : lambda $0_{e}.placeholderP($0)
orange : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
orange : S : lambda $0_{ev}.placeholderP($0)
orange : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
orange : (NP\NP) : lambda $0_{e}.$0
orange : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
orange : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
orange : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
orange : (St\NP) : lambda $0_{e}.placeholderP($0)
orange : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
orange : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
orange : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
orange : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
orange : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
orange : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
orange : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
orange : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
orange : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
orange : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
orange : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
orange : (NP/NP) : lambda $0_{e}.$0
orange : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
orange : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
orange : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
orange : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
cheese : N : lambda $0_{e}.n|cheese($0)
WRONG
det|the($0,n|cheese($0))
NP:det|the($0,n|cheese($0))
lambda $0_{e}.and(adj|orange($0),n|cheese($0))
top parse:
[('orange', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('cheese', 'N', 'lambda $0_{e}.n|cheese($0)')]


['where', 'is', 'she']
where : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
where : (Swh/(St\NP)) : lambda $0_{<e,t>}.$0
where : ((St/NP)/(St/NP)) : lambda $0_{<e,t>}.$0
where : ((St\NP)/(St\NP)) : lambda $0_{<e,t>}.$0
where : (N/N) : lambda $0_{<e,t>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
CORRECT
lambda $0_{e}.eqLoc(pro|she,$0)
Swh:lambda $0_{e}.eqLoc(pro|she,$0)
top parse:
[('where', '(Swh/(St/NP))', 'lambda $0_{<e,t>}.$0'), ('is', '((St/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)'), ('she', 'NP', 'pro|she')]


['she', "'s", 'talking']
she : NP : pro|she
she : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv|hard($1))
she : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv|hard($2))
she : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($0,$1,$2)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
talking : NP : placeholderC
talking : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
talking : N : lambda $0_{e}.placeholderP($0)
talking : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
talking : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
talking : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
talking : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
talking : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
talking : Swh : lambda $0_{e}.placeholderP($0)
talking : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
talking : S : lambda $0_{ev}.placeholderP($0)
talking : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
talking : (NP\NP) : lambda $0_{e}.$0
talking : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
talking : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
talking : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
talking : (St\NP) : lambda $0_{e}.placeholderP($0)
talking : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
talking : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
talking : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
talking : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
talking : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
talking : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
talking : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
talking : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.eq(pro|she,placeholderC,$0)
S:lambda $0_{ev}.eq(pro|she,placeholderC,$0)
lambda $0_{ev}.aux|be&3S(part|talk-PROG(pro|she,$0),$0)
top parse:
[('she', 'NP', 'pro|she'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('talking', 'NP', 'placeholderC')]


['did', 'you', 'finish', 'it', '?']
did : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say($0,$1,$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|do($0,$1,$2)
did : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|say($0,$1,$2),$2)
did : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
did : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|do($0,$1,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
finish : NP : placeholderC
finish : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
finish : N : lambda $0_{e}.placeholderP($0)
finish : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
finish : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
finish : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
finish : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
finish : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
finish : Swh : lambda $0_{e}.placeholderP($0)
finish : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
finish : S : lambda $0_{ev}.placeholderP($0)
finish : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
finish : (NP\NP) : lambda $0_{e}.$0
finish : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
finish : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
finish : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|do&PAST(eq(pro|you,pro|it,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|do&PAST(eq(pro|you,pro|it,$0),$0),$0)
lambda $0_{ev}.Q(aux|do&PAST(v|finish(pro|you,pro|it,$0),$0),$0)
top parse:
[('did', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|do&PAST($0($1),$1)'), ('you', 'NP', 'pro|you'), ('finish', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['it', "'s", 'allgone']
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
allgone : NP : placeholderC
allgone : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
allgone : N : lambda $0_{e}.placeholderP($0)
allgone : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
allgone : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
allgone : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
allgone : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
allgone : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
allgone : Swh : lambda $0_{e}.placeholderP($0)
allgone : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
allgone : S : lambda $0_{ev}.placeholderP($0)
allgone : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
allgone : (NP\NP) : lambda $0_{e}.$0
allgone : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
allgone : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
allgone : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
allgone : (St\NP) : lambda $0_{e}.placeholderP($0)
allgone : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
allgone : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
allgone : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
allgone : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
allgone : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
allgone : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
allgone : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
allgone : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.eq(pro|it,placeholderC,$0)
S:lambda $0_{ev}.eq(pro|it,placeholderC,$0)
adj|all_gone(pro|it)
top parse:
[('it', 'NP', 'pro|it'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('allgone', 'NP', 'placeholderC')]


['Eve']
Eve : NP : n:prop|Eve
Eve : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have&3S($0,$1,$2)
Eve : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Eve,$1)
Eve : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
Eve : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Eve,$1),$0($1))
CORRECT
n:prop|Eve
NP:n:prop|Eve
top parse:
[('Eve', 'NP', 'n:prop|Eve')]


['what', "'s", 'Sara', 'saying']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
Sara : NP : placeholderC
Sara : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : N : lambda $0_{e}.placeholderP($0)
Sara : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sara : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sara : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sara : Swh : lambda $0_{e}.placeholderP($0)
Sara : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : S : lambda $0_{ev}.placeholderP($0)
Sara : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (NP\NP) : lambda $0_{e}.$0
Sara : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (St\NP) : lambda $0_{e}.placeholderP($0)
Sara : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sara : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
saying : NP : n:prop|Fraser
saying : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
saying : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
saying : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
saying : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
saying : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
saying : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
saying : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|say-PROG($0,n:prop|Fraser,$1)
saying : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|say-PROG(pro|you,$0,$1)
saying : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|say-PROG($0,n:prop|Fraser,$1)
saying : (S/NP) : lambda $0_{e}.lambda $1_{ev}.part|say-PROG(pro|you,$0,$1)
WRONG
lambda $0_{ev}.eq(n:prop|Fraser,placeholderC,$0)
S:lambda $0_{ev}.eq(n:prop|Fraser,placeholderC,$0)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(n:prop|Sara,$0,$1),$1)
top parse:
[('what', '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('Sara', 'NP', 'placeholderC'), ('saying', 'NP', 'n:prop|Fraser')]


['what', "'s", 'the', 'matter']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
matter : NP : placeholderC
matter : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
matter : N : lambda $0_{e}.placeholderP($0)
matter : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
matter : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
matter : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
matter : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
matter : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
matter : Swh : lambda $0_{e}.placeholderP($0)
matter : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : S : lambda $0_{ev}.placeholderP($0)
matter : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (NP\NP) : lambda $0_{e}.$0
matter : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (St\NP) : lambda $0_{e}.placeholderP($0)
matter : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
matter : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
matter : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|matter($2)),$1)
CORRECTPlaceholder
lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('matter', 'N', 'lambda $0_{e}.placeholderP($0)')]


['may', 'I', 'top', 'it', '?']
may : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
may : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
may : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|have($0,$1,$2)
may : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
may : NP : det|a($0,n|cracker($0))
may : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|may($0($1),$1),$1)
may : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
may : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
may : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
may : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|may($0($1),$1),$1)
may : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|may(v|have($1,$0,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.$0
I : NP : pro|I
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&1S($0($1),$1)
I : St : adj|busy(pro|I)
I : (S\S) : lambda $0_{<ev,t>}.$0
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
I : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|upstairs($1))
I : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
I : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($0($2),$1($2)),$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
I : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
I : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|forget&PAST($0,$1,$2)
I : S : lambda $0_{ev}.v|read&ZERO(pro|I,$0)
I : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
I : (((S/NP)/(S/NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : (((S/NP)/(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
I : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
top : N : lambda $0_{e}.n|top($0)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|may(v|taste(lambda $1_{e}.n|top($1),pro|I,$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|may(v|taste(lambda $1_{e}.n|top($1),pro|I,$0),$0),$0)
lambda $0_{ev}.Q(aux|may(v|top(pro|I,pro|it,$0),$0),$0)
top parse:
[('may', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)'), ('I', 'NP', 'pro|I'), ('top', 'N', 'lambda $0_{e}.n|top($0)'), ('it', '((S\\NP)\\N)', 'lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['look', 'at', 'Sara']
look : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(v|look(pro|you,$1),$0($1))
look : S : lambda $0_{ev}.v|look(pro|you,$0)
look : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(v|look(pro|you,$1),$0($1))
look : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),$0($2))
look : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|look($0,$1)
look : (S/NP) : lambda $0_{e}.lambda $1_{ev}.and(v|look($0,$1),adv:loc|here($1))
look : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.and(v|look($0,$2),prep|on($1,$2))
look : ((S/NP)/(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(v|look(pro|you,$2),$0($1,$2))
look : (((S\NP)/NP)/(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|look($2,$3),$0($1,$3))
look : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|look($0,$1)
look : ((S/NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),$0($2))
look : (((S/NP)/NP)/(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|look($2,$3),$0($1,$3))
look : (((S/NP)/NP)\(PP/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|look($2,$3),$0($1,$3))
look : (((S/NP)\NP)/(PP\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|look($2,$3),$0($1,$3))
look : ((S/NP)\PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|look($1,$2),$0($2))
at : NP : placeholderC
at : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
at : N : lambda $0_{e}.placeholderP($0)
at : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
at : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
at : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
at : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
at : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
at : Swh : lambda $0_{e}.placeholderP($0)
at : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
at : S : lambda $0_{ev}.placeholderP($0)
at : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
at : (NP\NP) : lambda $0_{e}.$0
at : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
at : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
at : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
at : (St\NP) : lambda $0_{e}.placeholderP($0)
at : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
at : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
at : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
at : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
at : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
at : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
at : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
at : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sara : NP : placeholderC
Sara : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : N : lambda $0_{e}.placeholderP($0)
Sara : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sara : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sara : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sara : Swh : lambda $0_{e}.placeholderP($0)
Sara : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : S : lambda $0_{ev}.placeholderP($0)
Sara : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (NP\NP) : lambda $0_{e}.$0
Sara : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (St\NP) : lambda $0_{e}.placeholderP($0)
Sara : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sara : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sara : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sara : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sara : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sara : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sara : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.and(v|look(pro|you,$0),placeholderP(placeholderC,$0))
S:lambda $0_{ev}.and(v|look(pro|you,$0),placeholderP(placeholderC,$0))
lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(n:prop|Sara,$0))
CORRECTPlaceholder
lambda $0_{ev}.and(v|look(pro|you,$0),placeholderP(placeholderC,$0))
S:lambda $0_{ev}.and(v|look(pro|you,$0),placeholderP(placeholderC,$0))
top parse:
[('look', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.and(v|look(pro|you,$1),$0($1))'), ('at', 'NP', 'placeholderC'), ('Sara', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['you', 'want', 'some', 'more', 'eggnog', '?']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
want : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,$0($1),$3)
want : N : lambda $0_{e}.n|cookie($0)
want : ((S\NP)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and($0($1),n|shoe($1))
want : (((S\NP)/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,lambda $4_{e}.and($0($4),$1($4)),$3)
want : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
want : (((S\NP)/N)/((St/NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|want($2,$0($1),$3)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|want($1,$0,$2),$2)
want : ((S\NP)/(St/NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,$0,$2)
want : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|want($1,lambda $3_{e}.and($0($3),n|shoe($3)),$2)
want : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|do($0($1,$2),$2)
want : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|doll-DIM($1),$0($1))
want : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
some : (NP/N) : lambda $0_{<e,t>}.qn|some($1,$0($1))
some : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)
some : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)
some : S : lambda $0_{ev}.adv:int|just($0)
some : (((S\S)\(S\S))/S) : lambda $0_{<ev,t>}.lambda $1_{<<ev,t>,<ev,t>>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($1($2,$3),$0($3))
some : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : (NP\N) : lambda $0_{<e,t>}.qn|some($1,$0($1))
some : (((S\NP)\N)\((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : (((S\NP)\N)/((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\NP)\N)/((S/NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|have($0($1,$2,$3),$3)
some : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|have($0($1,$2),$2)
some : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|have&PERF($1,qn|some($3,$0($3)),$2)
some : (((S\S)\(S\S))\S) : lambda $0_{<ev,t>}.lambda $1_{<<ev,t>,<ev,t>>}.lambda $2_{<ev,t>}.lambda $3_{ev}.and($1($2,$3),$0($3))
some : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|have($0($1),$1)
more : (NP/N) : lambda $0_{<e,t>}.qn|more($1,$0($1))
more : ((Syn/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
more : (Syn/N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
more : NP : qn|more($0,n|juice($0))
more : (NP\N) : lambda $0_{<e,t>}.qn|more($1,$0($1))
eggnog : NP : placeholderC
eggnog : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : N : lambda $0_{e}.placeholderP($0)
eggnog : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
eggnog : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
eggnog : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
eggnog : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
eggnog : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
eggnog : Swh : lambda $0_{e}.placeholderP($0)
eggnog : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : S : lambda $0_{ev}.placeholderP($0)
eggnog : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
eggnog : (NP\NP) : lambda $0_{e}.$0
eggnog : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(part|say-PROG(qn|more($1,placeholderP($1)),qn|some($2,n|cookie($2)),$0),$0)
Syn:lambda $0_{ev}.Q(part|say-PROG(qn|more($1,placeholderP($1)),qn|some($2,n|cookie($2)),$0),$0)
lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|eggnog($1)),$0),$0)
top parse:
[('you', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)'), ('want', 'N', 'lambda $0_{e}.n|cookie($0)'), ('some', '(NP\\N)', 'lambda $0_{<e,t>}.qn|some($1,$0($1))'), ('more', '(NP/N)', 'lambda $0_{<e,t>}.qn|more($1,$0($1))'), ('eggnog', 'N', 'lambda $0_{e}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'a', 'finger']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
finger : N : lambda $0_{e}.n|finger($0)
finger : Swh : lambda $0_{e}.n|finger($0)
CORRECT
lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|finger($1)),$0)
S:lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|finger($1)),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('finger', 'N', 'lambda $0_{e}.n|finger($0)')]


['what', 'is', 'it']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
it : NP : pro|it
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.not($0($1,$2,$3),$3)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|do($0($1,$2,$3),$3)
it : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S(and($1($2),$0($2)),$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring($0,pro|it,$1)
it : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : St : adj|good(pro|it)
it : S : lambda $0_{ev}.v|belong-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
it : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|taste($0,$1,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($1,$0,$2)
it : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|take&PAST($0,$1,$2)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST($0,pro|it,$1)
it : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|take&PAST(pro|I,$0,$1)
it : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
it : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&1S($0($1,$2),$2)
it : S : lambda $0_{ev}.v|go-3S(pro|it,$0)
it : S : lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&1S(and($0($3),$1($2,$3)),$3)
it : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.aux|be&3S(and($0($3),$1($2,$3)),$3)
CORRECT
lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('it', 'NP', 'pro|it')]


['is', 'that', 'a', 'baby', 'noise', '?']
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
noise : NP : placeholderC
noise : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
noise : N : lambda $0_{e}.placeholderP($0)
noise : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
noise : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
noise : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
noise : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
noise : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
noise : Swh : lambda $0_{e}.placeholderP($0)
noise : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : S : lambda $0_{ev}.placeholderP($0)
noise : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : (NP\NP) : lambda $0_{e}.$0
noise : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(eq(det|a($1,n|baby($1)),pro:dem|that,$0),$0)
Syn:lambda $0_{ev}.Q(eq(det|a($1,n|baby($1)),pro:dem|that,$0),$0)
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,and(n|baby($1),n|noise($1))),$0),$0)
top parse:
[('is', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('that', 'NP', 'pro:dem|that'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)'), ('noise', '(NP\\NP)', 'lambda $0_{e}.$0'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'a', 'baby', 'noise']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
baby : N : lambda $0_{e}.n|baby($0)
baby : (S\NP) : lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
noise : NP : placeholderC
noise : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
noise : N : lambda $0_{e}.placeholderP($0)
noise : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
noise : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
noise : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
noise : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
noise : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
noise : Swh : lambda $0_{e}.placeholderP($0)
noise : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : S : lambda $0_{ev}.placeholderP($0)
noise : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : (NP\NP) : lambda $0_{e}.$0
noise : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
noise : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
WRONG
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|baby($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|baby($1)),$0),$0)
lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|baby($1),n|noise($1))),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('baby', 'N', 'lambda $0_{e}.n|baby($0)'), ('noise', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'a', 'thumb', '?']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (NP\N) : lambda $0_{<e,t>}.det|a($1,$0($1))
a : (St\NP) : lambda $0_{e}.adj|nice($0)
a : N : lambda $0_{e}.n|fly($0)
a : NP : det|a($0,n|cracker($0))
a : N : lambda $0_{e}.n|girl($0)
a : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and($0($1),n|girl($1)))
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|good($1),$0($1)))
a : NP : det|a($0,n|fox($0))
a : ((NP/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.det|a($2,and($0($2),$1($2)))
a : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : N : lambda $0_{e}.adj|nice($0)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (NP/N) : lambda $0_{<e,t>}.det|a($1,and(adj|nice($1),$0($1)))
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($0($4),$1($4))),$3)
a : (((S\NP)/N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,det|a($4,and($1($4),$0($4))),$3)
a : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|have($1,det|a($3,$0($3)),$2)
a : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|may($0($1,$2,$3),$3)
thumb : NP : placeholderC
thumb : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
thumb : N : lambda $0_{e}.placeholderP($0)
thumb : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
thumb : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
thumb : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
thumb : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
thumb : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
thumb : Swh : lambda $0_{e}.placeholderP($0)
thumb : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
thumb : S : lambda $0_{ev}.placeholderP($0)
thumb : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
thumb : (NP\NP) : lambda $0_{e}.$0
thumb : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
thumb : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
thumb : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,placeholderP($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,placeholderP($1)),$0),$0)
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|thumb($1)),$0),$0)
CORRECTPlaceholder
lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,placeholderP($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,placeholderP($1)),$0),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('a', '(NP/N)', 'lambda $0_{<e,t>}.det|a($1,$0($1))'), ('thumb', 'N', 'lambda $0_{e}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['that', "'s", 'right']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
right : (St\NP) : lambda $0_{e}.adj|right($0)
CORRECT
adj|right(pro:dem|that)
St:adj|right(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '(NP\\NP)', 'lambda $0_{e}.$0'), ('right', '(St\\NP)', 'lambda $0_{e}.adj|right($0)')]


['that', "'s", 'another', 'cup', '?']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
another : NP : placeholderC
another : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : N : lambda $0_{e}.placeholderP($0)
another : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
another : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
another : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
another : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
another : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
another : Swh : lambda $0_{e}.placeholderP($0)
another : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : S : lambda $0_{ev}.placeholderP($0)
another : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (NP\NP) : lambda $0_{e}.$0
another : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
another : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
cup : Swh : lambda $0_{e}.n|cup($0)
cup : N : lambda $0_{e}.n|cup($0)
cup : (((S\NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
cup : (((S/NP)\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.eq($2,$0($1),$3)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|cup($1)),$0),$0)
Syn:lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|cup($1)),$0),$0)
lambda $0_{ev}.Q(eq(pro:dem|that,qn|another($1,n|cup($1)),$0),$0)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('another', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('cup', 'N', 'lambda $0_{e}.n|cup($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['new', 'red', 'sock', 'slippers']
new : NP : placeholderC
new : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
new : N : lambda $0_{e}.placeholderP($0)
new : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
new : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
new : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
new : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
new : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
new : Swh : lambda $0_{e}.placeholderP($0)
new : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
new : S : lambda $0_{ev}.placeholderP($0)
new : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
new : (NP\NP) : lambda $0_{e}.$0
new : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
new : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
new : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
new : (St\NP) : lambda $0_{e}.placeholderP($0)
new : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
new : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
new : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
red : NP : placeholderC
red : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
red : N : lambda $0_{e}.placeholderP($0)
red : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
red : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
red : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
red : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
red : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
red : Swh : lambda $0_{e}.placeholderP($0)
red : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
red : S : lambda $0_{ev}.placeholderP($0)
red : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (NP\NP) : lambda $0_{e}.$0
red : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
red : (St\NP) : lambda $0_{e}.placeholderP($0)
red : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
red : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
red : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
sock : NP : placeholderC
sock : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sock : N : lambda $0_{e}.placeholderP($0)
sock : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
sock : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sock : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sock : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sock : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
sock : Swh : lambda $0_{e}.placeholderP($0)
sock : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sock : S : lambda $0_{ev}.placeholderP($0)
sock : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sock : (NP\NP) : lambda $0_{e}.$0
sock : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sock : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sock : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sock : (St\NP) : lambda $0_{e}.placeholderP($0)
sock : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sock : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sock : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
slippers : NP : placeholderC
slippers : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
slippers : N : lambda $0_{e}.placeholderP($0)
slippers : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
slippers : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
slippers : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slippers : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
slippers : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
slippers : Swh : lambda $0_{e}.placeholderP($0)
slippers : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : S : lambda $0_{ev}.placeholderP($0)
slippers : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (NP\NP) : lambda $0_{e}.$0
slippers : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (St\NP) : lambda $0_{e}.placeholderP($0)
slippers : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
slippers : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slippers : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{ev}.eq(placeholderC,det|the($1,placeholderP($1)),$0)
S:lambda $0_{ev}.eq(placeholderC,det|the($1,placeholderP($1)),$0)
lambda $0_{e}.and(adj|new($0),adj|red($0),n|sock($0),n|slipper-PL($0))
top parse:
[('new', 'NP', 'placeholderC'), ('red', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('sock', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('slippers', 'N', 'lambda $0_{e}.placeholderP($0)')]


['sign', 'slippers']
sign : NP : placeholderC
sign : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sign : N : lambda $0_{e}.placeholderP($0)
sign : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
sign : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sign : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sign : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
sign : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
sign : Swh : lambda $0_{e}.placeholderP($0)
sign : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sign : S : lambda $0_{ev}.placeholderP($0)
sign : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sign : (NP\NP) : lambda $0_{e}.$0
sign : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sign : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
sign : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sign : (St\NP) : lambda $0_{e}.placeholderP($0)
sign : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
sign : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sign : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
sign : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
sign : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
sign : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
sign : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
sign : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
sign : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
sign : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
sign : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
sign : (NP/NP) : lambda $0_{e}.$0
sign : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
sign : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
sign : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
sign : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
slippers : NP : placeholderC
slippers : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
slippers : N : lambda $0_{e}.placeholderP($0)
slippers : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
slippers : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
slippers : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slippers : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
slippers : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
slippers : Swh : lambda $0_{e}.placeholderP($0)
slippers : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : S : lambda $0_{ev}.placeholderP($0)
slippers : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (NP\NP) : lambda $0_{e}.$0
slippers : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (St\NP) : lambda $0_{e}.placeholderP($0)
slippers : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
slippers : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slippers : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
slippers : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
slippers : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
slippers : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
slippers : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
slippers : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
slippers : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
slippers : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
slippers : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
slippers : (NP/NP) : lambda $0_{e}.$0
slippers : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
slippers : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
slippers : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
slippers : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
WRONG
lambda $0_{ev}.placeholderP(placeholderC,$0)
S:lambda $0_{ev}.placeholderP(placeholderC,$0)
lambda $0_{e}.n|slipper-PL($0)
top parse:
[('sign', 'NP', 'placeholderC'), ('slippers', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)')]


['here', 'he', 'comes']
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
he : NP : pro|he
he : S : lambda $0_{ev}.v|fall&PAST(pro|he,$0)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,pro|you,$1,$2)
he : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|do&3S($0($1),$1),$1)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($0,$1,$2,$3)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($2,$1,$0,$3)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,$1,pro:poss:det|your($3,n|telephone($3)),$2)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST(pro|he,$1,$0,$2)
comes : NP : placeholderC
comes : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
comes : N : lambda $0_{e}.placeholderP($0)
comes : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
comes : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
comes : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
comes : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
comes : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
comes : Swh : lambda $0_{e}.placeholderP($0)
comes : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : S : lambda $0_{ev}.placeholderP($0)
comes : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (NP\NP) : lambda $0_{e}.$0
comes : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (St\NP) : lambda $0_{e}.placeholderP($0)
comes : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
comes : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
comes : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
comes : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
comes : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
comes : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
comes : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
comes : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.and(adv:loc|here($0),v|fall&PAST(pro|he,$0))
S:lambda $0_{ev}.and(adv:loc|here($0),v|fall&PAST(pro|he,$0))
lambda $0_{ev}.and(v|come-3S(pro|he,$0),adv:loc|here($0))
top parse:
[('here', 'S', 'lambda $0_{ev}.adv:loc|here($0)'), ('he', 'S', 'lambda $0_{ev}.v|fall&PAST(pro|he,$0)'), ('comes', '((S\\S)\\S)', 'lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))')]


['hear', 'him', '?']
hear : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
hear : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
hear : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)
hear : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
hear : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&PAST(v|hear($1,$0,$2),$2)
him : NP : placeholderC
him : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
him : N : lambda $0_{e}.placeholderP($0)
him : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
him : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
him : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
him : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
him : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
him : Swh : lambda $0_{e}.placeholderP($0)
him : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
him : S : lambda $0_{ev}.placeholderP($0)
him : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
him : (NP\NP) : lambda $0_{e}.$0
him : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
him : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
him : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
him : (St\NP) : lambda $0_{e}.placeholderP($0)
him : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
him : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
him : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
him : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
him : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
him : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
him : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
him : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.v|hear(n:prop|Fraser,placeholderC,$0)
S:lambda $0_{ev}.v|hear(n:prop|Fraser,placeholderC,$0)
lambda $0_{ev}.Q(v|hear(pro|you,pro|him,$0),$0)
top parse:
[('hear', '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|hear($1,$0,$2)'), ('him', 'NP', 'placeholderC'), ('?', 'NP', 'n:prop|Fraser')]


['here', 'he', 'comes']
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|bring(pro|you,$0,$1)
here : S : lambda $0_{ev}.adv:loc|here($0)
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:loc|here($1))
here : ((S\S)/PP) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will&COND($0($1,$2),$2)
here : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
here : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(v|put&ZERO(pro|you,$1,$2),$0($2))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|come($0,$1)
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|out($2))
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(aux|will&COND($0($1,$2),$2),adv:loc|here($2))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
here : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will&COND($0($1),$1),adv:loc|here($1))
here : (((S\NP)\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$1,$3),$0($3))
here : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($0($1,$2),adv:loc|here($2))
here : (((S\NP)/PP)\NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and(v|put&ZERO($2,$0,$3),$1($3))
here : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and(aux|will&COND($1($2,$3),$3),$0($3))
here : (S\NP) : lambda $0_{e}.lambda $1_{ev}.and(v|come($0,$1),adv:loc|here($1))
here : ((Syn\S)/(Syn\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
he : NP : pro|he
he : S : lambda $0_{ev}.v|fall&PAST(pro|he,$0)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,pro|you,$1,$2)
he : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|do&3S($0($1),$1),$1)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($0,$1,$2,$3)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($2,$1,$0,$3)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,$1,pro:poss:det|your($3,n|telephone($3)),$2)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST(pro|he,$1,$0,$2)
comes : NP : placeholderC
comes : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
comes : N : lambda $0_{e}.placeholderP($0)
comes : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
comes : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
comes : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
comes : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
comes : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
comes : Swh : lambda $0_{e}.placeholderP($0)
comes : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : S : lambda $0_{ev}.placeholderP($0)
comes : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (NP\NP) : lambda $0_{e}.$0
comes : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
comes : (St\NP) : lambda $0_{e}.placeholderP($0)
comes : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
comes : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
comes : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
comes : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
comes : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
comes : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
comes : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
comes : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.and(adv:loc|here($0),v|fall&PAST(pro|he,$0))
S:lambda $0_{ev}.and(adv:loc|here($0),v|fall&PAST(pro|he,$0))
lambda $0_{ev}.and(v|come-3S(pro|he,$0),adv:loc|here($0))
top parse:
[('here', 'S', 'lambda $0_{ev}.adv:loc|here($0)'), ('he', 'S', 'lambda $0_{ev}.v|fall&PAST(pro|he,$0)'), ('comes', '((S\\S)\\S)', 'lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))')]


['is', 'that', 'alright', '?']
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S($0($1),$1)
is : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($0,$1,$2)
is : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (Swh/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : ((S/S)/S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.aux|be&3S(and($0($2),$1($2)),$2)
is : (Swh\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
is : (((St/NP)/N)/(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&3S(and($0($1),v|read&ZERO(n:prop|Eve,$1)),$1)
is : (((St\NP)\N)/(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
is : ((St\NP)\NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
is : (((St/NP)/N)\(NP/N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{e}.eqLoc($0($1),$2)
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
alright : (St\NP) : lambda $0_{e}.adj|alright($0)
alright : St : adj|alright(pro|you)
alright : (St/NP) : lambda $0_{e}.adj|alright($0)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
NO PARSE
['can', 'you', 'see', 'her', 'now', '?']
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
now : NP : placeholderC
now : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : N : lambda $0_{e}.placeholderP($0)
now : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
now : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
now : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
now : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
now : Swh : lambda $0_{e}.placeholderP($0)
now : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
now : S : lambda $0_{ev}.placeholderP($0)
now : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
now : (NP\NP) : lambda $0_{e}.$0
now : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0),$0),$0)
lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|her,$0),$0),adv|now($0)),$0)
top parse:
[('can', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ('you', 'NP', 'pro|you'), ('see', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)'), ('her', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ('now', 'N', 'lambda $0_{e}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['we', 'move', 'the', 'chair', 'like', 'this']
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),prep|for(lambda $2_{e}.n|lunch($2),$1))
we : S : lambda $0_{ev}.part|go-PROG(pro|we,$0)
we : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/N)/S) : lambda $0_{<ev,t>}.lambda $1_{<e,t>}.lambda $2_{ev}.and($0($2),prep|for($1,$2))
we : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)
we : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(aux|will($0($1),$1),adv:loc|outside($1))
we : ((S\NP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
we : ((S/NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.and(part|go-PROG(pro|we,$2),$0($1,$2))
move : NP : placeholderC
move : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
move : N : lambda $0_{e}.placeholderP($0)
move : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
move : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
move : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
move : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
move : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
move : Swh : lambda $0_{e}.placeholderP($0)
move : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
move : S : lambda $0_{ev}.placeholderP($0)
move : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
move : (NP\NP) : lambda $0_{e}.$0
move : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
chair : N : lambda $0_{e}.n|chair($0)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : (St\NP) : lambda $0_{e}.n|tomato($0)
like : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,$0($1),$3)
like : N : lambda $0_{e}.n|tomato($0)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.aux|do(v|like($2,$0($1),$3),$3)
like : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((N/N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do(v|like($1,$0,$2),$2)
like : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|tomato($1),$0($1))
like : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|like(pro|you,$0,$1)
like : (((S\NP)/N)\((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.not(aux|do(v|like($2,$0($1),$3),$3),$3)
like : ((N\N)\N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|do&3S(v|like($1,$0,$2),$2)
like : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.not(aux|do(v|like($1,$0,$2),$2),$2)
like : (((N/N)/N)\((N/N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|like($1,lambda $3_{e}.and($0($3),n|soup($3)),$2)
like : (((N\N)/N)/((N\N)/N)) : lambda $0_{<<e,t>,<<e,t>,<e,t>>>}.$0
like : (((S\NP)\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.v|like($2,lambda $4_{e}.and($1($4),$0($4)),$3)
this : NP : pro:dem|this
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (((S\NP)/PP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : S : lambda $0_{ev}.v|put&ZERO(pro|you,pro:dem|this,$0)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO(pro|you,$0,$1)
this : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|put&ZERO($0,pro:dem|this,$1)
this : (((S/NP)/PP)\(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)/PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
this : (((S/NP)\PP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{e}.lambda $3_{ev}.and($0($2,$3),$1($3))
WRONG
lambda $0_{ev}.aux|will(placeholderP(v|like(det|the($1,n|chair($1)),pro:dem|this,$0),$0),$0)
S:lambda $0_{ev}.aux|will(placeholderP(v|like(det|the($1,n|chair($1)),pro:dem|this,$0),$0),$0)
lambda $0_{ev}.and(v|move(pro|we,det|the($1,n|chair($1)),$0),prep|like(pro:dem|this,$0))
top parse:
[('we', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|will($0($1),$1)'), ('move', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('chair', 'N', 'lambda $0_{e}.n|chair($0)'), ('like', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|like($1,$0,$2)'), ('this', 'NP', 'pro:dem|this')]


['can', 'you', 'see', 'her', 'now', '?']
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
now : NP : placeholderC
now : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : N : lambda $0_{e}.placeholderP($0)
now : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
now : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
now : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
now : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
now : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
now : Swh : lambda $0_{e}.placeholderP($0)
now : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
now : S : lambda $0_{ev}.placeholderP($0)
now : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
now : (NP\NP) : lambda $0_{e}.$0
now : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(adj|alright($0),$1)
? : (Syn\St) : lambda $0_{t}.lambda $1_{ev}.Q($0,$1)
? : ((Syn\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and($0($1),adv:loc|here($1)),$1)
? : ((Syn\St)\(Syn\St)) : lambda $0_{<t,<ev,t>>}.$0
? : NP : n:prop|Fraser
? : ((Syn\N)\(S\N)) : lambda $0_{<<e,t>,<ev,t>>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q(v|come($0,$1),$1)
? : ((Syn\N)\(NP\N)) : lambda $0_{<<e,t>,e>}.lambda $1_{<e,t>}.lambda $2_{ev}.Q($0($1),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&PRES($0($1),$1),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|be&3S($0($1),$1),$1)
? : St : adj|alright(pro|you)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(and(part|go-PROG(pro|you,$1),$0($1)),$1)
? : ((Syn\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.Q($0($1,$2),$2)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do&3S($0($1),$1),$1)
? : (Syn\N) : lambda $0_{<e,t>}.lambda $1_{ev}.Q(qn|more($2,$0($2)),$1)
? : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q(aux|do($0($1),$1),$1)
WRONG
lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0),$0),$0)
Syn:lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro:poss:det|her($1,placeholderP($1)),$0),$0),$0)
lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|her,$0),$0),adv|now($0)),$0)
top parse:
[('can', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ('you', 'NP', 'pro|you'), ('see', '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)'), ('her', '(NP/N)', 'lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))'), ('now', 'N', 'lambda $0_{e}.placeholderP($0)'), ('?', '(Syn\\S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)')]


['you', 'can', 'see', 'her']
you : NP : pro|you
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|may($0($1),$1)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|be&PRES($0($1),$1)
you : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|may($0($1,$2),$2)
you : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|will($0($1,$2),$2)
you : N : lambda $0_{e}.n|telephone($0)
you : ((S\S)\(S\S)) : lambda $0_{<<ev,t>,<ev,t>>}.$0
you : NP : n:prop|Fraser
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),adv:int|just($1))
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|play(pro|you,$1))
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
you : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|say(pro|you,$0,$1)
you : ((S/S)/(S/S)) : lambda $0_{<<ev,t>,<ev,t>>}.lambda $1_{<ev,t>}.lambda $2_{ev}.not($0($1,$2),$2)
you : St : adj|alright(pro|you)
you : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.part|say-PROG($1,$0,$2)
you : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|get($0,$1,$2)
you : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and($0($1),v|dance(pro|you,$1))
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($0,$1,$2)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)
can : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see($0,n:prop|Becky,$1)
can : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|have($0,pro:dem|that,$1)
can : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|can($0($1),$1),$1)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
can : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : NP : n:prop|Becky
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|you,$0,$1)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|we,$0,$1)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
see : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|see(pro|I,$0,$1)
see : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|will(v|see($1,$0,$2),$2)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|see($1,$0,$2)
see : (((S\NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.aux|will($0($1,$2,$3),$3)
see : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|can(v|see($1,$0,$2),$2)
her : (NP/N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
her : (S\NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (S/NP) : lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)
her : (NP\N) : lambda $0_{<e,t>}.pro:poss:det|her($1,$0($1))
WRONG
lambda $0_{ev}.not(aux|can(v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),n:prop|Becky,$0),$0),$0)
S:lambda $0_{ev}.not(aux|can(v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),n:prop|Becky,$0),$0),$0)
lambda $0_{ev}.aux|can(v|see(pro|you,pro|her,$0),$0)
top parse:
[('you', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.not($0($1),$1)'), ('can', '(S/S)', 'lambda $0_{<ev,t>}.lambda $1_{ev}.aux|can($0($1),$1)'), ('see', 'NP', 'n:prop|Becky'), ('her', '(S\\NP)', 'lambda $0_{e}.lambda $1_{ev}.v|give(pro|you,lambda $2_{e}.n|doll-DIM($2),$0,$1)')]


['Sara']
Sara : NP : placeholderC
Sara : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : N : lambda $0_{e}.placeholderP($0)
Sara : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sara : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sara : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
Sara : Swh : lambda $0_{e}.placeholderP($0)
Sara : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : S : lambda $0_{ev}.placeholderP($0)
Sara : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (NP\NP) : lambda $0_{e}.$0
Sara : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (St\NP) : lambda $0_{e}.placeholderP($0)
Sara : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
Sara : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
Sara : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sara : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
Sara : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
Sara : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
Sara : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sara : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(placeholderP($1),$0($1))
Sara : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
Sara : (((S\NP)\(S\NP))/NP) : lambda $0_{e}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($1($2,$3),placeholderP($0,$3))
Sara : (NP/NP) : lambda $0_{e}.$0
Sara : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
Sara : (((S\NP)\(S\NP))/S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sara : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Sara : (((S\NP)/N)/((St\NP)/N)) : lambda $0_{<<e,t>,<e,t>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($2,$0($1),$3)
Sara : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : ((St\NP)\(St\NP)) : lambda $0_{<e,t>}.$0
Sara : ((S\NP)/PP) : lambda $0_{<ev,t>}.lambda $1_{e}.lambda $2_{ev}.and(placeholderP($1,$2),$0($2))
Sara : (Swh/N) : lambda $0_{<e,t>}.$0
Sara : (Syn/Syn) : lambda $0_{<ev,t>}.$0
Sara : ((S\S)/NP) : lambda $0_{e}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
Sara : (St\St) : lambda $0_{t}.$0
Sara : (((S/NP)/(S/NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
Sara : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
Sara : ((S\S)/N) : lambda $0_{<e,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),placeholderP($0,$2))
Sara : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
Sara : (S/PP) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(placeholderP(placeholderC,$1),$0($1))
Sara : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
Sara : (Swh\N) : lambda $0_{<e,t>}.$0
Sara : (S\St) : lambda $0_{t}.lambda $1_{ev}.not($0,$1)
Sara : (((St\NP)/N)/(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
Sara : (((S\NP)\N)\((S\NP)\N)) : lambda $0_{<<e,t>,<e,<ev,t>>>}.lambda $1_{<e,t>}.lambda $2_{e}.lambda $3_{ev}.placeholderP($0($1,$2,$3),$3)
WRONG
lambda $0_{e}.placeholderP($0)
Swh:lambda $0_{e}.placeholderP($0)
n:prop|Sara
top parse:
[('Sara', 'Swh', 'lambda $0_{e}.placeholderP($0)')]


['that', "'s", 'wonderful']
that : NP : pro:dem|that
that : (NP/N) : lambda $0_{<e,t>}.det|that($1,$0($1))
that : (NP\N) : lambda $0_{<e,t>}.det|that($1,$0($1))
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
wonderful : NP : placeholderC
wonderful : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wonderful : N : lambda $0_{e}.placeholderP($0)
wonderful : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
wonderful : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
wonderful : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
wonderful : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
wonderful : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
wonderful : Swh : lambda $0_{e}.placeholderP($0)
wonderful : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wonderful : S : lambda $0_{ev}.placeholderP($0)
wonderful : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
wonderful : (NP\NP) : lambda $0_{e}.$0
wonderful : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wonderful : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
wonderful : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
wonderful : (St\NP) : lambda $0_{e}.placeholderP($0)
wonderful : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
wonderful : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
wonderful : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
wonderful : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.placeholderP($1,$0,$2)
wonderful : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.placeholderP($0,$1)
wonderful : (Swh/(St/NP)) : lambda $0_{<e,t>}.$0
wonderful : ((S\S)\S) : lambda $0_{<ev,t>}.lambda $1_{<ev,t>}.lambda $2_{ev}.and($1($2),$0($2))
wonderful : (((S\NP)\(S\NP))\S) : lambda $0_{<ev,t>}.lambda $1_{<e,<ev,t>>}.lambda $2_{e}.lambda $3_{ev}.and($0($3),$1($2,$3))
WRONG
lambda $0_{ev}.eq(pro:dem|that,placeholderC,$0)
S:lambda $0_{ev}.eq(pro:dem|that,placeholderC,$0)
adj|wonderful(pro:dem|that)
top parse:
[('that', 'NP', 'pro:dem|that'), ("'s", '((S\\NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('wonderful', 'NP', 'placeholderC')]


['what', "'s", 'he', 'cutting']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
he : NP : pro|he
he : S : lambda $0_{ev}.v|fall&PAST(pro|he,$0)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,pro|you,$1,$2)
he : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.not(aux|do&3S($0($1),$1),$1)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($0,$1,$2,$3)
he : (((S/NP)/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{e}.lambda $3_{ev}.v|give&PAST($2,$1,$0,$3)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST($0,$1,pro:poss:det|your($3,n|telephone($3)),$2)
he : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|give&PAST(pro|he,$1,$0,$2)
cutting : NP : placeholderC
cutting : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
cutting : N : lambda $0_{e}.placeholderP($0)
cutting : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
cutting : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
cutting : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
cutting : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
cutting : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
cutting : Swh : lambda $0_{e}.placeholderP($0)
cutting : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
cutting : S : lambda $0_{ev}.placeholderP($0)
cutting : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
cutting : (NP\NP) : lambda $0_{e}.$0
cutting : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
cutting : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
cutting : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
cutting : (St\NP) : lambda $0_{e}.placeholderP($0)
cutting : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
cutting : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
cutting : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,pro|he,$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,pro|he,$1)
lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|cut-PROG(pro|he,$0,$1),$1)
top parse:
[('what', '((S/NP)/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('he', 'NP', 'pro|he'), ('cutting', '(Swh\\(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0')]


['what', "'s", 'the', 'matter']
what : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)/((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)\NP)\((S/NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (Swh\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)/((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S\NP)\NP)\((S\NP)\NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : ((S\NP)/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
what : (((S/NP)/NP)/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh/((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (Swh\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : (((S/NP)/NP)\((S/NP)/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
what : ((Swh/NP)/(Swh/NP)) : lambda $0_{<e,<e,<ev,t>>>}.$0
's : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (NP\NP) : lambda $0_{e}.$0
's : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : ((St/NP)/NP) : lambda $0_{e}.lambda $1_{e}.eqLoc($0,$1)
's : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.and(part|go-PROG(n:prop|Mommy,$1),$0($1))
's : (N/N) : lambda $0_{<e,t>}.lambda $1_{e}.and(n|horse-DIM($1),$0($1))
's : (((St\NP)/N)\(St\NP)) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($0($2),$1($2))
's : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (St\NP) : lambda $0_{e}.adj|busy($0)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|cry-PROG($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|come-PROG($0,$1)
's : ((S\NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|go&PERF($0,$1)
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|play-PROG($0,$1),$1)
's : (NP/NP) : lambda $0_{e}.$0
's : (S\NP) : lambda $0_{e}.lambda $1_{ev}.part|play-PROG($0,$1)
's : (St\NP) : lambda $0_{e}.adj|right($0)
's : (St\NP) : lambda $0_{e}.adj|good($0)
's : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S($0($1,$2),$2)
's : ((N\N)/N) : lambda $0_{<e,t>}.lambda $1_{<e,t>}.lambda $2_{e}.and($1($2),$0($2))
the : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : (NP\N) : lambda $0_{<e,t>}.det|the($1,$0($1))
the : NP : det|the($0,n|+on|choo+on|choo($0))
the : (PP/NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : NP : det|the($0,n|napkin($0))
the : ((S\NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : NP : det|the($0,n|floor($0))
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|about(det|the($2,$0($2)),$1)
the : (PP/N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S\NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
the : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : NP : det|the($0,n|kitchen($0))
the : (PP\NP) : lambda $0_{e}.lambda $1_{ev}.prep|about($0,$1)
the : NP : det|the($0,n|water($0))
the : NP : det|the($0,n|doll-DIM($0))
the : ((S/NP)\NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|drink($1,$0,$2)
the : (PP\N) : lambda $0_{<e,t>}.lambda $1_{ev}.prep|on(det|the($2,$0($2)),$1)
the : ((S/NP)/N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.part|do-PROG(det|the($3,$0($3)),$1,$2)
the : ((S/NP)\N) : lambda $0_{<e,t>}.lambda $1_{e}.lambda $2_{ev}.v|get($1,det|the($3,$0($3)),$2)
matter : NP : placeholderC
matter : ((S\NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
matter : N : lambda $0_{e}.placeholderP($0)
matter : (NP/N) : lambda $0_{<e,t>}.det|the($1,$0($1))
matter : (S/S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
matter : (S\NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
matter : ((S/NP)/NP) : lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
matter : (Syn\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.Q($0($1),$1)
matter : Swh : lambda $0_{e}.placeholderP($0)
matter : (Swh/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : S : lambda $0_{ev}.placeholderP($0)
matter : ((S\NP)\(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (NP\NP) : lambda $0_{e}.$0
matter : ((S/NP)/(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (Swh\(S/NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (Swh/(S\NP)) : lambda $0_{<e,<ev,t>>}.$0
matter : (St\NP) : lambda $0_{e}.placeholderP($0)
matter : (S\S) : lambda $0_{<ev,t>}.lambda $1_{ev}.placeholderP($0($1),$1)
matter : (S/NP) : lambda $0_{e}.lambda $1_{ev}.placeholderP($0,$1)
matter : (Syn\NP) : lambda $0_{e}.lambda $1_{ev}.Q($0,$1)
WRONG
lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|matter($2)),$1)
CORRECTPlaceholder
lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
Swh:lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,placeholderP($2)),$1)
top parse:
[('what', '(Swh/(S/NP))', 'lambda $0_{<e,<ev,t>>}.$0'), ("'s", '((S/NP)/NP)', 'lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)'), ('the', '(NP/N)', 'lambda $0_{<e,t>}.det|the($1,$0($1))'), ('matter', 'N', 'lambda $0_{e}.placeholderP($0)')]



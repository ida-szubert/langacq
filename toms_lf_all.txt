Sent: more juice ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|juice($1)),$0)
example_end

Sent: where 's your cup ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|cup($1)),$0)
example_end

Sent: I took it .
Sem:  lambda $0_{ev}.v|take&PAST(pro|I,pro|it,$0)
example_end

Sent: I 'm not sure .
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
example_end

Sent: are you saying Fraser ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,n:prop|Fraser,$0),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a fly .
Sem:  det|a($0,n|fly($0))
example_end

Sent: you get a fly .
Sem:  lambda $0_{ev}.v|get(pro|you,det|a($1,n|fly($1)),$0)
example_end

Sent: you get one .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
example_end

Sent: go and get your telephone .
Sem:  pro:poss:det|your($0,n|telephone($0))
example_end

Sent: he gave you your telephone .
Sem:  lambda $0_{ev}.v|give&PAST(pro|he,pro|you,pro:poss:det|your($1,n|telephone($1)),$0)
example_end

Sent: who are you calling ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|call-PROG(pro|you,$0,$1),$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: what 's the man doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|man($2)),$0,$1),$1)
example_end

Sent: you want a cookie ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
example_end

Sent: can you do it ?
Sem:  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro|it,$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's a baby .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|baby($1)),$0)
example_end

Sent: Mommy can 't read .
Sem:  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
example_end

Sent: I 'm busy .
Sem:  adj|busy(pro|I)
example_end

Sent: you read the book .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
example_end

Sent: that 's the stool .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
example_end

Sent: did you eat it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you ate it .
Sem:  lambda $0_{ev}.v|eat&PAST(pro|you,pro|it,$0)
example_end

Sent: milk ?
Sem:  lambda $0_{e}.n|milk($0)
example_end

Sent: you don 't want milk .
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
example_end

Sent: you 've just had some juice .
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,qn|some($1,n|juice($1)),$0),$0),adv:int|just($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: drink the water .
Sem:  lambda $0_{ev}.v|drink(pro|you,det|the($1,n|water($1)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: coffee .
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: he 's drinking his coffee .
Sem:  lambda $0_{ev}.aux|be&3S(part|drink-PROG(pro|he,pro:poss:det|his($1,n|coffee($1)),$0),$0)
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: later we 'll have a cookie .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
example_end

Sent: we 'll have a cookie later .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,det|a($1,n|cookie($1)),$0),$0),adv|later($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: your hat ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|hat($1)),$0)
example_end

Sent: and what did you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: give dolly her bottle .
Sem:  lambda $0_{ev}.v|give(pro|you,lambda $1_{e}.n|doll-DIM($1),pro:poss:det|her($2,n|bottle($2)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: bottle ?
Sem:  lambda $0_{e}.n|bottle($0)
example_end

Sent: the hat ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|hat($1)),$0)
example_end

Sent: he doesn 't have a hat .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: soldiers .
Sem:  lambda $0_{e}.n|soldier-PL($0)
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's Jack and Jill .
Sem:  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Jack,n:prop|Jill),$0)
example_end

Sent: he doesn 't have a hat .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|hat($1)),$0),$0),$0)
example_end

Sent: Eve has a hat .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|hat($1)),$0)
example_end

Sent: you 're gonna find it .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|find(pro|you,pro|it,$0)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: man ?
Sem:  lambda $0_{e}.n|man($0)
example_end

Sent: who is that man ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: you 're Eve .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Eve,$0)
example_end

Sent: down .
Sem:  lambda $0_{ev}.adv:loc|down($0)
example_end

Sent: you write a letter .
Sem:  lambda $0_{ev}.v|write(pro|you,det|a($1,n|letter($1)),$0)
example_end

Sent: the pencil ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|pencil($1)),$0)
example_end

Sent: that 's your pencil .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: the man ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|man($1)),$0)
example_end

Sent: what are you doing in the corner ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|in(det|the($2,n|corner($2)),$1))
example_end

Sent: you 're going to read .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: shoe .
Sem:  lambda $0_{e}.n|shoe($0)
example_end

Sent: that 's Racketyboom .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
example_end

Sent: that 's Racketyboom .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
example_end

Sent: Eve read book .
Sem:  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,lambda $1_{e}.n|book($1),$0)
example_end

Sent: you read the book .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
example_end

Sent: Mommy can 't read .
Sem:  lambda $0_{ev}.not(aux|can(v|read&ZERO(n:prop|Mommy,$0),$0),$0)
example_end

Sent: Mommy 's busy .
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: Eve read .
Sem:  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
example_end

Sent: you read about the choochoo .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|about(det|the($1,n|+on|choo+on|choo($1)),$0))
example_end

Sent: Mommy 'll read later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),adv|later($0))
example_end

Sent: I 'll read to you later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),adv|later($0))
example_end

Sent: come ?
Sem:  lambda $0_{ev}.Q(v|come(pro|you,$0),$0)
example_end

Sent: you want some milk ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|milk($1)),$0),$0)
example_end

Sent: we 'll have milk for lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: cup ?
Sem:  lambda $0_{e}.n|cup($0)
example_end

Sent: that 's not a cup .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|cup($1)),$0),$0)
example_end

Sent: that 's the top .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: the ducks say what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|say(det|the($2,n|duck-PL($2)),$0,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: radio .
Sem:  lambda $0_{e}.n|radio($0)
example_end

Sent: what 'll you do with it ?tot
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: hat ?
Sem:  lambda $0_{e}.n|hat($0)
example_end

Sent: where is your hat ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|hat($1)),$0)
example_end

Sent: I don 't have it .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: book .
Sem:  lambda $0_{e}.n|book($0)
example_end

Sent: is that Racketyboom ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Racketyboom,$0),$0)
example_end

Sent: stool .
Sem:  lambda $0_{e}.n|stool($0)
example_end

Sent: you going to sit on that stool ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|on(det|that($1,n|stool($1)),$0)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: who 's sitting ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|sit-PROG($0,$1),$1)
example_end

Sent: Neil ?
Sem:  lambda $0_{ev}.Q(n:prop|Neil,$0)
example_end

Sent: Eve 's sitting on the stool .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
example_end

Sent: Neil ?
Sem:  lambda $0_{ev}.Q(n:prop|Neil,$0)
example_end

Sent: get what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
example_end

Sent: get what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
example_end

Sent: that .
Sem:  pro:dem|that
example_end

Sent: Neil sit .
Sem:  lambda $0_{ev}.v|sit(n:prop|Neil,$0)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: that was a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's a seat .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|seat($1)),$0)
example_end

Sent: are you alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Sambo .
Sem:  n:prop|Sambo
example_end

Sent: you read Sambo .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Sambo,$0)
example_end

Sent: because I 'm busy .
Sem:  adj|busy(pro|I)
example_end

Sent: I 'm making lunch .
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: you hit your head .
Sem:  lambda $0_{ev}.v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: paper .
Sem:  lambda $0_{e}.n|paper($0)
example_end

Sent: that 's my paper .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
example_end

Sent: your diaper ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|diaper($1)),$0)
example_end

Sent: I 'm going upstairs .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: you read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: can you get your chair ?
Sem:  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro:poss:det|your($1,n|chair($1)),$0),$0),$0)
example_end

Sent: give me the cheese .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|cheese($1)),$0)
example_end

Sent: that .
Sem:  pro:dem|that
example_end

Sent: do you like it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: it 's good .
Sem:  adj|good(pro|it)
example_end

Sent: that 's a taperecorder .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|tape+n|recorder($1)),$0)
example_end

Sent: taperecorder .
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: soup  soup .
Sem:  lambda $0_{e}.n|soup($0)
example_end

Sent: you have soup .
Sem:  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.n|soup($1),$0)
example_end

Sent: more pudding ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|pudding($1)),$0)
example_end

Sent: more pudding .
Sem:  qn|more($0,n|pudding($0))
example_end

Sent: more pudding .
Sem:  qn|more($0,n|pudding($0))
example_end

Sent: give the man a cracker ?
Sem:  lambda $0_{ev}.Q(v|give(pro|you,det|the($1,n|man($1)),det|a($2,n|cracker($2)),$0),$0)
example_end

Sent: taperecorder ?
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: taperecorder ?
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: taperecorder .
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: down ?
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
example_end

Sent: you don 't want apple .
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|you,lambda $1_{e}.n|apple($1),$0),$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: is it going ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|go-PROG(pro|it,$0),$0),$0)
example_end

Sent: does it go far ?
Sem:  lambda $0_{ev}.Q(and(aux|do&3S(v|go(pro|it,$0),$0),adv|far($0)),$0)
example_end

Sent: celery .
Sem:  lambda $0_{e}.n|celery($0)
example_end

Sent: the dolly eats his celery .
Sem:  lambda $0_{ev}.v|eat-3S(det|the($1,n|doll-DIM($1)),pro:poss:det|his($2,n|celery($2)),$0)
example_end

Sent: does she like it ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|like(pro|she,pro|it,$0),$0),$0)
example_end

Sent: does the dolly have a name ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|have(det|the($1,n|doll-DIM($1)),det|a($2,n|name($2)),$0),$0),$0)
example_end

Sent: what 's her name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|her($2,n|name($2)),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: more celery ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|celery($1)),$0)
example_end

Sent: man have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(lambda $2_{e}.n|man($2),$0,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: find what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|find(pro|you,$0,$1)
example_end

Sent: do you want this ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
example_end

Sent: do you want dolly 's shoe ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.and(n|doll-DIM($1),n|shoe($1)),$0),$0),$0)
example_end

Sent: we 'll find it .
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|it,$0),$0)
example_end

Sent: you put that shoe on dolly .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|that($1,n|shoe($1)),$0),prep|on(lambda $2_{e}.n|doll-DIM($2),$0))
example_end

Sent: you are good .
Sem:  adj|good(pro|you)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: spool .
Sem:  lambda $0_{e}.n|spool($0)
example_end

Sent: where 's the top ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: not your spoon .
Sem:  lambda $0_{ev}.not(pro:poss:det|your($1,n|spoon($1)),$0)
example_end

Sent: it belongs to the man .
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(det|the($1,n|man($1)),$0))
example_end

Sent: get the napkin .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|napkin($1)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: you bring it to the kitchen .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),prep|to(det|the($1,n|kitchen($1)),$0))
example_end

Sent: mouth .
Sem:  lambda $0_{e}.n|mouth($0)
example_end

Sent: man taste it ?
Sem:  lambda $0_{ev}.Q(v|taste(lambda $1_{e}.n|man($1),pro|it,$0),$0)
example_end

Sent: I 'm not sure .
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
example_end

Sent: I 'm not sure .
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
example_end

Sent: change your record would you ?
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro:poss:det|your($1,n|record($1)),$0),$0)
example_end

Sent: that 's the fireplace .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|fireplace($1)),$0)
example_end

Sent: you 're gonna call Granma .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|call(pro|you,n:prop|Granma,$0)),$0)
example_end

Sent: you called Granma .
Sem:  lambda $0_{ev}.v|call-PAST(pro|you,n:prop|Granma,$0)
example_end

Sent: you look in the kitchen .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|in(det|the($1,n|kitchen($1)),$0))
example_end

Sent: would you bring them here ?
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|bring(pro|you,pro|them,$0),$0),adv:loc|here($0)),$0)
example_end

Sent: do you want a pencil too ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|a($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: that 's Cromer .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Cromer,$0)
example_end

Sent: the coffee 's coming .
Sem:  lambda $0_{ev}.aux|be&3S(part|come-PROG(det|the($1,n|coffee($1)),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's a nice pencil .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|pencil($1))),$0)
example_end

Sent: it 's Becky .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Becky,$0)
example_end

Sent: what are you writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|write-PROG(pro|you,$0,$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: did you hit your head ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|hit&ZERO(pro|you,pro:poss:det|your($1,n|head($1)),$0),$0),$0)
example_end

Sent: you fall ?
Sem:  lambda $0_{ev}.Q(v|fall(pro|you,$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: would that be better ?
Sem:  lambda $0_{ev}.Q(adj|good&CP(pro:dem|that),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: where 's the pencil ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|pencil($1)),$0)
example_end

Sent: where is the pencil ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|pencil($1)),$0)
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: you having juice ?
Sem:  lambda $0_{ev}.Q(part|have-PROG(pro|you,lambda $1_{e}.n|juice($1),$0),$0)
example_end

Sent: you want more juice ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|juice($1)),$0),$0)
example_end

Sent: you have a cough .
Sem:  lambda $0_{ev}.v|have(pro|you,det|a($1,n|cough($1)),$0)
example_end

Sent: you have a cough ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,det|a($1,n|cough($1)),$0),$0)
example_end

Sent: can you do that ?
Sem:  lambda $0_{ev}.Q(aux|can(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: it was a man .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|man($1)),$0)
example_end

Sent: banjo
Sem:  lambda $0_{e}.n|banjo($0)
example_end

Sent: put this here on the floor .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: coffee  you 're not having coffee .
Sem:  lambda $0_{ev}.not(aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: you 're having juice .
Sem:  lambda $0_{ev}.aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.n|juice($1),$0),$0)
example_end

Sent: come out here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|out($0))
example_end

Sent: finger ?
Sem:  lambda $0_{e}.n|finger($0)
example_end

Sent: you read the book .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
example_end

Sent: Mama 's busy .
Sem:  adj|busy(n:prop|Mama)
example_end

Sent: look here .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
example_end

Sent: you can 't have that .
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: it 's not yours .
Sem:  lambda $0_{ev}.not(eq(pro|it,pro:poss|yours,$0),$0)
example_end

Sent: gonna sit down ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),adv:loc|down($0)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: you may not have that .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: I 'll turn it .
Sem:  lambda $0_{ev}.aux|will(v|turn(pro|I,pro|it,$0),$0)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Becky .
Sem:  n:prop|Becky
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: bring it .
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|it,$0)
example_end

Sent: she 's playing hard .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|she,$0),$0),adv|hard($0))
example_end

Sent: pardon me .
Sem:  pro|me
example_end

Sent: you can see Becky later .
Sem:  lambda $0_{ev}.and(aux|can(v|see(pro|you,n:prop|Becky,$0),$0),adv|later($0))
example_end

Sent: you want me to sit down ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),adv:loc|down($0)),$0)
example_end

Sent: what are we going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
example_end

Sent: is Eve going to read ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you want a letter over here ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,det|a($1,n|letter($1)),$0),adv:loc|here($0)),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: Kathy doesn 't want a letter .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Kathy,det|a($1,n|letter($1)),$0),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: keep your finger out .
Sem:  lambda $0_{ev}.and(v|keep(pro|you,pro:poss:det|your($1,n|finger($1)),$0),adv:loc|out($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: sugar .
Sem:  lambda $0_{e}.n|sugar($0)
example_end

Sent: it goes in the coffee .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),prep|in(det|the($1,n|coffee($1)),$0))
example_end

Sent: coffee .
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: that 's the king .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|king($1)),$0)
example_end

Sent: this is the king .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|king($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: bear .
Sem:  lambda $0_{e}.n|bear($0)
example_end

Sent: that 's the cat .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|cat($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a fox .
Sem:  det|a($0,n|fox($0))
example_end

Sent: it 's not a fox .
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,n|fox($1)),$0),$0)
example_end

Sent: that 's not a fox .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|fox($1)),$0),$0)
example_end

Sent: that 's a dog .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|dog($1)),$0)
example_end

Sent: that 's HumptyDumpty .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Humpty_Dumpty,$0)
example_end

Sent: that 's Jack .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Jack,$0)
example_end

Sent: that 's your letter .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|letter($1)),$0)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's HumptyDumpty .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Humpty_Dumpty,$0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: Dumpty ?
Sem:  lambda $0_{ev}.Q(n:prop|Dumpty,$0)
example_end

Sent: HumptyDumpty .
Sem:  n:prop|Humpty_Dumpty
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's the king .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|king($1)),$0)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: that 's not the fox .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|fox($1)),$0),$0)
example_end

Sent: that 's HumptyDumpty .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Humpty_Dumpty,$0)
example_end

Sent: HumptyDumpty .
Sem:  n:prop|Humpty_Dumpty
example_end

Sent: HumptyDumpty .
Sem:  n:prop|Humpty_Dumpty
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: the kitty .
Sem:  det|the($0,n|kitty($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's his dog .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|dog($1)),$0)
example_end

Sent: that 's not a fox .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|fox($1)),$0),$0)
example_end

Sent: that 's his dog .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|dog($1)),$0)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Dumpty .
Sem:  n:prop|Dumpty
example_end

Sent: HumptyDumpty .
Sem:  n:prop|Humpty_Dumpty
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: HumptyDumpty .
Sem:  n:prop|Humpty_Dumpty
example_end

Sent: he fell off the well .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro|he,$0),prep|off(det|the($1,n|well($1)),$0))
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: what 's what ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
example_end

Sent: horsie 's head .
Sem:  lambda $0_{e}.and(n|horse-DIM($0),n|head($0))
example_end

Sent: you 'll hurt horsie 's head .
Sem:  lambda $0_{ev}.aux|will(v|hurt&ZERO(pro|you,lambda $1_{e}.and(n|horse-DIM($1),n|head($1)),$0),$0)
example_end

Sent: that 's HumptyDumpty .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Humpty_Dumpty,$0)
example_end

Sent: that 's Jill .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Jill,$0)
example_end

Sent: fish .
Sem:  lambda $0_{e}.n|fish($0)
example_end

Sent: what 're the fish doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|fish($2)),$0,$1),$1)
example_end

Sent: they 're swimming ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|swim-PROG(pro|they,$0),$0),$0)
example_end

Sent: briefcase .
Sem:  lambda $0_{e}.n|briefcase($0)
example_end

Sent: you gonna play ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),v|play(pro|you,$0)),$0)
example_end

Sent: you gonna dance too ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),v|dance(pro|you,$0)),$0)
example_end

Sent: bird .
Sem:  lambda $0_{e}.n|bird($0)
example_end

Sent: did you hear the bird ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|hear(pro|you,det|the($1,n|bird($1)),$0),$0),$0)
example_end

Sent: light ?
Sem:  lambda $0_{e}.n|light($0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing out there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),adv:loc|out($1))
example_end

Sent: you 're doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: and watch the fish .
Sem:  lambda $0_{ev}.v|watch(pro|you,det|the($1,n|fish($1)),$0)
example_end

Sent: we 'll see Becky later .
Sem:  lambda $0_{ev}.and(aux|will(v|see(pro|we,n:prop|Becky,$0),$0),adv|later($0))
example_end

Sent: where is your horse ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|horse($1)),$0)
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: the horsie ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|horse-DIM($1)),$0)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: wait x  .
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
example_end

Sent: because I just put them on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|I,pro|them,$0),adv|on($0))
example_end

Sent: you may not have it .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: off ?
Sem:  lambda $0_{ev}.Q(adv|off($0),$0)
example_end

Sent: where 's the top ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|top($1)),$0)
example_end

Sent: which one ?
Sem:  lambda $0_{ev}.Q(pro:indef|one,$0)
example_end

Sent: find it ?
Sem:  lambda $0_{ev}.Q(v|find(pro|you,pro|it,$0),$0)
example_end

Sent: you find it .
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
example_end

Sent: look on the floor .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: you find it .
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
example_end

Sent: you find it .
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
example_end

Sent: did you find it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|find(pro|you,pro|it,$0),$0),$0)
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: where 's the rest ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|rest($1)),$0)
example_end

Sent: she 's crying .
Sem:  lambda $0_{ev}.aux|be&3S(part|cry-PROG(pro|she,$0),$0)
example_end

Sent: the table .
Sem:  det|the($0,n|table($0))
example_end

Sent: you get it .
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
example_end

Sent: that 's Kathy .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Kathy,$0)
example_end

Sent: we 'll play outside later .
Sem:  lambda $0_{ev}.and(aux|will(v|play(pro|we,$0),$0),adv|later($0))
example_end

Sent: later we 'll go outside .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),adv:loc|outside($0))
example_end

Sent: later we 'll go outside .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),adv:loc|outside($0))
example_end

Sent: outside .
Sem:  lambda $0_{ev}.adv:loc|outside($0)
example_end

Sent: we 'll go outside later .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),adv|later($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: that 's Kathy .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Kathy,$0)
example_end

Sent: Kathy was crying .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|cry-PROG(n:prop|Kathy,$0),$0)
example_end

Sent: Kathy was unhappy .
Sem:  n:prop|Kathy
example_end

Sent: Kathy can 't fix it .
Sem:  lambda $0_{ev}.not(aux|can(v|fix(n:prop|Kathy,pro|it,$0),$0),$0)
example_end

Sent: you fix it .
Sem:  lambda $0_{ev}.v|fix(pro|you,pro|it,$0)
example_end

Sent: we 'll play with Sandy later .
Sem:  lambda $0_{ev}.and(aux|will(v|play(pro|we,$0),$0),adv|later($0))
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: you want your bibbie ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,pro:poss:det|your($1,n|bib-DIM($1)),$0),$0)
example_end

Sent: tapioca ?
Sem:  lambda $0_{e}.n|tapioca($0)
example_end

Sent: tapioca ?
Sem:  lambda $0_{e}.n|tapioca($0)
example_end

Sent: would you like a cracker ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|cracker($1)),$0),$0),$0)
example_end

Sent: I forgot your spoon .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|I,pro:poss:det|your($1,n|spoon($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: who is that man ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: he 's sick .
Sem:  adj|sick(pro|he)
example_end

Sent: and he had his breakfast in bed .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|he,pro:poss:det|his($1,n|breakfast($1)),$0),prep|in(lambda $2_{e}.n|bed($2),$0))
example_end

Sent: you may not have it .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Papa had it .
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Papa,pro|it,$0)
example_end

Sent: it 's a cracker .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|cracker($1)),$0)
example_end

Sent: would you like more tapioca ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|more($1,n|tapioca($1)),$0),$0),$0)
example_end

Sent: that 's your spoon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|spoon($1)),$0)
example_end

Sent: but you don 't like tomato soup .
Sem:  lambda $0_{ev}.not(aux|do(v|like(pro|you,lambda $1_{e}.and(n|tomato($1),n|soup($1)),$0),$0),$0)
example_end

Sent: tomato .
Sem:  lambda $0_{e}.n|tomato($0)
example_end

Sent: you don 't like it .
Sem:  lambda $0_{ev}.not(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Mommy 's gonna have it .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,pro|it,$0)),$0)
example_end

Sent: it 's gone .
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(pro|it,$0),$0)
example_end

Sent: I 'm going to cook it .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: cook .
Sem:  lambda $0_{e}.n|cook($0)
example_end

Sent: a wiener
Sem:  det|a($0,n|wiener($0))
example_end

Sent: you dropped the cheese .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|cheese($1)),$0)
example_end

Sent: you don 't want this .
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
example_end

Sent: that 's the taperecorder .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|+n|tape+n|recorder($1)),$0)
example_end

Sent: you have tapioca on your finger .
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|tapioca($1),$0),prep|on(pro:poss:det|your($2,n|finger($2)),$0))
example_end

Sent: you may have a cracker .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,det|a($1,n|cracker($1)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: briefcase .
Sem:  lambda $0_{e}.n|briefcase($0)
example_end

Sent: briefcase .
Sem:  lambda $0_{e}.n|briefcase($0)
example_end

Sent: that 's a skunk .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|skunk($1)),$0)
example_end

Sent: skunk .
Sem:  lambda $0_{e}.n|skunk($0)
example_end

Sent: you have pencils ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,lambda $1_{e}.n|pencil-PL($1),$0),$0)
example_end

Sent: what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: you play with the can down there .
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),adv:loc|down($0))
example_end

Sent: that 's a can .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|can($1)),$0)
example_end

Sent: it doesn 't come off .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(pro|it,$0),$0),adv|off($0)),$0)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: and what do you think of that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|think(pro|you,$0,$1),$1),prep|of(pro:dem|that,$1))
example_end

Sent: did you read ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,$0),$0),$0)
example_end

Sent: you 've already had it .
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,pro|it,$0),$0),adv|already($0))
example_end

Sent: would you like a grahamcracker ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
example_end

Sent: put your highchair back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),adv:loc|back($0))
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: is your grape juice allgone ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: who is that man ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
example_end

Sent: you  you tell me about it ?
Sem:  lambda $0_{ev}.Q(and(v|tell(pro|you,pro|me,$0),prep|about(pro|it,$0)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: now you tell me about your book .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:poss:det|your($1,n|book($1)),$0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: are you okkay ?
Sem:  lambda $0_{ev}.Q(adj|okkay(pro|you),$0)
example_end

Sent: you tell me .
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you 're doing fine .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|fine($0))
example_end

Sent: what does that mean ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|mean(pro:dem|that,$0,$1),$1)
example_end

Sent: you shut the door .
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
example_end

Sent: move your hand .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|hand($1)),$0)
example_end

Sent: cereal ?
Sem:  lambda $0_{e}.n|cereal($0)
example_end

Sent: what 's it doing under there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|it,$0,$1),$1),adv:loc|under($1))
example_end

Sent: Mommy 'll get it .
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Mommy,pro|it,$0),$0)
example_end

Sent: that 's your grape juice .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|grape($1),n|juice($1))),$0)
example_end

Sent: would you bring me your cup ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0),$0),$0)
example_end

Sent: would you bring Mama your cup .
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,n:prop|Mama,pro:poss:det|your($1,n|cup($1)),$0),$0)
example_end

Sent: that 's a nice dog .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dog($1))),$0)
example_end

Sent: that 's a pretty hat .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|pretty($1),n|hat($1))),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: after you read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: you put them in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
example_end

Sent: they go down here .
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),adv:loc|down($0))
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: and bring the cup too .
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
example_end

Sent: bring both cans .
Sem:  lambda $0_{ev}.v|bring(pro|you,qn|both($1,n|can-PL($1)),$0)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: shut the door .
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
example_end

Sent: one is the dog 's house .
Sem:  lambda $0_{ev}.eq(pro:indef|one,det|the($1,and(n|dog($1),n|house($1))),$0)
example_end

Sent: can you throw the ball ?
Sem:  lambda $0_{ev}.Q(aux|can(v|throw(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: you catch the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: catch the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: you can 't hold the ball .
Sem:  lambda $0_{ev}.not(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: can you hold the ball ?
Sem:  lambda $0_{ev}.Q(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: hold the ball .
Sem:  lambda $0_{ev}.v|hold(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: that 's the way .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
example_end

Sent:  catch the ball  catch the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: catch the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: catch the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: you had it on your tummy .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|tummy($1)),$0))
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: where 's your pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: garbage ?
Sem:  lambda $0_{e}.n|garbage($0)
example_end

Sent: is that Racketyboom .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
example_end

Sent: Mommy 's busy .
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: you read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: later we 'll read .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you don 't drink coffee .
Sem:  lambda $0_{ev}.not(aux|do(v|drink(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: empty garbage ?
Sem:  lambda $0_{ev}.Q(v|empty(pro|you,lambda $1_{e}.n|garbage($1),$0),$0)
example_end

Sent: later .
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: what 's dirty ?
Sem:  lambda $0_{e}.adj|dirty($0)
example_end

Sent: your foot ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: swim ?
Sem:  lambda $0_{e}.n|swim($0)
example_end

Sent: a cracker ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|cracker($1)),$0)
example_end

Sent: lay down .
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
example_end

Sent: lay down here .
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
example_end

Sent: pottie ?
Sem:  lambda $0_{e}.n|pot-DIM($0)
example_end

Sent: excuse me .
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
example_end

Sent: and Mommy will read to you .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),prep|to(pro|you,$0))
example_end

Sent: shall we read Racketyboom ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,n:prop|Racketyboom,$0),$0),$0)
example_end

Sent: I 'll read .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
example_end

Sent: turn the page .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: you turn the page .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: you 're going backwards .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv:loc|backwards($0))
example_end

Sent: you read the story to Mommy .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,det|the($1,n|story($1)),$0),prep|to(n:prop|Mommy,$0))
example_end

Sent: turn around .
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
example_end

Sent: that 's a girl ? .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: is that Papa ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Papa,$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you sit on the pillow .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
example_end

Sent: not those pillows .
Sem:  lambda $0_{ev}.not(det|those($1,n|pillow-PL($1)),$0)
example_end

Sent: come over on these pillows .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|on(det|these($1,n|pillow-PL($1)),$0))
example_end

Sent: wait .
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
example_end

Sent: this is Racketyboom .
Sem:  lambda $0_{ev}.eq(pro:dem|this,n:prop|Racketyboom,$0)
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: you move your highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: cracker ?
Sem:  lambda $0_{e}.n|cracker($0)
example_end

Sent: cracker .
Sem:  lambda $0_{e}.n|cracker($0)
example_end

Sent: you want your custard now ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro:poss:det|your($1,n|custard($1)),$0),adv|now($0)),$0)
example_end

Sent: this is your lunch .
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|lunch($1)),$0)
example_end

Sent: Eve 's having lunch .
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: where is Papa ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: Papa 's going to have lunch .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$0),v|have(n:prop|Papa,lambda $1_{e}.n|lunch($1),$0)),$0)
example_end

Sent: Eve 's having lunch .
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: your drink ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drink($1)),$0)
example_end

Sent: you drinking your milk ?
Sem:  lambda $0_{ev}.Q(part|drink-PROG(pro|you,pro:poss:det|your($1,n|milk($1)),$0),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: drink your milk .
Sem:  lambda $0_{ev}.v|drink(pro|you,pro:poss:det|your($1,n|milk($1)),$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: you want more soup ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|soup($1)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: noodle soup ?
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
example_end

Sent: Mommy 's gonna have soup .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,lambda $1_{e}.n|soup($1),$0)),$0)
example_end

Sent: eating .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,$0)
example_end

Sent: is Eve eating ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|eat-PROG(n:prop|Eve,$0),$0),$0)
example_end

Sent: what 's she eating ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0,$1),$1)
example_end

Sent: touch ?
Sem:  lambda $0_{e}.n|touch($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: taperecorder .
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: it 's a noodle .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|noodle($1)),$0)
example_end

Sent: what .
Sem:  pro:wh|what
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: are you finished ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
example_end

Sent: would you sit down then ?
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|sit(pro|you,$0),$0),adv:tem|then($0)),$0)
example_end

Sent: sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm awfully sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: is Eve tired ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|tire-PERF(n:prop|Eve,$0),$0),$0)
example_end

Sent: she is .
Sem:  pro|she
example_end

Sent: we 'll go to bed .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),prep|to(lambda $1_{e}.n|bed($1),$0))
example_end

Sent: bed ?
Sem:  lambda $0_{e}.n|bed($0)
example_end

Sent: move your fingers .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|finger-PL($1)),$0)
example_end

Sent: we go .
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
example_end

Sent: she 's sleepy .
Sem:  adj|sleepy(pro|she)
example_end

Sent: you bumped your head .
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: bumped your head .
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: Mommy 'll move your chair .
Sem:  lambda $0_{ev}.aux|will(v|move(n:prop|Mommy,pro:poss:det|your($1,n|chair($1)),$0),$0)
example_end

Sent: coffee .
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: Mommy 's cutting a pumpkin .
Sem:  lambda $0_{ev}.aux|be&3S(part|cut-PROG(n:prop|Mommy,det|a($1,n|pumpkin($1)),$0),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm gonna cook it .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: I 'm gonna cook it .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: coffee ?
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 're you doing on the table ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
example_end

Sent: that 's not Papa .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
example_end

Sent: that 's the mailman .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
example_end

Sent: that 's the mailman .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
example_end

Sent: a letter .
Sem:  det|a($0,n|letter($0))
example_end

Sent: Eve has a letter .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|letter($1)),$0)
example_end

Sent: Eve got a letter from Nanny .
Sem:  lambda $0_{ev}.and(v|get&PAST(n:prop|Eve,det|a($1,n|letter($1)),$0),prep|from(n:prop|Nanny,$0))
example_end

Sent: paper .
Sem:  lambda $0_{e}.n|paper($0)
example_end

Sent: Nanny wrote you the letter .
Sem:  lambda $0_{ev}.v|write&PAST(n:prop|Nanny,pro|you,det|the($1,n|letter($1)),$0)
example_end

Sent: Nanny ?
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
example_end

Sent: teeth .
Sem:  lambda $0_{e}.n|tooth&PL($0)
example_end

Sent: grape juice .
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
example_end

Sent: this is your pumpkin .
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|pumpkin($1)),$0)
example_end

Sent: I 'm going to cook it .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: more water ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|water($1)),$0)
example_end

Sent: more grape juice .
Sem:  qn|more($0,and(n|grape($0),n|juice($0)))
example_end

Sent: bring your cup here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro:poss:det|your($1,n|cup($1)),$0),adv:loc|here($0))
example_end

Sent: it 's allgone .
Sem:  adj|all_gone(pro|it)
example_end

Sent: are you alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what are these ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: what do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: can I help you ?
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
example_end

Sent: take that outof your mouth first .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:dem|that,$0),adv|first($0))
example_end

Sent: it 's your horsie .
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|your($1,n|horse-DIM($1)),$0)
example_end

Sent: horse .
Sem:  lambda $0_{e}.n|horse($0)
example_end

Sent: Mommy 's sitting on the stool .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: I get it .
Sem:  lambda $0_{ev}.v|get(pro|I,pro|it,$0)
example_end

Sent: nothing 's happening .
Sem:  lambda $0_{ev}.aux|be&3S(part|happen-PROG(pro:indef|nothing,$0),$0)
example_end

Sent: I 'm not doing anything .
Sem:  lambda $0_{ev}.not(aux|be&1S(part|do-PROG(pro|I,pro:indef|anything,$0),$0),$0)
example_end

Sent: you want machine ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|machine($1),$0),$0)
example_end

Sent: the machine ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|machine($1)),$0)
example_end

Sent: you can watch the washingmachine later .
Sem:  lambda $0_{ev}.and(aux|can(v|watch(pro|you,det|the($1,n|+n|washing+n|machine($1)),$0),$0),adv|later($0))
example_end

Sent: watch what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|watch(pro|you,$0,$1)
example_end

Sent: what are we going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
example_end

Sent: Mommy won 't make anything .
Sem:  lambda $0_{ev}.not(aux|will(v|make(n:prop|Mommy,pro:indef|anything,$0),$0),$0)
example_end

Sent: Mommy 's busy .
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: Eve play with her tinkertoys .
Sem:  lambda $0_{ev}.and(v|play(n:prop|Eve,$0),prep|with(pro:poss:det|her($1,n|+n|tinker+n|toy-PL($1)),$0))
example_end

Sent: is that your gun ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|gun($1)),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: that 's your radio .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|radio($1)),$0)
example_end

Sent: you want me to turn ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|turn(pro|you,$0)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's enough .
Sem:  adj|enough(pro:dem|that)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is it clean ?
Sem:  lambda $0_{ev}.Q(adj|clean(pro|it),$0)
example_end

Sent: nap ?
Sem:  lambda $0_{e}.n|nap($0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: what are you doing with the radio ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(det|the($2,n|radio($2)),$1))
example_end

Sent: Fraser 's not going .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),$0)
example_end

Sent: I 'm going upstairs .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
example_end

Sent: I have a book .
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|book($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's the telephone .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
example_end

Sent: that was the telephone .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
example_end

Sent: it wasn 't Peter .
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Peter,$0),$0)
example_end

Sent: it was Papa .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Papa,$0)
example_end

Sent: did you see the butterfly ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,det|the($1,n|butterfly($1)),$0),$0),$0)
example_end

Sent: where 's the butterfly ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
example_end

Sent: that 's not the butterfly .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|butterfly($1)),$0),$0)
example_end

Sent: that 's the ball .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|ball($1)),$0)
example_end

Sent: where 's the butterfly .
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
example_end

Sent: would you like that thing ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|that($1,n|thing($1)),$0),$0),$0)
example_end

Sent: what 's this book called ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(det|this($2,n|book($2)),$0,$1),$1)
example_end

Sent: it 's called my teddybear .
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,pro:poss:det|my($1,n|+n|teddy+n|bear($1)),$0),$0)
example_end

Sent: you tell me about the book .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(det|the($1,n|book($1)),$0))
example_end

Sent: you tell Fraser about the book .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,n:prop|Fraser,$0),prep|about(det|the($1,n|book($1)),$0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: excuse me .
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
example_end

Sent: would you shut the door .
Sem:  lambda $0_{ev}.aux|will&COND(v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0),$0)
example_end

Sent: Eve 's a dear .
Sem:  lambda $0_{ev}.eq(n:prop|Eve,det|a($1,n|dear($1)),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: I stir the coffee .
Sem:  lambda $0_{ev}.v|stir(pro|I,det|the($1,n|coffee($1)),$0)
example_end

Sent: more cracker ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cracker($1)),$0)
example_end

Sent: get the stool .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
example_end

Sent: get the stool .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
example_end

Sent: it 's hot .
Sem:  adj|hot(pro|it)
example_end

Sent: that 's not a muffin .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|muffin($1)),$0),$0)
example_end

Sent: that 's your cheese sandwich .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: don 't touch that .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: don 't touch it .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: spoons .
Sem:  lambda $0_{e}.n|spoon-PL($0)
example_end

Sent: you may have it .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: did you touch it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: it 's hot .
Sem:  adj|hot(pro|it)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: Mommy doesn 't want any celery .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Mommy,qn|any($1,n|celery($1)),$0),$0),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: change her ?
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro|her,$0),$0)
example_end

Sent: shall I change your diaper ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|change(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: you lay right there .
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|there($0))
example_end

Sent: you stay right there .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
example_end

Sent: you stay right there .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: mouth ?
Sem:  lambda $0_{e}.n|mouth($0)
example_end

Sent: your mouth ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|mouth($1)),$0)
example_end

Sent: where is your celery ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
example_end

Sent: where is your celery ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
example_end

Sent: you bring the celery here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|celery($1)),$0),adv:loc|here($0))
example_end

Sent: you dropped the celery .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|celery($1)),$0)
example_end

Sent: your foot ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: where is your foot ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: you can get out yourself .
Sem:  lambda $0_{ev}.and(aux|can(v|get(pro|you,pro:refl|yourself,$0),$0),adv:loc|out($0))
example_end

Sent: watch your head .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you watch your head .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: you do it again .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: we 'll hold off lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|hold(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|off($0))
example_end

Sent: you want lunch then .
Sem:  lambda $0_{ev}.and(v|want(pro|you,lambda $1_{e}.n|lunch($1),$0),adv:tem|then($0))
example_end

Sent: your bibbie ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bib-DIM($1)),$0)
example_end

Sent: pardon me .
Sem:  pro|me
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: that 's a cheese sandwich .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: Mommy 'll have a sandwich too .
Sem:  lambda $0_{ev}.aux|will(v|have(n:prop|Mommy,det|a($1,n|sandwich($1)),$0),$0)
example_end

Sent: peanutbutter ?
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: first take it apart .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv|apart($0))
example_end

Sent: that 's your finger .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|finger($1)),$0)
example_end

Sent: it 's hot .
Sem:  adj|hot(pro|it)
example_end

Sent: you 're dancing .
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
example_end

Sent: not while you eat .
Sem:  lambda $0_{ev}.not(v|eat(pro|you,$0),$0)
example_end

Sent: you do it down on the floor .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: is that your sandwich ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|sandwich($1)),$0),$0)
example_end

Sent: what are you eating ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
example_end

Sent: your sandwich ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|sandwich($1)),$0)
example_end

Sent: would you turn around ?
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|turn(pro|you,$0),$0),adv:loc|around($0)),$0)
example_end

Sent: turn around in your chair .
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: around .
Sem:  lambda $0_{ev}.adv:loc|around($0)
example_end

Sent: turn around .
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
example_end

Sent: the baby 's eating up there .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(det|the($1,n|baby($1)),$0),$0),adv:loc|up($0))
example_end

Sent: she 's eating at a table .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
example_end

Sent: she has a bibbie on .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|bib-DIM($1)),$0),adv|on($0))
example_end

Sent: Eve has a bibbie .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|bib-DIM($1)),$0)
example_end

Sent: she 's eating at a table .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: did you drink your eggnog ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drink(pro|you,pro:poss:det|your($1,n|eggnog($1)),$0),$0),$0)
example_end

Sent: eggnog .
Sem:  lambda $0_{e}.n|eggnog($0)
example_end

Sent: Mommy had her eggnog .
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Mommy,pro:poss:det|her($1,n|eggnog($1)),$0)
example_end

Sent: do you like it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you 're LadyBump .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Lady_Bump,$0)
example_end

Sent: Mommy still has some eggnog .
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Mommy,qn|some($1,n|eggnog($1)),$0),adv|still($0))
example_end

Sent: eggnog .
Sem:  lambda $0_{e}.n|eggnog($0)
example_end

Sent: not yet .
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
example_end

Sent: what 's the baby doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
example_end

Sent: the baby 's not sleeping .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(det|the($1,n|baby($1)),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you don 't want any more sandwich ?
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|more($1,n|sandwich($1)),$0),$0),$0),$0)
example_end

Sent: you have so much cheese on there .
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|much($1,n|cheese($1)),$0),adv:loc|on($0))
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: I can 't understand you .
Sem:  lambda $0_{ev}.not(aux|can(v|understand(pro|I,pro|you,$0),$0),$0)
example_end

Sent: chew it up .
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
example_end

Sent: Mommy 's gone .
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(n:prop|Mommy,$0),$0)
example_end

Sent: now what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),adv|now($1))
example_end

Sent: the lady ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|lady($1)),$0)
example_end

Sent: water .
Sem:  lambda $0_{e}.n|water($0)
example_end

Sent: wipe the fingers .
Sem:  lambda $0_{ev}.v|wipe(pro|you,det|the($1,n|finger-PL($1)),$0)
example_end

Sent: wait .
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
example_end

Sent: look here .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
example_end

Sent: what did Mommy do with your eggnog ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(n:prop|Mommy,$0,$1),$1),prep|with(pro:poss:det|your($2,n|eggnog($2)),$1))
example_end

Sent: I spilled the eggnog .
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,det|the($1,n|eggnog($1)),$0)
example_end

Sent: I did  spill the eggnog .
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|I,det|the($1,n|eggnog($1)),$0),$0)
example_end

Sent: you wipe it off the floor .
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|floor($1)),$0))
example_end

Sent: that 's a good job .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|job($1))),$0)
example_end

Sent: the paper tore .
Sem:  lambda $0_{ev}.v|tear&PAST(det|the($1,n|paper($1)),$0)
example_end

Sent: that 's alright .
Sem:  pro:dem|that
example_end

Sent: somebody .
Sem:  pro:indef|somebody
example_end

Sent: Mommy 's busy .
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: you read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: Eve 's going to read .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
example_end

Sent: Eve 's going to read .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
example_end

Sent: what are you going to read ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|read&ZERO(pro|you,$0,$1)),$1)
example_end

Sent: Racketyboom .
Sem:  n:prop|Racketyboom
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: umbrella .
Sem:  lambda $0_{e}.n|umbrella($0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: your book .
Sem:  pro:poss:det|your($0,n|book($0))
example_end

Sent: shut the door .
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
example_end

Sent: put that in the wastebasket .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
example_end

Sent: is that the wastebasket ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|wastebasket($1)),$0),$0)
example_end

Sent: it is
Sem:  pro|it
example_end

Sent: you 're gonna fall .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|fall(pro|you,$0)),$0)
example_end

Sent: may I sit down ?
Sem:  lambda $0_{ev}.Q(and(aux|may(v|sit(pro|I,$0),$0),adv:loc|down($0)),$0)
example_end

Sent: would you step back .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|step(pro|you,$0),$0),adv:loc|back($0))
example_end

Sent: come on off the chair .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|off(det|the($1,n|chair($1)),$0))
example_end

Sent: you have breakfast in the morning .
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|breakfast($1),$0),prep|in(det|the($2,n|morning($2)),$0))
example_end

Sent: Papa might give you a cracker .
Sem:  lambda $0_{ev}.aux|might(v|give(n:prop|Papa,pro|you,det|a($1,n|cracker($1)),$0),$0)
example_end

Sent: had what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|you,$0,$1)
example_end

Sent: you 're happy .
Sem:  adj|happy(pro|you)
example_end

Sent: may I have coffee ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: those are my crackers .
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|my($1,n|cracker-PL($1)),$0)
example_end

Sent: did you eat your crackers ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro:poss:det|your($1,n|cracker-PL($1)),$0),$0),$0)
example_end

Sent: I don 't want it .
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: is that it ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro|it,$0),$0)
example_end

Sent: Mommy is emptying the garbage .
Sem:  lambda $0_{ev}.aux|be&3S(part|empty-PROG(n:prop|Mommy,det|the($1,n|garbage($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: drink juice .
Sem:  lambda $0_{ev}.v|drink(pro|you,lambda $1_{e}.n|juice($1),$0)
example_end

Sent: does Eve want a spoon ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|want(n:prop|Eve,det|a($1,n|spoon($1)),$0),$0),$0)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: you eat with your spoon .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,$0),prep|with(pro:poss:det|your($1,n|spoon($1)),$0))
example_end

Sent: you drink it outof the cup .
Sem:  lambda $0_{ev}.and(v|drink(pro|you,pro|it,$0),prep|out_of(det|the($1,n|cup($1)),$0))
example_end

Sent: you drink it outof the cup .
Sem:  lambda $0_{ev}.and(v|drink(pro|you,pro|it,$0),prep|out_of(det|the($1,n|cup($1)),$0))
example_end

Sent: then I stir it .
Sem:  lambda $0_{ev}.and(v|stir(pro|I,pro|it,$0),adv:tem|then($0))
example_end

Sent: that 's the way ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|way($1)),$0),$0)
example_end

Sent: I 'm glad .
Sem:  adj|glad(pro|I)
example_end

Sent: are you going away ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv|away($0)),$0)
example_end

Sent: you stand on my toe .
Sem:  lambda $0_{ev}.and(v|stand(pro|you,$0),prep|on(pro:poss:det|my($1,n|toe($1)),$0))
example_end

Sent: he has bigger feet .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,lambda $1_{e}.and(adj|big-CP($1),n|foot&PL($1)),$0)
example_end

Sent: that 's a spoon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|spoon($1)),$0)
example_end

Sent: you fell ?
Sem:  lambda $0_{ev}.Q(v|fall&PAST(pro|you,$0),$0)
example_end

Sent: did you hurt yourself ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|hurt&ZERO(pro|you,pro:refl|yourself,$0),$0),$0)
example_end

Sent: you hurt yourself .
Sem:  lambda $0_{ev}.v|hurt&ZERO(pro|you,pro:refl|yourself,$0)
example_end

Sent: what did you hurt ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|hurt&ZERO(pro|you,$0,$1),$1)
example_end

Sent: what did you hurt ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|hurt&ZERO(pro|you,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you hurt your arm ?
Sem:  lambda $0_{ev}.Q(v|hurt&ZERO(pro|you,pro:poss:det|your($1,n|arm($1)),$0),$0)
example_end

Sent: open what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|open(pro|you,$0,$1)
example_end

Sent: open the door ?
Sem:  lambda $0_{ev}.Q(v|open(pro|you,det|the($1,n|door($1)),$0),$0)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: you take these .
Sem:  lambda $0_{ev}.v|take(pro|you,pro:dem|these,$0)
example_end

Sent: count them .
Sem:  lambda $0_{ev}.v|count(pro|you,pro|them,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I used them .
Sem:  lambda $0_{ev}.v|use-PAST(pro|I,pro|them,$0)
example_end

Sent: a grahamcracker ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|+n|graham+n|cracker($1)),$0)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: I am holding the ball .
Sem:  lambda $0_{ev}.aux|be&1S(part|hold-PROG(pro|I,det|the($1,n|ball($1)),$0),$0)
example_end

Sent: can you catch the ball ?
Sem:  lambda $0_{ev}.Q(aux|can(v|catch(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: you 'll break them .
Sem:  lambda $0_{ev}.aux|will(v|break(pro|you,pro|them,$0),$0)
example_end

Sent: Eve
Sem:  n:prop|Eve
example_end

Sent: we are .
Sem:  pro|we
example_end

Sent: fix what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|fix(pro|you,$0,$1)
example_end

Sent: fix Lassie ?
Sem:  lambda $0_{ev}.Q(v|fix(pro|you,n:prop|Lassie,$0),$0)
example_end

Sent: Eve read .
Sem:  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
example_end

Sent: we 'll read later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
example_end

Sent: Mommy 's busy .
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: he 's never heard Lassie .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|hear&PERF(pro|he,n:prop|Lassie,$0),$0),adv|never($0))
example_end

Sent: you read to me .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|to(pro|me,$0))
example_end

Sent: you read the book .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,det|the($1,n|book($1)),$0)
example_end

Sent: we 'll read later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
example_end

Sent: Rangy doesn 't have a coat .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(n:prop|Rangy,det|a($1,n|coat($1)),$0),$0),$0)
example_end

Sent: Cromer 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(n:prop|Cromer,$0,$1)
example_end

Sent: he 's busy .
Sem:  adj|busy(pro|he)
example_end

Sent: you read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: you read to me .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|to(pro|me,$0))
example_end

Sent: later we 'll read .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
example_end

Sent: I 'm busy .
Sem:  adj|busy(pro|I)
example_end

Sent: put Rangy on your lap .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,n:prop|Rangy,$0),prep|on(pro:poss:det|your($1,n|lap($1)),$0))
example_end

Sent: you read to Rangy .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|to(n:prop|Rangy,$0))
example_end

Sent: Eve 's going to read .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
example_end

Sent: Eve read .
Sem:  lambda $0_{ev}.v|read&ZERO(n:prop|Eve,$0)
example_end

Sent: Mommy 's busy .
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: you read to Rangy .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,$0),prep|to(n:prop|Rangy,$0))
example_end

Sent: we 'll read ?
Sem:  lambda $0_{ev}.Q(aux|will(v|read&ZERO(pro|we,$0),$0),$0)
example_end

Sent: I 'll read .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
example_end

Sent: I 'll read to you .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|I,$0),$0),prep|to(pro|you,$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: isn 't that funny .
Sem:  lambda $0_{ev}.not(adj|funny(pro:dem|that),$0)
example_end

Sent: it 's called a gopher .
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,det|a($1,n|gopher($1)),$0),$0)
example_end

Sent: I 'll get it .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|I,pro|it,$0),$0)
example_end

Sent: I dropped the paper .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|I,det|the($1,n|paper($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: do you want a pencil ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|a($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: where is your pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: where 's your pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: is it a lady ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,det|a($1,n|lady($1)),$0),$0)
example_end

Sent: that 's a face .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|face($1)),$0)
example_end

Sent: my pencil ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: Eve has the pencil .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|the($1,n|pencil($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're doing very well .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|well($0))
example_end

Sent: that 's another page .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|page($1)),$0)
example_end

Sent: lots of pages .
Sem:  qn|lots($0,n|page-PL($0))
example_end

Sent: Cromer ?
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
example_end

Sent: this way .
Sem:  det|this($0,n|way($0))
example_end

Sent: what else have you been doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PERF(aux|have(part|do-PROG(pro|you,$0,$1),$1),$1)
example_end

Sent: what are you writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|write-PROG(pro|you,$0,$1),$1)
example_end

Sent: look at that .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro:dem|that,$0))
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: they 're swimming ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|swim-PROG(pro|they,$0),$0),$0)
example_end

Sent: the coffee 's allgone .
Sem:  adj|all_gone(det|the($0,n|coffee($0)))
example_end

Sent: would you bring me the cup ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0),$0)
example_end

Sent: bring Mommy the cup .
Sem:  lambda $0_{ev}.v|bring(pro|you,n:prop|Mommy,det|the($1,n|cup($1)),$0)
example_end

Sent: the spoon too ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|spoon($1)),$0)
example_end

Sent: you 'll get it .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|you,pro|it,$0),$0)
example_end

Sent: you bring me the napkin too .
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
example_end

Sent: you 're a good girl .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: you want a spoon ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|spoon($1)),$0),$0)
example_end

Sent: you put them back on the table .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: Eve
Sem:  n:prop|Eve
example_end

Sent: Humm .
Sem:  n:prop|Humm
example_end

Sent: Humm .
Sem:  n:prop|Humm
example_end

Sent: that 's a nice story ? .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: you read Humm .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Humm,$0)
example_end

Sent: we 'll read later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
example_end

Sent: bring Mommy the sugar .
Sem:  lambda $0_{ev}.v|bring(pro|you,n:prop|Mommy,det|the($1,n|sugar($1)),$0)
example_end

Sent: put the top on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),adv|on($0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: will you bring me the napkin ?
Sem:  lambda $0_{ev}.Q(aux|will(v|bring(pro|you,pro|me,$0),$0),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: you bring me the napkin .
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
example_end

Sent: that 's the butter .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|butter($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: is that necessary ?
Sem:  lambda $0_{ev}.Q(adj|necessary(pro:dem|that),$0)
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: not the stove .
Sem:  lambda $0_{ev}.not(det|the($1,n|stove($1)),$0)
example_end

Sent: not the furniture .
Sem:  lambda $0_{ev}.not(det|the($1,n|furniture($1)),$0)
example_end

Sent: not the shelf .
Sem:  lambda $0_{ev}.not(det|the($1,n|shelf($1)),$0)
example_end

Sent: Eve
Sem:  n:prop|Eve
example_end

Sent: Mommy 'll take the box .
Sem:  lambda $0_{ev}.aux|will(v|take(n:prop|Mommy,det|the($1,n|box($1)),$0),$0)
example_end

Sent: pudding .
Sem:  lambda $0_{e}.n|pudding($0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's what ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: that 's a carrot .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|carrot($1)),$0)
example_end

Sent: carrot .
Sem:  lambda $0_{e}.n|carrot($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: bowl .
Sem:  lambda $0_{e}.n|bowl($0)
example_end

Sent: you say it .
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
example_end

Sent: are you throwing the toys ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|throw-PROG(pro|you,det|the($1,n|toy-PL($1)),$0),$0),$0)
example_end

Sent: you don 't throw them .
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
example_end

Sent: sit by you .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
example_end

Sent: you build a big tower .
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
example_end

Sent: a big tower .
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
example_end

Sent: you don 't play with it .
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're running .
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: are you alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: we 're gonna have coffee .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
example_end

Sent: that 's not Cromer .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
example_end

Sent: Cromer didn 't come today .
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
example_end

Sent: you want paper too ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
example_end

Sent: a red pencil ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
example_end

Sent: it 's allgone .
Sem:  adj|all_gone(pro|it)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: that improves the page greatly .
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is it allgone ?
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
example_end

Sent: you have pudding for lunch .
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: later .
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: no supper ?
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
example_end

Sent: no lunch .
Sem:  qn|no($0,n|lunch($0))
example_end

Sent: no lunch .
Sem:  qn|no($0,n|lunch($0))
example_end

Sent: later we 'll have lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
example_end

Sent: fun ?
Sem:  lambda $0_{e}.n|fun($0)
example_end

Sent: celery .
Sem:  lambda $0_{e}.n|celery($0)
example_end

Sent: we 'll have celery too .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: soup .
Sem:  lambda $0_{e}.n|soup($0)
example_end

Sent: and what else would you like for lunch ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
example_end

Sent: cheese .
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: what else ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: what else ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: pudding ?
Sem:  lambda $0_{e}.n|pudding($0)
example_end

Sent: milk ?
Sem:  lambda $0_{e}.n|milk($0)
example_end

Sent: you just look at it .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
example_end

Sent: don 't touch it .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you just look at it .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
example_end

Sent: what does it do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's good .
Sem:  adj|good(pro:dem|that)
example_end

Sent: don 't drop it .
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
example_end

Sent: don 't drop it .
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: a round tinkertoy .
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
example_end

Sent: a round block .
Sem:  det|a($0,and(adj|round($0),n|block($0)))
example_end

Sent: that 's a round block too .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
example_end

Sent: it 's a round block .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
example_end

Sent: I can 't pin your diaper .
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: taperecorder .
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: I 'm not Cromer .
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
example_end

Sent: I 'm Fraser .
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: are you okay ?
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Fraser .
Sem:  n:prop|Fraser
example_end

Sent: coming outof the hole ?
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: I can see Eve .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
example_end

Sent: can you see Eve ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: I see Eve .
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
example_end

Sent: you see Fraser .
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: up .
Sem:  lambda $0_{ev}.adv:loc|up($0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: sit down in his lap .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
example_end

Sent: down ?
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
example_end

Sent: Eve 's gonna climb ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
example_end

Sent: you can climb .
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
example_end

Sent: climb up there .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
example_end

Sent: you want a letter ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
example_end

Sent: we 'll  we will have a letter .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
example_end

Sent: this will make a good letter .
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: Mommy put one there .
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you may have it .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: I 'll answer it .
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
example_end

Sent: that was Natalie .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
example_end

Sent: that 's not your sock .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
example_end

Sent: we 'll look at the pictures .
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: lady .
Sem:  lambda $0_{e}.n|lady($0)
example_end

Sent: she has pretty dresses .
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
example_end

Sent: that 's another lady .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's a man .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
example_end

Sent: another man .
Sem:  qn|another($0,n|man($0))
example_end

Sent: another man .
Sem:  qn|another($0,n|man($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: lady .
Sem:  lambda $0_{e}.n|lady($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's not a man .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: girl .
Sem:  lambda $0_{e}.n|girl($0)
example_end

Sent: another lady .
Sem:  qn|another($0,n|lady($0))
example_end

Sent: you turn the page .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: she has a hat .
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
example_end

Sent: you turn the page .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: would you move into the room .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
example_end

Sent: go on .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
example_end

Sent: move .
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: move .
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: move .
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: pick up the paper .
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
example_end

Sent: pick up the paper .
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: that 's Fraser .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: that 's the top .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
example_end

Sent: put it on the sugar .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: take the spoon out .
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
example_end

Sent: take it outof the sugar .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
example_end

Sent: you don 't lick the top .
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: you can put the top on .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that 's better .
Sem:  adj|good&CP(pro:dem|that)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: would you bring the napkin .
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
example_end

Sent: bring me the napkin .
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
example_end

Sent: you 're bringing me the cup .
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's another cheese .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
example_end

Sent: you get your highchair .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: you put this back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
example_end

Sent: you move your highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: you put back  stool back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
example_end

Sent: you climb in .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
example_end

Sent: I 'm Fraser .
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
example_end

Sent: Mommy did what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
example_end

Sent: shoe ?
Sem:  lambda $0_{e}.n|shoe($0)
example_end

Sent: leave the stool there .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
example_end

Sent: your pencil .
Sem:  pro:poss:det|your($0,n|pencil($0))
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: where 's your paper ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: we 'll find you a pad .
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
example_end

Sent: move the stool ?
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
example_end

Sent: Eve do what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
example_end

Sent: banana ?
Sem:  lambda $0_{e}.n|banana($0)
example_end

Sent: I don 't have a banana .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
example_end

Sent: I 'm cracking the nuts .
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: you climb .
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
example_end

Sent: you can 't crack the nuts .
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
example_end

Sent: I 'm cracking the nuts .
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: I 'm cracking the nuts .
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: you may not have it .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you dropped it .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
example_end

Sent: make a hammer .
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: Eve 's cracking the nut ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
example_end

Sent: use the tinkertoy .
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: use the tinkertoy .
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
example_end

Sent: are you cracking the nut ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
example_end

Sent: I 'll crack the nut .
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: Mommy will crack the nut .
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: are you cracking the nut ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
example_end

Sent: that 's yours .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
example_end

Sent: that 's your nut .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
example_end

Sent: you cracked the nut .
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: Cromer ?
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
example_end

Sent: where is Cromer ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
example_end

Sent: where is Fraser ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
example_end

Sent: that 's the stool .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Eve will sit on the couch .
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: crack the nut ?
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: Eve 's drinking grape juice ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
example_end

Sent: Eve is drinking grape juice ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
example_end

Sent: Eve put the top back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
example_end

Sent: you 're lying down .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
example_end

Sent: Cromer 's wearing a sweater .
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
example_end

Sent: he doesn 't have a sweater .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
example_end

Sent: he has a jacket .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
example_end

Sent: the baby 's highchair .
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
example_end

Sent: the baby 's highchair .
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: you crack the nut .
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: you crack the nut .
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: Mommy 's cracking the nut .
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: and Eve 's cracking the nut too .
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: you dropped the nut .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: Eve dropped the nut .
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
example_end

Sent: Eve
Sem:  n:prop|Eve
example_end

Sent: you get it .
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
example_end

Sent: what 's the difference ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
example_end

Sent: not yet .
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
example_end

Sent: you crack the nut right now .
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
example_end

Sent: later we 'll swing .
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
example_end

Sent: we 'll swing later .
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
example_end

Sent: you 're gonna climb ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
example_end

Sent: gimme your finger .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
example_end

Sent: you climb .
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
example_end

Sent: you 're a big girl .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's the stove .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
example_end

Sent: the stove .
Sem:  det|the($0,n|stove($0))
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: you want another nut ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: they 're all the same .
Sem:  pro|they
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: a game ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: I 'll put it there .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
example_end

Sent: it 's a nut .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: your nut ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
example_end

Sent: that 's the stove .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
example_end

Sent: you don 't touch it .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: the baby 's highchair ?
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
example_end

Sent: your stool .
Sem:  pro:poss:det|your($0,n|stool($0))
example_end

Sent: your grape juice is allgone .
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
example_end

Sent: your grape juice is allgone .
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
example_end

Sent: that 's the coffee pot .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
example_end

Sent: is it allgone ?
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: you 're gonna jump ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
example_end

Sent: Eve 's going to jump ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
example_end

Sent: they 're looking .
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: you 'll spill it .
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: you dropped the nuts ?
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: you get the nuts .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're dancing .
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
example_end

Sent: that 's a nice dance .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
example_end

Sent: where is Eve ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
example_end

Sent: Eve can get the banjo .
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is the banjo ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
example_end

Sent: you 've had a bowel movement .
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
example_end

Sent: shall we change your diaper .
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
example_end

Sent: haha I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: look at Fraser ?
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's sitting in the chair .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
example_end

Sent: Papa ?
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
example_end

Sent: Papa ?
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
example_end

Sent: he went by bike .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
example_end

Sent: making pennies .
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
example_end

Sent: pennies .
Sem:  lambda $0_{e}.n|penny-PL($0)
example_end

Sent: making pennies .
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: swing ?
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
example_end

Sent: face .
Sem:  lambda $0_{e}.n|face($0)
example_end

Sent: that 's good .
Sem:  adj|good(pro:dem|that)
example_end

Sent: did I get it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: stool .
Sem:  lambda $0_{e}.n|stool($0)
example_end

Sent: you 're gonna climb ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
example_end

Sent: you can climb down .
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: what do you want me to do .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: sleep .
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
example_end

Sent: are you going to sleep ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
example_end

Sent: you sleep in bed .
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
example_end

Sent: watch your head .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: what are you saying ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
example_end

Sent: move the stool ?
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
example_end

Sent: you may not have that .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: it 's another nut .
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
example_end

Sent: take it outof your mouth .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: I 'll take it away .
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
example_end

Sent: because you put them in your mouth .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
example_end

Sent: because you put them in your mouth .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
example_end

Sent: what .
Sem:  pro:wh|what
example_end

Sent: Mommy .
Sem:  n:prop|Mommy
example_end

Sent: here ?
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
example_end

Sent: you may play with them .
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: you go in on the table .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: can you count them ?
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: you say it .
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
example_end

Sent: Eve fix my shoe .
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
example_end

Sent: you have my shoe off .
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
example_end

Sent: Eve 's wearing the shoe ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
example_end

Sent: Eve 's wearing the shoe ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: that 's Lassie .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
example_end

Sent: that 's Lassie .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: get the red bicycle ?
Sem:  lambda $0_{ev}.Q(v|get(pro|you,det|the($1,and(adj|red($1),n|bicycle($1))),$0),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: say music .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
example_end

Sent: music .
Sem:  lambda $0_{e}.n|music($0)
example_end

Sent: say music .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
example_end

Sent: music .
Sem:  lambda $0_{e}.n|music($0)
example_end

Sent: did you find the bicycle ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|find(pro|you,det|the($1,n|bicycle($1)),$0),$0),$0)
example_end

Sent: where 's the little red bicycle ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|little($1),adj|red($1),n|bicycle($1))),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: Fraser .
Sem:  n:prop|Fraser
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you jump in the livingroom .
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: I 'm almost finished .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: I 'm almost finished .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: you stay in the livingroom .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
example_end

Sent: but I 'm almost finished .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's hot .
Sem:  adj|hot(pro|it)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: vanilla .
Sem:  lambda $0_{e}.n|vanilla($0)
example_end

Sent: vanilla .
Sem:  lambda $0_{e}.n|vanilla($0)
example_end

Sent: vanilla .
Sem:  lambda $0_{e}.n|vanilla($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that tinkertoy doing in there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(det|that($2,n|+n|tinker+n|toy($2)),$0,$1),$1),adv:loc|in($1))
example_end

Sent: it doesn 't belong in there .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|belong(pro|it,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: the rockingchair .
Sem:  det|the($0,n|+n|rocking+n|chair($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: see it ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: the chair .
Sem:  det|the($0,n|chair($0))
example_end

Sent: you see it ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: find it .
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: is it ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: you get it then .
Sem:  lambda $0_{ev}.and(v|get(pro|you,pro|it,$0),adv:tem|then($0))
example_end

Sent: it 's lost .
Sem:  adj|lost(pro|it)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: you see it ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: I 'm making orange peel .
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.and(adj|orange($1),n|peel($1)),$0),$0)
example_end

Sent: peel .
Sem:  lambda $0_{e}.n|peel($0)
example_end

Sent: are those your bouillon cubes ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|those,pro:poss:det|your($1,and(n|bouillon($1),n|cube-PL($1))),$0),$0)
example_end

Sent: you can sit on my lap later .
Sem:  lambda $0_{ev}.and(aux|can(v|sit(pro|you,$0),$0),adv|later($0))
example_end

Sent: the big stool .
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: the big stool .
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
example_end

Sent: the big stool .
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: this is my stool .
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|my($1,n|stool($1)),$0)
example_end

Sent: you came back ?
Sem:  lambda $0_{ev}.Q(and(v|come&PAST(pro|you,$0),adv:loc|back($0)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's more orange peel .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|more($1,and(adj|orange($1),n|peel($1))),$0)
example_end

Sent: you sit on your bottom ?
Sem:  lambda $0_{ev}.Q(and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|bottom($1)),$0)),$0)
example_end

Sent: Mommy 's sitting on her bottom .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(pro:poss:det|her($1,n|bottom($1)),$0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: sit on your stool .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: big girl .
Sem:  lambda $0_{e}.and(adj|big($0),n|girl($0))
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: my foot ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|foot($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: not what ?
Sem:  lambda $0_{ev}.Q(not(pro:wh|what,$0),$0)
example_end

Sent: that 's your puzzle .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|puzzle($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you fixed your puzzle ?
Sem:  lambda $0_{ev}.Q(v|fix-PAST(pro|you,pro:poss:det|your($1,n|puzzle($1)),$0),$0)
example_end

Sent: you put them in the holes .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(det|the($1,n|hole-PL($1)),$0))
example_end

Sent: you 're a horsie ?
Sem:  lambda $0_{ev}.Q(eq(pro|you,det|a($1,n|horse-DIM($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you are a horsie .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,n|horse-DIM($1)),$0)
example_end

Sent: you 're Clipclop .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Clip_clop,$0)
example_end

Sent: you were running fast .
Sem:  lambda $0_{ev}.and(aux|be&PAST(part|run-PROG(pro|you,$0),$0),adv|fast($0))
example_end

Sent: I 'm not sure .
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
example_end

Sent: this is a coin .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|a($1,n|coin($1)),$0)
example_end

Sent: a coin .
Sem:  det|a($0,n|coin($0))
example_end

Sent: a baseball coin .
Sem:  det|a($0,and(n|baseball($0),n|coin($0)))
example_end

Sent: put him in your pocket .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|him,$0),prep|in(pro:poss:det|your($1,n|pocket($1)),$0))
example_end

Sent: coming outof your pocket ?
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(pro:poss:det|your($1,n|pocket($1)),$0)),$0)
example_end

Sent: baseball .
Sem:  lambda $0_{e}.n|baseball($0)
example_end

Sent: baseball coin .
Sem:  lambda $0_{e}.and(n|baseball($0),n|coin($0))
example_end

Sent: I 'll give him more coffee .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|him,qn|more($1,n|coffee($1)),$0),$0)
example_end

Sent: that 's his napkin .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|napkin($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: is this my pencil ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pencil($1)),$0),$0)
example_end

Sent: where is your pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: you say this .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|this,$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: move your highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: move the highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,det|the($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: cheese ?
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: would you like some cheese ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|some($1,n|cheese($1)),$0),$0),$0)
example_end

Sent: what sweetie ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: is that my lunch ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|lunch($1)),$0),$0)
example_end

Sent: is it ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: is it my lunch ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|lunch($1)),$0),$0)
example_end

Sent: your lunch .
Sem:  pro:poss:det|your($0,n|lunch($0))
example_end

Sent: I 'll give you more tapioca .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|you,qn|more($1,n|tapioca($1)),$0),$0)
example_end

Sent: Mommy did come back .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|come(n:prop|Mommy,$0),$0),adv:loc|back($0))
example_end

Sent: excuse me .
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: did you tell him ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|tell(pro|you,pro|him,$0),$0),$0)
example_end

Sent: you run right back out again .
Sem:  lambda $0_{ev}.and(v|run(pro|you,$0),adv|again($0))
example_end

Sent: I don 't need a napkin .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|I,det|a($1,n|napkin($1)),$0),$0),$0)
example_end

Sent: what do you mean ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you can 't have those .
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro:dem|those,$0),$0),$0)
example_end

Sent: would you move ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|move(pro|you,$0),$0),$0)
example_end

Sent: icing .
Sem:  lambda $0_{e}.n|icing($0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: you forgot it .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|you,pro|it,$0)
example_end

Sent: go in and get them .
Sem:  pro|them
example_end

Sent: go in and get them .
Sem:  pro|them
example_end

Sent: shall I put it there ?
Sem:  lambda $0_{ev}.Q(and(aux|shall(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0)),$0)
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: it 's empty .
Sem:  adj|empty(pro|it)
example_end

Sent: wait ?
Sem:  lambda $0_{ev}.Q(v|wait(pro|you,$0),$0)
example_end

Sent: where 's Eve ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
example_end

Sent: I 'm making cookies .
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|cookie-PL($1),$0),$0)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: icing .
Sem:  lambda $0_{e}.n|icing($0)
example_end

Sent: you take it outof the stove .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|stove($1)),$0))
example_end

Sent: don 't put it in there again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|put&ZERO(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: you cannot have it .
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you can 't have it again .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: you can 't have it again .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: you can 't have it anymore .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|anymore($0)),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm decorating the cookies .
Sem:  lambda $0_{ev}.aux|be&1S(part|decorate-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
example_end

Sent: I 'm putting icing on them .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|put-PROG(pro|I,lambda $1_{e}.n|icing($1),$0),$0),prep|on(pro|them,$0))
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: ham ?
Sem:  lambda $0_{e}.n|ham($0)
example_end

Sent: Humm ?
Sem:  lambda $0_{ev}.Q(n:prop|Humm,$0)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: kitty ?
Sem:  lambda $0_{e}.n|kitty($0)
example_end

Sent: Hummthehamster .
Sem:  n:prop|Humm_the_hamster
example_end

Sent: and what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's playing in the sandbox .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|in(det|the($1,n|sandbox($1)),$0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: banana .
Sem:  lambda $0_{e}.n|banana($0)
example_end

Sent: parsley .
Sem:  lambda $0_{e}.n|parsley($0)
example_end

Sent: peanutbutter .
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: goldfish .
Sem:  lambda $0_{e}.n|goldfish($0)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: they 've got a table .
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|they,det|a($1,n|table($1)),$0),$0)
example_end

Sent: they 're eating lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|they,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: but he 's hiding .
Sem:  lambda $0_{ev}.aux|be&3S(part|hide-PROG(pro|he,$0),$0)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: a goldfish .
Sem:  det|a($0,n|goldfish($0))
example_end

Sent: blocks .
Sem:  lambda $0_{e}.n|block-PL($0)
example_end

Sent: Hummthehamster .
Sem:  n:prop|Humm_the_hamster
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: hamburger .
Sem:  lambda $0_{e}.n|hamburger($0)
example_end

Sent: he 's eating what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's eating banana .
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|he,lambda $1_{e}.n|banana($1),$0),$0)
example_end

Sent: bacon .
Sem:  lambda $0_{e}.n|bacon($0)
example_end

Sent: goldfish .
Sem:  lambda $0_{e}.n|goldfish($0)
example_end

Sent: that 's a nice story .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: can you go mmo ?
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
example_end

Sent: can you go mm ?
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
example_end

Sent: Humm .
Sem:  n:prop|Humm
example_end

Sent: Humm .
Sem:  n:prop|Humm
example_end

Sent: can you sing OldMacdonald ?
Sem:  lambda $0_{ev}.Q(aux|can(v|sing(pro|you,n:prop|Old_Macdonald,$0),$0),$0)
example_end

Sent: that 's the sheep .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|sheep($1)),$0)
example_end

Sent: what dropped ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
example_end

Sent: you dropped what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
example_end

Sent: is this FrostytheSnowman ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,n:prop|Frosty_the_Snowman,$0),$0)
example_end

Sent: what 's he holding ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|hold-PROG(pro|he,$0,$1),$1)
example_end

Sent: and they started to roll what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|start-PAST(pro|they,$1),v|roll(pro|they,$0,$1))
example_end

Sent: snowballs .
Sem:  lambda $0_{e}.n|snowball-PL($0)
example_end

Sent: what did they use for the eyes ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|use(pro|they,$0,$1),$1),prep|for(det|the($2,n|eye-PL($2)),$1))
example_end

Sent: pipe .
Sem:  lambda $0_{e}.n|pipe($0)
example_end

Sent: that 's a scarf .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|scarf($1)),$0)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: mittens .
Sem:  lambda $0_{e}.n|mitten-PL($0)
example_end

Sent: what are they building here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|build-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
example_end

Sent: what are they doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
example_end

Sent: skating ?
Sem:  lambda $0_{ev}.Q(part|skate-PROG(pro|you,$0),$0)
example_end

Sent: they 're what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|they,$0,$1)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: the hat came off .
Sem:  lambda $0_{ev}.and(v|come&PAST(det|the($1,n|hat($1)),$0),adv|off($0))
example_end

Sent: that 's not Frostythesnowman .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Frosty_the_snowman,$0),$0)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: he 's the policeman .
Sem:  lambda $0_{ev}.eq(pro|he,det|the($1,n|policeman($1)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a cow .
Sem:  det|a($0,n|cow($0))
example_end

Sent: that 's a duck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
example_end

Sent: and what 's he saying ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(pro|he,$0,$1),$1)
example_end

Sent: chicks .
Sem:  lambda $0_{e}.n|chick-PL($0)
example_end

Sent: donkeys .
Sem:  lambda $0_{e}.n|donkey-PL($0)
example_end

Sent: donkey .
Sem:  lambda $0_{e}.n|donkey($0)
example_end

Sent: and what do they say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|say(pro|they,$0,$1),$1)
example_end

Sent: are they done ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|do&PERF(pro|they,$0),$0),$0)
example_end

Sent: what are these ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: apples .
Sem:  lambda $0_{e}.n|apple-PL($0)
example_end

Sent: apple trees .
Sem:  lambda $0_{e}.and(n|apple($0),n|tree-PL($0))
example_end

Sent: what 's OldMacdonald doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Old_Macdonald,$0,$1),$1),adv:loc|there($1))
example_end

Sent: he 's doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: kitty .
Sem:  lambda $0_{e}.n|kitty($0)
example_end

Sent: elephant .
Sem:  lambda $0_{e}.n|elephant($0)
example_end

Sent: that 's a bunny .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bunny($1)),$0)
example_end

Sent: a bear .
Sem:  det|a($0,n|bear($0))
example_end

Sent: that 's a duck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
example_end

Sent: a doggie ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|dog-DIM($1)),$0)
example_end

Sent: that 's a doggie too .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|dog-DIM($1)),$0)
example_end

Sent: it 's a rooster .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|rooster($1)),$0)
example_end

Sent: what did the rooster say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(det|the($2,n|rooster($2)),$0,$1),$1)
example_end

Sent: cows go mooo  mooo .
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|cow-PL($1),$0)
example_end

Sent: roosters go cockadoodledooo .
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|rooster-PL($1),$0)
example_end

Sent: that 's nice .
Sem:  adj|nice(pro:dem|that)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: it sways .
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
example_end

Sent: it sways .
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: I can see Eve .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: can you see me ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and who does Fraser see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|see(n:prop|Fraser,$0,$1),$1)
example_end

Sent: see Eve .
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Eve,$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you put it back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: it 's the dustpan .
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,n|dustpan($1)),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: would you put it back .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|back($0))
example_end

Sent: I 'll shut the door .
Sem:  lambda $0_{ev}.aux|will(v|shut&ZERO(pro|I,det|the($1,n|door($1)),$0),$0)
example_end

Sent: put it away .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
example_end

Sent: it belongs to Cromer .
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(n:prop|Cromer,$0))
example_end

Sent: icecube trays .
Sem:  lambda $0_{e}.and(n|+n|ice+n|cube($0),n|tray-PL($0))
example_end

Sent: do what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
example_end

Sent: later .
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: later .
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: it 's running fast .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|run-PROG(pro|it,$0),$0),adv|fast($0))
example_end

Sent: you 're going to jump .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: big jump .
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
example_end

Sent: big jump .
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
example_end

Sent: Fraser do it to Eve ?
Sem:  lambda $0_{ev}.Q(and(v|do(n:prop|Fraser,pro|it,$0),prep|to(n:prop|Eve,$0)),$0)
example_end

Sent: what do you mean ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
example_end

Sent: you can jump now .
Sem:  lambda $0_{ev}.and(aux|can(v|jump(pro|you,$0),$0),adv|now($0))
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: you jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: you jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's not a jump .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|jump($1)),$0),$0)
example_end

Sent: this time .
Sem:  det|this($0,n|time($0))
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: jump off the stool .
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
example_end

Sent: jump off the stool .
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
example_end

Sent: I 'm icing the cookies .
Sem:  lambda $0_{ev}.aux|be&1S(part|ice-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
example_end

Sent: you sit on my stool .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|my($1,n|stool($1)),$0))
example_end

Sent: sit right there .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|there($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: kitty .
Sem:  lambda $0_{e}.n|kitty($0)
example_end

Sent: a truck going .
Sem:  lambda $0_{ev}.part|go-PROG(det|a($1,n|truck($1)),$0)
example_end

Sent: plane .
Sem:  lambda $0_{e}.n|plane($0)
example_end

Sent: it has a rooster on top .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,det|a($1,n|rooster($1)),$0),prep|on(lambda $2_{e}.n|top($2),$0))
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: a giraffe .
Sem:  det|a($0,n|giraffe($0))
example_end

Sent: car .
Sem:  lambda $0_{e}.n|car($0)
example_end

Sent: boat .
Sem:  lambda $0_{e}.n|boat($0)
example_end

Sent: a big sailboat .
Sem:  det|a($0,and(adj|big($0),n|sailboat($0)))
example_end

Sent: what are these ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: cats .
Sem:  lambda $0_{e}.n|cat-PL($0)
example_end

Sent: and what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: what are the cats doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: that 's a flower .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|flower($1)),$0)
example_end

Sent: what are the cats doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
example_end

Sent: this hat 's a round hat .
Sem:  lambda $0_{ev}.eq(det|this($1,n|hat($1)),det|a($2,and(adj|round($2),n|hat($2))),$0)
example_end

Sent: horsie .
Sem:  lambda $0_{e}.n|horse-DIM($0)
example_end

Sent: what 's the horsie doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
example_end

Sent: what is the horsie doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: that 's a truck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|truck($1)),$0)
example_end

Sent: and the horsie is pulling the truck .
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(det|the($1,n|horse-DIM($1)),det|the($2,n|truck($2)),$0),$0)
example_end

Sent: horsie is pulling the truck .
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(lambda $1_{e}.n|horse-DIM($1),det|the($2,n|truck($2)),$0),$0)
example_end

Sent: what are they doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
example_end

Sent: they 're splashing .
Sem:  lambda $0_{ev}.aux|be&PRES(part|splash-PROG(pro|they,$0),$0)
example_end

Sent: what are these people doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|these($2,n|person&PL($2)),$0,$1),$1)
example_end

Sent: they 're digging a hole .
Sem:  lambda $0_{ev}.aux|be&PRES(part|dig-PROG(pro|they,det|a($1,n|hole($1)),$0),$0)
example_end

Sent: bug .
Sem:  lambda $0_{e}.n|bug($0)
example_end

Sent: what 's this man doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|this($2,n|man($2)),$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's making popcorn .
Sem:  lambda $0_{ev}.aux|be&3S(part|make-PROG(pro|he,lambda $1_{e}.n|popcorn($1),$0),$0)
example_end

Sent: baby .
Sem:  lambda $0_{e}.n|baby($0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: smell flower .
Sem:  lambda $0_{ev}.v|smell(pro|you,lambda $1_{e}.n|flower($1),$0)
example_end

Sent: smelling the flower .
Sem:  lambda $0_{ev}.part|smell-PROG(pro|you,det|the($1,n|flower($1)),$0)
example_end

Sent: kiss it .
Sem:  lambda $0_{ev}.v|kiss(pro|you,pro|it,$0)
example_end

Sent: you wipe it off the table .
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|table($1)),$0))
example_end

Sent: do one for Mommy .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro:indef|one,$0),prep|for(n:prop|Mommy,$0))
example_end

Sent: the heat ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|heat($1)),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: did you do that ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: did you do that ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 'll you write ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will(v|write(pro|you,$0,$1),$1)
example_end

Sent: it 's a stylus .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|stylus($1)),$0)
example_end

Sent: you do something .
Sem:  lambda $0_{ev}.v|do(pro|you,pro:indef|something,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: what do we do now then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|we,$0,$1),$1),adv:tem|then($1))
example_end

Sent: what 's Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: what 's Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: draw lady ?
Sem:  lambda $0_{ev}.Q(v|draw(pro|you,lambda $1_{e}.n|lady($1),$0),$0)
example_end

Sent: OldMacdonald .
Sem:  n:prop|Old_Macdonald
example_end

Sent: Fraser ?
Sem:  lambda $0_{ev}.Q(n:prop|Fraser,$0)
example_end

Sent: what are you writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|write-PROG(pro|you,$0,$1),$1)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: she 's hungry .
Sem:  adj|hungry(pro|she)
example_end

Sent:  well she 's crying .
Sem:  lambda $0_{ev}.aux|be&3S(part|cry-PROG(pro|she,$0),$0)
example_end

Sent: she 's not sleeping .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(pro|she,$0),$0),$0)
example_end

Sent: who 's crying ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|cry-PROG($0,$1),$1)
example_end

Sent: is that your horse ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|horse($1)),$0),$0)
example_end

Sent: what do you do on your horse ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|on(pro:poss:det|your($2,n|horse($2)),$1))
example_end

Sent: is this my pencil ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pencil($1)),$0),$0)
example_end

Sent: is this your pencil ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|your($1,n|pencil($1)),$0),$0)
example_end

Sent: where 's your pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: is that a nice bed ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,and(adj|nice($1),n|bed($1))),$0),$0)
example_end

Sent: you go to sleep .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),v|sleep(pro|you,$0))
example_end

Sent: you have a nice nap .
Sem:  lambda $0_{ev}.v|have(pro|you,det|a($1,and(adj|nice($1),n|nap($1))),$0)
example_end

Sent: carry Eve ?
Sem:  lambda $0_{ev}.Q(v|carry(pro|you,n:prop|Eve,$0),$0)
example_end

Sent: lay down .
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
example_end

Sent: are you having bowels ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.n|bowel-PL($1),$0),$0),$0)
example_end

Sent: Papa change her .
Sem:  lambda $0_{ev}.v|change(n:prop|Papa,pro|her,$0)
example_end

Sent: Eve 's laying down .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|lay-PROG(n:prop|Eve,$0),$0),adv:loc|down($0))
example_end

Sent: can I buy her ?
Sem:  lambda $0_{ev}.Q(aux|can(v|buy(pro|I,pro|her,$0),$0),$0)
example_end

Sent: where 's your penny ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|penny($1)),$0)
example_end

Sent: fire ?
Sem:  lambda $0_{e}.n|fire($0)
example_end

Sent: your penny ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|penny($1)),$0)
example_end

Sent: and move horsie .
Sem:  lambda $0_{ev}.v|move(pro|you,lambda $1_{e}.n|horse-DIM($1),$0)
example_end

Sent: move him .
Sem:  lambda $0_{ev}.v|move(pro|you,pro|him,$0)
example_end

Sent: move him away from the fire .
Sem:  lambda $0_{ev}.and(v|move(pro|you,pro|him,$0),prep|from(det|the($1,n|fire($1)),$0))
example_end

Sent: did you feed dolly ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|feed(pro|you,lambda $1_{e}.n|doll-DIM($1),$0),$0),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: the turtle 's name is Froggy ?
Sem:  lambda $0_{ev}.Q(eq(det|the($1,and(n|turtle($1),n|name($1))),n:prop|Froggy,$0),$0)
example_end

Sent: is the turtle 's name Froggy ?
Sem:  lambda $0_{ev}.Q(eq(det|the($1,and(n|turtle($1),n|name($1))),n:prop|Froggy,$0),$0)
example_end

Sent: you want me to play ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|play(pro|you,$0)),$0)
example_end

Sent: can you play ?
Sem:  lambda $0_{ev}.Q(aux|can(v|play(pro|you,$0),$0),$0)
example_end

Sent: you play .
Sem:  lambda $0_{ev}.v|play(pro|you,$0)
example_end

Sent: can you get it ?
Sem:  lambda $0_{ev}.Q(aux|can(v|get(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Papa 'll get it .
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Papa,pro|it,$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: I 'll get more sugar .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|I,qn|more($1,n|sugar($1)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what are you gonna do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: jump off the table .
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|table($1)),$0))
example_end

Sent: good jump .
Sem:  lambda $0_{e}.and(adj|good($0),n|jump($0))
example_end

Sent: who 's coming ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|come-PROG($0,$1),$1)
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: having tapioca .
Sem:  lambda $0_{ev}.part|have-PROG(pro|you,lambda $1_{e}.n|tapioca($1),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is the stool ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|stool($1)),$0)
example_end

Sent: cheese ?
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: you 'll have a cheese sandwich .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|you,det|a($1,and(n|cheese($1),n|sandwich($1))),$0),$0)
example_end

Sent: you had a cheese sandwich .
Sem:  lambda $0_{ev}.v|have&PAST(pro|you,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's not the cheese sandwich .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,and(n|cheese($1),n|sandwich($1))),$0),$0)
example_end

Sent: a whole week .
Sem:  det|a($0,and(adj|whole($0),n|week($0)))
example_end

Sent: that 's my stool .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|stool($1)),$0)
example_end

Sent: you 're sitting on my stool .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|sit-PROG(pro|you,$0),$0),prep|on(pro:poss:det|my($1,n|stool($1)),$0))
example_end

Sent: you have a highchair .
Sem:  lambda $0_{ev}.v|have(pro|you,det|a($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: highchair .
Sem:  lambda $0_{e}.n|+adj|high+n|chair($0)
example_end

Sent: you have a little stool .
Sem:  lambda $0_{ev}.v|have(pro|you,det|a($1,and(adj|little($1),n|stool($1))),$0)
example_end

Sent: move your highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's my stool .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|stool($1)),$0)
example_end

Sent: my stool .
Sem:  pro:poss:det|my($0,n|stool($0))
example_end

Sent: move your highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: that 's your highchair .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: is it cold ?
Sem:  lambda $0_{ev}.Q(adj|cold(pro|it),$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: Papa went upstairs .
Sem:  lambda $0_{ev}.and(v|go&PAST(n:prop|Papa,$0),adv:loc|upstairs($0))
example_end

Sent: then she 'll wake up .
Sem:  lambda $0_{ev}.and(aux|will(v|wake(pro|she,$0),$0),adv:loc|up($0))
example_end

Sent: would you like a carrot ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|carrot($1)),$0),$0),$0)
example_end

Sent: a olive ?  RES
Sem:  det|a($0,n|olive($0))
example_end

Sent: what would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: breakfast ?
Sem:  lambda $0_{e}.n|breakfast($0)
example_end

Sent: he comes .
Sem:  lambda $0_{ev}.v|come-3S(pro|he,$0)
example_end

Sent: he comes .
Sem:  lambda $0_{ev}.v|come-3S(pro|he,$0)
example_end

Sent: I missed the first word .
Sem:  lambda $0_{ev}.v|miss-PAST(pro|I,det|the($1,and(adj|first($1),n|word($1))),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's a string .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|string($1)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: can I have a string ?
Sem:  lambda $0_{ev}.Q(aux|can(v|have(pro|I,det|a($1,n|string($1)),$0),$0),$0)
example_end

Sent: she is waking up .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|wake-PROG(pro|she,$0),$0),adv:loc|up($0))
example_end

Sent: she 's hungry .
Sem:  adj|hungry(pro|she)
example_end

Sent: I 'll come right back ?
Sem:  lambda $0_{ev}.Q(and(aux|will(v|come(pro|I,$0),$0),adv:loc|back($0)),$0)
example_end

Sent: I 'm not going away .
Sem:  lambda $0_{ev}.not(and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv|away($0)),$0)
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you sound like a firetruck .
Sem:  lambda $0_{ev}.and(v|sound(pro|you,$0),prep|like(det|a($1,n|firetruck($1)),$0))
example_end

Sent: where 's the fire ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|fire($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: where is Eve ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
example_end

Sent: she forget her pencil .
Sem:  lambda $0_{ev}.v|forget(pro|she,pro:poss:det|her($1,n|pencil($1)),$0)
example_end

Sent: what do you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|say(pro|you,$0,$1),$1)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: you 're swimming ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|swim-PROG(pro|you,$0),$0),$0)
example_end

Sent: will I fix the paper ?
Sem:  lambda $0_{ev}.Q(aux|will(v|fix(pro|I,det|the($1,n|paper($1)),$0),$0),$0)
example_end

Sent: are you comfortable ?
Sem:  lambda $0_{ev}.Q(adj|comfortable(pro|you),$0)
example_end

Sent: where 's the water ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|water($1)),$0)
example_end

Sent: that 's nice .
Sem:  adj|nice(pro:dem|that)
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: you 're swimming ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|swim-PROG(pro|you,$0),$0),$0)
example_end

Sent: swimming in the bathtub .
Sem:  lambda $0_{ev}.and(part|swim-PROG(pro|you,$0),prep|in(det|the($1,n|+n|bath+n|tub($1)),$0))
example_end

Sent: but you 're laying on the couch .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lay-PROG(pro|you,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: you swim in the bathtub .
Sem:  lambda $0_{ev}.and(v|swim(pro|you,$0),prep|in(det|the($1,n|+n|bath+n|tub($1)),$0))
example_end

Sent: you hurt your knee .
Sem:  lambda $0_{ev}.v|hurt&ZERO(pro|you,pro:poss:det|your($1,n|knee($1)),$0)
example_end

Sent: that 's a paper bag .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|paper($1),n|bag($1))),$0)
example_end

Sent: that 's a bag .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bag($1)),$0)
example_end

Sent: letter ?
Sem:  lambda $0_{e}.n|letter($0)
example_end

Sent: what do you have on your finger ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|have(pro|you,$0,$1),$1),prep|on(pro:poss:det|your($2,n|finger($2)),$1))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you went to a party yesterday ?
Sem:  lambda $0_{ev}.Q(and(v|go&PAST(pro|you,$0),adv:tem|yesterday($0)),$0)
example_end

Sent: lots of sneezes .
Sem:  qn|lots($0,n|sneeze-PL($0))
example_end

Sent: sneeze .
Sem:  lambda $0_{ev}.v|sneeze(pro|you,$0)
example_end

Sent: I 've got you now .
Sem:  lambda $0_{ev}.and(aux|have(part|get&PERF(pro|I,pro|you,$0),$0),adv|now($0))
example_end

Sent: you gonna sit down ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),adv:loc|down($0)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: Fraser 's sitting down .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Fraser,$0),$0),adv:loc|down($0))
example_end

Sent: who else is sitting down ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|sit-PROG($0,$1),$1),adv:loc|down($1))
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: is horsie sitting down ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|sit-PROG(lambda $1_{e}.n|horse-DIM($1),$0),$0),adv:loc|down($0)),$0)
example_end

Sent: Becky ?
Sem:  lambda $0_{ev}.Q(n:prop|Becky,$0)
example_end

Sent: he 's busy .
Sem:  adj|busy(pro|he)
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: you must find it ?
Sem:  lambda $0_{ev}.Q(aux|must(v|find(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Fraser needs his pencil .
Sem:  lambda $0_{ev}.v|need-3S(n:prop|Fraser,pro:poss:det|his($1,n|pencil($1)),$0)
example_end

Sent: he 's going to the basement .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|he,$0),$0),prep|to(det|the($1,n|basement($1)),$0))
example_end

Sent: you can ride horsie .
Sem:  lambda $0_{ev}.aux|can(v|ride(pro|you,lambda $1_{e}.n|horse-DIM($1),$0),$0)
example_end

Sent: that 's more fun .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|more($1,n|fun($1)),$0)
example_end

Sent: you going to see Judy ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),v|see(pro|you,n:prop|Judy,$0)),$0)
example_end

Sent: what are you doing to dolly ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(lambda $2_{e}.n|doll-DIM($2),$1))
example_end

Sent: you 're squashing her .
Sem:  lambda $0_{ev}.aux|be&PRES(part|squash-PROG(pro|you,pro|her,$0),$0)
example_end

Sent: you 're squashing dolly .
Sem:  lambda $0_{ev}.aux|be&PRES(part|squash-PROG(pro|you,lambda $1_{e}.n|doll-DIM($1),$0),$0)
example_end

Sent: you 're noisy .
Sem:  adj|noisy(pro|you)
example_end

Sent: wipe your mouth .
Sem:  lambda $0_{ev}.v|wipe(pro|you,pro:poss:det|your($1,n|mouth($1)),$0)
example_end

Sent: grape juice .
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
example_end

Sent: make a tower .
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|tower($1)),$0)
example_end

Sent: make a tower .
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|tower($1)),$0)
example_end

Sent: put a block on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|a($1,n|block($1)),$0),adv|on($0))
example_end

Sent: put another block on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,qn|another($1,n|block($1)),$0),adv|on($0))
example_end

Sent: big tower .
Sem:  lambda $0_{e}.and(adj|big($0),n|tower($0))
example_end

Sent: little tower ?
Sem:  lambda $0_{e}.and(adj|little($0),n|tower($0))
example_end

Sent: that 's a reel .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|reel($1)),$0)
example_end

Sent: that 's my briefcase .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|briefcase($1)),$0)
example_end

Sent: is that your briefcase ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|briefcase($1)),$0),$0)
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: your can ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|can($1)),$0)
example_end

Sent: you put some water in it .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,qn|some($1,n|water($1)),$0),prep|in(pro|it,$0))
example_end

Sent: you put it in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|in($0))
example_end

Sent: I 'm shoving some pans around .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|shove-PROG(pro|I,qn|some($1,n|pan-PL($1)),$0),$0),adv:loc|around($0))
example_end

Sent: Papa ?
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
example_end

Sent: you have a mouthful ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,det|a($1,n|mouth-FULL($1)),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: eating ?
Sem:  lambda $0_{ev}.Q(part|eat-PROG(pro|you,$0),$0)
example_end

Sent: you like that ?
Sem:  lambda $0_{ev}.Q(v|like(pro|you,pro:dem|that,$0),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: he came back .
Sem:  lambda $0_{ev}.and(v|come&PAST(pro|he,$0),adv:loc|back($0))
example_end

Sent: what 's that mess ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|mess($2)),$1)
example_end

Sent: isn 't it good ?
Sem:  lambda $0_{ev}.Q(not(adj|good(pro|it),$0),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: you 're sitting on my  stool .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|sit-PROG(pro|you,$0),$0),prep|on(pro:poss:det|my($1,n|stool($1)),$0))
example_end

Sent: it 's a pickle .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|pickle($1)),$0)
example_end

Sent: do you want one ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:indef|one,$0),$0),$0)
example_end

Sent: you may have one .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro:indef|one,$0),$0)
example_end

Sent: you may take one .
Sem:  lambda $0_{ev}.aux|may(v|take(pro|you,pro:indef|one,$0),$0)
example_end

Sent: candy ?
Sem:  lambda $0_{e}.n|candy($0)
example_end

Sent: do you want a napkin too .
Sem:  lambda $0_{ev}.aux|do(v|want(pro|you,det|a($1,n|napkin($1)),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you 've got one .
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|you,pro:indef|one,$0),$0)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: that 's my nose .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|nose($1)),$0)
example_end

Sent: wipe your nose ?
Sem:  lambda $0_{ev}.Q(v|wipe(pro|you,pro:poss:det|your($1,n|nose($1)),$0),$0)
example_end

Sent: can you blow ?
Sem:  lambda $0_{ev}.Q(aux|can(v|blow(pro|you,$0),$0),$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: tomorrow .
Sem:  lambda $0_{ev}.adv:tem|tomorrow($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: I had sugar in my coffee .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|I,lambda $1_{e}.n|sugar($1),$0),prep|in(pro:poss:det|my($2,n|coffee($2)),$0))
example_end

Sent: I don 't need any more sugar .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|I,qn|more($1,n|sugar($1)),$0),$0),$0)
example_end

Sent: I 'll just have some coffee .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|I,qn|some($1,n|coffee($1)),$0),$0),adv:int|just($0))
example_end

Sent: I forgot a spoon ?
Sem:  lambda $0_{ev}.Q(v|forget&PAST(pro|I,det|a($1,n|spoon($1)),$0),$0)
example_end

Sent: you don 't need one .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,pro:indef|one,$0),$0),$0)
example_end

Sent: it 's moving again .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|move-PROG(pro|it,$0),$0),adv|again($0))
example_end

Sent: look at the rockingchair .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(det|the($1,n|+n|rocking+n|chair($1)),$0))
example_end

Sent: it 's doing it again .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|do-PROG(pro|it,pro|it,$0),$0),adv|again($0))
example_end

Sent: it goes again .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),adv|again($0))
example_end

Sent: what 's that rockingchair doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|that($2,n|+n|rocking+n|chair($2)),$0,$1),$1)
example_end

Sent: it 's dancing .
Sem:  lambda $0_{ev}.aux|be&3S(part|dance-PROG(pro|it,$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: Mommy 'll wipe your nose .
Sem:  lambda $0_{ev}.aux|will(v|wipe(n:prop|Mommy,pro:poss:det|your($1,n|nose($1)),$0),$0)
example_end

Sent: blow again ?
Sem:  lambda $0_{ev}.Q(and(v|blow(pro|you,$0),adv|again($0)),$0)
example_end

Sent: Mommy 's making coffee .
Sem:  lambda $0_{ev}.aux|be&3S(part|make-PROG(n:prop|Mommy,lambda $1_{e}.n|coffee($1),$0),$0)
example_end

Sent: you sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: you sing rockabye baby .
Sem:  lambda $0_{ev}.v|sing(pro|you,lambda $1_{e}.n|baby($1),$0)
example_end

Sent: pick it out .
Sem:  lambda $0_{ev}.and(v|pick(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: is your grape juice allgone ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: do what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
example_end

Sent: take one .
Sem:  lambda $0_{ev}.v|take(pro|you,pro:indef|one,$0)
example_end

Sent: I 'll put it in .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|in($0))
example_end

Sent: you read it to me ?
Sem:  lambda $0_{ev}.Q(and(v|read&ZERO(pro|you,pro|it,$0),prep|to(pro|me,$0)),$0)
example_end

Sent: you read it .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,pro|it,$0)
example_end

Sent: that 's not a tiger .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|tiger($1)),$0),$0)
example_end

Sent: that 's a zebra .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|zebra($1)),$0)
example_end

Sent: you read Lassie .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Lassie,$0)
example_end

Sent: Eve will read Fraser Lassie .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(n:prop|Eve,n:prop|Fraser,n:prop|Lassie,$0),$0)
example_end

Sent: Eve will read Lassie .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(n:prop|Eve,n:prop|Lassie,$0),$0)
example_end

Sent: will Eve read Fraser Lassie ?
Sem:  lambda $0_{ev}.Q(aux|will(v|read&ZERO(n:prop|Eve,n:prop|Fraser,n:prop|Lassie,$0),$0),$0)
example_end

Sent: will Fraser read Eve Lassie ?
Sem:  lambda $0_{ev}.Q(aux|will(v|read&ZERO(n:prop|Fraser,n:prop|Eve,n:prop|Lassie,$0),$0),$0)
example_end

Sent: will Fraser read Lassie Eve ?
Sem:  lambda $0_{ev}.Q(aux|will(v|read&ZERO(n:prop|Fraser,n:prop|Lassie,n:prop|Eve,$0),$0),$0)
example_end

Sent: wipe your nose ?
Sem:  lambda $0_{ev}.Q(v|wipe(pro|you,pro:poss:det|your($1,n|nose($1)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that noise ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|noise($2)),$1)
example_end

Sent: what did Lassie do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(n:prop|Lassie,$0,$1),$1)
example_end

Sent: we put tape on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|we,lambda $1_{e}.n|tape($1),$0),adv|on($0))
example_end

Sent: we fixed the book .
Sem:  lambda $0_{ev}.v|fix-PAST(pro|we,det|the($1,n|book($1)),$0)
example_end

Sent: we put tape on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|we,lambda $1_{e}.n|tape($1),$0),adv|on($0))
example_end

Sent: we fixed the book .
Sem:  lambda $0_{ev}.v|fix-PAST(pro|we,det|the($1,n|book($1)),$0)
example_end

Sent: she had a nice nap .
Sem:  lambda $0_{ev}.v|have&PAST(pro|she,det|a($1,and(adj|nice($1),n|nap($1))),$0)
example_end

Sent: that 's her bed .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|her($1,n|bed($1)),$0)
example_end

Sent: put it on the floor for Eve ?
Sem:  lambda $0_{ev}.Q(and(v|put&ZERO(pro|you,pro|it,$0),prep|for(n:prop|Eve,$0)),$0)
example_end

Sent: you read Lassie .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,n:prop|Lassie,$0)
example_end

Sent: get the big stool .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,and(adj|big($1),n|stool($1))),$0)
example_end

Sent: that 's the little stool .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(adj|little($1),n|stool($1))),$0)
example_end

Sent: get the big stool .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,and(adj|big($1),n|stool($1))),$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: changing her diaper .
Sem:  lambda $0_{ev}.part|change-PROG(pro|you,pro:poss:det|her($1,n|diaper($1)),$0)
example_end

Sent: big stool .
Sem:  lambda $0_{e}.and(adj|big($0),n|stool($0))
example_end

Sent: that 's not the big stool .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,and(adj|big($1),n|stool($1))),$0),$0)
example_end

Sent: she gonna burp .
Sem:  lambda $0_{ev}.and(part|go-PROG(pro|she,$0),v|burp(pro|she,$0))
example_end

Sent: that 's the nipple .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|nipple($1)),$0)
example_end

Sent: we 'll get your highchair .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|we,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),$0)
example_end

Sent: you don 't want it .
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|you,pro|it,$0),$0),$0)
example_end

Sent: eat on the table ?
Sem:  lambda $0_{ev}.Q(and(v|eat(pro|you,$0),prep|on(det|the($1,n|table($1)),$0)),$0)
example_end

Sent: she 's thirsty .
Sem:  adj|thirsty(pro|she)
example_end

Sent: she 's thirsty .
Sem:  adj|thirsty(pro|she)
example_end

Sent: EveCummings .
Sem:  n:prop|Eve_Cummings
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Sarah 's drinking it .
Sem:  lambda $0_{ev}.aux|be&3S(part|drink-PROG(n:prop|Sarah,pro|it,$0),$0)
example_end

Sent: it 's going in her tummy .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),prep|in(pro:poss:det|her($1,n|tummy($1)),$0))
example_end

Sent: you try again ?
Sem:  lambda $0_{ev}.Q(and(v|try(pro|you,$0),adv|again($0)),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: eating what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|eat-PROG(pro|you,$0,$1)
example_end

Sent: eating your sweater ?
Sem:  lambda $0_{ev}.Q(part|eat-PROG(pro|you,pro:poss:det|your($1,n|sweater($1)),$0),$0)
example_end

Sent: drinking what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|drink-PROG(pro|you,$0,$1)
example_end

Sent: she 's thirsty .
Sem:  adj|thirsty(pro|she)
example_end

Sent: what are you trying to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|try-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: some bottle ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|bottle($1)),$0)
example_end

Sent: we 'll give you some bottle .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|we,pro|you,qn|some($1,n|bottle($1)),$0),$0)
example_end

Sent: we 'll give Eve some bottle .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|we,n:prop|Eve,qn|some($1,n|bottle($1)),$0),$0)
example_end

Sent: we 'll give Eve some bottle .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|we,n:prop|Eve,qn|some($1,n|bottle($1)),$0),$0)
example_end

Sent: you 're silly .
Sem:  adj|silly(pro|you)
example_end

Sent: do you like it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: is that good ?
Sem:  lambda $0_{ev}.Q(adj|good(pro:dem|that),$0)
example_end

Sent: do you like it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you drinking ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|drink-PROG(pro|you,$0,$1),$1)
example_end

Sent: you take it to Mama .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|to(n:prop|Mama,$0))
example_end

Sent: you take it to Mama .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|to(n:prop|Mama,$0))
example_end

Sent: Eve had a turn .
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Eve,det|a($1,n|turn($1)),$0)
example_end

Sent: he 's big .
Sem:  adj|big(pro|he)
example_end

Sent: you have a turn after Sarah .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|turn($1)),$0),prep|after(n:prop|Sarah,$0))
example_end

Sent: just wait for a minute .
Sem:  lambda $0_{ev}.and(v|wait(pro|you,$0),prep|for(det|a($1,n|minute($1)),$0))
example_end

Sent: tapioca ?
Sem:  lambda $0_{e}.n|tapioca($0)
example_end

Sent: what do you have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|have(pro|you,$0,$1),$1)
example_end

Sent: where is Papa ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: he 's working .
Sem:  lambda $0_{ev}.aux|be&3S(part|work-PROG(pro|he,$0),$0)
example_end

Sent: he 's busy .
Sem:  adj|busy(pro|he)
example_end

Sent: that 's not yours .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss|yours,$0),$0)
example_end

Sent: whose is that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: is that good ?
Sem:  lambda $0_{ev}.Q(adj|good(pro:dem|that),$0)
example_end

Sent: do you like it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you have a turn after Sarah .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|turn($1)),$0),prep|after(n:prop|Sarah,$0))
example_end

Sent: you may have another turn .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,qn|another($1,n|turn($1)),$0),$0)
example_end

Sent: where is Papa ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: you slipped on my leg .
Sem:  lambda $0_{ev}.and(v|slip-PAST(pro|you,$0),prep|on(pro:poss:det|my($1,n|leg($1)),$0))
example_end

Sent: you slipped .
Sem:  lambda $0_{ev}.v|slip-PAST(pro|you,$0)
example_end

Sent: slipped  .
Sem:  lambda $0_{ev}.v|slip-PAST(pro|you,$0)
example_end

Sent: first Sarah has a turn .
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Sarah,det|a($1,n|turn($1)),$0),adv|first($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: her hair ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|her($1,n|hair($1)),$0)
example_end

Sent: button ?
Sem:  lambda $0_{e}.n|button($0)
example_end

Sent: where is your penny ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|penny($1)),$0)
example_end

Sent: where is your penny ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|penny($1)),$0)
example_end

Sent: I see it by the table .
Sem:  lambda $0_{ev}.and(v|see(pro|I,pro|it,$0),prep|by(det|the($1,n|table($1)),$0))
example_end

Sent: see it ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: got your penny ?
Sem:  lambda $0_{ev}.Q(part|get&PERF(pro|you,pro:poss:det|your($1,n|penny($1)),$0),$0)
example_end

Sent: are they allgone ?
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|they),$0)
example_end

Sent: is she ?
Sem:  lambda $0_{ev}.Q(pro|she,$0)
example_end

Sent: and Mommy drinks coffee outof a cup too .
Sem:  lambda $0_{ev}.and(v|drink-3S(n:prop|Mommy,lambda $1_{e}.n|coffee($1),$0),prep|out_of(det|a($2,n|cup($2)),$0))
example_end

Sent: look at that .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro:dem|that,$0))
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: you put it back on the table .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: mixing coffee ?
Sem:  lambda $0_{ev}.Q(part|mix-PROG(pro|you,lambda $1_{e}.n|coffee($1),$0),$0)
example_end

Sent: you put it back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: put it back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: making cookies ?
Sem:  lambda $0_{ev}.Q(part|make-PROG(pro|you,lambda $1_{e}.n|cookie-PL($1),$0),$0)
example_end

Sent: you want paper ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
example_end

Sent: here ? .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: Mama 's fixing it .
Sem:  lambda $0_{ev}.aux|be&3S(part|fix-PROG(n:prop|Mama,pro|it,$0),$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: I see Eve .
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
example_end

Sent: you said it before .
Sem:  lambda $0_{ev}.and(v|say&PAST(pro|you,pro|it,$0),adv|before($0))
example_end

Sent: Danny .
Sem:  n:prop|Danny
example_end

Sent: that 's a man .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
example_end

Sent: not Danny .
Sem:  lambda $0_{ev}.not(n:prop|Danny,$0)
example_end

Sent: Clipclop .
Sem:  n:prop|Clip_clop
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: where is he ?
Sem:  lambda $0_{e}.eqLoc(pro|he,$0)
example_end

Sent: that 's not Danny .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Danny,$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: where is Clipclop ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Clip_clop,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: not Danny .
Sem:  lambda $0_{ev}.not(n:prop|Danny,$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: bring the cup .
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
example_end

Sent: bring me your cup .
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: you can 't carry her .
Sem:  lambda $0_{ev}.not(aux|can(v|carry(pro|you,pro|her,$0),$0),$0)
example_end

Sent: you sit down on the pillow .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
example_end

Sent: you sit down on the pillow .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
example_end

Sent: sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: then you can hold her .
Sem:  lambda $0_{ev}.and(aux|can(v|hold(pro|you,pro|her,$0),$0),adv:tem|then($0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's Eve doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Eve,$0,$1),$1)
example_end

Sent: she 's heavy .
Sem:  adj|heavy(pro|she)
example_end

Sent: wait .
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
example_end

Sent: you can hold her .
Sem:  lambda $0_{ev}.aux|can(v|hold(pro|you,pro|her,$0),$0)
example_end

Sent: she 's heavy .
Sem:  adj|heavy(pro|she)
example_end

Sent: she 's heavy .
Sem:  adj|heavy(pro|she)
example_end

Sent: you can hold her .
Sem:  lambda $0_{ev}.aux|can(v|hold(pro|you,pro|her,$0),$0)
example_end

Sent: you sit on the pillow .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: almost .
Sem:  lambda $0_{ev}.adv|almost($0)
example_end

Sent: almost .
Sem:  lambda $0_{ev}.adv|almost($0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: do what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
example_end

Sent: what do you want me to do .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: do what to Eve ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|do(pro|you,$0,$1),prep|to(n:prop|Eve,$1))
example_end

Sent: ringing ?
Sem:  lambda $0_{ev}.Q(part|ring-PROG(pro|you,$0),$0)
example_end

Sent: ringing ?
Sem:  lambda $0_{ev}.Q(part|ring-PROG(pro|you,$0),$0)
example_end

Sent: ringing ?
Sem:  lambda $0_{ev}.Q(part|ring-PROG(pro|you,$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: ringing ?
Sem:  lambda $0_{ev}.Q(part|ring-PROG(pro|you,$0),$0)
example_end

Sent: you don 't have a ring .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|you,det|a($1,n|ring($1)),$0),$0),$0)
example_end

Sent: wipe your face .
Sem:  lambda $0_{ev}.v|wipe(pro|you,pro:poss:det|your($1,n|face($1)),$0)
example_end

Sent: you put it back on the table .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: I 'll bring the coffee in there .
Sem:  lambda $0_{ev}.and(aux|will(v|bring(pro|I,det|the($1,n|coffee($1)),$0),$0),adv:loc|in($0))
example_end

Sent: bring the coffee in there .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|coffee($1)),$0),adv:loc|in($0))
example_end

Sent: may I have some sugar ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,qn|some($1,n|sugar($1)),$0),$0),$0)
example_end

Sent: it fell ?
Sem:  lambda $0_{ev}.Q(v|fall&PAST(pro|it,$0),$0)
example_end

Sent: be a horsie .
Sem:  det|a($0,n|horse-DIM($0))
example_end

Sent: be Clipclop .
Sem:  n:prop|Clip_clop
example_end

Sent: Marcia 's Goldrush .
Sem:  lambda $0_{ev}.eq(n:prop|Marcia,n:prop|Goldrush,$0)
example_end

Sent: you can 't be Goldrush .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Goldrush,$0)
example_end

Sent: Marcia 's Goldrush .
Sem:  lambda $0_{ev}.eq(n:prop|Marcia,n:prop|Goldrush,$0)
example_end

Sent: you can 't be Goldrush .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Goldrush,$0)
example_end

Sent: Marcia 's Goldrush .
Sem:  lambda $0_{ev}.eq(n:prop|Marcia,n:prop|Goldrush,$0)
example_end

Sent: Tequita ?
Sem:  lambda $0_{ev}.Q(n:prop|Tequita,$0)
example_end

Sent: put it back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: put it back in the corner .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|corner($1)),$0))
example_end

Sent: put it in the corner .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|corner($1)),$0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: now leave it alone .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro|it,$0),adv|alone($0))
example_end

Sent: take your finger off .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:poss:det|your($1,n|finger($1)),$0),adv|off($0))
example_end

Sent: then put it away .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
example_end

Sent: leave it alone .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro|it,$0),adv|alone($0))
example_end

Sent: don 't touch it again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|touch(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: a hammer ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|hammer($1)),$0)
example_end

Sent: and what do you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|do(pro|you,$0,$1),$1)
example_end

Sent: your name 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:poss:det|your($2,n|name($2)),$0,$1)
example_end

Sent: what is your name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|your($2,n|name($2)),$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: it sounds like Linda .
Sem:  lambda $0_{ev}.and(v|sound-3S(pro|it,$0),prep|like(n:prop|Linda,$0))
example_end

Sent: what was your name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|your($2,n|name($2)),$1)
example_end

Sent: what is your name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|your($2,n|name($2)),$1)
example_end

Sent: you dropped it .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
example_end

Sent: it didn 't fall .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|fall(pro|it,$0),$0),$0)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: your name isn 't Linda .
Sem:  lambda $0_{ev}.not(eq(pro:poss:det|your($1,n|name($1)),n:prop|Linda,$0),$0)
example_end

Sent: your name 's what .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:poss:det|your($2,n|name($2)),$0,$1)
example_end

Sent: red bicycle ?
Sem:  lambda $0_{e}.and(adj|red($0),n|bicycle($0))
example_end

Sent: whose coffee ?
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: keep your nose out .
Sem:  lambda $0_{ev}.and(v|keep(pro|you,pro:poss:det|your($1,n|nose($1)),$0),adv:loc|out($0))
example_end

Sent: he has a napkin .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|napkin($1)),$0)
example_end

Sent: mine  .
Sem:  pro:poss|mine
example_end

Sent: feed the animals .
Sem:  lambda $0_{ev}.v|feed(pro|you,det|the($1,n|animal-PL($1)),$0)
example_end

Sent: the raccoons are doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|raccoon-PL($2)),$0,$1),$1)
example_end

Sent: eating popcorn .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|popcorn($1),$0)
example_end

Sent: he has a hat on .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|he,det|a($1,n|hat($1)),$0),adv|on($0))
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: is he giving giraffe hay ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|give-PROG(pro|he,lambda $1_{e}.n|giraffe($1),lambda $2_{e}.n|hay($2),$0),$0),$0)
example_end

Sent: is he giving hay giraffe ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|give-PROG(pro|he,lambda $1_{e}.n|hay($1),lambda $2_{e}.n|giraffe($2),$0),$0),$0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he got what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|get&PAST(pro|he,$0,$1)
example_end

Sent: he got what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|get&PAST(pro|he,$0,$1)
example_end

Sent: dog barking ?
Sem:  lambda $0_{ev}.Q(part|bark-PROG(lambda $1_{e}.n|dog($1),$0),$0)
example_end

Sent: I 'm not sure .
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
example_end

Sent: is he giving the elephant bread ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|give-PROG(pro|he,det|the($1,n|elephant($1)),lambda $2_{e}.n|bread($2),$0),$0),$0)
example_end

Sent: is he giving bread elephant ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|give-PROG(pro|he,lambda $1_{e}.n|bread($1),lambda $2_{e}.n|elephant($2),$0),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: your spoon .
Sem:  pro:poss:det|your($0,n|spoon($0))
example_end

Sent: that 's my spoon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|spoon($1)),$0)
example_end

Sent: what 's that spoon ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|spoon($2)),$1)
example_end

Sent: my spoon .
Sem:  pro:poss:det|my($0,n|spoon($0))
example_end

Sent: your spoon .
Sem:  pro:poss:det|your($0,n|spoon($0))
example_end

Sent: your spoon .
Sem:  pro:poss:det|your($0,n|spoon($0))
example_end

Sent: whose is this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: where 's your paper ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
example_end

Sent: do you want something ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:indef|something,$0),$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are you doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what do you have on your head ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|have(pro|you,$0,$1),$1),prep|on(pro:poss:det|your($2,n|head($2)),$1))
example_end

Sent: you can see Eve .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|you,n:prop|Eve,$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: more cheese ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cheese($1)),$0)
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: climb in your highchair .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),prep|in(pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0))
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: eat your cheese .
Sem:  lambda $0_{ev}.v|eat(pro|you,pro:poss:det|your($1,n|cheese($1)),$0)
example_end

Sent: you climb in your highchair .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),prep|in(pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0))
example_end

Sent: your lunch is ready .
Sem:  adj|ready(pro:poss:det|your($0,n|lunch($0)))
example_end

Sent: hump .
Sem:  lambda $0_{e}.n|hump($0)
example_end

Sent: what would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: would you like some fruit ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|some($1,n|fruit($1)),$0),$0),$0)
example_end

Sent: what would you like for lunch ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
example_end

Sent: icecream ?
Sem:  lambda $0_{e}.n|+n|ice+n|cream($0)
example_end

Sent: you need something besides icecream .
Sem:  lambda $0_{ev}.and(v|need(pro|you,pro:indef|something,$0),prep|besides(lambda $1_{e}.n|+n|ice+n|cream($1),$0))
example_end

Sent: taste it .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro|it,$0)
example_end

Sent: it 's good .
Sem:  adj|good(pro|it)
example_end

Sent: what would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: I forgot your bibbie ?
Sem:  lambda $0_{ev}.Q(v|forget&PAST(pro|I,pro:poss:det|your($1,n|bib-DIM($1)),$0),$0)
example_end

Sent: then we 'll put your bibbie on .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|we,pro:poss:det|your($1,n|bib-DIM($1)),$0),$0),adv|on($0))
example_end

Sent: have a good lunch .
Sem:  lambda $0_{ev}.v|have(pro|you,det|a($1,and(adj|good($1),n|lunch($1))),$0)
example_end

Sent: what are you eating ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's wrong ?
Sem:  lambda $0_{e}.adj|wrong($0)
example_end

Sent: what 's the trouble ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|trouble($2)),$1)
example_end

Sent: paper clip ?
Sem:  lambda $0_{e}.and(n|paper($0),n|clip($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is that better ?
Sem:  lambda $0_{ev}.Q(adj|good&CP(pro:dem|that),$0)
example_end

Sent: it 's loose .
Sem:  adj|loose(pro|it)
example_end

Sent: it 's alright .
Sem:  adj|alright(pro|it)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: is it my icecream ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|+n|ice+n|cream($1)),$0),$0)
example_end

Sent: whose icecream ?
Sem:  lambda $0_{e}.n|+n|ice+n|cream($0)
example_end

Sent: is it my icecream ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|+n|ice+n|cream($1)),$0),$0)
example_end

Sent: is it my icecream ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|+n|ice+n|cream($1)),$0),$0)
example_end

Sent: this is my spoon .
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|my($1,n|spoon($1)),$0)
example_end

Sent: where 's his spoon ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|his($1,n|spoon($1)),$0)
example_end

Sent: where 's his spoon ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|his($1,n|spoon($1)),$0)
example_end

Sent: he has sugar .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,lambda $1_{e}.n|sugar($1),$0)
example_end

Sent: what are we doing now ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|we,$0,$1),$1),adv|now($1))
example_end

Sent: what am I doing now ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&1S(part|do-PROG(pro|I,$0,$1),$1),adv|now($1))
example_end

Sent: what will we do in a minute ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|do(pro|we,$0,$1),$1),prep|in(det|a($2,n|minute($2)),$1))
example_end

Sent: where is Papa ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: Chicago .
Sem:  n:prop|Chicago
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what 's Papa doing in Chicago ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Papa,$0,$1),$1),prep|in(n:prop|Chicago,$1))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: you cut the paper .
Sem:  lambda $0_{ev}.v|cut&ZERO(pro|you,det|the($1,n|paper($1)),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: you were ruining the rug .
Sem:  lambda $0_{ev}.aux|be&PAST(part|ruin-PROG(pro|you,det|the($1,n|rug($1)),$0),$0)
example_end

Sent: straighten the rug .
Sem:  det|the($0,n|rug($0))
example_end

Sent: straighten the rug .
Sem:  det|the($0,n|rug($0))
example_end

Sent: blow ?
Sem:  lambda $0_{ev}.Q(v|blow(pro|you,$0),$0)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: that 's the tapioca .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|tapioca($1)),$0)
example_end

Sent: more grape juice ?
Sem:  lambda $0_{ev}.Q(qn|more($1,and(n|grape($1),n|juice($1))),$0)
example_end

Sent: I 'm glad .
Sem:  adj|glad(pro|I)
example_end

Sent: she 's thirsty .
Sem:  adj|thirsty(pro|she)
example_end

Sent: new socks ?
Sem:  lambda $0_{e}.and(adj|new($0),n|sock-PL($0))
example_end

Sent: who has new socks ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&3S($0,lambda $2_{e}.and(adj|new($2),n|sock-PL($2)),$1)
example_end

Sent: what are they ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|they,$1)
example_end

Sent: and what this ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: you can stir it .
Sem:  lambda $0_{ev}.aux|can(v|stir(pro|you,pro|it,$0),$0)
example_end

Sent: it 's hot .
Sem:  adj|hot(pro|it)
example_end

Sent: you do ?
Sem:  lambda $0_{ev}.Q(v|do(pro|you,$0),$0)
example_end

Sent: lick it off .
Sem:  lambda $0_{ev}.and(v|lick(pro|you,pro|it,$0),adv|off($0))
example_end

Sent: is that Fraser ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Fraser,$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is it Eve ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,n:prop|Eve,$0),$0)
example_end

Sent: or will you read it ?
Sem:  lambda $0_{ev}.Q(aux|will(v|read&ZERO(pro|you,pro|it,$0),$0),$0)
example_end

Sent: who 's going to read it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG($0,$1),v|read&ZERO($0,pro|it,$1)),$1)
example_end

Sent: Eve 's going to read it .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,pro|it,$0)),$0)
example_end

Sent: would he like coffee ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|he,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: does he want more coffee ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|want(pro|he,qn|more($1,n|coffee($1)),$0),$0),$0)
example_end

Sent: is that Snoopy ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Snoopy,$0),$0)
example_end

Sent: it 's not a good idea .
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,and(adj|good($1),n|idea($1))),$0),$0)
example_end

Sent: you 're eating the broom ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|eat-PROG(pro|you,det|the($1,n|broom($1)),$0),$0),$0)
example_end

Sent: what did we do yesterday with the broom ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|we,$0,$1),$1),prep|with(det|the($2,n|broom($2)),$1))
example_end

Sent: outside ?
Sem:  lambda $0_{ev}.Q(adv:loc|outside($0),$0)
example_end

Sent: what did we do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|we,$0,$1),$1)
example_end

Sent: shovel snow .
Sem:  lambda $0_{e}.n|snow($0)
example_end

Sent: lots of snow .
Sem:  qn|lots($0,n|snow($0))
example_end

Sent: boots ?
Sem:  lambda $0_{e}.n|boot-PL($0)
example_end

Sent: we got our boots on ?
Sem:  lambda $0_{ev}.Q(and(v|get&PAST(pro|we,pro:poss:det|our($1,n|boot-PL($1)),$0),adv|on($0)),$0)
example_end

Sent: am I reading ?
Sem:  lambda $0_{ev}.Q(aux|be&1S(part|read-PROG(pro|I,$0),$0),$0)
example_end

Sent: will I read ?
Sem:  lambda $0_{ev}.Q(aux|will(v|read&ZERO(pro|I,$0),$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: No ?
Sem:  lambda $0_{ev}.Q(n:prop|No,$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what panties ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: what panties ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: Lassie .
Sem:  n:prop|Lassie
example_end

Sent: who is reading ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|read-PROG($0,$1),$1)
example_end

Sent: who is reading ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|read-PROG($0,$1),$1)
example_end

Sent: will we change your diaper ?
Sem:  lambda $0_{ev}.Q(aux|will(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: you had a bowel movement ?
Sem:  lambda $0_{ev}.Q(v|have&PAST(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
example_end

Sent: lay right down there ?
Sem:  lambda $0_{ev}.Q(and(v|lay(pro|you,$0),adv:loc|down($0)),$0)
example_end

Sent: your bathrobe ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bathrobe($1)),$0)
example_end

Sent: where is your bathrobe ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|bathrobe($1)),$0)
example_end

Sent: we put it in your bedroom .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|we,pro|it,$0),prep|in(pro:poss:det|your($1,n|+n|bed+n|room($1)),$0))
example_end

Sent: where 's your crayons ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|crayon-PL($1)),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: we 'll turn over in a minute .
Sem:  lambda $0_{ev}.and(aux|will(v|turn(pro|we,$0),$0),prep|in(det|a($1,n|minute($1)),$0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's al bl cl .
Sem:  pro:dem|that
example_end

Sent: that al bl cl .
Sem:  pro:dem|that
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: and I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: do you see me ?
Sem:  lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|me,$0),$0),$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: do you see me ?
Sem:  lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|me,$0),$0),$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: what are the men doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|man&PL($2)),$0,$1),$1)
example_end

Sent: are you cutting the paper ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|cut-PROG(pro|you,det|the($1,n|paper($1)),$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: are you alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: what 's your man doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro:poss:det|your($2,n|man($2)),$0,$1),$1)
example_end

Sent: we 're going to have tea .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|tea($1),$0)),$0)
example_end

Sent: I 'll get a napkin .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|I,det|a($1,n|napkin($1)),$0),$0)
example_end

Sent: and what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: eh Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what is Eve going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$1),v|do(n:prop|Eve,$0,$1)),$1)
example_end

Sent: what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you don 't need a spoon .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|spoon($1)),$0),$0),$0)
example_end

Sent: you don 't need it .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,pro|it,$0),$0),$0)
example_end

Sent: spoon ?
Sem:  lambda $0_{e}.n|spoon($0)
example_end

Sent: broom .
Sem:  lambda $0_{e}.n|broom($0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: turn the knob .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|knob($1)),$0)
example_end

Sent: you can do it .
Sem:  lambda $0_{ev}.aux|can(v|do(pro|you,pro|it,$0),$0)
example_end

Sent: crash .
Sem:  lambda $0_{e}.n|crash($0)
example_end

Sent: crash .
Sem:  lambda $0_{e}.n|crash($0)
example_end

Sent: I 'll put it back .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|back($0))
example_end

Sent: what did she do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|she,$0,$1),$1)
example_end

Sent: she spit up some milk .
Sem:  lambda $0_{ev}.and(v|spit(pro|she,qn|some($1,n|milk($1)),$0),adv:loc|up($0))
example_end

Sent: what .
Sem:  pro:wh|what
example_end

Sent: smile at you .
Sem:  lambda $0_{ev}.and(v|smile(pro|you,$0),prep|at(pro|you,$0))
example_end

Sent: Fraser will be unhappy .
Sem:  n:prop|Fraser
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: did you read the book ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,det|the($1,n|book($1)),$0),$0),$0)
example_end

Sent: did read the book ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,det|the($1,n|book($1)),$0),$0),$0)
example_end

Sent: who read the book ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|read&ZERO($0,det|the($2,n|book($2)),$1)
example_end

Sent: is that my grape juice ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,and(n|grape($1),n|juice($1))),$0),$0)
example_end

Sent: is that my grape juice ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,and(n|grape($1),n|juice($1))),$0),$0)
example_end

Sent: Fraser drink all tea .
Sem:  lambda $0_{ev}.v|drink(n:prop|Fraser,qn|all($1,n|tea($1)),$0)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: put your jammies on ?
Sem:  lambda $0_{ev}.Q(and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|jam-DIM-PL($1)),$0),adv|on($0)),$0)
example_end

Sent: put it away .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: you put what in the wastebasket ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|put&ZERO(pro|you,$0,$1),prep|in(det|the($2,n|wastebasket($2)),$1))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you  you put you in the wastebasket .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|you,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
example_end

Sent: is that Fraser ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Fraser,$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you got them out .
Sem:  lambda $0_{ev}.and(v|get&PAST(pro|you,pro|them,$0),adv:loc|out($0))
example_end

Sent: put them back by the radiator .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|by(det|the($1,n|radiator($1)),$0))
example_end

Sent: put them back by the radiator .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|by(det|the($1,n|radiator($1)),$0))
example_end

Sent: you spilled it ?
Sem:  lambda $0_{ev}.Q(v|spill-PAST(pro|you,pro|it,$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's fine .
Sem:  adj|fine(pro:dem|that)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: I 'm coming down .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|come-PROG(pro|I,$0),$0),adv:loc|down($0))
example_end

Sent: what are you drawing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|draw-PROG(pro|you,$0,$1),$1)
example_end

Sent: did Fraser use the sugar ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|use(n:prop|Fraser,det|the($1,n|sugar($1)),$0),$0),$0)
example_end

Sent: did Fraser use the sugar ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|use(n:prop|Fraser,det|the($1,n|sugar($1)),$0),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: I 'm rocking Sarah .
Sem:  lambda $0_{ev}.aux|be&1S(part|rock-PROG(pro|I,n:prop|Sarah,$0),$0)
example_end

Sent: don 't pull it too hard .
Sem:  lambda $0_{ev}.not(and(aux|do(v|pull(pro|you,pro|it,$0),$0),adv|hard($0)),$0)
example_end

Sent: Valentine .
Sem:  n:prop|Valentine
example_end

Sent: he 's got a hat .
Sem:  lambda $0_{ev}.aux|have&3S(part|get&PERF(pro|he,det|a($1,n|hat($1)),$0),$0)
example_end

Sent: and Fraser  they haven 't used it yet .
Sem:  lambda $0_{ev}.not(and(aux|have(part|use-PERF(pro|they,pro|it,$0),$0),adv|yet($0)),$0)
example_end

Sent: they need sugar for their coffee .
Sem:  lambda $0_{ev}.and(v|need(pro|they,lambda $1_{e}.n|sugar($1),$0),prep|for(pro:poss:det|their($2,n|coffee($2)),$0))
example_end

Sent: you carry it ?
Sem:  lambda $0_{ev}.Q(v|carry(pro|you,pro|it,$0),$0)
example_end

Sent: you burped ?
Sem:  lambda $0_{ev}.Q(v|burp-PAST(pro|you,$0),$0)
example_end

Sent: the fish are  swimming .
Sem:  lambda $0_{ev}.aux|be&PRES(part|swim-PROG(det|the($1,n|fish($1)),$0),$0)
example_end

Sent: where is the button ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|button($1)),$0)
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: I see that button .
Sem:  lambda $0_{ev}.v|see(pro|I,det|that($1,n|button($1)),$0)
example_end

Sent: the shovel ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|shovel($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did Eve do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(n:prop|Eve,$0,$1),$1)
example_end

Sent: what did you put in the cup ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|put&ZERO(pro|you,$0,$1),$1),prep|in(det|the($2,n|cup($2)),$1))
example_end

Sent: the sugar top ?
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|sugar($1),n|top($1))),$0)
example_end

Sent: don 't put it on .
Sem:  lambda $0_{ev}.not(and(aux|do(v|put&ZERO(pro|you,pro|it,$0),$0),adv|on($0)),$0)
example_end

Sent: take it out .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: Kleenex ?
Sem:  lambda $0_{ev}.Q(n:prop|Kleenex,$0)
example_end

Sent: you get one .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:indef|one,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's it ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro|it,$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: did you draw al bl cl ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|draw(pro|you,$0),$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: man ?
Sem:  lambda $0_{e}.n|man($0)
example_end

Sent: is that a man ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
example_end

Sent: you 'll break the box top .
Sem:  lambda $0_{ev}.aux|will(v|break(pro|you,det|the($1,and(n|box($1),n|top($1))),$0),$0)
example_end

Sent: you put it in the kitchen .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|kitchen($1)),$0))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what do you do with your tinkertoys ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro:poss:det|your($2,n|+n|tinker+n|toy-PL($2)),$1))
example_end

Sent: can you not get it ?
Sem:  lambda $0_{ev}.Q(not(aux|can(v|get(pro|you,pro|it,$0),$0),$0),$0)
example_end

Sent: where 's your puzzle ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|puzzle($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: teapot .
Sem:  lambda $0_{e}.n|teapot($0)
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: a goat ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|goat($1)),$0)
example_end

Sent: I know that .
Sem:  lambda $0_{ev}.v|know(pro|I,pro:dem|that,$0)
example_end

Sent: teapot .
Sem:  lambda $0_{e}.n|teapot($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's a bowl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bowl($1)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you can put the bowl in .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|bowl($1)),$0),$0),adv:loc|in($0))
example_end

Sent: you did it once .
Sem:  lambda $0_{ev}.and(v|do&PAST(pro|you,pro|it,$0),adv|once($0))
example_end

Sent: you do it .
Sem:  lambda $0_{ev}.v|do(pro|you,pro|it,$0)
example_end

Sent: you did it before .
Sem:  lambda $0_{ev}.and(v|do&PAST(pro|you,pro|it,$0),adv|before($0))
example_end

Sent: do it again .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: you do it .
Sem:  lambda $0_{ev}.v|do(pro|you,pro|it,$0)
example_end

Sent: you fix it .
Sem:  lambda $0_{ev}.v|fix(pro|you,pro|it,$0)
example_end

Sent: take them out .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|them,$0),adv:loc|out($0))
example_end

Sent: take them out .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|them,$0),adv:loc|out($0))
example_end

Sent: you do it .
Sem:  lambda $0_{ev}.v|do(pro|you,pro|it,$0)
example_end

Sent: put the cup in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|the($1,n|cup($1)),$0),adv:loc|in($0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's the girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|girl($1)),$0)
example_end

Sent: the bowl .
Sem:  det|the($0,n|bowl($0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: you did it .
Sem:  lambda $0_{ev}.v|do&PAST(pro|you,pro|it,$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: you did it .
Sem:  lambda $0_{ev}.v|do&PAST(pro|you,pro|it,$0)
example_end

Sent: take a bath ?
Sem:  lambda $0_{ev}.Q(v|take(pro|you,det|a($1,n|bath($1)),$0),$0)
example_end

Sent: what are you saying ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
example_end

Sent: take a bath ?
Sem:  lambda $0_{ev}.Q(v|take(pro|you,det|a($1,n|bath($1)),$0),$0)
example_end

Sent: take a bath .
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|bath($1)),$0)
example_end

Sent: tonight we 'll take a bath .
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|we,det|a($1,n|bath($1)),$0),$0),adv:tem|tonight($0))
example_end

Sent: tonight .
Sem:  lambda $0_{ev}.adv:tem|tonight($0)
example_end

Sent: you do the teapot .
Sem:  lambda $0_{ev}.v|do(pro|you,det|the($1,n|teapot($1)),$0)
example_end

Sent: push it around .
Sem:  lambda $0_{ev}.and(v|push(pro|you,pro|it,$0),adv:loc|around($0))
example_end

Sent: you do it .
Sem:  lambda $0_{ev}.v|do(pro|you,pro|it,$0)
example_end

Sent: you did it before .
Sem:  lambda $0_{ev}.and(v|do&PAST(pro|you,pro|it,$0),adv|before($0))
example_end

Sent: do it again .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: you do it again .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: Mommy did it .
Sem:  lambda $0_{ev}.v|do&PAST(n:prop|Mommy,pro|it,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: cover .
Sem:  lambda $0_{e}.n|cover($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: where 's the man ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|man($1)),$0)
example_end

Sent: where 's the truck 's man ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(n|truck($1),n|man($1))),$0)
example_end

Sent: what are you doing out there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),adv:loc|out($1))
example_end

Sent: I found another crayon .
Sem:  lambda $0_{ev}.v|find&PAST(pro|I,qn|another($1,n|crayon($1)),$0)
example_end

Sent: it 's another car .
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|car($1)),$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: is this the turtle ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,det|the($1,n|turtle($1)),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: your pipe .
Sem:  pro:poss:det|your($0,n|pipe($0))
example_end

Sent: shall we open it ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|open(pro|we,pro|it,$0),$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: kangaroo .
Sem:  lambda $0_{e}.n|kangaroo($0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: envelope .
Sem:  lambda $0_{e}.n|envelope($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's a ribbon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|ribbon($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's my pencil .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: icecream cone ?
Sem:  lambda $0_{e}.and(n|+n|ice+n|cream($0),n|cone($0))
example_end

Sent: did you say icecream cone ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|say(pro|you,lambda $1_{e}.and(n|+n|ice+n|cream($1),n|cone($1)),$0),$0),$0)
example_end

Sent: he goes on your firetruck .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|he,$0),prep|on(pro:poss:det|your($1,n|firetruck($1)),$0))
example_end

Sent: he 's walking ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|walk-PROG(pro|he,$0),$0),$0)
example_end

Sent: is he ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: where 's the bell ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|bell($1)),$0)
example_end

Sent: that 's a wagon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|wagon($1)),$0)
example_end

Sent: you can pull it .
Sem:  lambda $0_{ev}.aux|can(v|pull(pro|you,pro|it,$0),$0)
example_end

Sent: one belongs to Cathy .
Sem:  lambda $0_{ev}.and(v|belong-3S(pro:indef|one,$0),prep|to(n:prop|Cathy,$0))
example_end

Sent: what do you do with your pipe ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro:poss:det|your($2,n|pipe($2)),$1))
example_end

Sent: what do you do with your pipe ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro:poss:det|your($2,n|pipe($2)),$1))
example_end

Sent: you have no pockets ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,qn|no($1,n|pocket-PL($1)),$0),$0)
example_end

Sent: he has no pockets ?
Sem:  lambda $0_{ev}.Q(v|have&3S(pro|he,qn|no($1,n|pocket-PL($1)),$0),$0)
example_end

Sent: he has no pockets ?
Sem:  lambda $0_{ev}.Q(v|have&3S(pro|he,qn|no($1,n|pocket-PL($1)),$0),$0)
example_end

Sent: he has pockets in his coat .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|he,lambda $1_{e}.n|pocket-PL($1),$0),prep|in(pro:poss:det|his($2,n|coat($2)),$0))
example_end

Sent: he has pockets in his coat .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|he,lambda $1_{e}.n|pocket-PL($1),$0),prep|in(pro:poss:det|his($2,n|coat($2)),$0))
example_end

Sent: that 's a pipe .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|pipe($1)),$0)
example_end

Sent: pipe .
Sem:  lambda $0_{e}.n|pipe($0)
example_end

Sent: you have a pipe .
Sem:  lambda $0_{ev}.v|have(pro|you,det|a($1,n|pipe($1)),$0)
example_end

Sent: who else has a pipe ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&3S($0,det|a($2,n|pipe($2)),$1)
example_end

Sent: what does Fraser have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|have(n:prop|Fraser,$0,$1),$1)
example_end

Sent: he has pipe .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,lambda $1_{e}.n|pipe($1),$0)
example_end

Sent: is this my pipe ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pipe($1)),$0),$0)
example_end

Sent: is that my pipe ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|pipe($1)),$0),$0)
example_end

Sent: is that my pipe ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|pipe($1)),$0),$0)
example_end

Sent: is that your pipe ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|pipe($1)),$0),$0)
example_end

Sent: is that your pipe ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|pipe($1)),$0),$0)
example_end

Sent: move your highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: is this mine ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss|mine,$0),$0)
example_end

Sent: they 're blasting over here .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|blast-PROG(pro|they,$0),$0),adv:loc|here($0))
example_end

Sent: forgot my napkin ?
Sem:  lambda $0_{ev}.Q(v|forget&PAST(pro|you,pro:poss:det|my($1,n|napkin($1)),$0),$0)
example_end

Sent: loud boom .
Sem:  lambda $0_{e}.and(adj|loud($0),n|boom($0))
example_end

Sent: Kix ?
Sem:  lambda $0_{ev}.Q(n:prop|Kix,$0)
example_end

Sent: you had Kix for breakfast .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,n:prop|Kix,$0),prep|for(lambda $1_{e}.n|breakfast($1),$0))
example_end

Sent: we put it in the dish .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|we,pro|it,$0),prep|in(det|the($1,n|dish($1)),$0))
example_end

Sent: chocolate icecream .
Sem:  lambda $0_{e}.and(n|chocolate($0),n|+n|ice+n|cream($0))
example_end

Sent: what .
Sem:  pro:wh|what
example_end

Sent: your truck ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|truck($1)),$0)
example_end

Sent: say truck .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|truck($1),$0)
example_end

Sent: your truck ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|truck($1)),$0)
example_end

Sent: say truck .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|truck($1),$0)
example_end

Sent: dessert .
Sem:  lambda $0_{e}.n|dessert($0)
example_end

Sent: do you have your spoon ?
Sem:  lambda $0_{ev}.Q(aux|do(v|have(pro|you,pro:poss:det|your($1,n|spoon($1)),$0),$0),$0)
example_end

Sent: Mom too .
Sem:  n:prop|Mom
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: eat it with a spoon .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,pro|it,$0),prep|with(det|a($1,n|spoon($1)),$0))
example_end

Sent: then eat it with your spoon .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,pro|it,$0),prep|with(pro:poss:det|your($1,n|spoon($1)),$0))
example_end

Sent: Becky 's doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Becky,$0,$1),$1)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: who 's doing what ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S(part|do-PROG($1,$0,$2),$2)
example_end

Sent: coat .
Sem:  lambda $0_{e}.n|coat($0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: need any help ?
Sem:  lambda $0_{ev}.Q(v|need(pro|you,qn|any($1,n|help($1)),$0),$0)
example_end

Sent: we 'll wipe it off .
Sem:  lambda $0_{ev}.and(aux|will(v|wipe(pro|we,pro|it,$0),$0),adv|off($0))
example_end

Sent: down .
Sem:  lambda $0_{ev}.adv:loc|down($0)
example_end

Sent: down .
Sem:  lambda $0_{ev}.adv:loc|down($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what are we doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|we,$0,$1),$1)
example_end

Sent: what are we doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|we,$0,$1),$1)
example_end

Sent: what is  is Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: .. what did I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|I,$0,$1),$1)
example_end

Sent: what did Fraser do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(n:prop|Fraser,$0,$1),$1)
example_end

Sent: who drew this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|draw&PAST($0,pro:dem|this,$1)
example_end

Sent: who drew this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|draw&PAST($0,pro:dem|this,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's an orange crayon .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|orange($1),n|crayon($1))),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it is green .
Sem:  adj|green(pro|it)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: are these crayons ?
Sem:  lambda $0_{ev}.Q(det|these($1,n|crayon-PL($1)),$0)
example_end

Sent: what are these ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: what are they ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|they,$1)
example_end

Sent: we 'll put them away .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|we,pro|them,$0),$0),adv|away($0))
example_end

Sent: where 's the tinkertoy can ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(n|+n|tinker+n|toy($1),n|can($1))),$0)
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: would you get that ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|get(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: it goes in the wagon .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),prep|in(det|the($1,n|wagon($1)),$0))
example_end

Sent: you put it over on the wagon .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|wagon($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: can you get it in ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|get(pro|you,pro|it,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: you put it in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|in($0))
example_end

Sent: forgot the dish ?
Sem:  lambda $0_{ev}.Q(v|forget&PAST(pro|you,det|the($1,n|dish($1)),$0),$0)
example_end

Sent: where is the dish ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|dish($1)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: Valentine .
Sem:  n:prop|Valentine
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you are silly .
Sem:  adj|silly(pro|you)
example_end

Sent: Sarah 's already taking a nap .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|take-PROG(n:prop|Sarah,det|a($1,n|nap($1)),$0),$0),adv|already($0))
example_end

Sent: is that Eve ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Eve,$0),$0)
example_end

Sent: we 'll have milk for lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: not supper .
Sem:  lambda $0_{e}.not(n|supper($0),$0)
example_end

Sent: we had breakfast .
Sem:  lambda $0_{ev}.v|have&PAST(pro|we,lambda $1_{e}.n|breakfast($1),$0)
example_end

Sent: where 's a lady ?
Sem:  lambda $0_{e}.eqLoc(det|a($1,n|lady($1)),$0)
example_end

Sent: Mom 's not messy .
Sem:  lambda $0_{ev}.not(adj|messy(n:prop|Mom),$0)
example_end

Sent: is the dolly sitting down .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(det|the($1,n|doll-DIM($1)),$0),$0),adv:loc|down($0))
example_end

Sent: is that a dog ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|dog($1)),$0),$0)
example_end

Sent: that 's a squirrel .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|squirrel($1)),$0)
example_end

Sent: it 's a tail .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|tail($1)),$0)
example_end

Sent: it 's got a big tail .
Sem:  lambda $0_{ev}.aux|have&3S(part|get&PERF(pro|it,det|a($1,and(adj|big($1),n|tail($1))),$0),$0)
example_end

Sent: a big curly tail .
Sem:  det|a($0,and(adj|big($0),adj|curly($0),n|tail($0)))
example_end

Sent: pull this bit down .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,det|this($1,n|bit($1)),$0),adv:loc|down($0))
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's another duck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|duck($1)),$0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: it 's open .
Sem:  adj|open(pro|it)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: it doesn 't work ?
Sem:  lambda $0_{ev}.Q(not(aux|do&3S(v|work(pro|it,$0),$0),$0),$0)
example_end

Sent: it does work .
Sem:  lambda $0_{ev}.aux|do&3S(v|work(pro|it,$0),$0)
example_end

Sent: what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: I 'll fix it .
Sem:  lambda $0_{ev}.aux|will(v|fix(pro|I,pro|it,$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'll open the briefcase .
Sem:  lambda $0_{ev}.aux|will(v|open(pro|I,det|the($1,n|briefcase($1)),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: you find him .
Sem:  lambda $0_{ev}.v|find(pro|you,pro|him,$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: move the chair .
Sem:  lambda $0_{ev}.v|move(pro|you,det|the($1,n|chair($1)),$0)
example_end

Sent: move it by the pillow .
Sem:  lambda $0_{ev}.and(v|move(pro|you,pro|it,$0),prep|by(det|the($1,n|pillow($1)),$0))
example_end

Sent: can you move it ?
Sem:  lambda $0_{ev}.Q(aux|can(v|move(pro|you,pro|it,$0),$0),$0)
example_end

Sent: where is her rattle ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|her($1,n|rattle($1)),$0)
example_end

Sent: I 'll get it .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|I,pro|it,$0),$0)
example_end

Sent: go ahead .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|ahead($0))
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: I don 't see it .
Sem:  lambda $0_{ev}.not(aux|do(v|see(pro|I,pro|it,$0),$0),$0)
example_end

Sent: we looked there already .
Sem:  lambda $0_{ev}.and(v|look-PAST(pro|we,$0),adv|already($0))
example_end

Sent: they were ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: you hold it .
Sem:  lambda $0_{ev}.v|hold(pro|you,pro|it,$0)
example_end

Sent: tell Sarah what to do with the rattle .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|tell(pro|you,n:prop|Sarah,$1),prep|with(det|the($2,n|rattle($2)),$1))
example_end

Sent: what do you do with the rattle ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(det|the($2,n|rattle($2)),$1))
example_end

Sent: to make noise what do you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|do(pro|you,$0,$1),v|make(pro|you,lambda $2_{e}.n|noise($2),$1)),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: shaking what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|shake-PROG(pro|you,$0,$1)
example_end

Sent: Sarah 's sitting in her chair .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Sarah,$0),$0),prep|in(pro:poss:det|her($1,n|chair($1)),$0))
example_end

Sent: you sit in your chair .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
example_end

Sent: she has a rattle .
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|rattle($1)),$0)
example_end

Sent: she already has a rattle .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|rattle($1)),$0),adv|already($0))
example_end

Sent: I 'll peel it .
Sem:  lambda $0_{ev}.aux|will(v|peel(pro|I,pro|it,$0),$0)
example_end

Sent: I will peel it .
Sem:  lambda $0_{ev}.aux|will(v|peel(pro|I,pro|it,$0),$0)
example_end

Sent: that 's your celery .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|celery($1)),$0)
example_end

Sent: where 's my celery ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|celery($1)),$0)
example_end

Sent: what are these ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: and what do you do with them ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro|them,$1))
example_end

Sent: they go in your hair .
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),prep|in(pro:poss:det|your($1,n|hair($1)),$0))
example_end

Sent: where 's Cromer ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
example_end

Sent: get your crayons ?
Sem:  lambda $0_{ev}.Q(v|get(pro|you,pro:poss:det|your($1,n|crayon-PL($1)),$0),$0)
example_end

Sent: get the box .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|box($1)),$0)
example_end

Sent: say it again .
Sem:  lambda $0_{ev}.and(v|say(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: sponge ?
Sem:  lambda $0_{e}.n|sponge($0)
example_end

Sent: and what does the sponge do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(det|the($2,n|sponge($2)),$0,$1),$1)
example_end

Sent: that 's your sponge .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|sponge($1)),$0)
example_end

Sent: what are you doing to the sponge ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(det|the($2,n|sponge($2)),$1))
example_end

Sent: she had cereal for breakfast .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|she,lambda $1_{e}.n|cereal($1),$0),prep|for(lambda $2_{e}.n|breakfast($2),$0))
example_end

Sent: you have grape juice .
Sem:  lambda $0_{ev}.v|have(pro|you,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0)
example_end

Sent: it 's not allgone .
Sem:  lambda $0_{ev}.not(adj|all_gone(pro|it),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: I know it .
Sem:  lambda $0_{ev}.v|know(pro|I,pro|it,$0)
example_end

Sent: pull your foot out .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,pro:poss:det|your($1,n|foot($1)),$0),adv:loc|out($0))
example_end

Sent: pull it out .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: you pull it out .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: I can 't pull it out .
Sem:  lambda $0_{ev}.not(and(aux|can(v|pull(pro|I,pro|it,$0),$0),adv:loc|out($0)),$0)
example_end

Sent: you pull it out .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: I hear him .
Sem:  lambda $0_{ev}.v|hear(pro|I,pro|him,$0)
example_end

Sent: I hear him .
Sem:  lambda $0_{ev}.v|hear(pro|I,pro|him,$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: step outof it .
Sem:  lambda $0_{ev}.and(v|step(pro|you,$0),prep|out_of(pro|it,$0))
example_end

Sent: step out .
Sem:  lambda $0_{ev}.and(v|step(pro|you,$0),adv:loc|out($0))
example_end

Sent: pull your foot out .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,pro:poss:det|your($1,n|foot($1)),$0),adv:loc|out($0))
example_end

Sent: where 's the hole ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|hole($1)),$0)
example_end

Sent: a pencil ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|pencil($1)),$0)
example_end

Sent: she cried .
Sem:  lambda $0_{ev}.v|cry-PAST(pro|she,$0)
example_end

Sent: I 'll move over there .
Sem:  lambda $0_{ev}.and(aux|will(v|move(pro|I,$0),$0),adv:loc|there($0))
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that 's fine .
Sem:  adj|fine(pro:dem|that)
example_end

Sent: I see your hands .
Sem:  lambda $0_{ev}.v|see(pro|I,pro:poss:det|your($1,n|hand-PL($1)),$0)
example_end

Sent: get your paper .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|paper($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: no grape juice .
Sem:  qn|no($0,and(n|grape($0),n|juice($0)))
example_end

Sent: we 'll have milk for lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: icecubes ?
Sem:  lambda $0_{e}.n|+n|ice+n|cube-PL($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what do we have here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|have(pro|we,$0,$1),$1),adv:loc|here($1))
example_end

Sent: a check ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|check($1)),$0)
example_end

Sent: say check .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|check($1),$0)
example_end

Sent: check ?
Sem:  lambda $0_{e}.n|check($0)
example_end

Sent: say check .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|check($1),$0)
example_end

Sent: she 's sitting on the floor .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|she,$0),$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: I 'll fix your chair .
Sem:  lambda $0_{ev}.aux|will(v|fix(pro|I,pro:poss:det|your($1,n|chair($1)),$0),$0)
example_end

Sent: you sit right there in that corner .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(det|that($1,n|corner($1)),$0))
example_end

Sent: you sit here .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|here($0))
example_end

Sent: you can 't have everything out here .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro:indef|everything,$0),$0),adv:loc|out($0)),$0)
example_end

Sent: you take the chair back .
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|chair($1)),$0),adv:loc|back($0))
example_end

Sent: then we 'll put the stool out .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|we,det|the($1,n|stool($1)),$0),$0),adv:loc|out($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you take it back .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: and then we 'll move the stool out .
Sem:  lambda $0_{ev}.and(aux|will(v|move(pro|we,det|the($1,n|stool($1)),$0),$0),adv:loc|out($0))
example_end

Sent: you sit in that corner .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(det|that($1,n|corner($1)),$0))
example_end

Sent: what dear ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: you 're dancing ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|dance-PROG(pro|you,$0),$0),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: that was a nice dance .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
example_end

Sent: I didn 't pinch my finger .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|pinch(pro|I,pro:poss:det|my($1,n|finger($1)),$0),$0),$0)
example_end

Sent: I didn 't pinch my finger .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|pinch(pro|I,pro:poss:det|my($1,n|finger($1)),$0),$0),$0)
example_end

Sent: I dropped the butter .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|I,det|the($1,n|butter($1)),$0)
example_end

Sent: I dropped the butter .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|I,det|the($1,n|butter($1)),$0)
example_end

Sent: I 'll get it .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|I,pro|it,$0),$0)
example_end

Sent: who 's sitting in your chair ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|sit-PROG($0,$1),$1),prep|in(pro:poss:det|your($2,n|chair($2)),$1))
example_end

Sent: he moved .
Sem:  lambda $0_{ev}.v|move-PAST(pro|he,$0)
example_end

Sent: you cool it .
Sem:  lambda $0_{ev}.v|cool(pro|you,pro|it,$0)
example_end

Sent: you cool it .
Sem:  lambda $0_{ev}.v|cool(pro|you,pro|it,$0)
example_end

Sent: what did I do with your cup ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|I,$0,$1),$1),prep|with(pro:poss:det|your($2,n|cup($2)),$1))
example_end

Sent: dry it .
Sem:  lambda $0_{ev}.v|dry(pro|you,pro|it,$0)
example_end

Sent: blow on it .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),prep|on(pro|it,$0))
example_end

Sent: what did you say before that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),prep|before(pro:dem|that,$1))
example_end

Sent: are you having good food ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.and(adj|good($1),n|food($1)),$0),$0),$0)
example_end

Sent: what dear ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: you have good food ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,lambda $1_{e}.and(adj|good($1),n|food($1)),$0),$0)
example_end

Sent: are you eating fruit ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|eat-PROG(pro|you,lambda $1_{e}.n|fruit($1),$0),$0),$0)
example_end

Sent: supper ?
Sem:  lambda $0_{e}.n|supper($0)
example_end

Sent: you 're having lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: not supper .
Sem:  lambda $0_{e}.not(n|supper($0),$0)
example_end

Sent: you 're having lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: what are we having ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|have-PROG(pro|we,$0,$1),$1)
example_end

Sent: I 'm eating mine .
Sem:  lambda $0_{ev}.aux|be&1S(part|eat-PROG(pro|I,pro:poss|mine,$0),$0)
example_end

Sent: eating chocolate icecream ?
Sem:  lambda $0_{ev}.Q(part|eat-PROG(pro|you,lambda $1_{e}.and(n|chocolate($1),n|+n|ice+n|cream($1)),$0),$0)
example_end

Sent: I 'm not having fruit .
Sem:  lambda $0_{ev}.not(aux|be&1S(part|have-PROG(pro|I,lambda $1_{e}.n|fruit($1),$0),$0),$0)
example_end

Sent: we have more milk .
Sem:  lambda $0_{ev}.v|have(pro|we,qn|more($1,n|milk($1)),$0)
example_end

Sent: we have more milk .
Sem:  lambda $0_{ev}.v|have(pro|we,qn|more($1,n|milk($1)),$0)
example_end

Sent: don 't eat it then .
Sem:  lambda $0_{ev}.not(and(aux|do(v|eat(pro|you,pro|it,$0),$0),adv:tem|then($0)),$0)
example_end

Sent: he eats fast .
Sem:  lambda $0_{ev}.and(v|eat-3S(pro|he,$0),adv|fast($0))
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: upstairs .
Sem:  lambda $0_{ev}.adv:loc|upstairs($0)
example_end

Sent: you eat your lunch right now .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,pro:poss:det|your($1,n|lunch($1)),$0),adv|now($0))
example_end

Sent: shall I peel it ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|peel(pro|I,pro|it,$0),$0),$0)
example_end

Sent: you can 't peel it .
Sem:  lambda $0_{ev}.not(aux|can(v|peel(pro|you,pro|it,$0),$0),$0)
example_end

Sent: I 'll peel it .
Sem:  lambda $0_{ev}.aux|will(v|peel(pro|I,pro|it,$0),$0)
example_end

Sent: Papa wants an apple .
Sem:  lambda $0_{ev}.v|want-3S(n:prop|Papa,det|a($1,n|apple($1)),$0)
example_end

Sent: and have my lunch .
Sem:  lambda $0_{ev}.v|have(pro|you,pro:poss:det|my($1,n|lunch($1)),$0)
example_end

Sent: bring his coat ?
Sem:  lambda $0_{ev}.Q(v|bring(pro|you,pro:poss:det|his($1,n|coat($1)),$0),$0)
example_end

Sent: you get your pencil .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: you get your pencil .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: did you drop them ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drop(pro|you,pro|them,$0),$0),$0)
example_end

Sent: did you ever .
Sem:  lambda $0_{ev}.and(v|do&PAST(pro|you,$0),adv|ever($0))
example_end

Sent: did you ever .
Sem:  lambda $0_{ev}.and(v|do&PAST(pro|you,$0),adv|ever($0))
example_end

Sent: put it in the bed .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|bed($1)),$0))
example_end

Sent: just put it in the bed .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|bed($1)),$0))
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: you put it on the rockingchair .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|+n|rocking+n|chair($1)),$0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: running ?
Sem:  lambda $0_{ev}.Q(part|run-PROG(pro|you,$0),$0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: what did I bring today ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|bring(pro|I,$0,$1),$1),adv:tem|today($1))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's the girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|girl($1)),$0)
example_end

Sent: that 's the dolly .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|doll-DIM($1)),$0)
example_end

Sent: that 's the boy .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|boy($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's the girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|girl($1)),$0)
example_end

Sent: the girl .
Sem:  det|the($0,n|girl($0))
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's the girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|girl($1)),$0)
example_end

Sent: that 's the girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|girl($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: don 't pick your fingernail .
Sem:  lambda $0_{ev}.not(aux|do(v|pick(pro|you,pro:poss:det|your($1,n|fingernail($1)),$0),$0),$0)
example_end

Sent: did you find it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|find(pro|you,pro|it,$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: we have other things .
Sem:  lambda $0_{ev}.v|have(pro|we,qn|other($1,n|thing-PL($1)),$0)
example_end

Sent: that 's a duck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
example_end

Sent: I 'll open the briefcase .
Sem:  lambda $0_{ev}.aux|will(v|open(pro|I,det|the($1,n|briefcase($1)),$0),$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: will we put them away ?
Sem:  lambda $0_{ev}.Q(and(aux|will(v|put&ZERO(pro|we,pro|them,$0),$0),adv|away($0)),$0)
example_end

Sent: I 'll put the top on .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,det|the($1,n|top($1)),$0),$0),adv|on($0))
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: cheese ?
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: tonight we 'll have supper .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|supper($1),$0),$0),adv:tem|tonight($0))
example_end

Sent: you 're eating ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|eat-PROG(pro|you,$0),$0),$0)
example_end

Sent: chocolate ?
Sem:  lambda $0_{e}.n|chocolate($0)
example_end

Sent: for dessert you may have chocolate .
Sem:  lambda $0_{ev}.and(aux|may(v|have(pro|you,lambda $1_{e}.n|chocolate($1),$0),$0),prep|for(lambda $2_{e}.n|dessert($2),$0))
example_end

Sent: what 's she doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|she,$0,$1),$1)
example_end

Sent: and Eve 's sitting in her highchair .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Eve,$0),$0),prep|in(pro:poss:det|her($1,n|+adj|high+n|chair($1)),$0))
example_end

Sent: Fraser too ?
Sem:  lambda $0_{ev}.Q(n:prop|Fraser,$0)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's Gordon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Gordon,$0)
example_end

Sent: send the box to Sheila .
Sem:  lambda $0_{ev}.and(v|send(pro|you,det|the($1,n|box($1)),$0),prep|to(n:prop|Sheila,$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'm using it .
Sem:  lambda $0_{ev}.aux|be&1S(part|use-PROG(pro|I,pro|it,$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: it 'll be easier .
Sem:  adj|easy-CP(pro|it)
example_end

Sent: did you cut it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|cut&ZERO(pro|you,pro|it,$0),$0),$0)
example_end

Sent: we 're finished cleaning .
Sem:  lambda $0_{ev}.aux|be&PRES(part|finish-PERF(pro|we,$0),$0)
example_end

Sent: you 'd better put it back .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|back($0))
example_end

Sent: can 't you do it ?
Sem:  lambda $0_{ev}.Q(not(aux|can(v|do(pro|you,pro|it,$0),$0),$0),$0)
example_end

Sent: you put it back in the cupboard .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|cupboard($1)),$0))
example_end

Sent: you can do it .
Sem:  lambda $0_{ev}.aux|can(v|do(pro|you,pro|it,$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: are you ready ?
Sem:  lambda $0_{ev}.Q(adj|ready(pro|you),$0)
example_end

Sent: give me the pencils .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|pencil-PL($1)),$0)
example_end

Sent: give me the pencil .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|pencil($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you give me the pencil .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|pencil($1)),$0)
example_end

Sent: you give me the pencils .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|pencil-PL($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: I had sugar .
Sem:  lambda $0_{ev}.v|have&PAST(pro|I,lambda $1_{e}.n|sugar($1),$0)
example_end

Sent: I need my pencil .
Sem:  lambda $0_{ev}.v|need(pro|I,pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: but I need a pencil .
Sem:  lambda $0_{ev}.v|need(pro|I,det|a($1,n|pencil($1)),$0)
example_end

Sent: it 's an eraser .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|eraser($1)),$0)
example_end

Sent: it 's an eraser .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|eraser($1)),$0)
example_end

Sent: it 's an eraser .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|eraser($1)),$0)
example_end

Sent: she didn 't understand push  .  MLR
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|understand(pro|she,lambda $1_{e}.n|quote($1),$0),$0),$0)
example_end

Sent: we went to see Cathy .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|we,$0),v|see(pro|we,n:prop|Cathy,$0))
example_end

Sent: and what did Cathy have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|have(n:prop|Cathy,$0,$1),$1)
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: it had candles on it .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|it,lambda $1_{e}.n|candle-PL($1),$0),prep|on(pro|it,$0))
example_end

Sent: what was it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: did you hurt your finger ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|hurt&ZERO(pro|you,pro:poss:det|your($1,n|finger($1)),$0),$0),$0)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: sure he is .
Sem:  adj|sure(pro|he)
example_end

Sent: what is Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: what 's he writing on ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|write-PROG(pro|he,$0,$1),$1),adv:loc|on($1))
example_end

Sent: I need my pencil .
Sem:  lambda $0_{ev}.v|need(pro|I,pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: give me the crayons .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|crayon-PL($1)),$0)
example_end

Sent: give me the crayons .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|crayon-PL($1)),$0)
example_end

Sent: you give me the crayons .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|crayon-PL($1)),$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: fixing the box for Sheila .
Sem:  lambda $0_{ev}.and(part|fix-PROG(pro|you,det|the($1,n|box($1)),$0),prep|for(n:prop|Sheila,$0))
example_end

Sent: do you have the crayons ?
Sem:  lambda $0_{ev}.Q(aux|do(v|have(pro|you,det|the($1,n|crayon-PL($1)),$0),$0),$0)
example_end

Sent: who has the crayons ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&3S($0,det|the($2,n|crayon-PL($2)),$1)
example_end

Sent: you have lots of crayons in there .
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|lots($1,n|crayon-PL($1)),$0),adv:loc|in($0))
example_end

Sent: you cannot use it .
Sem:  lambda $0_{ev}.not(aux|can(v|use(pro|you,pro|it,$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: give me the pegs .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|peg-PL($1)),$0)
example_end

Sent: what do you put on the floor ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|put&ZERO(pro|you,$0,$1),$1),prep|on(det|the($2,n|floor($2)),$1))
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: coffee .
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: that 's your cheese sandwich .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: that 's hot .
Sem:  adj|hot(pro:dem|that)
example_end

Sent: cheese sandwich .
Sem:  lambda $0_{e}.and(n|cheese($0),n|sandwich($0))
example_end

Sent: is that hot ?
Sem:  lambda $0_{ev}.Q(adj|hot(pro:dem|that),$0)
example_end

Sent: is your soup hot ?
Sem:  lambda $0_{ev}.Q(adj|hot(pro:poss:det|your($1,n|soup($1))),$0)
example_end

Sent: it 's not ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: is the cheese sandwich hot ?
Sem:  lambda $0_{ev}.Q(adj|hot(det|the($1,and(n|cheese($1),n|sandwich($1)))),$0)
example_end

Sent: have you been drawing ?
Sem:  lambda $0_{ev}.Q(aux|be&PERF(aux|have(part|draw-PROG(pro|you,$0),$0),$0),$0)
example_end

Sent: more grape juice ?
Sem:  lambda $0_{ev}.Q(qn|more($1,and(n|grape($1),n|juice($1))),$0)
example_end

Sent: better fix it ?
Sem:  lambda $0_{ev}.Q(and(v|fix(pro|you,pro|it,$0),adv|better($0)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'll get another pencil .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|I,qn|another($1,n|pencil($1)),$0),$0)
example_end

Sent: what do we do now then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|we,$0,$1),$1),adv:tem|then($1))
example_end

Sent: now .
Sem:  lambda $0_{ev}.adv|now($0)
example_end

Sent: you give me the pencils .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,det|the($1,n|pencil-PL($1)),$0)
example_end

Sent: they 're allgone .
Sem:  adj|all_gone(pro|they)
example_end

Sent: they are allgone .
Sem:  adj|all_gone(pro|they)
example_end

Sent: they 're allgone ?
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|they),$0)
example_end

Sent: what 's allgone ?
Sem:  lambda $0_{e}.adj|all_gone($0)
example_end

Sent: you find it .
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
example_end

Sent: you look for it .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|for(pro|it,$0))
example_end

Sent: where is the bicycle ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|bicycle($1)),$0)
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: and we 'll play with this .
Sem:  lambda $0_{ev}.and(aux|will(v|play(pro|we,$0),$0),prep|with(pro:dem|this,$0))
example_end

Sent: Jim does funny things .
Sem:  lambda $0_{ev}.v|do&3S(n:prop|Jim,lambda $1_{e}.and(adj|funny($1),n|thing-PL($1)),$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: I 'll turn it again .
Sem:  lambda $0_{ev}.and(aux|will(v|turn(pro|I,pro|it,$0),$0),adv|again($0))
example_end

Sent: did you hear it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|hear(pro|you,pro|it,$0),$0),$0)
example_end

Sent: the bird 's name 's Jim .
Sem:  lambda $0_{ev}.eq(det|the($1,and(n|bird($1),n|name($1))),n:prop|Jim,$0)
example_end

Sent: he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: he goes whistle .
Sem:  lambda $0_{ev}.v|go-3S(pro|he,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I can chirp .
Sem:  lambda $0_{ev}.aux|can(v|chirp(pro|I,$0),$0)
example_end

Sent: can you chirp ?
Sem:  lambda $0_{ev}.Q(aux|can(v|chirp(pro|you,$0),$0),$0)
example_end

Sent: you chirp .
Sem:  lambda $0_{ev}.v|chirp(pro|you,$0)
example_end

Sent: he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what did he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|he,$0,$1),$1)
example_end

Sent: what did he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|he,$0,$1),$1)
example_end

Sent: we 'll give him a rest .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|we,pro|him,det|a($1,n|rest($1)),$0),$0)
example_end

Sent: we 'll put him away ?
Sem:  lambda $0_{ev}.Q(and(aux|will(v|put&ZERO(pro|we,pro|him,$0),$0),adv|away($0)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: we 'll put this away .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|we,pro:dem|this,$0),$0),adv|away($0))
example_end

Sent: you want something else ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,pro:indef|something,$0),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: we don 't need something else ?
Sem:  lambda $0_{ev}.Q(not(aux|do(v|need(pro|we,pro:indef|something,$0),$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: now .  IMIT
Sem:  lambda $0_{ev}.adv|now($0)
example_end

Sent: I 'll give you the duck .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|you,det|the($1,n|duck($1)),$0),$0)
example_end

Sent: you can 't find it ?
Sem:  lambda $0_{ev}.Q(not(aux|can(v|find(pro|you,pro|it,$0),$0),$0),$0)
example_end

Sent: what else would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: lunchtime .
Sem:  lambda $0_{e}.n|lunchtime($0)
example_end

Sent: almost .
Sem:  lambda $0_{ev}.adv|almost($0)
example_end

Sent: almost .
Sem:  lambda $0_{ev}.adv|almost($0)
example_end

Sent: your grape juice is allgone .
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
example_end

Sent: bread .
Sem:  lambda $0_{e}.n|bread($0)
example_end

Sent: pick it up .
Sem:  lambda $0_{ev}.and(v|pick(pro|you,pro|it,$0),adv:loc|up($0))
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: climb in .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
example_end

Sent: you move right here .
Sem:  lambda $0_{ev}.and(v|move(pro|you,$0),adv:loc|here($0))
example_end

Sent: your spoon ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|spoon($1)),$0)
example_end

Sent: I 'll get it for you .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: is he jumping ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|jump-PROG(pro|he,$0),$0),$0)
example_end

Sent: he chirps .
Sem:  lambda $0_{ev}.v|chirp&3S(pro|he,$0)
example_end

Sent: would you like a piece ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|piece($1)),$0),$0),$0)
example_end

Sent: are you sleepy ?
Sem:  lambda $0_{ev}.Q(adj|sleepy(pro|you),$0)
example_end

Sent: butter too ?
Sem:  lambda $0_{e}.n|butter($0)
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: what else did he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|he,$0,$1),$1)
example_end

Sent: what did he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|he,$0,$1),$1)
example_end

Sent: the noise ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|noise($1)),$0)
example_end

Sent: what was that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: chirps ?
Sem:  lambda $0_{ev}.Q(v|chirp-3S(pro|you,$0),$0)
example_end

Sent: not jump .
Sem:  lambda $0_{ev}.not(v|jump(pro|you,$0),$0)
example_end

Sent: chirp .
Sem:  lambda $0_{ev}.v|chirp(pro|you,$0)
example_end

Sent: chirp .
Sem:  lambda $0_{ev}.v|chirp(pro|you,$0)
example_end

Sent: who is ?
Sem:  lambda $0_{e}.pro:wh|who
example_end

Sent: who is ?
Sem:  lambda $0_{e}.pro:wh|who
example_end

Sent: the duck ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|duck($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: put them back in the box .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(det|the($1,n|box($1)),$0))
example_end

Sent: I 'll put them back .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|them,$0),$0),adv:loc|back($0))
example_end

Sent: what are they doing in your tapioca ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),prep|in(pro:poss:det|your($2,n|tapioca($2)),$1))
example_end

Sent: what are they doing in your tapioca ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),prep|in(pro:poss:det|your($2,n|tapioca($2)),$1))
example_end

Sent: the snowman 's wearing glasses ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(det|the($1,n|snowman($1)),lambda $2_{e}.n|glass-PL($2),$0),$0),$0)
example_end

Sent: you don 't have a snowman .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|you,det|a($1,n|snowman($1)),$0),$0),$0)
example_end

Sent: he 's gone away .
Sem:  lambda $0_{ev}.and(aux|have&3S(part|go&PERF(pro|he,$0),$0),adv|away($0))
example_end

Sent: see it .
Sem:  lambda $0_{ev}.v|see(pro|you,pro|it,$0)
example_end

Sent: I 'm making bouillon for Papa .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|bouillon($1),$0),$0),prep|for(n:prop|Papa,$0))
example_end

Sent: and sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: it 's not sleeping .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(pro|it,$0),$0),$0)
example_end

Sent: it 's just laying there .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|lay-PROG(pro|it,$0),$0),adv:loc|there($0))
example_end

Sent: clean new blanket ?
Sem:  lambda $0_{e}.and(adj|clean($0),adj|new($0),n|blanket($0))
example_end

Sent: new clean blanket ?
Sem:  lambda $0_{e}.and(adj|new($0),adj|clean($0),n|blanket($0))
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is your blanket ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|blanket($1)),$0)
example_end

Sent: who put it there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|put&ZERO($0,pro|it,$1),adv:loc|there($1))
example_end

Sent: green are what ?
Sem:  lambda $0_{e}.adj|green($0)
example_end

Sent: a hat .
Sem:  det|a($0,n|hat($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: lying on the couch .
Sem:  lambda $0_{ev}.and(part|lie-PROG(pro|you,$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: I 'll hold it .
Sem:  lambda $0_{ev}.aux|will(v|hold(pro|I,pro|it,$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: you tie that right up .
Sem:  lambda $0_{ev}.and(v|tie(pro|you,pro:dem|that,$0),adv:loc|up($0))
example_end

Sent: tie that shoe .
Sem:  lambda $0_{ev}.v|tie(pro|you,det|that($1,n|shoe($1)),$0)
example_end

Sent: you tie it .
Sem:  lambda $0_{ev}.v|tie(pro|you,pro|it,$0)
example_end

Sent: tie it .
Sem:  lambda $0_{ev}.v|tie(pro|you,pro|it,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's not dooc .
Sem:  pro|it
example_end

Sent: you tie up my shoes for me .
Sem:  lambda $0_{ev}.and(v|tie(pro|you,pro:poss:det|my($1,n|shoe-PL($1)),$0),prep|for(pro|me,$0))
example_end

Sent: you tie up my shoes .
Sem:  lambda $0_{ev}.and(v|tie(pro|you,pro:poss:det|my($1,n|shoe-PL($1)),$0),adv:loc|up($0))
example_end

Sent: what is it .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'll put it in .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|in($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's dl el fl .
Sem:  pro:dem|that
example_end

Sent: who did then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|do&PAST($0,$1),adv:tem|then($1))
example_end

Sent: what 's fl ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: sandwich ?
Sem:  lambda $0_{e}.n|sandwich($0)
example_end

Sent: you want a sandwich ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|sandwich($1)),$0),$0)
example_end

Sent: a cheese sandwich ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: where is Papa ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: we 'll have some tapioca too .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,qn|some($1,n|tapioca($1)),$0),$0)
example_end

Sent: sugar ?
Sem:  lambda $0_{e}.n|sugar($0)
example_end

Sent: Fraser has sugar in his coffee .
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Fraser,lambda $1_{e}.n|sugar($1),$0),prep|in(pro:poss:det|his($2,n|coffee($2)),$0))
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: almost done .
Sem:  lambda $0_{ev}.and(part|do&PERF(pro|you,$0),adv|almost($0))
example_end

Sent: almost done .
Sem:  lambda $0_{ev}.and(part|do&PERF(pro|you,$0),adv|almost($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: your finger 's jumping ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|jump-PROG(pro:poss:det|your($1,n|finger($1)),$0),$0),$0)
example_end

Sent: you must blow on it .
Sem:  lambda $0_{ev}.and(aux|must(v|blow(pro|you,$0),$0),prep|on(pro|it,$0))
example_end

Sent: you blow on it .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),prep|on(pro|it,$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: I 'll put it right here .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|here($0))
example_end

Sent: peanutbutter .
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: squirrels ?
Sem:  lambda $0_{e}.n|squirrel-PL($0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: did you bite the paddle ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|bite(pro|you,det|the($1,n|paddle($1)),$0),$0),$0)
example_end

Sent: you did bite it .
Sem:  lambda $0_{ev}.aux|do&PAST(v|bite(pro|you,pro|it,$0),$0)
example_end

Sent: you bit a hole in it .
Sem:  lambda $0_{ev}.and(v|bite&PAST(pro|you,det|a($1,n|hole($1)),$0),prep|in(pro|it,$0))
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: it melted .
Sem:  lambda $0_{ev}.v|melt-PAST(pro|it,$0)
example_end

Sent: look right there .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|there($0))
example_end

Sent: not the cheese sandwich .
Sem:  lambda $0_{ev}.not(det|the($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: we eat the cheese sandwich .
Sem:  lambda $0_{ev}.v|eat(pro|we,det|the($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: you hit it ?
Sem:  lambda $0_{ev}.Q(v|hit&ZERO(pro|you,pro|it,$0),$0)
example_end

Sent: that is .
Sem:  pro:dem|that
example_end

Sent: he came to see you .
Sem:  lambda $0_{ev}.and(v|come&PAST(pro|he,$0),v|see(pro|he,pro|you,$0))
example_end

Sent: Papa comes everyday .
Sem:  lambda $0_{ev}.and(v|come-3S(n:prop|Papa,$0),adv:tem|everyday($0))
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: eat your tapioca .
Sem:  lambda $0_{ev}.v|eat(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and you don 't spit it out .
Sem:  lambda $0_{ev}.not(and(aux|do(v|spit(pro|you,pro|it,$0),$0),adv:loc|out($0)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's hot ?
Sem:  lambda $0_{ev}.Q(adj|hot(pro|it),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it has a hat on ?
Sem:  lambda $0_{ev}.Q(and(v|have&3S(pro|it,det|a($1,n|hat($1)),$0),adv|on($0)),$0)
example_end

Sent: Mom bit the hole in it .
Sem:  lambda $0_{ev}.and(v|bite&PAST(n:prop|Mom,det|the($1,n|hole($1)),$0),prep|in(pro|it,$0))
example_end

Sent: don 't touch them again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|touch(pro|you,pro|them,$0),$0),adv|again($0)),$0)
example_end

Sent: clean napkins .
Sem:  lambda $0_{e}.and(adj|clean($0),n|napkin-PL($0))
example_end

Sent: you fell down .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro|you,$0),adv:loc|down($0))
example_end

Sent: what did you do yesterday ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:tem|yesterday($1))
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: she can 't sit up .
Sem:  lambda $0_{ev}.not(and(aux|can(v|sit(pro|she,$0),$0),adv:loc|up($0)),$0)
example_end

Sent: you managed very well .
Sem:  lambda $0_{ev}.and(v|manage-PAST(pro|you,$0),adv|well($0))
example_end

Sent: Fraser 'll read it .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(n:prop|Fraser,pro|it,$0),$0)
example_end

Sent: I have teeth .
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.n|tooth&PL($1),$0)
example_end

Sent: where 's your teeth ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|tooth&PL($1)),$0)
example_end

Sent: I have big teeth .
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0)
example_end

Sent: Mom has big teeth .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Mom,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0)
example_end

Sent: Wednesday .
Sem:  n:prop|Wednesday
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: are they ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: I 'll get your pencil out .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro:poss:det|your($1,n|pencil($1)),$0),$0),adv:loc|out($0))
example_end

Sent: it 's going away .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|away($0))
example_end

Sent: then she 'll have a nap .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|she,det|a($1,n|nap($1)),$0),$0),adv:tem|then($0))
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: is this your pencil ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|your($1,n|pencil($1)),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're playing with Fraser ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|play-PROG(pro|you,$0),$0),prep|with(n:prop|Fraser,$0)),$0)
example_end

Sent: will I get your bead ?
Sem:  lambda $0_{ev}.Q(aux|will(v|get(pro|I,pro:poss:det|your($1,n|bead($1)),$0),$0),$0)
example_end

Sent: that 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:dem|that,$0,$1)
example_end

Sent: what do you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|do(pro|you,$0,$1),$1)
example_end

Sent: you 're making what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're making a bead .
Sem:  lambda $0_{ev}.aux|be&PRES(part|make-PROG(pro|you,det|a($1,n|bead($1)),$0),$0)
example_end

Sent: are they your beads ?
Sem:  lambda $0_{ev}.Q(eq(pro|they,pro:poss:det|your($1,n|bead-PL($1)),$0),$0)
example_end

Sent: are they your bead ?
Sem:  lambda $0_{ev}.Q(eq(pro|they,pro:poss:det|your($1,n|bead($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 'll be easier .
Sem:  adj|easy-CP(pro|it)
example_end

Sent: what 's Papa going to use ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$1),v|use(n:prop|Papa,$0,$1)),$1)
example_end

Sent: is this a beads ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,det|a($1,n|bead-PL($1)),$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: my cookbook ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|cookbook($1)),$0)
example_end

Sent: Mom got a cookbook .
Sem:  lambda $0_{ev}.v|get&PAST(n:prop|Mom,det|a($1,n|cookbook($1)),$0)
example_end

Sent: call Granny .
Sem:  lambda $0_{ev}.v|call(pro|you,n:prop|Granny,$0)
example_end

Sent: I can 't see you .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|I,pro|you,$0),$0),$0)
example_end

Sent: I can 't see you .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|I,pro|you,$0),$0),$0)
example_end

Sent: peek .
Sem:  lambda $0_{ev}.v|peek(pro|you,$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: can you see me ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: tell him to come in .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|him,$0),adv:loc|in($0))
example_end

Sent: is it Cromer ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,n:prop|Cromer,$0),$0)
example_end

Sent: tell him to come in .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|him,$0),adv:loc|in($0))
example_end

Sent: he 's standing out in the cold .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|stand-PROG(pro|he,$0),$0),prep|in(det|the($1,n|cold($1)),$0))
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: that wasn 't Rick .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Rick,$0),$0)
example_end

Sent: it was the gas man  the gas man .
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,and(n|gas($1),n|man($1))),$0)
example_end

Sent: want some lunch ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|lunch($1)),$0),$0)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: did he bring the dolls ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|bring(pro|he,det|the($1,n|doll-PL($1)),$0),$0),$0)
example_end

Sent: he 'll open the bag .
Sem:  lambda $0_{ev}.aux|will(v|open(pro|he,det|the($1,n|bag($1)),$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: blow .
Sem:  lambda $0_{e}.n|blow($0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: bringing them both over here .
Sem:  lambda $0_{ev}.and(part|bring-PROG(pro|you,pro|them,$0),adv:loc|here($0))
example_end

Sent: that 's a baby doll .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|baby($1),n|doll($1))),$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what do I have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|have(pro|I,$0,$1),$1)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: blow .
Sem:  lambda $0_{e}.n|blow($0)
example_end

Sent: clear it out .
Sem:  lambda $0_{ev}.and(v|clear(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: boy .
Sem:  lambda $0_{e}.n|boy($0)
example_end

Sent: they can stay .
Sem:  lambda $0_{ev}.aux|can(v|stay(pro|they,$0),$0)
example_end

Sent: are you ready ?
Sem:  lambda $0_{ev}.Q(adj|ready(pro|you),$0)
example_end

Sent: can I help you ?
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: look at the box .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(det|the($1,n|box($1)),$0))
example_end

Sent: you want it up here ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|it,$0),adv:loc|up($0)),$0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: and he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: that 's a pen .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|pen($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what should I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|should(v|do(pro|I,$0,$1),$1)
example_end

Sent: that 's a ring .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|ring($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a watch .
Sem:  det|a($0,n|watch($0))
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: you put the top back on .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),adv|on($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: he 's early .
Sem:  adj|early(pro|he)
example_end

Sent: Mom 's just put stamps on them .
Sem:  lambda $0_{ev}.and(aux|have&3S(v|put&ZERO(n:prop|Mom,lambda $1_{e}.n|stamp-PL($1),$0),$0),prep|on(pro|them,$0))
example_end

Sent: you 're what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|you,$0,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: giving Sarah some milk .
Sem:  lambda $0_{ev}.part|give-PROG(pro|you,n:prop|Sarah,qn|some($1,n|milk($1)),$0)
example_end

Sent: we did have a party .
Sem:  lambda $0_{ev}.aux|do&PAST(v|have(pro|we,det|a($1,n|party($1)),$0),$0)
example_end

Sent: the cake plate .
Sem:  det|the($0,and(n|cake($0),n|plate($0)))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: read HippityHop ?
Sem:  lambda $0_{ev}.Q(v|read&ZERO(pro|you,n:prop|Hippity_Hop,$0),$0)
example_end

Sent: where 's your train ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|train($1)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: put it back together .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|together($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: I know which ones .
Sem:  lambda $0_{ev}.v|know(pro|I,pro:indef|one-PL,$0)
example_end

Sent: you may not have it .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: do you want the envelope ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|the($1,n|envelope($1)),$0),$0),$0)
example_end

Sent: don 't you want the envelope ?
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,det|the($1,n|envelope($1)),$0),$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: he 'll fix it .
Sem:  lambda $0_{ev}.aux|will(v|fix(pro|he,pro|it,$0),$0)
example_end

Sent: you put them in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
example_end

Sent: you went for a walk yesterday ?
Sem:  lambda $0_{ev}.Q(and(v|go&PAST(pro|you,$0),adv:tem|yesterday($0)),$0)
example_end

Sent: what else did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: we 'll have some milk .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,qn|some($1,n|milk($1)),$0),$0)
example_end

Sent: you want a cheese sandwich too ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,and(n|cheese($1),n|sandwich($1))),$0),$0)
example_end

Sent: what 's he going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(pro|he,$1),v|do(pro|he,$0,$1)),$1)
example_end

Sent: she 's smiling .
Sem:  lambda $0_{ev}.aux|be&3S(part|smile-PROG(pro|she,$0),$0)
example_end

Sent: she 's another doily on .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,qn|another($1,n|doily($1)),$0),adv:loc|on($0))
example_end

Sent: she wet in them .
Sem:  lambda $0_{ev}.and(v|wet&ZERO(pro|she,$0),prep|in(pro|them,$0))
example_end

Sent: may I have it ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,pro|it,$0),$0),$0)
example_end

Sent: I need it .
Sem:  lambda $0_{ev}.v|need(pro|I,pro|it,$0)
example_end

Sent: you look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: may I see them ?
Sem:  lambda $0_{ev}.Q(aux|may(v|see(pro|I,pro|them,$0),$0),$0)
example_end

Sent: is that girl making tapioca ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|make-PROG(det|that($1,n|girl($1)),lambda $2_{e}.n|tapioca($2),$0),$0),$0)
example_end

Sent: who sent you that card ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|send&PAST($0,pro|you,det|that($2,n|card($2)),$1)
example_end

Sent: Nanny ?
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
example_end

Sent: may I see it ?
Sem:  lambda $0_{ev}.Q(aux|may(v|see(pro|I,pro|it,$0),$0),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what are these ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: lions ?
Sem:  lambda $0_{e}.n|lion-PL($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: are they ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: that 's my spot .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|spot($1)),$0)
example_end

Sent: it 's not your spot .
Sem:  lambda $0_{ev}.not(eq(pro|it,pro:poss:det|your($1,n|spot($1)),$0),$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it fell on the floor .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: more peanutbutter ?
Sem:  lambda $0_{ev}.Q(qn|more($1,n|+n|peanut+n|butter($1)),$0)
example_end

Sent: what did you do my ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: your tunnel is what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:poss:det|your($2,n|tunnel($2)),$0,$1)
example_end

Sent: it melted too .
Sem:  lambda $0_{ev}.v|melt-PAST(pro|it,$0)
example_end

Sent: it melted too .
Sem:  lambda $0_{ev}.v|melt-PAST(pro|it,$0)
example_end

Sent: little friend .
Sem:  lambda $0_{e}.and(adj|little($0),n|friend($0))
example_end

Sent: she 's your little friend .
Sem:  lambda $0_{ev}.eq(pro|she,pro:poss:det|your($1,and(adj|little($1),n|friend($1))),$0)
example_end

Sent: do you want some soup ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,qn|some($1,n|soup($1)),$0),$0),$0)
example_end

Sent: soup .
Sem:  lambda $0_{e}.n|soup($0)
example_end

Sent: bubbles .
Sem:  lambda $0_{e}.n|bubble-PL($0)
example_end

Sent: we 'll just put it there .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|we,pro|it,$0),$0),adv:loc|there($0))
example_end

Sent: it 's hot .
Sem:  adj|hot(pro|it)
example_end

Sent: she 's sitting in her chair .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|she,$0),$0),prep|in(pro:poss:det|her($1,n|chair($1)),$0))
example_end

Sent: that 's yours .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: he 's not going yet .
Sem:  lambda $0_{ev}.not(and(aux|be&3S(part|go-PROG(pro|he,$0),$0),adv|yet($0)),$0)
example_end

Sent: I 'm going into the bank .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),prep|into(det|the($1,n|bank($1)),$0))
example_end

Sent: now what else can I get for you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|can(v|get(pro|I,$0,$1),$1),prep|for(pro|you,$1))
example_end

Sent: what else can I get for you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|can(v|get(pro|I,$0,$1),$1),prep|for(pro|you,$1))
example_end

Sent: apple ?
Sem:  lambda $0_{e}.n|apple($0)
example_end

Sent: chocolate .
Sem:  lambda $0_{e}.n|chocolate($0)
example_end

Sent: you may certainly have chocolate .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,lambda $1_{e}.n|chocolate($1),$0),$0)
example_end

Sent: you just eat that up first .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,pro:dem|that,$0),adv|first($0))
example_end

Sent: I see you out there .
Sem:  lambda $0_{ev}.and(v|see(pro|I,pro|you,$0),adv:loc|out($0))
example_end

Sent: what 's hot ?
Sem:  lambda $0_{e}.adj|hot($0)
example_end

Sent: you 're what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|you,$0,$1)
example_end

Sent: you 're cracking it ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,pro|it,$0),$0),$0)
example_end

Sent: now you may eat your chocolate .
Sem:  lambda $0_{ev}.and(aux|may(v|eat(pro|you,pro:poss:det|your($1,n|chocolate($1)),$0),$0),adv|now($0))
example_end

Sent: is it good ?
Sem:  lambda $0_{ev}.Q(adj|good(pro|it),$0)
example_end

Sent: that 's not a pear .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|pear($1)),$0),$0)
example_end

Sent: that 's an apple .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|apple($1)),$0)
example_end

Sent: pear ?
Sem:  lambda $0_{e}.n|pear($0)
example_end

Sent: are you saying pear ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|say-PROG(pro|you,lambda $1_{e}.n|pear($1),$0),$0),$0)
example_end

Sent: it 's an apple .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|apple($1)),$0)
example_end

Sent: you may have a piece .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,det|a($1,n|piece($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: where is she ?
Sem:  lambda $0_{e}.eqLoc(pro|she,$0)
example_end

Sent: that 's not mine .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss|mine,$0),$0)
example_end

Sent: that 's yours .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
example_end

Sent: you gonna eat your sandwich then ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),adv:tem|then($0)),$0)
example_end

Sent: eat your birthday sandwich ?
Sem:  lambda $0_{ev}.Q(v|eat(pro|you,pro:poss:det|your($1,and(n|birthday($1),n|sandwich($1))),$0),$0)
example_end

Sent: that 's a cheese sandwich .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: birthday cake .
Sem:  lambda $0_{e}.and(n|birthday($0),n|cake($0))
example_end

Sent: that 's the icing ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|icing($1)),$0),$0)
example_end

Sent: spoon ?
Sem:  lambda $0_{e}.n|spoon($0)
example_end

Sent: do you need a spoon ?
Sem:  lambda $0_{ev}.Q(aux|do(v|need(pro|you,det|a($1,n|spoon($1)),$0),$0),$0)
example_end

Sent: lick it off .
Sem:  lambda $0_{ev}.and(v|lick(pro|you,pro|it,$0),adv|off($0))
example_end

Sent: hold what for you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|hold(pro|you,$0,$1),prep|for(pro|you,$1))
example_end

Sent: hold your hands still .
Sem:  lambda $0_{ev}.and(v|hold(pro|you,pro:poss:det|your($1,n|hand-PL($1)),$0),adv|still($0))
example_end

Sent: you do it .
Sem:  lambda $0_{ev}.v|do(pro|you,pro|it,$0)
example_end

Sent: they 're yours .
Sem:  lambda $0_{ev}.eq(pro|they,pro:poss|yours,$0)
example_end

Sent: I put mine away .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|I,pro:poss|mine,$0),adv|away($0))
example_end

Sent: I put mine back in the closet .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|I,pro:poss|mine,$0),prep|in(det|the($1,n|closet($1)),$0))
example_end

Sent: you put yours away too .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss|yours,$0),adv|away($0))
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: can 't you see it ?
Sem:  lambda $0_{ev}.Q(not(aux|can(v|see(pro|you,pro|it,$0),$0),$0),$0)
example_end

Sent: just pour it in .
Sem:  lambda $0_{ev}.and(v|pour(pro|you,pro|it,$0),adv:loc|in($0))
example_end

Sent: some cream .
Sem:  qn|some($0,n|cream($0))
example_end

Sent: will I have one ?
Sem:  lambda $0_{ev}.Q(aux|will(v|have(pro|I,pro:indef|one,$0),$0),$0)
example_end

Sent: you leave my coffee there .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro:poss:det|my($1,n|coffee($1)),$0),adv:loc|there($0))
example_end

Sent: that 's a lovely hat .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|lovely($1),n|hat($1))),$0)
example_end

Sent: a napkin .
Sem:  det|a($0,n|napkin($0))
example_end

Sent: may I have it ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,pro|it,$0),$0),$0)
example_end

Sent: that 's a nice hat .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|hat($1))),$0)
example_end

Sent: whose briefcase ?
Sem:  lambda $0_{e}.n|briefcase($0)
example_end

Sent: is that right ?
Sem:  lambda $0_{ev}.Q(adj|right(pro:dem|that),$0)
example_end

Sent: that 's a swell hat .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|swell($1),n|hat($1))),$0)
example_end

Sent: I 'll snap it .
Sem:  lambda $0_{ev}.aux|will(v|snap(pro|I,pro|it,$0),$0)
example_end

Sent: did she lose another shoe ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|lose(pro|she,qn|another($1,n|shoe($1)),$0),$0),$0)
example_end

Sent: dolly .
Sem:  lambda $0_{e}.n|doll-DIM($0)
example_end

Sent: and snap it too .
Sem:  lambda $0_{ev}.v|snap(pro|you,pro|it,$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: do what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: my name 's not Eve .
Sem:  lambda $0_{ev}.not(eq(pro:poss:det|my($1,n|name($1)),n:prop|Eve,$0),$0)
example_end

Sent: you can do it .
Sem:  lambda $0_{ev}.aux|can(v|do(pro|you,pro|it,$0),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: aren 't we ?
Sem:  lambda $0_{ev}.Q(pro|we,$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: who sees you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|see-3S($0,pro|you,$1)
example_end

Sent: you see my ear .
Sem:  lambda $0_{ev}.v|see(pro|you,pro:poss:det|my($1,n|ear($1)),$0)
example_end

Sent: can you see it ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: can you see it ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: can you see it now ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|it,$0),$0),adv|now($0)),$0)
example_end

Sent: that 's al .
Sem:  pro:dem|that
example_end

Sent: you 're what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|you,$0,$1)
example_end

Sent: pull it down .
Sem:  lambda $0_{ev}.and(v|pull(pro|you,pro|it,$0),adv:loc|down($0))
example_end

Sent: I can see it .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|it,$0),$0)
example_end

Sent: I can see your ear .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro:poss:det|your($1,n|ear($1)),$0),$0)
example_end

Sent: you do that then .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro:dem|that,$0),adv:tem|then($0))
example_end

Sent: can you pull it out ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|pull(pro|you,pro|it,$0),$0),adv:loc|out($0)),$0)
example_end

Sent: I pulled your hair .
Sem:  lambda $0_{ev}.v|pull-PAST(pro|I,pro:poss:det|your($1,n|hair($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: your drum ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drum($1)),$0)
example_end

Sent: where is the stick ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|stick($1)),$0)
example_end

Sent: kiss it .
Sem:  lambda $0_{ev}.v|kiss(pro|you,pro|it,$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: you 're doing quite well .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|well($0))
example_end

Sent: I 'll do it for you .
Sem:  lambda $0_{ev}.and(aux|will(v|do(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: you got it sideways ?
Sem:  lambda $0_{ev}.Q(and(v|get&PAST(pro|you,pro|it,$0),adv|sideways($0)),$0)
example_end

Sent: that 'll be no fun .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|no($1,n|fun($1)),$0)
example_end

Sent: we threw it away in the trash .
Sem:  lambda $0_{ev}.and(v|throw&PAST(pro|we,pro|it,$0),prep|in(det|the($1,n|trash($1)),$0))
example_end

Sent: we threw it away in the trash .
Sem:  lambda $0_{ev}.and(v|throw&PAST(pro|we,pro|it,$0),prep|in(det|the($1,n|trash($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: don 't you peepee .
Sem:  pro|you
example_end

Sent: they belong on the board .
Sem:  lambda $0_{ev}.and(v|belong(pro|they,$0),prep|on(det|the($1,n|board($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're going to make words .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|make(pro|you,lambda $1_{e}.n|word-PL($1),$0)),$0)
example_end

Sent: you 're making your name ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|make-PROG(pro|you,pro:poss:det|your($1,n|name($1)),$0),$0),$0)
example_end

Sent: we don 't have cheese sandwich .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,lambda $1_{e}.and(n|cheese($1),n|sandwich($1)),$0),$0),$0)
example_end

Sent: is that alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro:dem|that),$0)
example_end

Sent: you were watching the men .
Sem:  lambda $0_{ev}.aux|be&PAST(part|watch-PROG(pro|you,det|the($1,n|man&PL($1)),$0),$0)
example_end

Sent: they aren 't building a hole .
Sem:  lambda $0_{ev}.not(aux|be&PRES(part|build-PROG(pro|they,det|a($1,n|hole($1)),$0),$0),$0)
example_end

Sent: they 're building a building now .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|build-PROG(pro|they,det|a($1,n|building($1)),$0),$0),adv|now($0))
example_end

Sent: we 're going into Boston on Saturday .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|we,$0),$0),prep|on(n:prop|Saturday,$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's fun .
Sem:  adj|fun(pro|it)
example_end

Sent: we don 't have any bread .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,qn|any($1,n|bread($1)),$0),$0),$0)
example_end

Sent: chew it up .
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
example_end

Sent: it 's going round .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|round($0))
example_end

Sent: that 's okay .
Sem:  pro:dem|that
example_end

Sent: what are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: are you putting him in there ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|put-PROG(pro|you,pro|him,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: are you putting Jim on there ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|put-PROG(pro|you,n:prop|Jim,$0),$0),adv:loc|on($0)),$0)
example_end

Sent: what does the dolly have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|have(det|the($2,n|doll-DIM($2)),$0,$1),$1)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: it 's a squeaky duck .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|squeaky($1),n|duck($1))),$0)
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: it 's a squeaky boat .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|squeaky($1),n|boat($1))),$0)
example_end

Sent: that 's a squeaky duck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|squeaky($1),n|duck($1))),$0)
example_end

Sent: see this dog ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,det|this($1,n|dog($1)),$0),$0)
example_end

Sent: this dog lives in the cup .
Sem:  lambda $0_{ev}.and(v|live-3S(det|this($1,n|dog($1)),$0),prep|in(det|the($2,n|cup($2)),$0))
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: tapioca ?
Sem:  lambda $0_{e}.n|tapioca($0)
example_end

Sent: is that the cup 's dog ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,and(n|cup($1),n|dog($1))),$0),$0)
example_end

Sent: that 's the dog .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|dog($1)),$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: this is a duck .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|a($1,n|duck($1)),$0)
example_end

Sent: is this a squeaky duck ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,det|a($1,and(adj|squeaky($1),n|duck($1))),$0),$0)
example_end

Sent: it 's cool .
Sem:  adj|cool(pro|it)
example_end

Sent: Cromer too .
Sem:  n:prop|Cromer
example_end

Sent: those are your mittens .
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|your($1,n|mitten-PL($1)),$0)
example_end

Sent: those are your mittens .
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|your($1,n|mitten-PL($1)),$0)
example_end

Sent: where 's Frosty ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Frosty,$0)
example_end

Sent: where is Frosty ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Frosty,$0)
example_end

Sent: he did melt .
Sem:  lambda $0_{ev}.aux|do&PAST(v|melt(pro|he,$0),$0)
example_end

Sent: what did he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|he,$0,$1),$1)
example_end

Sent: and his head fell off .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro:poss:det|his($1,n|head($1)),$0),adv|off($0))
example_end

Sent: Sarah too ?
Sem:  lambda $0_{ev}.Q(n:prop|Sarah,$0)
example_end

Sent: she 'll be bigger .
Sem:  adj|big-CP(pro|she)
example_end

Sent: it 's not going flipflop yet .
Sem:  lambda $0_{ev}.not(and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|yet($0)),$0)
example_end

Sent: I have a squeaky boat .
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,and(adj|squeaky($1),n|boat($1))),$0)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 's your name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|your($2,n|name($2)),$1)
example_end

Sent: that 's your name ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|name($1)),$0),$0)
example_end

Sent: what 's my name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|my($2,n|name($2)),$1)
example_end

Sent: do you have a cough too ?
Sem:  lambda $0_{ev}.Q(aux|do(v|have(pro|you,det|a($1,n|cough($1)),$0),$0),$0)
example_end

Sent: he went to Emerson too ?
Sem:  lambda $0_{ev}.Q(and(v|go&PAST(pro|he,$0),prep|to(n:prop|Emerson,$0)),$0)
example_end

Sent: napkins ?
Sem:  lambda $0_{e}.n|napkin-PL($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: I 'll come in with you .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|I,$0),$0),prep|with(pro|you,$0))
example_end

Sent: coming .
Sem:  lambda $0_{ev}.part|come-PROG(pro|you,$0)
example_end

Sent: is it blue ?
Sem:  lambda $0_{ev}.Q(adj|blue(pro|it),$0)
example_end

Sent: did you buy it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|buy(pro|you,pro|it,$0),$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: a little bit .
Sem:  det|a($0,and(adj|little($0),n|bit($0)))
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: he did read Sneezer .
Sem:  lambda $0_{ev}.aux|do&PAST(v|read&ZERO(pro|he,n:prop|Sneezer,$0),$0)
example_end

Sent: he can 't read you stories .
Sem:  lambda $0_{ev}.not(aux|can(v|read&ZERO(pro|he,pro|you,lambda $1_{e}.n|story-PL($1),$0),$0),$0)
example_end

Sent: what else are you going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: you read it .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,pro|it,$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: who 's been drawing on that paper ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PERF(aux|have&3S(part|draw-PROG($0,$1),$1),$1),prep|on(det|that($2,n|paper($2)),$1))
example_end

Sent: what 's she been writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PERF(aux|have&3S(part|write-PROG(pro|she,$0,$1),$1),$1)
example_end

Sent: what did you do in Boston ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|in(n:prop|Boston,$1))
example_end

Sent: you draw .
Sem:  lambda $0_{ev}.v|draw(pro|you,$0)
example_end

Sent: draw abcs .
Sem:  lambda $0_{ev}.v|draw(pro|you,lambda $1_{e}.n|abc-PL($1),$0)
example_end

Sent: here ?
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
example_end

Sent: I 'll draw a flower here .
Sem:  lambda $0_{ev}.and(aux|will(v|draw(pro|I,det|a($1,n|flower($1)),$0),$0),adv:loc|here($0))
example_end

Sent: the man 's finger .
Sem:  det|the($0,and(n|man($0),n|finger($0)))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's cl .
Sem:  pro|it
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's not really bl .
Sem:  pro|it
example_end

Sent: you spell cat  for Fraser .  MLR
Sem:  lambda $0_{ev}.and(v|spell(pro|you,lambda $1_{e}.n|quote($1),$0),prep|for(n:prop|Fraser,$0))
example_end

Sent: we can 't spell Cromer  .
Sem:  lambda $0_{ev}.not(aux|can(v|spell(pro|we,lambda $1_{e}.n|quote($1),$0),$0),$0)
example_end

Sent: spell cat  .  MLR
Sem:  lambda $0_{ev}.v|spell(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: you spell cat  .  MLR
Sem:  lambda $0_{ev}.v|spell(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: you spell cat  for me .
Sem:  lambda $0_{ev}.and(v|spell(pro|you,lambda $1_{e}.n|quote($1),$0),prep|for(pro|me,$0))
example_end

Sent: what do you need ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|need(pro|you,$0,$1),$1)
example_end

Sent: not that side .
Sem:  lambda $0_{ev}.not(det|that($1,n|side($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: dl spells dog  .  MLR
Sem:  lambda $0_{ev}.v|spell-3S(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: that 's another word .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|word($1)),$0)
example_end

Sent: that doesn 't go there .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|go(pro:dem|that,$0),$0),adv:loc|there($0)),$0)
example_end

Sent: can you spell dog  ?  MLR
Sem:  lambda $0_{ev}.aux|can(v|spell(pro|you,lambda $1_{e}.n|quote($1),$0),$0)
example_end

Sent: can you spell dog  ?  MLR
Sem:  lambda $0_{ev}.aux|can(v|spell(pro|you,lambda $1_{e}.n|quote($1),$0),$0)
example_end

Sent: dog  ?  MLR
Sem:  lambda $0_{e}.n|quote($0)
example_end

Sent: is that dl ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: what are you spelling now ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|spell-PROG(pro|you,$0,$1),$1),adv|now($1))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: tapioca .
Sem:  lambda $0_{e}.n|tapioca($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that doesn 't go there .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|go(pro:dem|that,$0),$0),adv:loc|there($0)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: you didn 't buy it .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|buy(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Joanne gave you that bibbie .
Sem:  lambda $0_{ev}.v|give&PAST(n:prop|Joanne,pro|you,det|that($1,n|bib-DIM($1)),$0)
example_end

Sent: Joanne .
Sem:  n:prop|Joanne
example_end

Sent: she gave you that .
Sem:  lambda $0_{ev}.v|give&PAST(pro|she,pro|you,pro:dem|that,$0)
example_end

Sent: soup .
Sem:  lambda $0_{e}.n|soup($0)
example_end

Sent: noodle soup .
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
example_end

Sent: noodle soup .
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
example_end

Sent: jelly beans .
Sem:  lambda $0_{e}.and(n|jelly($0),n|bean-PL($0))
example_end

Sent: Papa 's making a noise .
Sem:  lambda $0_{ev}.aux|be&3S(part|make-PROG(n:prop|Papa,det|a($1,n|noise($1)),$0),$0)
example_end

Sent: you stare at me ?
Sem:  lambda $0_{ev}.Q(and(v|stare(pro|you,$0),prep|at(pro|me,$0)),$0)
example_end

Sent: your new coat ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(adj|new($1),n|coat($1))),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: making a sandwich for Papa .
Sem:  lambda $0_{ev}.and(part|make-PROG(pro|you,det|a($1,n|sandwich($1)),$0),prep|for(n:prop|Papa,$0))
example_end

Sent: do you want one ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:indef|one,$0),$0),$0)
example_end

Sent: do you want one ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:indef|one,$0),$0),$0)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: you ?
Sem:  lambda $0_{ev}.Q(pro|you,$0)
example_end

Sent: you 're welcome .
Sem:  adj|welcome(pro|you)
example_end

Sent: vitamin time .
Sem:  lambda $0_{e}.and(n|vitamin($0),n|time($0))
example_end

Sent: vitamin time .
Sem:  lambda $0_{e}.and(n|vitamin($0),n|time($0))
example_end

Sent: vitamin .
Sem:  lambda $0_{e}.n|vitamin($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: I burned my finger .
Sem:  lambda $0_{ev}.v|burn-PAST(pro|I,pro:poss:det|my($1,n|finger($1)),$0)
example_end

Sent: Fraser 's not having lunch .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|have-PROG(n:prop|Fraser,lambda $1_{e}.n|lunch($1),$0),$0),$0)
example_end

Sent: everybody 's eating but Fraser .
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro:indef|everybody,$0),$0)
example_end

Sent: peas .
Sem:  lambda $0_{e}.n|pea-PL($0)
example_end

Sent: because they 're green .
Sem:  adj|green(pro|they)
example_end

Sent: they 're green .
Sem:  adj|green(pro|they)
example_end

Sent: she 's eating .
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0),$0)
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: don 't worry about it .
Sem:  lambda $0_{ev}.not(and(aux|do(v|worry(pro|you,$0),$0),prep|about(pro|it,$0)),$0)
example_end

Sent: who want some milk outof the cup ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|want($0,qn|some($2,n|milk($2)),$1),prep|out_of(det|the($3,n|cup($3)),$1))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Eve has some milk now .
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Eve,qn|some($1,n|milk($1)),$0),adv|now($0))
example_end

Sent: because what ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: not me .
Sem:  lambda $0_{ev}.not(pro|me,$0)
example_end

Sent: I do .
Sem:  lambda $0_{ev}.v|do(pro|I,$0)
example_end

Sent: I care .
Sem:  lambda $0_{ev}.v|care(pro|I,$0)
example_end

Sent: not me .
Sem:  lambda $0_{ev}.not(pro|me,$0)
example_end

Sent: not Fraser .
Sem:  lambda $0_{ev}.not(n:prop|Fraser,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: nobody .
Sem:  pro:indef|nobody
example_end

Sent: Fraser too ?
Sem:  lambda $0_{ev}.Q(n:prop|Fraser,$0)
example_end

Sent: he has an empty tummy .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,and(adj|empty($1),n|tummy($1))),$0)
example_end

Sent: he has an empty tummy .
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,and(adj|empty($1),n|tummy($1))),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: did you drop the letters ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drop(pro|you,det|the($1,n|letter-PL($1)),$0),$0),$0)
example_end

Sent: you 'd better pick them up .
Sem:  lambda $0_{ev}.and(aux|have&PAST(v|pick(pro|you,pro|them,$0),$0),adv:loc|up($0))
example_end

Sent: you pick them up .
Sem:  lambda $0_{ev}.and(v|pick(pro|you,pro|them,$0),adv:loc|up($0))
example_end

Sent: you dropped them .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|them,$0)
example_end

Sent: what are you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|you,$1)
example_end

Sent: stop .
Sem:  lambda $0_{ev}.v|stop(pro|you,$0)
example_end

Sent: are you standing on the board .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|stand-PROG(pro|you,$0),$0),prep|on(det|the($1,n|board($1)),$0))
example_end

Sent: I 'm going along .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv|along($0))
example_end

Sent: I 'll get a kiss upstairs .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,det|a($1,n|kiss($1)),$0),$0),adv:loc|upstairs($0))
example_end

Sent: I 'll get a kiss upstairs .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,det|a($1,n|kiss($1)),$0),$0),adv:loc|upstairs($0))
example_end

Sent: leave them on the table .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro|them,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: put them back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|back($0))
example_end

Sent: put them back on the table .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: threeo 'clock .
Sem:  lambda $0_{ev}.adv:tem|three_o'clock($0)
example_end

Sent: did you get your tablet ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|you,pro:poss:det|your($1,n|tablet($1)),$0),$0),$0)
example_end

Sent: will I draw a lady ?
Sem:  lambda $0_{ev}.Q(aux|will(v|draw(pro|I,det|a($1,n|lady($1)),$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you want some coffee ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|coffee($1)),$0),$0)
example_end

Sent: look right here .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
example_end

Sent: that 's a little man .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|little($1),n|man($1))),$0)
example_end

Sent: he 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|he,$0,$1)
example_end

Sent: mustache .
Sem:  lambda $0_{e}.n|mustache($0)
example_end

Sent: that 's a mustache .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|mustache($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's absolutely right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's my jacket .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|jacket($1)),$0)
example_end

Sent: my big long coat ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,and(adj|big($1),adj|long($1),n|coat($1))),$0)
example_end

Sent: now I 'll get some sugar .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,qn|some($1,n|sugar($1)),$0),$0),adv|now($0))
example_end

Sent: what am I doing now ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&1S(part|do-PROG(pro|I,$0,$1),$1),adv|now($1))
example_end

Sent: that 's fine .
Sem:  adj|fine(pro:dem|that)
example_end

Sent: what 'll I write there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|write(pro|I,$0,$1),$1),adv:loc|there($1))
example_end

Sent: I 'll write your abc .
Sem:  lambda $0_{ev}.aux|will(v|write(pro|I,pro:poss:det|your($1,n|abc($1)),$0),$0)
example_end

Sent: is that right ?
Sem:  lambda $0_{ev}.Q(adj|right(pro:dem|that),$0)
example_end

Sent: that 's dl .
Sem:  pro:dem|that
example_end

Sent: what did I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|I,$0,$1),$1)
example_end

Sent: maybe I did cough .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|cough(pro|I,$0),$0),adv|maybe($0))
example_end

Sent: that 's my paper .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|paper($1)),$0)
example_end

Sent: that 's fine .
Sem:  adj|fine(pro:dem|that)
example_end

Sent: that 's your side .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|side($1)),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: yesterday ?
Sem:  lambda $0_{ev}.Q(adv:tem|yesterday($0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Pop 'll do it .
Sem:  lambda $0_{ev}.aux|will(v|do(n:prop|Pop,pro|it,$0),$0)
example_end

Sent: I 'll hold it .
Sem:  lambda $0_{ev}.aux|will(v|hold(pro|I,pro|it,$0),$0)
example_end

Sent: what would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: we want it on .
Sem:  lambda $0_{ev}.and(v|want(pro|we,pro|it,$0),adv|on($0))
example_end

Sent: it belongs on .
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),adv|on($0))
example_end

Sent: and we 'll just leave the rest .
Sem:  lambda $0_{ev}.and(aux|will(v|leave(pro|we,det|the($1,n|rest($1)),$0),$0),adv:int|just($0))
example_end

Sent: that 's better .
Sem:  adj|good&CP(pro:dem|that)
example_end

Sent: nothing happened to it .
Sem:  lambda $0_{ev}.and(v|happen-PAST(pro:indef|nothing,$0),prep|to(pro|it,$0))
example_end

Sent: a brown pencil ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|brown($1),n|pencil($1))),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: that 's not brown .
Sem:  pro:dem|that
example_end

Sent: that 's red .
Sem:  adj|red(pro:dem|that)
example_end

Sent: what did you get ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|get(pro|you,$0,$1),$1)
example_end

Sent: what does that spell ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|spell(pro:dem|that,$0,$1),$1)
example_end

Sent: your glass ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|glass($1)),$0)
example_end

Sent: first you have a cracker .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|cracker($1)),$0),adv|first($0))
example_end

Sent: but look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: see this ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro:dem|this,$0),$0)
example_end

Sent: is it time for lunch ?
Sem:  lambda $0_{ev}.Q(and(v|time(pro|it,$0),prep|for(lambda $1_{e}.n|lunch($1),$0)),$0)
example_end

Sent: I 'll get it for you .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: you can have tapioca .
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,lambda $1_{e}.n|tapioca($1),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: do you like your tapioca ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0),$0),$0)
example_end

Sent: Timothy 's a little boy .
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
example_end

Sent: Timothy 's a little boy .
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
example_end

Sent: Becky 's a girl .
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
example_end

Sent: Timmy 's a boy .
Sem:  lambda $0_{ev}.eq(n:prop|Timmy,det|a($1,n|boy($1)),$0)
example_end

Sent: Becky 's a girl .
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
example_end

Sent: a dog .
Sem:  det|a($0,n|dog($0))
example_end

Sent: that 's Josh .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Josh,$0)
example_end

Sent: Josh .
Sem:  n:prop|Josh
example_end

Sent: Josh .
Sem:  n:prop|Josh
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: it 's dirty .
Sem:  adj|dirty(pro|it)
example_end

Sent: I 'll throw it away .
Sem:  lambda $0_{ev}.and(aux|will(v|throw(pro|I,pro|it,$0),$0),adv|away($0))
example_end

Sent: were you playing outside ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PAST(part|play-PROG(pro|you,$0),$0),adv:loc|outside($0)),$0)
example_end

Sent: what were you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: playing with Becky .
Sem:  lambda $0_{ev}.and(part|play-PROG(pro|you,$0),prep|with(n:prop|Becky,$0))
example_end

Sent: but what did you do outside ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:loc|outside($1))
example_end

Sent: that 's who .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:dem|that,$0,$1)
example_end

Sent: is who .
Sem:  lambda $0_{e}.pro:wh|who
example_end

Sent: but what were you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: did you make pies ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|make(pro|you,lambda $1_{e}.n|pie-PL($1),$0),$0),$0)
example_end

Sent: after you have a nap .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|nap($1)),$0),adv:tem|after($0))
example_end

Sent: after you take a nap .
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|nap($1)),$0)
example_end

Sent: playing .
Sem:  lambda $0_{ev}.part|play-PROG(pro|you,$0)
example_end

Sent: he 's playing with Becky .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|with(n:prop|Becky,$0))
example_end

Sent: taking the bread off ?
Sem:  lambda $0_{ev}.Q(and(part|take-PROG(pro|you,det|the($1,n|bread($1)),$0),adv|off($0)),$0)
example_end

Sent: what is he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: we saw the squirrel .
Sem:  lambda $0_{ev}.v|see&PAST(pro|we,det|the($1,n|squirrel($1)),$0)
example_end

Sent: Fraser can 't see him .
Sem:  lambda $0_{ev}.not(aux|can(v|see(n:prop|Fraser,pro|him,$0),$0),$0)
example_end

Sent: perhaps .
Sem:  lambda $0_{ev}.adv|perhaps($0)
example_end

Sent: I 'll open it for you .
Sem:  lambda $0_{ev}.and(aux|will(v|open(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: I was laughing .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
example_end

Sent: I was laughing .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
example_end

Sent: because you are funny .
Sem:  adj|funny(pro|you)
example_end

Sent: I 've got big teeth .
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|I,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0),$0)
example_end

Sent: I have brown hair .
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.and(adj|brown($1),n|hair($1)),$0)
example_end

Sent: you have red hair ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,lambda $1_{e}.and(adj|red($1),n|hair($1)),$0),$0)
example_end

Sent: you can have it .
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: me ?
Sem:  lambda $0_{ev}.Q(pro|me,$0)
example_end

Sent: may I have it ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,pro|it,$0),$0),$0)
example_end

Sent: would you like that ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: instead of going for a nap right away .
Sem:  lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv|away($0))
example_end

Sent: you 'd like what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: patting cake .
Sem:  lambda $0_{ev}.part|pat-PROG(pro|you,lambda $1_{e}.n|cake($1),$0)
example_end

Sent: you put your finger in it .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|finger($1)),$0),prep|in(pro|it,$0))
example_end

Sent: does it hurt ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: it won 't hurt .
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: it won 't hurt .
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: happiness is getting a  getting a sliver out .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|get-PROG(pro|you,det|a($1,n|sliver($1)),$0),$0),adv:loc|out($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: who do I see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
example_end

Sent: who do I see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: we 'll come right back .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|back($0))
example_end

Sent: quick  quick .
Sem:  lambda $0_{ev}.adv|quick($0)
example_end

Sent: I 'm going too with you .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),prep|with(pro|you,$0))
example_end

Sent: what is she doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|she,$0,$1),$1)
example_end

Sent: that 's a nice radio .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|radio($1))),$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: folding what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|fold-PROG(pro|you,$0,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and tell him .
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|him,$0)
example_end

Sent: you 'll see him again on Wednesday .
Sem:  lambda $0_{ev}.and(aux|will(v|see(pro|you,pro|him,$0),$0),prep|on(n:prop|Wednesday,$0))
example_end

Sent: I will wipe your tears .
Sem:  lambda $0_{ev}.aux|will(v|wipe(pro|I,pro:poss:det|your($1,n|tear-PL($1)),$0),$0)
example_end

Sent: the big round cook .
Sem:  det|the($0,and(adj|big($0),adj|round($0),n|cook($0)))
example_end

Sent: I 'll turn it .
Sem:  lambda $0_{ev}.aux|will(v|turn(pro|I,pro|it,$0),$0)
example_end

Sent: it 's turning itself .
Sem:  lambda $0_{ev}.aux|be&3S(part|turn-PROG(pro|it,pro:refl|itself,$0),$0)
example_end

Sent: Mom made a mistake .
Sem:  lambda $0_{ev}.v|make&PAST(n:prop|Mom,det|a($1,n|mistake($1)),$0)
example_end

Sent: I made a mistake .
Sem:  lambda $0_{ev}.v|make&PAST(pro|I,det|a($1,n|mistake($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: it 's not a clock .
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,n|clock($1)),$0),$0)
example_end

Sent: it 's a lock .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|lock($1)),$0)
example_end

Sent: key .
Sem:  lambda $0_{e}.n|key($0)
example_end

Sent: key .
Sem:  lambda $0_{e}.n|key($0)
example_end

Sent: key .
Sem:  lambda $0_{e}.n|key($0)
example_end

Sent: the key .
Sem:  det|the($0,n|key($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what are we going to color ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|color(pro|we,$0,$1)),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you color a girl .
Sem:  lambda $0_{ev}.v|color(pro|you,det|a($1,n|girl($1)),$0)
example_end

Sent: is that a horse ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|horse($1)),$0),$0)
example_end

Sent: it 's a cow .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|cow($1)),$0)
example_end

Sent: can you color this thing ?
Sem:  lambda $0_{ev}.Q(aux|can(v|color(pro|you,det|this($1,n|thing($1)),$0),$0),$0)
example_end

Sent: you stay right here .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|here($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: turtle .
Sem:  lambda $0_{e}.n|turtle($0)
example_end

Sent: I 'll do this .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|this,$0),$0)
example_end

Sent: you don 't need a grahamcracker .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
example_end

Sent: you haven 't eaten your cookie .
Sem:  lambda $0_{ev}.not(aux|have(part|eat&PERF(pro|you,pro:poss:det|your($1,n|cookie($1)),$0),$0),$0)
example_end

Sent: are they ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: he is ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: what should we do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|should(v|do(pro|we,$0,$1),$1)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: what should we do with that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|do(pro|we,$0,$1),$1),prep|with(pro:dem|that,$1))
example_end

Sent: he doesn 't walk properly .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|walk(pro|he,$0),$0),$0)
example_end

Sent: flower ?
Sem:  lambda $0_{e}.n|flower($0)
example_end

Sent: what is Rick going to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Rick,$1),v|do(n:prop|Rick,$0,$1)),$1)
example_end

Sent: these are the leaves .
Sem:  lambda $0_{ev}.eq(pro:dem|these,det|the($1,n|leave-PL($1)),$0)
example_end

Sent: we can make the leaves .
Sem:  lambda $0_{ev}.aux|can(v|make(pro|we,det|the($1,n|leave-PL($1)),$0),$0)
example_end

Sent: can 't what ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: it 's growing .
Sem:  lambda $0_{ev}.aux|be&3S(part|grow-PROG(pro|it,$0),$0)
example_end

Sent: shall we make another flower ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,qn|another($1,n|flower($1)),$0),$0),$0)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: can you color that in ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|color(pro|you,pro:dem|that,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: a door ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|door($1)),$0)
example_end

Sent: what do we need on it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|need(pro|we,$0,$1),$1),prep|on(pro|it,$1))
example_end

Sent: what should we put on the house ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|put&ZERO(pro|we,$0,$1),$1),prep|on(det|the($2,n|house($2)),$1))
example_end

Sent: cream ?
Sem:  lambda $0_{e}.n|cream($0)
example_end

Sent: we don 't have any cream .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,qn|any($1,n|cream($1)),$0),$0),$0)
example_end

Sent: we could put a doorway .
Sem:  lambda $0_{ev}.aux|could(v|put&ZERO(pro|we,det|a($1,n|doorway($1)),$0),$0)
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: what should we draw with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|draw(pro|we,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: a house ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|house($1)),$0)
example_end

Sent: we 'll make a big house .
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
example_end

Sent: we 'll make a big house .
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
example_end

Sent: what does it need ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|need(pro|it,$0,$1),$1)
example_end

Sent: and should we put a window ?
Sem:  lambda $0_{ev}.Q(aux|should(v|put&ZERO(pro|we,det|a($1,n|window($1)),$0),$0),$0)
example_end

Sent: probably Papa .
Sem:  n:prop|Papa
example_end

Sent: that 's true .
Sem:  adj|true(pro:dem|that)
example_end

Sent: it 's a suitcase .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|suitcase($1)),$0)
example_end

Sent: what were you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: which window ?
Sem:  lambda $0_{e}.n|window($0)
example_end

Sent: do you want a window ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|a($1,n|window($1)),$0),$0),$0)
example_end

Sent: you 're making what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
example_end

Sent: a house building ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|house($1),n|building($1))),$0)
example_end

Sent: say it again .
Sem:  lambda $0_{ev}.and(v|say(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: what are you making ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
example_end

Sent: Cathy did it .
Sem:  lambda $0_{ev}.v|do&PAST(n:prop|Cathy,pro|it,$0)
example_end

Sent: she tore the paper .
Sem:  lambda $0_{ev}.v|tear&PAST(pro|she,det|the($1,n|paper($1)),$0)
example_end

Sent: what shall I write ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|shall(v|write(pro|I,$0,$1),$1)
example_end

Sent: shall we make a horse ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,det|a($1,n|horse($1)),$0),$0),$0)
example_end

Sent: we 'll make another horse .
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,qn|another($1,n|horse($1)),$0),$0)
example_end

Sent: are you sure ?
Sem:  lambda $0_{ev}.Q(adj|sure(pro|you),$0)
example_end

Sent: don 't you peepee .
Sem:  pro|you
example_end

Sent: don 't you peepee .
Sem:  pro|you
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what have I got .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|have(part|get&PERF(pro|I,$0,$1),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: John .
Sem:  n:prop|John
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and who else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: Murray .
Sem:  n:prop|Murray
example_end

Sent: Noel ?
Sem:  lambda $0_{ev}.Q(n:prop|Noel,$0)
example_end

Sent: Noel .
Sem:  n:prop|Noel
example_end

Sent: and who else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: take a bite .
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|bite($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: he did fix your chin ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|fix(pro|he,pro:poss:det|your($1,n|chin($1)),$0),$0),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what did you do to your chin ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|to(pro:poss:det|your($2,n|chin($2)),$1))
example_end

Sent: you taste that .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro:dem|that,$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: hard .
Sem:  lambda $0_{ev}.adv|hard($0)
example_end

Sent: hard .
Sem:  lambda $0_{ev}.adv|hard($0)
example_end

Sent: blow out .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),adv:loc|out($0))
example_end

Sent: you 're blowing out now .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|blow-PROG(pro|you,$0),$0),adv|now($0))
example_end

Sent: now blow .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),adv|now($0))
example_end

Sent: hard .
Sem:  lambda $0_{ev}.adv|hard($0)
example_end

Sent: now blow .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),adv|now($0))
example_end

Sent: hard .
Sem:  lambda $0_{ev}.adv|hard($0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's wrong ?
Sem:  lambda $0_{e}.adj|wrong($0)
example_end

Sent: your eye ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|eye($1)),$0)
example_end

Sent: what did I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|I,$0,$1),$1)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm trying .
Sem:  lambda $0_{ev}.aux|be&1S(part|try-PROG(pro|I,$0),$0)
example_end

Sent: you 're trying .
Sem:  lambda $0_{ev}.aux|be&PRES(part|try-PROG(pro|you,$0),$0)
example_end

Sent: I took the stick outof it .
Sem:  lambda $0_{ev}.and(v|take&PAST(pro|I,det|the($1,n|stick($1)),$0),prep|out_of(pro|it,$0))
example_end

Sent: but it has a knot in it .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,det|a($1,n|knot($1)),$0),prep|in(pro|it,$0))
example_end

Sent: it has a knot in it .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,det|a($1,n|knot($1)),$0),prep|in(pro|it,$0))
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: you 're trying very hard .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|try-PROG(pro|you,$0),$0),adv|hard($0))
example_end

Sent: are you doing it ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|do-PROG(pro|you,pro|it,$0),$0),$0)
example_end

Sent: trying to lick it .
Sem:  lambda $0_{ev}.and(part|try-PROG(pro|you,$0),v|lick(pro|you,pro|it,$0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: making noise ?
Sem:  lambda $0_{ev}.Q(part|make-PROG(pro|you,lambda $1_{e}.n|noise($1),$0),$0)
example_end

Sent: we can put it in .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|we,pro|it,$0),$0),adv:loc|in($0))
example_end

Sent: Mom can put the stick in .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(n:prop|Mom,det|the($1,n|stick($1)),$0),$0),adv:loc|in($0))
example_end

Sent: I 'll hold it .
Sem:  lambda $0_{ev}.aux|will(v|hold(pro|I,pro|it,$0),$0)
example_end

Sent: you did it .
Sem:  lambda $0_{ev}.v|do&PAST(pro|you,pro|it,$0)
example_end

Sent: now leave it on .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro|it,$0),adv|on($0))
example_end

Sent: now what do I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|I,$0,$1),$1),adv|now($1))
example_end

Sent: now what do I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|I,$0,$1),$1),adv|now($1))
example_end

Sent: is that right ?
Sem:  lambda $0_{ev}.Q(adj|right(pro:dem|that),$0)
example_end

Sent: I 'll do it .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro|it,$0),$0)
example_end

Sent: they 're allgone .
Sem:  adj|all_gone(pro|they)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what is its name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|its($2,n|name($2)),$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: he forgot it .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|he,pro|it,$0)
example_end

Sent: that 's a turtle .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|turtle($1)),$0)
example_end

Sent: you 've got it .
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|you,pro|it,$0),$0)
example_end

Sent: you can make what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|can(v|make(pro|you,$0,$1),$1)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: I don 't have it .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,pro|it,$0),$0),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: she is ?
Sem:  lambda $0_{ev}.Q(pro|she,$0)
example_end

Sent: do you see Eve in there ?
Sem:  lambda $0_{ev}.Q(and(aux|do(v|see(pro|you,n:prop|Eve,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: no rubber bands .
Sem:  qn|no($0,and(n|rubber($0),n|band-PL($0)))
example_end

Sent: rubber bands .
Sem:  lambda $0_{e}.and(n|rubber($0),n|band-PL($0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: taking it ?
Sem:  lambda $0_{ev}.Q(part|take-PROG(pro|you,pro|it,$0),$0)
example_end

Sent: some year ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|year($1)),$0)
example_end

Sent: you can climb in it .
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),prep|in(pro|it,$0))
example_end

Sent: get the box .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|box($1)),$0)
example_end

Sent: you make a train .
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|train($1)),$0)
example_end

Sent: Fraser ?
Sem:  lambda $0_{ev}.Q(n:prop|Fraser,$0)
example_end

Sent: he 'll sit on the couch .
Sem:  lambda $0_{ev}.and(aux|will(v|sit(pro|he,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: I 'll look .
Sem:  lambda $0_{ev}.aux|will(v|look(pro|I,$0),$0)
example_end

Sent: try .
Sem:  lambda $0_{ev}.v|try(pro|you,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: it is the track .
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,n|track($1)),$0)
example_end

Sent: you are ?
Sem:  lambda $0_{ev}.Q(pro|you,$0)
example_end

Sent: you 're trying .
Sem:  lambda $0_{ev}.aux|be&PRES(part|try-PROG(pro|you,$0),$0)
example_end

Sent: work hard .
Sem:  lambda $0_{ev}.and(v|work(pro|you,$0),adv|hard($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: already ?
Sem:  lambda $0_{ev}.Q(adv|already($0),$0)
example_end

Sent: it 's going fast ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|fast($0)),$0)
example_end

Sent: it 's falling off ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|fall-PROG(pro|it,$0),$0),adv|off($0)),$0)
example_end

Sent: fix it .
Sem:  lambda $0_{ev}.v|fix(pro|you,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: now .
Sem:  lambda $0_{ev}.adv|now($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: are you building a railroad ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|build-PROG(pro|you,det|a($1,n|railroad($1)),$0),$0),$0)
example_end

Sent: you tripped over the railroad .
Sem:  lambda $0_{ev}.and(v|trip-PAST(pro|you,$0),prep|over(det|the($1,n|railroad($1)),$0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: did you fix it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|fix(pro|you,pro|it,$0),$0),$0)
example_end

Sent: tell Pop .
Sem:  lambda $0_{ev}.v|tell(pro|you,n:prop|Pop,$0)
example_end

Sent: what did you make in the sandbox ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|make(pro|you,$0,$1),$1),prep|in(det|the($2,n|sandbox($2)),$1))
example_end

Sent: what else did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: count them .
Sem:  lambda $0_{ev}.v|count(pro|you,pro|them,$0)
example_end

Sent: who was staying in our house ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PAST&13S(part|stay-PROG($0,$1),$1),prep|in(pro:poss:det|our($2,n|house($2)),$1))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: where 's Ohio ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Ohio,$0)
example_end

Sent: where 's Ohio ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Ohio,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: outside .
Sem:  lambda $0_{ev}.adv:loc|outside($0)
example_end

Sent: where is Ohio ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Ohio,$0)
example_end

Sent: where 's Ohio ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Ohio,$0)
example_end

Sent: you can do it .
Sem:  lambda $0_{ev}.aux|can(v|do(pro|you,pro|it,$0),$0)
example_end

Sent: what did you do to it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|to(pro|it,$1))
example_end

Sent: you broke it .
Sem:  lambda $0_{ev}.v|break&PAST(pro|you,pro|it,$0)
example_end

Sent: those don 't bend .
Sem:  lambda $0_{ev}.not(aux|do(v|bend(pro:dem|those,$0),$0),$0)
example_end

Sent: don 't break those .
Sem:  lambda $0_{ev}.not(aux|do(v|break(pro|you,pro:dem|those,$0),$0),$0)
example_end

Sent: where 's what ?
Sem:  lambda $0_{e}.eqLoc(pro:wh|what,$0)
example_end

Sent: where is Ohio ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Ohio,$0)
example_end

Sent: where is Ohio ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Ohio,$0)
example_end

Sent: we can 't see it .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|we,pro|it,$0),$0),$0)
example_end

Sent: that 's exactly right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: is that a railroad ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|railroad($1)),$0),$0)
example_end

Sent: those look like cups to me .
Sem:  lambda $0_{ev}.and(v|look(pro:dem|those,$0),prep|to(pro|me,$0))
example_end

Sent: that 's not a railroad .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|railroad($1)),$0),$0)
example_end

Sent: this is the track .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|track($1)),$0)
example_end

Sent: is that my train ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|train($1)),$0),$0)
example_end

Sent: and that moves the blue track ?
Sem:  lambda $0_{ev}.Q(v|move-3S(pro:dem|that,det|the($1,and(adj|blue($1),n|track($1))),$0),$0)
example_end

Sent: we need some more track .
Sem:  lambda $0_{ev}.v|need(pro|we,qn|more($1,n|track($1)),$0)
example_end

Sent: it stops right there .
Sem:  lambda $0_{ev}.and(v|stop-3S(pro|it,$0),adv:loc|there($0))
example_end

Sent: and blow for him .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),prep|for(pro|him,$0))
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: turn it around .
Sem:  lambda $0_{ev}.and(v|turn(pro|you,pro|it,$0),adv:loc|around($0))
example_end

Sent: that 's the way .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: more track .
Sem:  qn|more($0,n|track($0))
example_end

Sent: that 's your side .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|side($1)),$0)
example_end

Sent: you may sit there .
Sem:  lambda $0_{ev}.and(aux|may(v|sit(pro|you,$0),$0),adv:loc|there($0))
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: where 's Cromer ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
example_end

Sent: Fraser doesn 't come on Saturday .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(n:prop|Fraser,$0),$0),prep|on(n:prop|Saturday,$0)),$0)
example_end

Sent: it 's Monday .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Monday,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Fraser comes on Monday .
Sem:  lambda $0_{ev}.and(v|come-3S(n:prop|Fraser,$0),prep|on(n:prop|Monday,$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: they do come on Wednesday .
Sem:  lambda $0_{ev}.and(aux|do(v|come(pro|they,$0),$0),prep|on(n:prop|Wednesday,$0))
example_end

Sent: that 's not pizzeronic .
Sem:  pro:dem|that
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: that 's mine .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|mine,$0)
example_end

Sent: you may share one with Pops .
Sem:  lambda $0_{ev}.and(aux|may(v|share(pro|you,pro:indef|one,$0),$0),prep|with(n:prop|Pops,$0))
example_end

Sent: I forgot your spoon .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|I,pro:poss:det|your($1,n|spoon($1)),$0)
example_end

Sent: you must blow on it .
Sem:  lambda $0_{ev}.and(aux|must(v|blow(pro|you,$0),$0),prep|on(pro|it,$0))
example_end

Sent: it doesn 't need an icecube .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|need(pro|it,det|a($1,n|+n|ice+n|cube($1)),$0),$0),$0)
example_end

Sent: your pink bibbie 's dirty .
Sem:  adj|dirty(pro:poss:det|your($0,and(adj|pink($0),n|bib-DIM($0))))
example_end

Sent: who needs it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|need-3S($0,pro|it,$1)
example_end

Sent: pizzc yourself .
Sem:  pro:refl|yourself
example_end

Sent: not your blankie .
Sem:  lambda $0_{ev}.not(pro:poss:det|your($1,n|blanket-DIM($1)),$0)
example_end

Sent: blanket .
Sem:  lambda $0_{e}.n|blanket($0)
example_end

Sent: you 're sharing it with Papa .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|share-PROG(pro|you,pro|it,$0),$0),prep|with(n:prop|Papa,$0))
example_end

Sent: you and Papa are sharing the sandwich .
Sem:  lambda $0_{ev}.aux|be&PRES(part|share-PROG(and(pro|you,n:prop|Papa),det|the($1,n|sandwich($1)),$0),$0)
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: you want a napkin ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|napkin($1)),$0),$0)
example_end

Sent: it 's empty .
Sem:  adj|empty(pro|it)
example_end

Sent: you don 't have any raisins .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|you,qn|any($1,n|raisin-PL($1)),$0),$0),$0)
example_end

Sent: you don 't have any raisins .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|you,qn|any($1,n|raisin-PL($1)),$0),$0),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: what am I pouring for them ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&1S(part|pour-PROG(pro|I,$0,$1),$1),prep|for(pro|them,$1))
example_end

Sent: Cromer too ?
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
example_end

Sent: I 'd better clean them .
Sem:  lambda $0_{ev}.and(aux|have&PAST(v|clean(pro|I,pro|them,$0),$0),adv|better($0))
example_end

Sent: what did you catch ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|catch(pro|you,$0,$1),$1)
example_end

Sent: did you catch it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|catch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: what else did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what are you gonna have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|have(pro|you,$0,$1)),$1)
example_end

Sent: want an icecube ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|+n|ice+n|cube($1)),$0),$0)
example_end

Sent: it 's not finished yet .
Sem:  lambda $0_{ev}.not(and(aux|be&3S(part|finish-PERF(pro|it,$0),$0),adv|yet($0)),$0)
example_end

Sent: it was still fizzing .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|fizz-PROG(pro|it,$0),$0),adv|still($0))
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: we will get another balloon .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|we,qn|another($1,n|balloon($1)),$0),$0)
example_end

Sent: they 're probably still playing outside .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|play-PROG(pro|they,$0),$0),adv:loc|outside($0))
example_end

Sent: what am I folding ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|fold-PROG(pro|I,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's a kleenex .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|kleenex($1)),$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: then you can fold it .
Sem:  lambda $0_{ev}.and(aux|can(v|fold(pro|you,pro|it,$0),$0),adv:tem|then($0))
example_end

Sent: Saturday .
Sem:  n:prop|Saturday
example_end

Sent: was she crying ?
Sem:  lambda $0_{ev}.Q(aux|be&PAST&13S(part|cry-PROG(pro|she,$0),$0),$0)
example_end

Sent: what did you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: put it in the dirt .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|dirt($1)),$0))
example_end

Sent: your dirt .
Sem:  pro:poss:det|your($0,n|dirt($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: were you making mud pies ?
Sem:  lambda $0_{ev}.Q(aux|be&PAST(part|make-PROG(pro|you,lambda $1_{e}.and(n|mud($1),n|pie-PL($1)),$0),$0),$0)
example_end

Sent: I know it .
Sem:  lambda $0_{ev}.v|know(pro|I,pro|it,$0)
example_end

Sent: they did come .
Sem:  lambda $0_{ev}.aux|do&PAST(v|come(pro|they,$0),$0)
example_end

Sent: they came through the gate .
Sem:  lambda $0_{ev}.and(v|come&PAST(pro|they,$0),prep|through(det|the($1,n|gate($1)),$0))
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: that 'll be a big help .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|big($1),n|help($1))),$0)
example_end

Sent: I 'll fold it .
Sem:  lambda $0_{ev}.aux|will(v|fold(pro|I,pro|it,$0),$0)
example_end

Sent: they are your yellow pedalpushers .
Sem:  lambda $0_{ev}.eq(pro|they,pro:poss:det|your($1,and(n|yellow($1),n|+n|pedal+n|pushers($1))),$0)
example_end

Sent: quick .
Sem:  lambda $0_{ev}.adv|quick($0)
example_end

Sent: you did spill the coffee .
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|you,det|the($1,n|coffee($1)),$0),$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: you do that .
Sem:  lambda $0_{ev}.v|do(pro|you,pro:dem|that,$0)
example_end

Sent: put those over here .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|those,$0),adv:loc|here($0))
example_end

Sent: because these are the towels .
Sem:  lambda $0_{ev}.eq(pro:dem|these,det|the($1,n|towel-PL($1)),$0)
example_end

Sent: they go in the closet .
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),prep|in(det|the($1,n|closet($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: they go in the closet .
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),prep|in(det|the($1,n|closet($1)),$0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: bath mat .
Sem:  lambda $0_{e}.and(n|bath($0),n|mat($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 'll be a big help .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|big($1),n|help($1))),$0)
example_end

Sent: put it on the counter .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|counter($1)),$0))
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: they 're big .
Sem:  adj|big(pro|they)
example_end

Sent: they 're big too .
Sem:  adj|big(pro|they)
example_end

Sent: they have their shoes on .
Sem:  lambda $0_{ev}.and(v|have(pro|they,pro:poss:det|their($1,n|shoe-PL($1)),$0),adv|on($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: they go in the drawer .
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),prep|in(det|the($1,n|drawer($1)),$0))
example_end

Sent: we 're not going now .
Sem:  lambda $0_{ev}.not(and(aux|be&PRES(part|go-PROG(pro|we,$0),$0),adv|now($0)),$0)
example_end

Sent: we 'll go up later .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),adv|later($0))
example_end

Sent: you may whistle .
Sem:  lambda $0_{ev}.aux|may(v|whistle(pro|you,$0),$0)
example_end

Sent: you make whistle .
Sem:  lambda $0_{ev}.v|make(pro|you,lambda $1_{e}.n|whistle($1),$0)
example_end

Sent: blow .
Sem:  lambda $0_{ev}.v|blow(pro|you,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: just peek in .
Sem:  lambda $0_{ev}.and(v|peek(pro|you,$0),adv:loc|in($0))
example_end

Sent: don 't take your pipe .
Sem:  lambda $0_{ev}.not(aux|do(v|take(pro|you,pro:poss:det|your($1,n|pipe($1)),$0),$0),$0)
example_end

Sent: leave your pipe down here .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro:poss:det|your($1,n|pipe($1)),$0),adv:loc|down($0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's she doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|she,$0,$1),$1)
example_end

Sent: what 's what doing ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.aux|be&3S(part|do-PROG($0,$1,$2),$2)
example_end

Sent: the numbers .
Sem:  det|the($0,n|number-PL($0))
example_end

Sent: the numbers are going around too .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(det|the($1,n|number-PL($1)),$0),$0),adv:loc|around($0))
example_end

Sent: the numbers are going around .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(det|the($1,n|number-PL($1)),$0),$0),adv:loc|around($0))
example_end

Sent: the zero .
Sem:  det|the($0,n|zero($0))
example_end

Sent: that 's a six that just went by .
Sem:  pro:dem|that
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: blow .
Sem:  lambda $0_{ev}.v|blow(pro|you,$0)
example_end

Sent: I hear her .
Sem:  lambda $0_{ev}.v|hear(pro|I,pro|her,$0)
example_end

Sent: do you hear her ?
Sem:  lambda $0_{ev}.Q(aux|do(v|hear(pro|you,pro|her,$0),$0),$0)
example_end

Sent: what 's wrong ?
Sem:  lambda $0_{e}.adj|wrong($0)
example_end

Sent: you may have your dish .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro:poss:det|your($1,n|dish($1)),$0),$0)
example_end

Sent: what else do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: some cheese ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|cheese($1)),$0)
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: what am I gonna do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$1),v|do(pro|I,$0,$1)),$1)
example_end

Sent: that 's the fruit .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|fruit($1)),$0)
example_end

Sent: no green beans .
Sem:  qn|no($0,and(adj|green($0),n|bean-PL($0)))
example_end

Sent: peanutbutter .
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: I 'll fold it over for you .
Sem:  lambda $0_{ev}.and(aux|will(v|fold(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: he did what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(pro|he,$0,$1)
example_end

Sent: you do ?
Sem:  lambda $0_{ev}.Q(v|do(pro|you,$0),$0)
example_end

Sent: he 's not .
Sem:  pro|he
example_end

Sent: what 's he doing then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:tem|then($1))
example_end

Sent: he does have his glasses on .
Sem:  lambda $0_{ev}.and(aux|do&3S(v|have(pro|he,pro:poss:det|his($1,n|glass-PL($1)),$0),$0),adv|on($0))
example_end

Sent: Cromer wears glasses too .
Sem:  lambda $0_{ev}.v|wear-3S(n:prop|Cromer,lambda $1_{e}.n|glass-PL($1),$0)
example_end

Sent: he has them on his head .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|he,pro|them,$0),prep|on(pro:poss:det|his($1,n|head($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Eve do you have some glasses .
Sem:  lambda $0_{ev}.aux|do(v|have(pro|you,qn|some($1,n|glass-PL($1)),$0),$0)
example_end

Sent: and you told him yes  .
Sem:  lambda $0_{ev}.v|tell&PAST(pro|you,pro|him,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: they did come to see you .
Sem:  lambda $0_{ev}.aux|do&PAST(and(v|come(pro|they,$0),v|see(pro|they,pro|you,$0)),$0)
example_end

Sent: what did we do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|we,$0,$1),$1)
example_end

Sent: do you like it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: it is white .
Sem:  adj|white(pro|it)
example_end

Sent: it has bumps in it too .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,lambda $1_{e}.n|bump-PL($1),$0),prep|in(pro|it,$0))
example_end

Sent: Papa fixed them .
Sem:  lambda $0_{ev}.v|fix-PAST(n:prop|Papa,pro|them,$0)
example_end

Sent: you don 't wear them .
Sem:  lambda $0_{ev}.not(aux|do(v|wear(pro|you,pro|them,$0),$0),$0)
example_end

Sent: you don 't wear them .
Sem:  lambda $0_{ev}.not(aux|do(v|wear(pro|you,pro|them,$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: he 'll put them away .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|he,pro|them,$0),$0),adv|away($0))
example_end

Sent: is that better ?
Sem:  lambda $0_{ev}.Q(adj|good&CP(pro:dem|that),$0)
example_end

Sent: it is my stool .
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|my($1,n|stool($1)),$0)
example_end

Sent: what I was having on my nose ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PAST&13S(part|have-PROG(pro|I,$0,$1),$1),prep|on(pro:poss:det|my($2,n|nose($2)),$1))
example_end

Sent: nothing .
Sem:  pro:indef|nothing
example_end

Sent: I was rubbing my eyes .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|rub-PROG(pro|I,pro:poss:det|my($1,n|eye-PL($1)),$0),$0)
example_end

Sent: something .
Sem:  pro:indef|something
example_end

Sent: now you 're saying hello  .  MLR
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|say-PROG(pro|you,lambda $1_{e}.n|quote($1),$0),$0),adv|now($0))
example_end

Sent: I can hear him .
Sem:  lambda $0_{ev}.aux|can(v|hear(pro|I,pro|him,$0),$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: day .
Sem:  lambda $0_{e}.n|day($0)
example_end

Sent: I said good day Eve  .  MLR
Sem:  lambda $0_{ev}.v|say&PAST(pro|I,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: no pictures ?
Sem:  lambda $0_{ev}.Q(qn|no($1,n|picture-PL($1)),$0)
example_end

Sent: we 'll have our lunch .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,pro:poss:det|our($1,n|lunch($1)),$0),$0)
example_end

Sent: you could say good morning  .  MLR
Sem:  lambda $0_{ev}.aux|could(v|say(pro|you,lambda $1_{e}.n|quote($1),$0),$0)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: what are you doing to me ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(pro|me,$1))
example_end

Sent: pushing me around ?
Sem:  lambda $0_{ev}.Q(and(part|push-PROG(pro|you,pro|me,$0),adv:loc|around($0)),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'll go away then .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|I,$0),$0),adv:tem|then($0))
example_end

Sent: I 'll go away .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|I,$0),$0),adv|away($0))
example_end

Sent: would you like some soup ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|some($1,n|soup($1)),$0),$0),$0)
example_end

Sent: rice .
Sem:  lambda $0_{e}.n|rice($0)
example_end

Sent: that 's your rice soup .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|rice($1),n|soup($1))),$0)
example_end

Sent: I spilled it .
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,pro|it,$0)
example_end

Sent: it 's saying what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(pro|it,$0,$1),$1)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: I had a bone in it .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|I,det|a($1,n|bone($1)),$0),prep|in(pro|it,$0))
example_end

Sent: a chicken bone .
Sem:  det|a($0,and(n|chicken($0),n|bone($0)))
example_end

Sent: I took it out .
Sem:  lambda $0_{ev}.and(v|take&PAST(pro|I,pro|it,$0),adv:loc|out($0))
example_end

Sent: you don 't chew them up .
Sem:  lambda $0_{ev}.not(and(aux|do(v|chew(pro|you,pro|them,$0),$0),adv:loc|up($0)),$0)
example_end

Sent: but you don 't eat them .
Sem:  lambda $0_{ev}.not(aux|do(v|eat(pro|you,pro|them,$0),$0),$0)
example_end

Sent: you just chew the meat off .
Sem:  lambda $0_{ev}.and(v|chew(pro|you,det|the($1,n|meat($1)),$0),adv|off($0))
example_end

Sent: you bite it off .
Sem:  lambda $0_{ev}.and(v|bite(pro|you,pro|it,$0),adv|off($0))
example_end

Sent: they did what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(pro|they,$0,$1)
example_end

Sent: Fraser too ?
Sem:  lambda $0_{ev}.Q(n:prop|Fraser,$0)
example_end

Sent: you 're getting new teeth too .
Sem:  lambda $0_{ev}.aux|be&PRES(part|get-PROG(pro|you,lambda $1_{e}.and(adj|new($1),n|tooth&PL($1)),$0),$0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: do we have teeth all ?
Sem:  lambda $0_{ev}.Q(aux|do(v|have(pro|we,qn|all($1,n|tooth&PL($1)),$0),$0),$0)
example_end

Sent: we don 't say that .
Sem:  lambda $0_{ev}.not(aux|do(v|say(pro|we,pro:dem|that,$0),$0),$0)
example_end

Sent: I know that .
Sem:  lambda $0_{ev}.v|know(pro|I,pro:dem|that,$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: it 's going down on the floor .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: you be careful .
Sem:  adj|careful(pro|you)
example_end

Sent: don 't play with it .
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
example_end

Sent: we 're eating our lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|we,pro:poss:det|our($1,n|lunch($1)),$0),$0)
example_end

Sent: we are eating our lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|we,pro:poss:det|our($1,n|lunch($1)),$0),$0)
example_end

Sent: I don 't hear anything .
Sem:  lambda $0_{ev}.not(aux|do(v|hear(pro|I,pro:indef|anything,$0),$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: probably Cathy ?
Sem:  lambda $0_{ev}.Q(n:prop|Cathy,$0)
example_end

Sent: I don 't hear her .
Sem:  lambda $0_{ev}.not(aux|do(v|hear(pro|I,pro|her,$0),$0),$0)
example_end

Sent: I don 't care .
Sem:  lambda $0_{ev}.not(aux|do(v|care(pro|I,$0),$0),$0)
example_end

Sent: anything .
Sem:  pro:indef|anything
example_end

Sent: that 'll do fine .
Sem:  lambda $0_{ev}.and(aux|will(v|do(pro:dem|that,$0),$0),adv|fine($0))
example_end

Sent: you gonna sing with me ?
Sem:  lambda $0_{ev}.Q(and(part|go-PROG(pro|you,$0),prep|with(pro|me,$0)),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what were you doing out there with Becky ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1),prep|with(n:prop|Becky,$1))
example_end

Sent: what .
Sem:  pro:wh|what
example_end

Sent: I ironed them .
Sem:  lambda $0_{ev}.v|iron-PAST(pro|I,pro|them,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you may do it .
Sem:  lambda $0_{ev}.aux|may(v|do(pro|you,pro|it,$0),$0)
example_end

Sent: I 'll trade you .
Sem:  lambda $0_{ev}.aux|will(v|trade(pro|I,pro|you,$0),$0)
example_end

Sent: tonight he will put your jammies on .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|he,pro:poss:det|your($1,n|jam-DIM-PL($1)),$0),$0),adv|on($0))
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: Noel ?
Sem:  lambda $0_{ev}.Q(n:prop|Noel,$0)
example_end

Sent: Noel .
Sem:  n:prop|Noel
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: turn a somersault .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|a($1,n|somersault($1)),$0)
example_end

Sent: that was good .
Sem:  adj|good(pro:dem|that)
example_end

Sent: it didn 't cut your chin .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|cut&ZERO(pro|it,pro:poss:det|your($1,n|chin($1)),$0),$0),$0)
example_end

Sent: grape juice ?
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
example_end

Sent: I am going to do it .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|do(pro|I,pro|it,$0)),$0)
example_end

Sent: you 'll have that afterwards .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|you,pro:dem|that,$0),$0),adv|afterwards($0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: is that some pencils ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,qn|some($1,n|pencil-PL($1)),$0),$0)
example_end

Sent: I have some .
Sem:  lambda $0_{ev}.v|have(pro|I,pro:indef|some,$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I don 't see Nancy and Becky .
Sem:  lambda $0_{ev}.not(aux|do(v|see(pro|I,and(n:prop|Nancy,n:prop|Becky),$0),$0),$0)
example_end

Sent: where 's the lady ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|lady($1)),$0)
example_end

Sent: he needs a haircut .
Sem:  lambda $0_{ev}.v|need-3S(pro|he,det|a($1,n|+n|hair+n|cut($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a lady ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|lady($1)),$0)
example_end

Sent: it 's a lady .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|lady($1)),$0)
example_end

Sent: that 's a man .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is that a man ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: men .
Sem:  lambda $0_{e}.n|man&PL($0)
example_end

Sent: only men .
Sem:  qn|only($0,n|man&PL($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: candle ?
Sem:  lambda $0_{e}.n|candle($0)
example_end

Sent: pencils don 't belong in couches .
Sem:  lambda $0_{ev}.not(and(aux|do(v|belong(lambda $1_{e}.n|pencil-PL($1),$0),$0),prep|in(lambda $2_{e}.n|couch-PL($2),$0)),$0)
example_end

Sent: where is the birthday cake ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(n|birthday($1),n|cake($1))),$0)
example_end

Sent: what did you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: don 't you make it .
Sem:  lambda $0_{ev}.not(aux|do(v|make(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you may have it .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: bite it ?
Sem:  lambda $0_{ev}.Q(v|bite(pro|you,pro|it,$0),$0)
example_end

Sent: you 're gonna do what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: who was singing that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST&13S(part|sing-PROG($0,pro:dem|that,$1),$1)
example_end

Sent: sing it for us .
Sem:  lambda $0_{ev}.and(v|sing(pro|you,pro|it,$0),prep|for(pro|us,$0))
example_end

Sent: you sing it for us .
Sem:  lambda $0_{ev}.and(v|sing(pro|you,pro|it,$0),prep|for(pro|us,$0))
example_end

Sent: do it with you ?
Sem:  lambda $0_{ev}.Q(and(v|do(pro|you,pro|it,$0),prep|with(pro|you,$0)),$0)
example_end

Sent: you start .
Sem:  lambda $0_{ev}.v|start(pro|you,$0)
example_end

Sent: we 'll have milk for lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: we 'll have milk for lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|milk($1),$0),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: outside .
Sem:  lambda $0_{ev}.adv:loc|outside($0)
example_end

Sent: what are ? you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: Becky and Nancy are busy .
Sem:  adj|busy(and(n:prop|Becky,n:prop|Nancy))
example_end

Sent: is it better ?
Sem:  lambda $0_{ev}.Q(adj|good&CP(pro|it),$0)
example_end

Sent: I 'm awfully glad .
Sem:  adj|glad(pro|I)
example_end

Sent: inside .
Sem:  lambda $0_{ev}.adv:loc|inside($0)
example_end

Sent: inside .
Sem:  lambda $0_{ev}.adv:loc|inside($0)
example_end

Sent: is it better ?
Sem:  lambda $0_{ev}.Q(adj|good&CP(pro|it),$0)
example_end

Sent: climb in your highchair .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),prep|in(pro:poss:det|your($1,n|highchair($1)),$0))
example_end

Sent: climb in .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: I will wipe it off .
Sem:  lambda $0_{ev}.and(aux|will(v|wipe(pro|I,pro|it,$0),$0),adv|off($0))
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: you have a scratch on there .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|scratch($1)),$0),adv:loc|on($0))
example_end

Sent: what have you been doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PERF(aux|have(part|do-PROG(pro|you,$0,$1),$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: your elbow ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|elbow($1)),$0)
example_end

Sent: does it hurt ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: it 'll be better .
Sem:  adj|good&CP(pro|it)
example_end

Sent: I don 't hear her .
Sem:  lambda $0_{ev}.not(aux|do(v|hear(pro|I,pro|her,$0),$0),$0)
example_end

Sent: I don 't hear her .
Sem:  lambda $0_{ev}.not(aux|do(v|hear(pro|I,pro|her,$0),$0),$0)
example_end

Sent: she 's sleeping .
Sem:  lambda $0_{ev}.aux|be&3S(part|sleep-PROG(pro|she,$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's my jacket .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|jacket($1)),$0)
example_end

Sent: a cracker .
Sem:  det|a($0,n|cracker($0))
example_end

Sent: seeds .
Sem:  lambda $0_{e}.n|seed-PL($0)
example_end

Sent: did you what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(pro|you,$0,$1)
example_end

Sent: vegetable soup .
Sem:  lambda $0_{e}.and(n|vegetable($0),n|soup($0))
example_end

Sent: what is he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 'm I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: vaccine .
Sem:  lambda $0_{e}.n|vaccine($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I can 't hear you .
Sem:  lambda $0_{ev}.not(aux|can(v|hear(pro|I,pro|you,$0),$0),$0)
example_end

Sent: want some cheese ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|cheese($1)),$0),$0)
example_end

Sent: Taffy too has a tongue .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Taffy,det|a($1,n|tongue($1)),$0)
example_end

Sent: everybody has a tongue .
Sem:  lambda $0_{ev}.v|have&3S(pro:indef|everybody,det|a($1,n|tongue($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: cheese .
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: gruyere cheese .
Sem:  lambda $0_{e}.and(n|gruyere($0),n|cheese($0))
example_end

Sent: I 'll peel it .
Sem:  lambda $0_{ev}.aux|will(v|peel(pro|I,pro|it,$0),$0)
example_end

Sent: I 'll peel it .
Sem:  lambda $0_{ev}.aux|will(v|peel(pro|I,pro|it,$0),$0)
example_end

Sent: you can 't peel it .
Sem:  lambda $0_{ev}.not(aux|can(v|peel(pro|you,pro|it,$0),$0),$0)
example_end

Sent: what 's that man doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|that($2,n|man($2)),$0,$1),$1)
example_end

Sent: sitting ?
Sem:  lambda $0_{ev}.Q(part|sit-PROG(pro|you,$0),$0)
example_end

Sent: you want another man ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|man($1)),$0),$0)
example_end

Sent: men .
Sem:  lambda $0_{e}.n|man&PL($0)
example_end

Sent: will you eat it ?
Sem:  lambda $0_{ev}.Q(aux|will(v|eat(pro|you,pro|it,$0),$0),$0)
example_end

Sent: men .
Sem:  lambda $0_{e}.n|man&PL($0)
example_end

Sent: men .
Sem:  lambda $0_{e}.n|man&PL($0)
example_end

Sent: you say men .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|man&PL($1),$0)
example_end

Sent: I hear you .
Sem:  lambda $0_{ev}.v|hear(pro|I,pro|you,$0)
example_end

Sent: pepper ?
Sem:  lambda $0_{e}.n|pepper($0)
example_end

Sent: you put pepper on soup .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|pepper($1),$0),prep|on(lambda $2_{e}.n|soup($2),$0))
example_end

Sent: you don 't do that .
Sem:  lambda $0_{ev}.not(aux|do(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: what do you want there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|want(pro|you,$0,$1),$1),adv:loc|there($1))
example_end

Sent: you already have it right there .
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro|it,$0),adv:loc|there($0))
example_end

Sent: you 're having lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|have-PROG(pro|you,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: you don 't eat clay .
Sem:  lambda $0_{ev}.not(aux|do(v|eat(pro|you,lambda $1_{e}.n|clay($1),$0),$0),$0)
example_end

Sent: what else did Papa make with the clay ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|make(n:prop|Papa,$0,$1),$1),prep|with(det|the($2,n|clay($2)),$1))
example_end

Sent: what did Papa make with the clay ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|make(n:prop|Papa,$0,$1),$1),prep|with(det|the($2,n|clay($2)),$1))
example_end

Sent: a dog .
Sem:  det|a($0,n|dog($0))
example_end

Sent: what else did Papa make ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|make(n:prop|Papa,$0,$1),$1)
example_end

Sent: a dinosaur .
Sem:  det|a($0,n|dinosaur($0))
example_end

Sent: Fraser won 't take you up .
Sem:  lambda $0_{ev}.not(and(aux|will(v|take(n:prop|Fraser,pro|you,$0),$0),adv:loc|up($0)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you can 't see it .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you can 't see it .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you can 't see it .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Fraser can 't see it either .
Sem:  lambda $0_{ev}.not(and(aux|can(v|see(n:prop|Fraser,pro|it,$0),$0),adv|either($0)),$0)
example_end

Sent: the fan ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|fan($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: we ?
Sem:  lambda $0_{ev}.Q(pro|we,$0)
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: I don 't particularly like fans .
Sem:  lambda $0_{ev}.not(aux|do(v|like(pro|I,lambda $1_{e}.n|fan-PL($1),$0),$0),$0)
example_end

Sent: these people don 't like the fan .
Sem:  lambda $0_{ev}.not(aux|do(v|like(det|these($1,n|person&PL($1)),det|the($2,n|fan($2)),$0),$0),$0)
example_end

Sent: you eat it then .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,pro|it,$0),adv:tem|then($0))
example_end

Sent: eat it .
Sem:  lambda $0_{ev}.v|eat(pro|you,pro|it,$0)
example_end

Sent: you 're not making a dinosaur .
Sem:  lambda $0_{ev}.not(aux|be&PRES(part|make-PROG(pro|you,det|a($1,n|dinosaur($1)),$0),$0),$0)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: we don 't like the fan .
Sem:  lambda $0_{ev}.not(aux|do(v|like(pro|we,det|the($1,n|fan($1)),$0),$0),$0)
example_end

Sent: they 're all people .
Sem:  lambda $0_{ev}.eq(pro|they,qn|all($1,n|person&PL($1)),$0)
example_end

Sent: they 're all people .
Sem:  lambda $0_{ev}.eq(pro|they,qn|all($1,n|person&PL($1)),$0)
example_end

Sent: Mom and Fraser are grownups .
Sem:  lambda $0_{e}.n|grownup-PL($0)
example_end

Sent: and who ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: whose daughters .
Sem:  lambda $0_{e}.n|daughter-PL($0)
example_end

Sent: who 's that .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: daughters .
Sem:  lambda $0_{e}.n|daughter-PL($0)
example_end

Sent: you and Sarah are daughters .
Sem:  lambda $0_{e}.n|daughter-PL($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Papa 's not a daughter .
Sem:  lambda $0_{ev}.not(eq(n:prop|Papa,det|a($1,n|daughter($1)),$0),$0)
example_end

Sent: Papa 's the papa .
Sem:  lambda $0_{ev}.eq(n:prop|Papa,det|the($1,n|papa($1)),$0)
example_end

Sent: Papa 's the papa .
Sem:  lambda $0_{ev}.eq(n:prop|Papa,det|the($1,n|papa($1)),$0)
example_end

Sent: we 're a family .
Sem:  lambda $0_{ev}.eq(pro|we,det|a($1,n|family($1)),$0)
example_end

Sent: we 're called a family .
Sem:  lambda $0_{ev}.aux|be&PRES(v|call-PAST(pro|we,det|a($1,n|family($1)),$0),$0)
example_end

Sent: not me and Cromer .
Sem:  lambda $0_{ev}.not(pro|me,$0)
example_end

Sent: sortof .
Sem:  lambda $0_{ev}.adv:int|sort_of($0)
example_end

Sent: they 're our friends .
Sem:  lambda $0_{ev}.eq(pro|they,pro:poss:det|our($1,n|friend-PL($1)),$0)
example_end

Sent: they 're our friends .
Sem:  lambda $0_{ev}.eq(pro|they,pro:poss:det|our($1,n|friend-PL($1)),$0)
example_end

Sent: old friends meeting once again  .
Sem:  lambda $0_{e}.n|quote($0)
example_end

Sent: and Mama 's going to take nap too .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mama,$0),v|take(n:prop|Mama,lambda $1_{e}.n|nap($1),$0)),$0)
example_end

Sent: she 's already taking a nap .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|take-PROG(pro|she,det|a($1,n|nap($1)),$0),$0),adv|already($0))
example_end

Sent: he 'll come tomorrow .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|he,$0),$0),adv:tem|tomorrow($0))
example_end

Sent: it certainly is .
Sem:  pro|it
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: you may see him again tomorrow .
Sem:  lambda $0_{ev}.and(aux|may(v|see(pro|you,pro|him,$0),$0),adv:tem|tomorrow($0))
example_end

Sent: Cromer may come .
Sem:  lambda $0_{ev}.aux|may(v|come(n:prop|Cromer,$0),$0)
example_end

Sent: what is it doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|it,$0,$1),$1)
example_end

Sent: it 's dripping .
Sem:  lambda $0_{ev}.aux|be&3S(part|drip-PROG(pro|it,$0),$0)
example_end

Sent: water 's coming outof the spigot .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|come-PROG(lambda $1_{e}.n|water($1),$0),$0),prep|out_of(det|the($2,n|spigot($2)),$0))
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: is that better ?
Sem:  lambda $0_{ev}.Q(adj|good&CP(pro:dem|that),$0)
example_end

Sent: finish your lunch .
Sem:  lambda $0_{ev}.v|finish(pro|you,pro:poss:det|your($1,n|lunch($1)),$0)
example_end

Sent: spigot .
Sem:  lambda $0_{e}.n|spigot($0)
example_end

Sent: spigot .
Sem:  lambda $0_{e}.n|spigot($0)
example_end

Sent: spigot .
Sem:  lambda $0_{e}.n|spigot($0)
example_end

Sent: not this morning .
Sem:  det|this($0,n|morning($0))
example_end

Sent: not this morning .
Sem:  det|this($0,n|morning($0))
example_end

Sent: we only do that in the morning .
Sem:  lambda $0_{ev}.and(v|do(pro|we,pro:dem|that,$0),prep|in(det|the($1,n|morning($1)),$0))
example_end

Sent: I already did make tapioca for you .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|make(pro|I,lambda $1_{e}.n|tapioca($1),$0),$0),prep|for(pro|you,$0))
example_end

Sent: hurry up .
Sem:  lambda $0_{ev}.and(v|hurry(pro|you,$0),adv:loc|up($0))
example_end

Sent: tomorrow he 's coming back .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|come-PROG(pro|he,$0),$0),adv:loc|back($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I have round sleeves ?
Sem:  lambda $0_{ev}.Q(v|have(pro|I,lambda $1_{e}.and(adj|round($1),n|sleeve-PL($1)),$0),$0)
example_end

Sent: yours are short .
Sem:  adj|short(pro:poss|yours)
example_end

Sent: she woke up from her nap .
Sem:  lambda $0_{ev}.and(v|wake&PAST(pro|she,$0),prep|from(pro:poss:det|her($1,n|nap($1)),$0))
example_end

Sent: dirty feet .
Sem:  lambda $0_{e}.and(adj|dirty($0),n|foot&PL($0))
example_end

Sent: I don 't want it .
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
example_end

Sent: have what in your chair ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|have(pro|you,$0,$1),prep|in(pro:poss:det|your($2,n|chair($2)),$1))
example_end

Sent: what is he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: you do have a bandaid .
Sem:  lambda $0_{ev}.aux|do(v|have(pro|you,det|a($1,n|bandaid($1)),$0),$0)
example_end

Sent: is it ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: we 'll leave the bandaid on .
Sem:  lambda $0_{ev}.and(aux|will(v|leave(pro|we,det|the($1,n|bandaid($1)),$0),$0),adv|on($0))
example_end

Sent: you want it off ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|it,$0),adv|off($0)),$0)
example_end

Sent: can I take the bandaid off .
Sem:  lambda $0_{ev}.and(aux|can(v|take(pro|I,det|the($1,n|bandaid($1)),$0),$0),adv|off($0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: it is better .
Sem:  adj|good&CP(pro|it)
example_end

Sent: it 's not ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: I 'll take his cup .
Sem:  lambda $0_{ev}.aux|will(v|take(pro|I,pro:poss:det|his($1,n|cup($1)),$0),$0)
example_end

Sent: not that way .
Sem:  lambda $0_{ev}.not(det|that($1,n|way($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is he doing over there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what is ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: you 're silly .
Sem:  adj|silly(pro|you)
example_end

Sent: he 's sitting on it ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|on(pro|it,$0)),$0)
example_end

Sent: he 's not sitting on that .
Sem:  lambda $0_{ev}.not(and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|on(pro:dem|that,$0)),$0)
example_end

Sent: who 's sitting on that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|sit-PROG($0,$1),$1),prep|on(pro:dem|that,$1))
example_end

Sent: Fraser 's not sitting on it .
Sem:  lambda $0_{ev}.not(and(aux|be&3S(part|sit-PROG(n:prop|Fraser,$0),$0),prep|on(pro|it,$0)),$0)
example_end

Sent: the front .
Sem:  det|the($0,n|front($0))
example_end

Sent: the front .
Sem:  det|the($0,n|front($0))
example_end

Sent: not that pillow .
Sem:  lambda $0_{ev}.not(det|that($1,n|pillow($1)),$0)
example_end

Sent: I 'm making coffee .
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|coffee($1),$0),$0)
example_end

Sent: coffee .
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: get it .
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
example_end

Sent: this way .
Sem:  det|this($0,n|way($0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|write-PROG(pro|you,$0,$1),$1)
example_end

Sent: where 's your pad ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pad($1)),$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: a brand new pad .
Sem:  det|a($0,and(adj|brand($0),adj|new($0),n|pad($0)))
example_end

Sent: you forget something though .
Sem:  lambda $0_{ev}.and(v|forget(pro|you,pro:indef|something,$0),adv|though($0))
example_end

Sent: that 'd be a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: did she have a boot ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|have(pro|she,det|a($1,n|boot($1)),$0),$0),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: I 'll write a lady .
Sem:  lambda $0_{ev}.aux|will(v|write(pro|I,det|a($1,n|lady($1)),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is that a lady ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|lady($1)),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what have you been writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PERF(aux|have(part|write-PROG(pro|you,$0,$1),$1),$1)
example_end

Sent: what 've you been writing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PERF(aux|have(part|write-PROG(pro|you,$0,$1),$1),$1)
example_end

Sent: it 's hot ?
Sem:  lambda $0_{ev}.Q(adj|hot(pro|it),$0)
example_end

Sent: wash it off .
Sem:  lambda $0_{ev}.and(v|wash(pro|you,pro|it,$0),adv|off($0))
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: you 're gonna have milk .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|have(pro|you,lambda $1_{e}.n|milk($1),$0)),$0)
example_end

Sent: it 's not hot .
Sem:  lambda $0_{ev}.not(adj|hot(pro|it),$0)
example_end

Sent: the chair ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|chair($1)),$0)
example_end

Sent: make some noise .
Sem:  lambda $0_{ev}.v|make(pro|you,qn|some($1,n|noise($1)),$0)
example_end

Sent: what do you want Sarah ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: aren 't you hungry ?
Sem:  lambda $0_{ev}.Q(not(adj|hungry(pro|you),$0),$0)
example_end

Sent: Eve 's hungry .
Sem:  adj|hungry(n:prop|Eve)
example_end

Sent: Mom 's hungry .
Sem:  adj|hungry(n:prop|Mom)
example_end

Sent: she must not be .
Sem:  pro|she
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: he was lying on the couch then .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|lie-PROG(pro|he,$0),$0),adv:tem|then($0))
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: maam .
Sem:  lambda $0_{e}.n|maam($0)
example_end

Sent: that 's alright .
Sem:  adj|alright(pro:dem|that)
example_end

Sent: where is EveCummings ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve_Cummings,$0)
example_end

Sent: you 're doing what with them ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(pro|them,$1))
example_end

Sent: they 're not talking .
Sem:  lambda $0_{ev}.not(aux|be&PRES(part|talk-PROG(pro|they,$0),$0),$0)
example_end

Sent: they didn 't say a thing .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|say(pro|they,det|a($1,n|thing($1)),$0),$0),$0)
example_end

Sent: that 'd be nice .
Sem:  adj|nice(pro:dem|that)
example_end

Sent: you will hear her .
Sem:  lambda $0_{ev}.aux|will(v|hear(pro|you,pro|her,$0),$0)
example_end

Sent: she is doing it again .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|do-PROG(pro|she,pro|it,$0),$0),adv|again($0))
example_end

Sent: sortof .
Sem:  lambda $0_{ev}.adv:int|sort_of($0)
example_end

Sent: she 's not really laying down .
Sem:  lambda $0_{ev}.not(and(aux|be&3S(part|lay-PROG(pro|she,$0),$0),adv:loc|down($0)),$0)
example_end

Sent: what is he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: he 's wearing them .
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(pro|he,pro|them,$0),$0)
example_end

Sent: what is he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's funny ?
Sem:  lambda $0_{ev}.Q(adj|funny(pro|he),$0)
example_end

Sent: don 't you like his glasses ?
Sem:  lambda $0_{ev}.Q(not(aux|do(v|like(pro|you,pro:poss:det|his($1,n|glass-PL($1)),$0),$0),$0),$0)
example_end

Sent: I 'm getting Sarah some rattles .
Sem:  lambda $0_{ev}.aux|be&1S(part|get-PROG(pro|I,n:prop|Sarah,qn|some($1,n|rattle-PL($1)),$0),$0)
example_end

Sent: he 'll keep them off then .
Sem:  lambda $0_{ev}.and(aux|will(v|keep(pro|he,pro|them,$0),$0),adv:tem|then($0))
example_end

Sent: he won 't wear them .
Sem:  lambda $0_{ev}.not(aux|will(v|wear(pro|he,pro|them,$0),$0),$0)
example_end

Sent: I don 't have any glasses .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,qn|any($1,n|glass-PL($1)),$0),$0),$0)
example_end

Sent: he doesn 't have glasses .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,lambda $1_{e}.n|glass-PL($1),$0),$0),$0)
example_end

Sent: sometimes he wears them .
Sem:  lambda $0_{ev}.and(v|wear-3S(pro|he,pro|them,$0),adv|sometimes($0))
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: hurry up .
Sem:  lambda $0_{ev}.and(v|hurry(pro|you,$0),adv:loc|up($0))
example_end

Sent: watch your feet .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|foot&PL($1)),$0)
example_end

Sent: what was he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST&13S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he just listens .
Sem:  lambda $0_{ev}.and(v|listen-3S(pro|he,$0),adv:int|just($0))
example_end

Sent: he doesn 't say anything .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|say(pro|he,pro:indef|anything,$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you want somebody ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,pro:indef|somebody,$0),$0)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: you want Sarah ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,n:prop|Sarah,$0),$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: you tell me .
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
example_end

Sent: you want a cookie ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
example_end

Sent: the chocolate cookie .
Sem:  det|the($0,and(n|chocolate($0),n|cookie($0)))
example_end

Sent: the lady did come with Fraser .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|come(det|the($1,n|lady($1)),$0),$0),prep|with(n:prop|Fraser,$0))
example_end

Sent: her name 's Gloria .
Sem:  lambda $0_{ev}.eq(pro:poss:det|her($1,n|name($1)),n:prop|Gloria,$0)
example_end

Sent: her name 's Gloria .
Sem:  lambda $0_{ev}.eq(pro:poss:det|her($1,n|name($1)),n:prop|Gloria,$0)
example_end

Sent: peek in there at her .
Sem:  lambda $0_{ev}.and(v|peek(pro|you,$0),prep|at(pro|her,$0))
example_end

Sent: see her ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|her,$0),$0)
example_end

Sent: you 're peeking at her again ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|peek-PROG(pro|you,$0),$0),adv|again($0)),$0)
example_end

Sent: peek around .
Sem:  lambda $0_{ev}.and(v|peek(pro|you,$0),adv:loc|around($0))
example_end

Sent: Gloria .
Sem:  n:prop|Gloria
example_end

Sent: Gloria .
Sem:  n:prop|Gloria
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: not that little glass .
Sem:  lambda $0_{ev}.not(det|that($1,and(adj|little($1),n|glass($1))),$0)
example_end

Sent: you drink it outof your cup right now .
Sem:  lambda $0_{ev}.and(v|drink(pro|you,pro|it,$0),adv|now($0))
example_end

Sent: you don 't need a glass .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|glass($1)),$0),$0),$0)
example_end

Sent: drink it outof your cup .
Sem:  lambda $0_{ev}.and(v|drink(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|cup($1)),$0))
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: you don 't need your glass .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,pro:poss:det|your($1,n|glass($1)),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's Gloria .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Gloria,$0)
example_end

Sent: you can just see Fraser .
Sem:  lambda $0_{ev}.and(aux|can(v|see(pro|you,n:prop|Fraser,$0),$0),adv:int|just($0))
example_end

Sent: where is she ?
Sem:  lambda $0_{e}.eqLoc(pro|she,$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's an airplane .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|airplane($1)),$0)
example_end

Sent: does it work ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|work(pro|it,$0),$0),$0)
example_end

Sent: who fixed it for you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(part|fix-PERF($0,pro|it,$1),prep|for(pro|you,$1))
example_end

Sent: Papa .
Sem:  n:prop|Papa
example_end

Sent: and what do you do with the plane ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(det|the($2,n|plane($2)),$1))
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's this  camera spool ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what do you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Cathy too .
Sem:  n:prop|Cathy
example_end

Sent: it 's a new jar .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|new($1),n|jar($1))),$0)
example_end

Sent: it 's not a new kind .
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,and(adj|new($1),n|kind($1))),$0),$0)
example_end

Sent: I 've got a book here .
Sem:  lambda $0_{ev}.and(aux|have(part|get&PERF(pro|I,det|a($1,n|book($1)),$0),$0),adv:loc|here($0))
example_end

Sent: you do ?
Sem:  lambda $0_{ev}.Q(v|do(pro|you,$0),$0)
example_end

Sent: where is he ?
Sem:  lambda $0_{e}.eqLoc(pro|he,$0)
example_end

Sent: I don 't see him .
Sem:  lambda $0_{ev}.not(aux|do(v|see(pro|I,pro|him,$0),$0),$0)
example_end

Sent: and then what does he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&3S(v|do(pro|he,$0,$1),$1),adv:tem|then($1))
example_end

Sent: he put his hat on ?
Sem:  lambda $0_{ev}.Q(and(v|put&ZERO(pro|he,pro:poss:det|his($1,n|hat($1)),$0),adv|on($0)),$0)
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: look at that .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro:dem|that,$0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a horse ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|horse($1)),$0)
example_end

Sent: they have their hats on .
Sem:  lambda $0_{ev}.and(v|have(pro|they,pro:poss:det|their($1,n|hat-PL($1)),$0),adv|on($0))
example_end

Sent: and what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: that 's a nice story .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: tell me about that .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:dem|that,$0))
example_end

Sent: it 's a burro .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|burro($1)),$0)
example_end

Sent: which story do you like best ?
Sem:  lambda $0_{ev}.Q(and(aux|do(v|like(pro|you,lambda $1_{e}.n|story($1),$0),$0),adv|good&SP($0)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who is the little boy ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,and(adj|little($2),n|boy($2))),$1)
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: he working .
Sem:  lambda $0_{ev}.part|work-PROG(pro|he,$0)
example_end

Sent: you was gone away .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|go&PERF(pro|you,$0),$0),adv|away($0))
example_end

Sent: newspaper .
Sem:  lambda $0_{e}.n|newspaper($0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: what are you doing over there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),adv:loc|there($1))
example_end

Sent: you finished that story .
Sem:  lambda $0_{ev}.v|finish-PAST(pro|you,det|that($1,n|story($1)),$0)
example_end

Sent: that was a nice story .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Humm .
Sem:  n:prop|Humm
example_end

Sent: what is Humm ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Humm,$1)
example_end

Sent: does he sing a song ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|sing(pro|he,det|a($1,n|song($1)),$0),$0),$0)
example_end

Sent: what 's Humm doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Humm,$0,$1),$1),adv:loc|here($1))
example_end

Sent: he 's eating a banana .
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|he,det|a($1,n|banana($1)),$0),$0)
example_end

Sent: what 's he doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|here($1))
example_end

Sent: eating parsley .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|parsley($1),$0)
example_end

Sent: what 's he eating ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|he,$0,$1),$1)
example_end

Sent: say girl  Eve . MLR
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: say girl  .  MLR
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: what 's Humm doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Humm,$0,$1),$1),adv:loc|there($1))
example_end

Sent: he 's looking at you .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|look-PROG(pro|he,$0),$0),prep|at(pro|you,$0))
example_end

Sent: and what 's Humm doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Humm,$0,$1),$1),adv:loc|there($1))
example_end

Sent: eating bacon .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|bacon($1),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: eating lunch .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|lunch($1),$0)
example_end

Sent: that fell down .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro:dem|that,$0),adv:loc|down($0))
example_end

Sent: fell down .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro|you,$0),adv:loc|down($0))
example_end

Sent: what are the children doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(det|the($2,n|child&PL($2)),$0,$1),$1),adv:loc|here($1))
example_end

Sent: they 're trying to find Humm .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|try-PROG(pro|they,$0),v|find(pro|they,n:prop|Humm,$0)),$0)
example_end

Sent: who are these people ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|these($2,n|person&PL($2)),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you are a good girl .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: they eating lunch .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|they,lambda $1_{e}.n|lunch($1),$0)
example_end

Sent: who are those people ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|those($2,n|person&PL($2)),$1)
example_end

Sent: they 're trying to find Humm .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|try-PROG(pro|they,$0),v|find(pro|they,n:prop|Humm,$0)),$0)
example_end

Sent: what does Humm have there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&3S(v|have(n:prop|Humm,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: did you tell Gloria the story ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|tell(pro|you,n:prop|Gloria,det|the($1,n|story($1)),$0),$0),$0)
example_end

Sent: some ball ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|ball($1)),$0)
example_end

Sent: what do you do in a boat ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|in(det|a($2,n|boat($2)),$1))
example_end

Sent: what do you do then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),adv:tem|then($1))
example_end

Sent: what do you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: she is indeed .
Sem:  pro|she
example_end

Sent: who 's making that noise .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|make-PROG($0,det|that($2,n|noise($2)),$1),$1)
example_end

Sent: you ?
Sem:  lambda $0_{ev}.Q(pro|you,$0)
example_end

Sent: what 're you doing .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: I 'm glad .
Sem:  adj|glad(pro|I)
example_end

Sent: who 's the little girl ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,and(adj|little($2),n|girl($2))),$1)
example_end

Sent: who 's that little girl ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,and(adj|little($2),n|girl($2))),$1)
example_end

Sent: who 's that little baby ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,and(adj|little($2),n|baby($2))),$1)
example_end

Sent: that 's Sarah ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Sarah,$0),$0)
example_end

Sent: is she ?
Sem:  lambda $0_{ev}.Q(pro|she,$0)
example_end

Sent: what does your baby sister do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro:poss:det|your($2,and(n|baby($2),n|sister($2))),$0,$1),$1)
example_end

Sent: what else does she do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|she,$0,$1),$1)
example_end

Sent: does she cry ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|cry(pro|she,$0),$0),$0)
example_end

Sent: does she laugh ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|laugh(pro|she,$0),$0),$0)
example_end

Sent: what else does she do ?  RES
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|she,$0,$1),$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: what 's Sarah doing now ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Sarah,$0,$1),$1),adv|now($1))
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a dingdong dell .
Sem:  det|a($0,n|dell($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a cart .
Sem:  det|a($0,n|cart($0))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: isn 't it a cart ?
Sem:  lambda $0_{ev}.Q(not(eq(pro|it,det|a($1,n|cart($1)),$0),$0),$0)
example_end

Sent: you look like a turtle .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|like(det|a($1,n|turtle($1)),$0))
example_end

Sent: there it goes .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),adv:loc|there($0))
example_end

Sent: what 's it doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|it,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what does it do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
example_end

Sent: where 's the airplane ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|airplane($1)),$0)
example_end

Sent: what did it do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|it,$0,$1),$1)
example_end

Sent: here it comes .
Sem:  lambda $0_{ev}.and(v|come-3S(pro|it,$0),adv:loc|here($0))
example_end

Sent: and who did it hit ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|hit&ZERO(pro|it,$0,$1),$1)
example_end

Sent: it hit me .
Sem:  lambda $0_{ev}.v|hit&ZERO(pro|it,pro|me,$0)
example_end

Sent: is it flying now ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|fly-PROG(pro|it,$0),$0),adv|now($0)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's Colin doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Colin,$0,$1),$1)
example_end

Sent: what 's Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what are you going to write ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|write(pro|you,$0,$1)),$1)
example_end

Sent: that 's Colin .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Colin,$0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: that 's my name .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|name($1)),$0)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: I 'll write their fingers .
Sem:  lambda $0_{ev}.aux|will(v|write(pro|I,pro:poss:det|their($1,n|finger-PL($1)),$0),$0)
example_end

Sent: the dirty fingers .
Sem:  det|the($0,and(adj|dirty($0),n|finger-PL($0)))
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: a lollipop ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|lollipop($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: dingdong bell .
Sem:  lambda $0_{e}.n|bell($0)
example_end

Sent: that 's a cart .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|cart($1)),$0)
example_end

Sent: is it green ?
Sem:  lambda $0_{ev}.Q(adj|green(pro|it),$0)
example_end

Sent: she 's  Sarah listening to the story .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|listen-PROG(pro|she,$0),$0),prep|to(det|the($1,n|story($1)),$0))
example_end

Sent: you 're not reading the book ?
Sem:  lambda $0_{ev}.Q(not(aux|be&PRES(part|read-PROG(pro|you,det|the($1,n|book($1)),$0),$0),$0),$0)
example_end

Sent: doggies ?
Sem:  lambda $0_{e}.n|dog-DIM-PL($0)
example_end

Sent: any buses ?
Sem:  lambda $0_{ev}.Q(qn|any($1,n|bus-PL($1)),$0)
example_end

Sent: that 's a lot .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|lot($1)),$0)
example_end

Sent: we 'll come right back down .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|down($0))
example_end

Sent: they did wait for us .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|wait(pro|they,$0),$0),prep|for(pro|us,$0))
example_end

Sent: and what ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: you 'll get your spoon .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|you,pro:poss:det|your($1,n|spoon($1)),$0),$0)
example_end

Sent: shall I cut it ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|cut&ZERO(pro|I,pro|it,$0),$0),$0)
example_end

Sent: I already cut it .
Sem:  lambda $0_{ev}.and(v|cut&ZERO(pro|I,pro|it,$0),adv|already($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what is Sarah having ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|have-PROG(n:prop|Sarah,$0,$1),$1)
example_end

Sent: zwieback .
Sem:  lambda $0_{e}.n|zwieback($0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: that 's his sandwich .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|sandwich($1)),$0)
example_end

Sent: I bumped into the board .
Sem:  lambda $0_{ev}.and(v|bump-PAST(pro|I,$0),prep|into(det|the($1,n|board($1)),$0))
example_end

Sent: you forgot something .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|you,pro:indef|something,$0)
example_end

Sent: what did I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|I,$0,$1),$1)
example_end

Sent: you said God  ?  MLR
Sem:  lambda $0_{ev}.v|say&PAST(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: God ?
Sem:  lambda $0_{ev}.Q(n:prop|God,$0)
example_end

Sent: Mama didn 't say God  .  MLR
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|say(n:prop|Mama,lambda $1_{e}.n|quote($1),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and so does Margaret .
Sem:  lambda $0_{ev}.and(v|do&3S(n:prop|Margaret,$0),adv:int|so($0))
example_end

Sent: Helga 's alright .
Sem:  adj|alright(n:prop|Helga)
example_end

Sent: we 'll sing that after lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|sing(pro|we,pro:dem|that,$0),$0),prep|after(lambda $1_{e}.n|lunch($1),$0))
example_end

Sent: we won 't sing it right now .
Sem:  lambda $0_{ev}.not(and(aux|will(v|sing(pro|we,pro|it,$0),$0),adv|now($0)),$0)
example_end

Sent: I 'm eating lobster salad too .
Sem:  lambda $0_{ev}.aux|be&1S(part|eat-PROG(pro|I,lambda $1_{e}.and(n|lobster($1),n|salad($1)),$0),$0)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: what 's she gonna do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(pro|she,$1),v|do(pro|she,$0,$1)),$1)
example_end

Sent: what did you tell Fraser ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|tell(pro|you,$0,n:prop|Fraser,$1),$1)
example_end

Sent: we 're eating our lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|we,pro:poss:det|our($1,n|lunch($1)),$0),$0)
example_end

Sent: maybe .
Sem:  lambda $0_{ev}.adv|maybe($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you can tell him right now .
Sem:  lambda $0_{ev}.and(aux|can(v|tell(pro|you,pro|him,$0),$0),adv|now($0))
example_end

Sent: don 't do that .
Sem:  lambda $0_{ev}.not(aux|do(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: and what did we do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|we,$0,$1),$1)
example_end

Sent: we had breakfast there .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|we,lambda $1_{e}.n|breakfast($1),$0),adv:loc|there($0))
example_end

Sent: are you finished ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
example_end

Sent: now we 'll wash your hands .
Sem:  lambda $0_{ev}.and(aux|will(v|wash(pro|we,pro:poss:det|your($1,n|hand-PL($1)),$0),$0),adv|now($0))
example_end

Sent: what was it what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did you do then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:tem|then($1))
example_end

Sent: what did we see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|see(pro|we,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what did I do there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|I,$0,$1),$1),adv:loc|there($1))
example_end

Sent: I went to a wedding .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|I,$0),prep|to(det|a($1,n|wedding($1)),$0))
example_end

Sent: I went inside the airplane .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|I,$0),prep|inside(det|the($1,n|airplane($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're exactly right .
Sem:  adj|right(pro|you)
example_end

Sent: yours is blue .
Sem:  adj|blue(pro:poss|yours)
example_end

Sent: yours is blue .
Sem:  adj|blue(pro:poss|yours)
example_end

Sent: you didn 't forget it .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|forget(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you said it .
Sem:  lambda $0_{ev}.v|say&PAST(pro|you,pro|it,$0)
example_end

Sent: you didn 't forget it .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|forget(pro|you,pro|it,$0),$0),$0)
example_end

Sent: it went in there .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|it,$0),adv:loc|in($0))
example_end

Sent: don 't say it again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|say(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: say another nursery rhyme .
Sem:  lambda $0_{ev}.v|say(pro|you,qn|another($1,and(n|nursery($1),n|rhyme($1))),$0)
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: what did we forget ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|forget(pro|we,$0,$1),$1)
example_end

Sent: they 're not talking to you .
Sem:  lambda $0_{ev}.not(and(aux|be&PRES(part|talk-PROG(pro|they,$0),$0),prep|to(pro|you,$0)),$0)
example_end

Sent: it 's not Becky .
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Becky,$0),$0)
example_end

Sent: it 's somebody else .
Sem:  lambda $0_{ev}.eq(pro|it,pro:indef|somebody,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're pulling her down .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|pull-PROG(pro|you,pro|her,$0),$0),adv:loc|down($0))
example_end

Sent: she 's falling .
Sem:  lambda $0_{ev}.aux|be&3S(part|fall-PROG(pro|she,$0),$0)
example_end

Sent: you 're falling .
Sem:  lambda $0_{ev}.aux|be&PRES(part|fall-PROG(pro|you,$0),$0)
example_end

Sent: watch your foot .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: is she ?
Sem:  lambda $0_{ev}.Q(pro|she,$0)
example_end

Sent: that 's not Papa .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
example_end

Sent: it looks like Papa ?
Sem:  lambda $0_{ev}.Q(and(v|look-3S(pro|it,$0),prep|like(n:prop|Papa,$0)),$0)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: a picture .
Sem:  det|a($0,n|picture($0))
example_end

Sent: another statue .
Sem:  qn|another($0,n|statue($0))
example_end

Sent: what was that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's alright .
Sem:  pro:dem|that
example_end

Sent: you come back in .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|in($0))
example_end

Sent: play with the children .
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),prep|with(det|the($1,n|child&PL($1)),$0))
example_end

Sent: outside .
Sem:  lambda $0_{ev}.adv:loc|outside($0)
example_end

Sent: what are you doing to me ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(pro|me,$1))
example_end

Sent: pushing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|push-PROG(pro|you,$0,$1)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: yourself .
Sem:  pro:refl|yourself
example_end

Sent: leave it right there .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro|it,$0),adv:loc|there($0))
example_end

Sent: Colin ?
Sem:  lambda $0_{ev}.Q(n:prop|Colin,$0)
example_end

Sent: Colin is his name .
Sem:  lambda $0_{ev}.eq(n:prop|Colin,pro:poss:det|his($1,n|name($1)),$0)
example_end

Sent: and Eve Cummings .
Sem:  n:prop|Eve
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're drawing on it ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|draw-PROG(pro|you,$0),$0),prep|on(pro|it,$0)),$0)
example_end

Sent: what do you have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|have(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: here ?
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: running ?
Sem:  lambda $0_{ev}.Q(part|run-PROG(pro|you,$0),$0)
example_end

Sent: you 're going round .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv|round($0))
example_end

Sent: what 's what ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
example_end

Sent: rain ?
Sem:  lambda $0_{e}.n|rain($0)
example_end

Sent: what hurts ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|hurt-3S(pro|you,$0,$1)
example_end

Sent: not Colingc .
Sem:  lambda $0_{ev}.not(n:prop|Coling,$0)
example_end

Sent: not Colingc .
Sem:  lambda $0_{ev}.not(n:prop|Coling,$0)
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: you have a fingernail ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,det|a($1,n|fingernail($1)),$0),$0)
example_end

Sent: hangnail .
Sem:  lambda $0_{e}.n|hangnail($0)
example_end

Sent: hangnail .
Sem:  lambda $0_{e}.n|hangnail($0)
example_end

Sent: Papa fixed it for you ?
Sem:  lambda $0_{ev}.Q(and(v|fix-PAST(n:prop|Papa,pro|it,$0),prep|for(pro|you,$0)),$0)
example_end

Sent: she probably caught it in her teeth .
Sem:  lambda $0_{ev}.and(v|catch&PAST(pro|she,pro|it,$0),prep|in(pro:poss:det|her($1,n|tooth&PL($1)),$0))
example_end

Sent: it 's probably a good idea too .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: we 'll read it later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,pro|it,$0),$0),adv|later($0))
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: who can read them to you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|can(v|read&ZERO($0,pro|them,$1),$1),prep|to(pro|you,$1))
example_end

Sent: we 'll read them later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,pro|them,$0),$0),adv|later($0))
example_end

Sent: I 'll do that for you .
Sem:  lambda $0_{ev}.and(aux|will(v|do(pro|I,pro:dem|that,$0),$0),prep|for(pro|you,$0))
example_end

Sent: what would you like me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(and(v|like(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: that 's the way .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
example_end

Sent: you draw some flowers for me .
Sem:  lambda $0_{ev}.and(v|draw(pro|you,qn|some($1,n|flower-PL($1)),$0),prep|for(pro|me,$0))
example_end

Sent: because what ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: write now what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|write(pro|you,$0,$1),adv|now($1))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 'm I drawing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|draw-PROG(pro|I,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: will I draw another house ?
Sem:  lambda $0_{ev}.Q(aux|will(v|draw(pro|I,qn|another($1,n|house($1)),$0),$0),$0)
example_end

Sent: is it a bouncy couch ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,det|a($1,and(adj|bouncy($1),n|couch($1))),$0),$0)
example_end

Sent: what are we gonna get ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|get(pro|we,$0,$1)),$1)
example_end

Sent: that 's your shoe .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|shoe($1)),$0)
example_end

Sent: Sarah .
Sem:  n:prop|Sarah
example_end

Sent: she was taking a nap .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|take-PROG(pro|she,det|a($1,n|nap($1)),$0),$0)
example_end

Sent: you managed very well .
Sem:  lambda $0_{ev}.and(v|manage-PAST(pro|you,$0),adv|well($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: now .
Sem:  lambda $0_{ev}.adv|now($0)
example_end

Sent: a bus ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|bus($1)),$0)
example_end

Sent: that 's a house .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|house($1)),$0)
example_end

Sent: that 's not a bus .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|bus($1)),$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: then what 'll we have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|have(pro|we,$0,$1),$1),adv:tem|then($1))
example_end

Sent: it will be .
Sem:  pro|it
example_end

Sent: it looks like a sailingboat too ?
Sem:  lambda $0_{ev}.Q(and(v|look-3S(pro|it,$0),prep|like(det|a($1,n|+n|sailing+n|boat($1)),$0)),$0)
example_end

Sent: both funnels .
Sem:  qn|both($0,n|funnel-PL($0))
example_end

Sent: she is .
Sem:  pro|she
example_end

Sent: something ?
Sem:  lambda $0_{ev}.Q(pro:indef|something,$0)
example_end

Sent: did we get it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|we,pro|it,$0),$0),$0)
example_end

Sent: the bus stop ?
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|bus($1),n|stop($1))),$0)
example_end

Sent: she 's not coming .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|come-PROG(pro|she,$0),$0),$0)
example_end

Sent: she 's working probably .
Sem:  lambda $0_{ev}.aux|be&3S(part|work-PROG(pro|she,$0),$0)
example_end

Sent: we 'll read it later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,pro|it,$0),$0),adv|later($0))
example_end

Sent: this way ?
Sem:  lambda $0_{ev}.Q(det|this($1,n|way($1)),$0)
example_end

Sent: this is the right way .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|the($1,and(adj|right($1),n|way($1))),$0)
example_end

Sent: it 's Baabaablacksheep .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Baa_baa_black_sheep,$0)
example_end

Sent: they 're going to market .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|they,$0),$0),prep|to(lambda $1_{e}.n|market($1),$0))
example_end

Sent: Exeter .
Sem:  n:prop|Exeter
example_end

Sent: have you got dirty feet ?
Sem:  lambda $0_{ev}.Q(aux|have(part|get&PERF(pro|you,lambda $1_{e}.and(adj|dirty($1),n|foot&PL($1)),$0),$0),$0)
example_end

Sent: or do you have clean feet .
Sem:  lambda $0_{ev}.aux|do(v|have(pro|you,lambda $1_{e}.and(adj|clean($1),n|foot&PL($1)),$0),$0)
example_end

Sent: Eve  Eve .
Sem:  n:prop|Eve
example_end

Sent: what does Eve want for lunch ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&3S(v|want(n:prop|Eve,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
example_end

Sent: what what  what ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: you washed them ?
Sem:  lambda $0_{ev}.Q(v|wash-PAST(pro|you,pro|them,$0),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'll get it for her .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|her,$0))
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: we 'll come right back .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|back($0))
example_end

Sent: Becky doesn 't say it right .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|say(n:prop|Becky,pro|it,$0),$0),adv|right($0)),$0)
example_end

Sent: stick your head in gravy .
Sem:  lambda $0_{ev}.and(v|stick(pro|you,pro:poss:det|your($1,n|head($1)),$0),prep|in(lambda $2_{e}.n|gravy($2),$0))
example_end

Sent: moment .
Sem:  lambda $0_{e}.n|moment($0)
example_end

Sent: moment .
Sem:  lambda $0_{e}.n|moment($0)
example_end

Sent: mayonnaise .
Sem:  lambda $0_{e}.n|mayonnaise($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: mayonnaise .
Sem:  lambda $0_{e}.n|mayonnaise($0)
example_end

Sent: it 's good .
Sem:  adj|good(pro|it)
example_end

Sent: what 's she doing in the tree ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|she,$0,$1),$1),prep|in(det|the($2,n|tree($2)),$1))
example_end

Sent: mayonnaise .
Sem:  lambda $0_{e}.n|mayonnaise($0)
example_end

Sent: this is the end .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|end($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you sharing it with Sarah .
Sem:  lambda $0_{ev}.and(part|share-PROG(pro|you,pro|it,$0),prep|with(n:prop|Sarah,$0))
example_end

Sent: bread .
Sem:  lambda $0_{e}.n|bread($0)
example_end

Sent: bread .
Sem:  lambda $0_{e}.n|bread($0)
example_end

Sent: put it right down on your cracker .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|cracker($1)),$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: that just came outof the refrigerator .
Sem:  lambda $0_{ev}.and(v|come&PAST(pro:dem|that,$0),prep|out_of(det|the($1,n|refrigerator($1)),$0))
example_end

Sent: this is it .
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: put it in your dish .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(pro:poss:det|your($1,n|dish($1)),$0))
example_end

Sent: you can put it in .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|in($0))
example_end

Sent: lick it off with your tongue .
Sem:  lambda $0_{ev}.and(v|lick(pro|you,pro|it,$0),prep|with(pro:poss:det|your($1,n|tongue($1)),$0))
example_end

Sent: taste it .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro|it,$0)
example_end

Sent: clean it off ?
Sem:  lambda $0_{ev}.Q(and(v|clean(pro|you,pro|it,$0),adv|off($0)),$0)
example_end

Sent: that 'll be wonderful .
Sem:  adj|wonderful(pro:dem|that)
example_end

Sent: you do that .
Sem:  lambda $0_{ev}.v|do(pro|you,pro:dem|that,$0)
example_end

Sent: do you want some soup ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,qn|some($1,n|soup($1)),$0),$0),$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: taste it .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro|it,$0)
example_end

Sent: put in your mouth and lick it off .
Sem:  pro|it
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: are you finished ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
example_end

Sent: then finish quickly .
Sem:  lambda $0_{ev}.and(v|finish(pro|you,$0),adv:tem|then($0))
example_end

Sent: hurry up .
Sem:  lambda $0_{ev}.and(v|hurry(pro|you,$0),adv:loc|up($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: that 's my cookie press .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,and(n|cookie($1),n|press($1))),$0)
example_end

Sent: make cookies with it .
Sem:  lambda $0_{ev}.and(v|make(pro|you,lambda $1_{e}.n|cookie-PL($1),$0),prep|with(pro|it,$0))
example_end

Sent: but he didn 't hear you .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|hear(pro|he,pro|you,$0),$0),$0)
example_end

Sent: now you go and ask Fraser .
Sem:  n:prop|Fraser
example_end

Sent: do you want your lunch ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:poss:det|your($1,n|lunch($1)),$0),$0),$0)
example_end

Sent: you climb in .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
example_end

Sent: you want a spoon .
Sem:  lambda $0_{ev}.v|want(pro|you,det|a($1,n|spoon($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's his name .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|name($1)),$0)
example_end

Sent: Papa have one .
Sem:  lambda $0_{ev}.v|have(n:prop|Papa,pro:indef|one,$0)
example_end

Sent: you like them ?
Sem:  lambda $0_{ev}.Q(v|like(pro|you,pro|them,$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: tomatoes .
Sem:  lambda $0_{e}.n|tomato-PL($0)
example_end

Sent: you can play with Becky after your nap .
Sem:  lambda $0_{ev}.and(aux|can(v|play(pro|you,$0),$0),prep|after(pro:poss:det|your($1,n|nap($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's just standing right there .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|stand-PROG(pro|it,$0),$0),adv:loc|there($0))
example_end

Sent: so I can cut it .
Sem:  lambda $0_{ev}.aux|can(v|cut&ZERO(pro|I,pro|it,$0),$0)
example_end

Sent: the tomato ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|tomato($1)),$0)
example_end

Sent: that 's not long .
Sem:  lambda $0_{ev}.not(adj|long(pro:dem|that),$0)
example_end

Sent: I was just bent over .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|bend&PERF(pro|I,$0),$0),adv:loc|over($0))
example_end

Sent: where is the peanutbutter ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|+n|peanut+n|butter($1)),$0)
example_end

Sent: it 's not allgone .
Sem:  lambda $0_{ev}.not(adj|all_gone(pro|it),$0)
example_end

Sent: I found it .
Sem:  lambda $0_{ev}.v|find&PAST(pro|I,pro|it,$0)
example_end

Sent: I 'm giving you some noodles .
Sem:  lambda $0_{ev}.aux|be&1S(part|give-PROG(pro|I,pro|you,qn|some($1,n|noodle-PL($1)),$0),$0)
example_end

Sent: then you can eat them .
Sem:  lambda $0_{ev}.and(aux|can(v|eat(pro|you,pro|them,$0),$0),adv:tem|then($0))
example_end

Sent: it 'll just take a minute .
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|it,det|a($1,n|minute($1)),$0),$0),adv:int|just($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: are they ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: taste them .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro|them,$0)
example_end

Sent: what are they ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|they,$1)
example_end

Sent: they 're warm .
Sem:  adj|warm(pro|they)
example_end

Sent: Fraser is having coffee .
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Fraser,lambda $1_{e}.n|coffee($1),$0),$0)
example_end

Sent: not me .
Sem:  lambda $0_{ev}.not(pro|me,$0)
example_end

Sent: not me .
Sem:  lambda $0_{ev}.not(pro|me,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: then I 'll have lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|I,lambda $1_{e}.n|lunch($1),$0),$0),adv:tem|then($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: and what do you put on it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|put&ZERO(pro|you,$0,$1),$1),prep|on(pro|it,$1))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's a mug .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|mug($1)),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's a clown .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|clown($1)),$0)
example_end

Sent: is it a clown ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,det|a($1,n|clown($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it certainly is .
Sem:  pro|it
example_end

Sent: he did come .
Sem:  lambda $0_{ev}.aux|do&PAST(v|come(pro|he,$0),$0)
example_end

Sent: he works there .
Sem:  lambda $0_{ev}.and(v|work-3S(pro|he,$0),adv:loc|there($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: fixed the beans ?
Sem:  lambda $0_{ev}.Q(v|fix-PAST(pro|you,det|the($1,n|bean-PL($1)),$0),$0)
example_end

Sent: I ate my own soup .
Sem:  lambda $0_{ev}.v|eat&PAST(pro|I,pro:poss:det|my($1,and(adj|own($1),n|soup($1))),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: tell him again .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|him,$0),adv|again($0))
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: went to the garage .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|you,$0),prep|to(det|the($1,n|garage($1)),$0))
example_end

Sent: you went to the garage again .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|you,$0),adv|again($0))
example_end

Sent: and what did you see in the subway ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|see(pro|you,$0,$1),$1),prep|in(det|the($2,n|subway($2)),$1))
example_end

Sent: people .
Sem:  lambda $0_{e}.n|person&PL($0)
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what 's it called ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(pro|it,$0,$1),$1)
example_end

Sent: a tunnel ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|tunnel($1)),$0)
example_end

Sent: subways .
Sem:  lambda $0_{e}.n|subway-PL($0)
example_end

Sent: we do .
Sem:  lambda $0_{ev}.v|do(pro|we,$0)
example_end

Sent: you had a big lunch .
Sem:  lambda $0_{ev}.v|have&PAST(pro|you,det|a($1,and(adj|big($1),n|lunch($1))),$0)
example_end

Sent: you want your tapioca ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0),$0)
example_end

Sent: I 'm almost finished too .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: what am I almost finished ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0,$1),$1),adv|almost($1))
example_end

Sent: what am I drinking ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|drink-PROG(pro|I,$0,$1),$1)
example_end

Sent: I like it .
Sem:  lambda $0_{ev}.v|like(pro|I,pro|it,$0)
example_end

Sent: I see them ?
Sem:  lambda $0_{ev}.Q(v|see(pro|I,pro|them,$0),$0)
example_end

Sent: he 's just looking around .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|look-PROG(pro|he,$0),$0),adv:loc|around($0))
example_end

Sent: I 'll have a tomato sandwich .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|I,det|a($1,and(n|tomato($1),n|sandwich($1))),$0),$0)
example_end

Sent: I was ? peeping out at Sarah .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|peep-PROG(pro|I,$0),$0),prep|at(n:prop|Sarah,$0))
example_end

Sent: I was ? peeking out at Sarah .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|peek-PROG(pro|I,$0),$0),prep|at(n:prop|Sarah,$0))
example_end

Sent: I make funny noises .
Sem:  lambda $0_{ev}.v|make(pro|I,lambda $1_{e}.and(adj|funny($1),n|noise-PL($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: it hurt .
Sem:  lambda $0_{ev}.v|hurt&ZERO(pro|it,$0)
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: you get pencil .
Sem:  lambda $0_{ev}.v|get(pro|you,lambda $1_{e}.n|pencil($1),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's growing ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|grow-PROG(pro|it,$0),$0),$0)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's swimming ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|swim-PROG(pro|it,$0),$0),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: it goes in there .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),adv:loc|in($0))
example_end

Sent: what are you gonna do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: get what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|get(pro|you,$0,$1)
example_end

Sent: whose is this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and what am I pulling ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|pull-PROG(pro|I,$0,$1),$1)
example_end

Sent: what am I pulling ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|pull-PROG(pro|I,$0,$1),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are you pulling ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|pull-PROG(pro|you,$0,$1),$1)
example_end

Sent: she said Papa has short hair  .
Sem:  lambda $0_{ev}.v|say&PAST(pro|she,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: Papa has short hair .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Papa,lambda $1_{e}.and(adj|short($1),n|hair($1)),$0)
example_end

Sent: swimming ?
Sem:  lambda $0_{ev}.Q(part|swim-PROG(pro|you,$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 's this part ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|this($2,n|part($2)),$1)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: I 'll write you lady .
Sem:  lambda $0_{ev}.aux|will(v|write(pro|I,pro|you,lambda $1_{e}.n|lady($1),$0),$0)
example_end

Sent: write her some ears ?  RES
Sem:  lambda $0_{ev}.v|write(pro|you,pro|her,qn|some($1,n|ear-PL($1)),$0)
example_end

Sent:  oh what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's her chin .
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|her($1,n|chin($1)),$0)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: it 's a lady .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|lady($1)),$0)
example_end

Sent: I 'm drawing something else for you now .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|draw-PROG(pro|I,pro:indef|something,$0),$0),adv|now($0))
example_end

Sent: come and get it .
Sem:  pro|it
example_end

Sent: can you look through there ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|look(pro|you,$0),$0),adv:loc|through($0)),$0)
example_end

Sent: what 'd you do to it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|to(pro|it,$1))
example_end

Sent: what 's your name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|your($2,n|name($2)),$1)
example_end

Sent: what 's your name ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:poss:det|your($2,n|name($2)),$1)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: who 's ruko ?
Sem:  lambda $0_{e}.pro:wh|who
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: this big thing .
Sem:  det|this($0,and(adj|big($0),n|thing($0)))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: and what have you put on the table ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|have(v|put&ZERO(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
example_end

Sent: she goes .
Sem:  lambda $0_{ev}.v|go-3S(pro|she,$0)
example_end

Sent: the cow ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|cow($1)),$0)
example_end

Sent: watch your head .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: get the cow .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|cow($1)),$0)
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: because it works there .
Sem:  lambda $0_{ev}.and(v|work-3S(pro|it,$0),adv:loc|there($0))
example_end

Sent: it won 't work there .
Sem:  lambda $0_{ev}.not(and(aux|will(v|work(pro|it,$0),$0),adv:loc|there($0)),$0)
example_end

Sent: it slips right off .
Sem:  lambda $0_{ev}.and(v|slip-3S(pro|it,$0),adv|off($0))
example_end

Sent: it works on the big table just fine .
Sem:  lambda $0_{ev}.and(v|work-3S(pro|it,$0),adv|fine($0))
example_end

Sent: don 't break the cow .
Sem:  lambda $0_{ev}.not(aux|do(v|break(pro|you,det|the($1,n|cow($1)),$0),$0),$0)
example_end

Sent: after all it doesn 't belong to you .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|belong(pro|it,$0),$0),prep|to(pro|you,$0)),$0)
example_end

Sent: you 'd better not break it .
Sem:  lambda $0_{ev}.not(and(aux|have&PAST(v|break(pro|you,pro|it,$0),$0),adv|better($0)),$0)
example_end

Sent: don 't break it .
Sem:  lambda $0_{ev}.not(aux|do(v|break(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you will not throw it .
Sem:  lambda $0_{ev}.not(aux|will(v|throw(pro|you,pro|it,$0),$0),$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: she 's not having pears .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|have-PROG(pro|she,lambda $1_{e}.n|pear-PL($1),$0),$0),$0)
example_end

Sent: not celery .
Sem:  lambda $0_{e}.not(n|celery($0),$0)
example_end

Sent: pineapple dessert .
Sem:  lambda $0_{e}.and(n|pineapple($0),n|dessert($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: no cereal .
Sem:  qn|no($0,n|cereal($0))
example_end

Sent: not while she 's eating .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|eat-PROG(pro|she,$0),$0),$0)
example_end

Sent: you have Fizzie .
Sem:  lambda $0_{ev}.v|have(pro|you,n:prop|Fizzie,$0)
example_end

Sent: what is what ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: iced tea .
Sem:  lambda $0_{ev}.part|ice-PERF(pro|you,lambda $1_{e}.n|tea($1),$0)
example_end

Sent: rabbit .
Sem:  lambda $0_{e}.n|rabbit($0)
example_end

Sent: he went to Colorado .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|to(n:prop|Colorado,$0))
example_end

Sent: he 's working there .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|work-PROG(pro|he,$0),$0),adv:loc|there($0))
example_end

Sent: he 's coming back to Cambridge .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|come-PROG(pro|he,$0),$0),prep|to(n:prop|Cambridge,$0))
example_end

Sent: he 's coming back to Cambridge .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|come-PROG(pro|he,$0),$0),prep|to(n:prop|Cambridge,$0))
example_end

Sent: NewBrunswick .
Sem:  n:prop|New_Brunswick
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who went to Colorado ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|go&PAST($0,$1),prep|to(n:prop|Colorado,$1))
example_end

Sent: Fraser 's sitting right there on the couch .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Fraser,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: Fraser 's going to England .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),prep|to(n:prop|England,$0))
example_end

Sent: Benny ?
Sem:  lambda $0_{ev}.Q(n:prop|Benny,$0)
example_end

Sent: bandaid .
Sem:  lambda $0_{e}.n|bandaid($0)
example_end

Sent:  no not England .
Sem:  lambda $0_{ev}.not(n:prop|England,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: they 're going to the beach .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|they,$0),$0),prep|to(det|the($1,n|beach($1)),$0))
example_end

Sent: an eggnog ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|eggnog($1)),$0)
example_end

Sent: some medicine ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|medicine($1)),$0)
example_end

Sent: was Cathy sick ?
Sem:  lambda $0_{ev}.Q(adj|sick(n:prop|Cathy),$0)
example_end

Sent: did she take it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|take(pro|she,pro|it,$0),$0),$0)
example_end

Sent: what did you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: you were moving the rug ?
Sem:  lambda $0_{ev}.Q(aux|be&PAST(part|move-PROG(pro|you,det|the($1,n|rug($1)),$0),$0),$0)
example_end

Sent: Cathy 's big .
Sem:  adj|big(n:prop|Cathy)
example_end

Sent: Cathy 's big .
Sem:  adj|big(n:prop|Cathy)
example_end

Sent: she is heavy .
Sem:  adj|heavy(pro|she)
example_end

Sent: Sarah doesn 't have a eggnog .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(n:prop|Sarah,det|a($1,n|eggnog($1)),$0),$0),$0)
example_end

Sent: Sarah doesn 't have a eggnog .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(n:prop|Sarah,det|a($1,n|eggnog($1)),$0),$0),$0)
example_end

Sent: what were doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: was that a song ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|song($1)),$0),$0)
example_end

Sent: it 's nice .
Sem:  adj|nice(pro|it)
example_end

Sent: today .
Sem:  lambda $0_{ev}.adv:tem|today($0)
example_end

Sent: they are going to the beach .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|they,$0),$0),prep|to(det|the($1,n|beach($1)),$0))
example_end

Sent: they 're going to the beach .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|they,$0),$0),prep|to(det|the($1,n|beach($1)),$0))
example_end

Sent: they 're not coming right now .
Sem:  lambda $0_{ev}.not(and(aux|be&PRES(part|come-PROG(pro|they,$0),$0),adv|now($0)),$0)
example_end

Sent: Papa 's eating celery right now .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(n:prop|Papa,lambda $1_{e}.n|celery($1),$0),$0),adv|now($0))
example_end

Sent: what are you doing to your celery ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(pro:poss:det|your($2,n|celery($2)),$1))
example_end

Sent: a peanutbutter sandwich ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|+n|peanut+n|butter($1),n|sandwich($1))),$0)
example_end

Sent: what are you doing with your celery ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(pro:poss:det|your($2,n|celery($2)),$1))
example_end

Sent: it is ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: don 't you shoot me .
Sem:  lambda $0_{ev}.not(aux|do(v|shoot(pro|you,pro|me,$0),$0),$0)
example_end

Sent: don 't shoot Fraser .
Sem:  lambda $0_{ev}.not(aux|do(v|shoot(pro|you,n:prop|Fraser,$0),$0),$0)
example_end

Sent: is he shooting you ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|shoot-PROG(pro|he,pro|you,$0),$0),$0)
example_end

Sent: what 'd you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: bite your finger ?
Sem:  lambda $0_{ev}.Q(v|bite(pro|you,pro:poss:det|your($1,n|finger($1)),$0),$0)
example_end

Sent: it was your thumb ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|your($1,n|thumb($1)),$0),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: thumb  thumb ?
Sem:  lambda $0_{e}.n|thumb($0)
example_end

Sent: bang yourself .
Sem:  pro:refl|yourself
example_end

Sent: do you see it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: do you see it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: sit down .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you don 't want any dessert ?
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|any($1,n|dessert($1)),$0),$0),$0),$0)
example_end

Sent: dessert .
Sem:  lambda $0_{e}.n|dessert($0)
example_end

Sent: dessert .
Sem:  lambda $0_{e}.n|dessert($0)
example_end

Sent: dessert .
Sem:  lambda $0_{e}.n|dessert($0)
example_end

Sent: dessert .
Sem:  lambda $0_{e}.n|dessert($0)
example_end

Sent: this morning .
Sem:  det|this($0,n|morning($0))
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: you 'll like that .
Sem:  lambda $0_{ev}.aux|will(v|like(pro|you,pro:dem|that,$0),$0)
example_end

Sent: it looks like lemon .
Sem:  lambda $0_{ev}.and(v|look-3S(pro|it,$0),prep|like(lambda $1_{e}.n|lemon($1),$0))
example_end

Sent: run .
Sem:  lambda $0_{ev}.v|run(pro|you,$0)
example_end

Sent: David .
Sem:  n:prop|David
example_end

Sent: David .
Sem:  n:prop|David
example_end

Sent: where is he ?
Sem:  lambda $0_{e}.eqLoc(pro|he,$0)
example_end

Sent: what 's the wise idea .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,and(adj|wise($2),n|idea($2))),$1)
example_end

Sent: you stay up here .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|up($0))
example_end

Sent: you stay right here .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|here($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: accident .
Sem:  lambda $0_{e}.n|accident($0)
example_end

Sent: open your mouth .
Sem:  lambda $0_{ev}.v|open(pro|you,pro:poss:det|your($1,n|mouth($1)),$0)
example_end

Sent: accident .
Sem:  lambda $0_{e}.n|accident($0)
example_end

Sent: open your mouth .
Sem:  lambda $0_{ev}.v|open(pro|you,pro:poss:det|your($1,n|mouth($1)),$0)
example_end

Sent: your candy .
Sem:  pro:poss:det|your($0,n|candy($0))
example_end

Sent: put it in the wastebasket .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
example_end

Sent: another picture .
Sem:  qn|another($0,n|picture($0))
example_end

Sent: we 'll look at them later .
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),adv|later($0))
example_end

Sent: sit up straight .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv|straight($0))
example_end

Sent: that is Fraser .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
example_end

Sent: you can paint .
Sem:  lambda $0_{ev}.aux|can(v|paint(pro|you,$0),$0)
example_end

Sent: did I get one ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro:indef|one,$0),$0),$0)
example_end

Sent: what did you paint ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|paint(pro|you,$0,$1),$1)
example_end

Sent: next time .
Sem:  lambda $0_{e}.and(adj|next($0),n|time($0))
example_end

Sent: put that away .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),adv|away($0))
example_end

Sent: you are not playing with that .
Sem:  lambda $0_{ev}.not(and(aux|be&PRES(part|play-PROG(pro|you,$0),$0),prep|with(pro:dem|that,$0)),$0)
example_end

Sent: put it away .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
example_end

Sent: do it .
Sem:  lambda $0_{ev}.v|do(pro|you,pro|it,$0)
example_end

Sent: now put it back on the table .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: it belongs in here  study .
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),adv:loc|in($0))
example_end

Sent: Mom was wrong .
Sem:  adj|wrong(n:prop|Mom)
example_end

Sent: blouse .
Sem:  lambda $0_{e}.n|blouse($0)
example_end

Sent: goose .
Sem:  lambda $0_{e}.n|goose($0)
example_end

Sent: I see that blouse .
Sem:  lambda $0_{ev}.v|see(pro|I,det|that($1,n|blouse($1)),$0)
example_end

Sent: it doesn 't have snap .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|it,lambda $1_{e}.n|snap($1),$0),$0),$0)
example_end

Sent: it has buttons .
Sem:  lambda $0_{ev}.v|have&3S(pro|it,lambda $1_{e}.n|button-PL($1),$0)
example_end

Sent: it has buttons in the back .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,lambda $1_{e}.n|button-PL($1),$0),prep|in(det|the($2,n|back($2)),$0))
example_end

Sent: put it back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: put it back .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: it 's dirty .
Sem:  adj|dirty(pro|it)
example_end

Sent: fish .
Sem:  lambda $0_{e}.n|fish($0)
example_end

Sent: fire ?
Sem:  lambda $0_{e}.n|fire($0)
example_end

Sent: fish .
Sem:  lambda $0_{e}.n|fish($0)
example_end

Sent: what are you doing to Sarah ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(n:prop|Sarah,$1))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I have an idea .
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|idea($1)),$0)
example_end

Sent: so I can see it .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|it,$0),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: that is nice .
Sem:  adj|nice(pro:dem|that)
example_end

Sent: we can move it upstairs later .
Sem:  lambda $0_{ev}.and(aux|can(v|move(pro|we,pro|it,$0),$0),adv|later($0))
example_end

Sent: his left hand .
Sem:  pro:poss:det|his($0,and(adj|left($0),n|hand($0)))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's a fork .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|fork($1)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is this funny thing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|this($2,and(adj|funny($2),n|thing($2))),$1)
example_end

Sent: what is this funny thing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|this($2,and(adj|funny($2),n|thing($2))),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's a penny .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|penny($1)),$0)
example_end

Sent: would you like a penny ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|penny($1)),$0),$0),$0)
example_end

Sent: I have lots of pockets .
Sem:  lambda $0_{ev}.v|have(pro|I,qn|lots($1,n|pocket-PL($1)),$0)
example_end

Sent: you have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: what would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: that 's your eggnog .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|eggnog($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: you come right over here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: toes .
Sem:  lambda $0_{e}.n|toe-PL($0)
example_end

Sent: toes .
Sem:  lambda $0_{e}.n|toe-PL($0)
example_end

Sent: that 's good .
Sem:  adj|good(pro:dem|that)
example_end

Sent: put the pencil down .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|the($1,n|pencil($1)),$0),adv:loc|down($0))
example_end

Sent: while you take a nap .
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|nap($1)),$0)
example_end

Sent: don 't eat it .
Sem:  lambda $0_{ev}.not(aux|do(v|eat(pro|you,pro|it,$0),$0),$0)
example_end

Sent: we better take it along .
Sem:  lambda $0_{ev}.and(v|take(pro|we,pro|it,$0),adv|along($0))
example_end

Sent: give Papa a kiss .
Sem:  lambda $0_{ev}.v|give(pro|you,n:prop|Papa,det|a($1,n|kiss($1)),$0)
example_end

Sent: downstairs ?
Sem:  lambda $0_{ev}.Q(adv:loc|downstairs($0),$0)
example_end

Sent: it 's not straight .
Sem:  lambda $0_{ev}.not(adj|straight(pro|it),$0)
example_end

Sent: she 's sleeping up in her bed .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sleep-PROG(pro|she,$0),$0),prep|in(pro:poss:det|her($1,n|bed($1)),$0))
example_end

Sent: I 'll put my pencil there .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro:poss:det|my($1,n|pencil($1)),$0),$0),adv:loc|there($0))
example_end

Sent: I 'll get mine out .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro:poss|mine,$0),$0),adv:loc|out($0))
example_end

Sent: he is ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: he is ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: what was it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: you do that .
Sem:  lambda $0_{ev}.v|do(pro|you,pro:dem|that,$0)
example_end

Sent: are we ?
Sem:  lambda $0_{ev}.Q(pro|we,$0)
example_end

Sent: not quite .
Sem:  lambda $0_{ev}.not(adv:int|quite($0),$0)
example_end

Sent: not yet .
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
example_end

Sent: that 's my kleenex .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|kleenex($1)),$0)
example_end

Sent: that 's enough .
Sem:  adj|enough(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: and then what do you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),adv:tem|then($1))
example_end

Sent: you do what to your shoes ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|do(pro|you,$0,$1),prep|to(pro:poss:det|your($2,n|shoe-PL($2)),$1))
example_end

Sent: you better cry then .
Sem:  lambda $0_{ev}.and(v|cry(pro|you,$0),adv:tem|then($0))
example_end

Sent: that 's a silly song .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|silly($1),n|song($1))),$0)
example_end

Sent: see you jump ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,lambda $1_{ev}.v|jump(pro|you,$1),$0),$0)
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: big lady ?
Sem:  lambda $0_{e}.and(adj|big($0),n|lady($0))
example_end

Sent: is that a good lady ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,and(adj|good($1),n|lady($1))),$0),$0)
example_end

Sent: another big lady ?
Sem:  lambda $0_{ev}.Q(qn|another($1,and(adj|big($1),n|lady($1))),$0)
example_end

Sent: that 'd be great ?
Sem:  lambda $0_{ev}.Q(adj|great(pro:dem|that),$0)
example_end

Sent: that helps him to draw better .
Sem:  lambda $0_{ev}.and(v|help-3S(pro:dem|that,pro|him,$0),adv|better($0))
example_end

Sent: you try .
Sem:  lambda $0_{ev}.v|try(pro|you,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're writing holes ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|write-PROG(pro|you,lambda $1_{e}.n|hole-PL($1),$0),$0),$0)
example_end

Sent: I 'll fix lunch for you .
Sem:  lambda $0_{ev}.and(aux|will(v|fix(pro|I,lambda $1_{e}.n|lunch($1),$0),$0),prep|for(pro|you,$0))
example_end

Sent: Fraser probably won 't come on Wednesday .
Sem:  lambda $0_{ev}.not(and(aux|will(v|come(n:prop|Fraser,$0),$0),prep|on(n:prop|Wednesday,$0)),$0)
example_end

Sent: remember Gloria ?
Sem:  lambda $0_{ev}.Q(v|remember(pro|you,n:prop|Gloria,$0),$0)
example_end

Sent: Gloria .
Sem:  n:prop|Gloria
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: would you like that ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: they will walk
Sem:  lambda $0_{ev}.aux|will(v|walk(pro|they,$0),$0)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: everybody 's talking to somebody .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|talk-PROG(pro:indef|everybody,$0),$0),prep|to(pro:indef|somebody,$0))
example_end

Sent: are you sleepy ?
Sem:  lambda $0_{ev}.Q(adj|sleepy(pro|you),$0)
example_end

Sent: are you alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: that 's a big lady .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|big($1),n|lady($1))),$0)
example_end

Sent: is that right ?
Sem:  lambda $0_{ev}.Q(adj|right(pro:dem|that),$0)
example_end

Sent: I 'll make one up here .
Sem:  lambda $0_{ev}.and(aux|will(v|make(pro|I,pro:indef|one,$0),$0),adv:loc|up($0))
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: what do you do after supper ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|after(lambda $2_{e}.n|supper($2),$1))
example_end

Sent: Sarah 's awake .
Sem:  adj|awake(n:prop|Sarah)
example_end

Sent: where is our new house ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|our($1,and(adj|new($1),n|house($1))),$0)
example_end

Sent: NewBrunswick .
Sem:  n:prop|New_Brunswick
example_end

Sent: sortof .
Sem:  lambda $0_{ev}.adv:int|sort_of($0)
example_end

Sent: that 's Grandpa and Granny .
Sem:  lambda $0_{ev}.eq(pro:dem|that,and(n:prop|Grandpa,n:prop|Granny),$0)
example_end

Sent: you 're right .
Sem:  adj|right(pro|you)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: Peter ?
Sem:  lambda $0_{ev}.Q(n:prop|Peter,$0)
example_end

Sent: you sit here .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|here($0))
example_end

Sent: Eve wants an eggnog .
Sem:  lambda $0_{ev}.v|want-3S(n:prop|Eve,det|a($1,n|eggnog($1)),$0)
example_end

Sent: milk egg salt .
Sem:  lambda $0_{e}.and(n|milk($0),n|egg($0),n|salt($0))
example_end

Sent: you didn 't buy some salt .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|buy(pro|you,qn|some($1,n|salt($1)),$0),$0),$0)
example_end

Sent: we already had some salt .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|we,qn|some($1,n|salt($1)),$0),adv|already($0))
example_end

Sent: Schroeder .
Sem:  n:prop|Schroeder
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Papa 's a man too .
Sem:  lambda $0_{ev}.eq(n:prop|Papa,det|a($1,n|man($1)),$0)
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: he is .
Sem:  pro|he
example_end

Sent: I 'm not ?
Sem:  lambda $0_{ev}.Q(pro|I,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'm not a boy .
Sem:  lambda $0_{ev}.not(eq(pro|I,det|a($1,n|boy($1)),$0),$0)
example_end

Sent: I wasn 't .
Sem:  pro|I
example_end

Sent: you ?
Sem:  lambda $0_{ev}.Q(pro|you,$0)
example_end

Sent: see her ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|her,$0),$0)
example_end

Sent: see her ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|her,$0),$0)
example_end

Sent: Dinah ?
Sem:  lambda $0_{ev}.Q(n:prop|Dinah,$0)
example_end

Sent: what 're you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|you,$1)
example_end

Sent: who 's a boy ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,n|boy($2)),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: Sarah 's a girl .
Sem:  lambda $0_{ev}.eq(n:prop|Sarah,det|a($1,n|girl($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what was he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST&13S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: that 's your mug .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|mug($1)),$0)
example_end

Sent: she is hungry .
Sem:  adj|hungry(pro|she)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: you better play in the basement .
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),prep|in(det|the($1,n|basement($1)),$0))
example_end

Sent: eat them with your spoon .
Sem:  lambda $0_{ev}.and(v|eat(pro|you,pro|them,$0),prep|with(pro:poss:det|your($1,n|spoon($1)),$0))
example_end

Sent: Fraser 's bigger ?
Sem:  lambda $0_{ev}.Q(adj|big-CP(n:prop|Fraser),$0)
example_end

Sent: what 's Fraser ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Fraser,$1)
example_end

Sent: Fraser 's Colin .
Sem:  lambda $0_{ev}.eq(n:prop|Fraser,n:prop|Colin,$0)
example_end

Sent: I know that .
Sem:  lambda $0_{ev}.v|know(pro|I,pro:dem|that,$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: you may have a coolpop .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,det|a($1,n|+adj|cool+n|pop($1)),$0),$0)
example_end

Sent: you are having a coolpop .
Sem:  lambda $0_{ev}.aux|be&PRES(part|have-PROG(pro|you,det|a($1,n|+adj|cool+n|pop($1)),$0),$0)
example_end

Sent: she 's trying .
Sem:  lambda $0_{ev}.aux|be&3S(part|try-PROG(pro|she,$0),$0)
example_end

Sent: is that the mailman ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|mailman($1)),$0),$0)
example_end

Sent: remember Julie ?
Sem:  lambda $0_{ev}.Q(v|remember(pro|you,n:prop|Julie,$0),$0)
example_end

Sent: she sent a box .
Sem:  lambda $0_{ev}.v|send&PAST(pro|she,det|a($1,n|box($1)),$0)
example_end

Sent: you 're going to eat ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|eat(pro|you,$0)),$0),$0)
example_end

Sent: you 're going to read .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|read&ZERO(pro|you,$0)),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: shall we read the card ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,det|the($1,n|card($1)),$0),$0),$0)
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: is this my pad ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pad($1)),$0),$0)
example_end

Sent: you wouldn 't like it ?
Sem:  lambda $0_{ev}.Q(not(aux|will&COND(v|like(pro|you,pro|it,$0),$0),$0),$0)
example_end

Sent: can you write a snowman ?
Sem:  lambda $0_{ev}.Q(aux|can(v|write(pro|you,det|a($1,n|snowman($1)),$0),$0),$0)
example_end

Sent: you 're sitting on it .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|sit-PROG(pro|you,$0),$0),prep|on(pro|it,$0))
example_end

Sent: what 's Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: snowman ?
Sem:  lambda $0_{e}.n|snowman($0)
example_end

Sent: is he ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: put her in the basement .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|her,$0),prep|in(det|the($1,n|basement($1)),$0))
example_end

Sent: Gloria is coming .
Sem:  lambda $0_{ev}.aux|be&3S(part|come-PROG(n:prop|Gloria,$0),$0)
example_end

Sent: eat what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|eat(pro|you,$0,$1)
example_end

Sent: are you the mommy ?
Sem:  lambda $0_{ev}.Q(eq(pro|you,det|the($1,n|mommy($1)),$0),$0)
example_end

Sent: what 're you cooking for supper ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|cook-PROG(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|supper($2),$1))
example_end

Sent: aren 't we having any meat ?
Sem:  lambda $0_{ev}.Q(not(aux|be&PRES(part|have-PROG(pro|we,qn|any($1,n|meat($1)),$0),$0),$0),$0)
example_end

Sent: is it a refrigerator ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,det|a($1,n|refrigerator($1)),$0),$0)
example_end

Sent: you like that .
Sem:  lambda $0_{ev}.v|like(pro|you,pro:dem|that,$0)
example_end

Sent: I like some meat .
Sem:  lambda $0_{ev}.v|like(pro|I,qn|some($1,n|meat($1)),$0)
example_end

Sent: what is the refrigerator ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|refrigerator($2)),$1)
example_end

Sent: is that your refrigerator ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|refrigerator($1)),$0),$0)
example_end

Sent: better get some icecubes .
Sem:  lambda $0_{ev}.and(v|get(pro|you,qn|some($1,n|+n|ice+n|cube-PL($1)),$0),adv|better($0))
example_end

Sent: it 's not ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: I 'm hungry too .
Sem:  adj|hungry(pro|I)
example_end

Sent: I want something to eat
Sem:  lambda $0_{ev}.and(v|want(pro|I,pro:indef|something,$0),v|eat(pro|I,$0))
example_end

Sent: I want something right now to eat .
Sem:  lambda $0_{ev}.and(v|want(pro|I,pro:indef|something,$0),adv|now($0))
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: I 'm going outside .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|outside($0))
example_end

Sent: is that supper done yet ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|do&PERF(det|that($1,n|supper($1)),$0),$0),adv|yet($0)),$0)
example_end

Sent: I 'm terribly sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: icecubes ?
Sem:  lambda $0_{e}.n|+n|ice+n|cube-PL($0)
example_end

Sent: I can 't wait .
Sem:  lambda $0_{ev}.not(aux|can(v|wait(pro|I,$0),$0),$0)
example_end

Sent: what would you have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|have(pro|you,$0,$1),$1)
example_end

Sent: guess .
Sem:  lambda $0_{ev}.v|guess(pro|you,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: a bubble .
Sem:  det|a($0,n|bubble($0))
example_end

Sent: that 's Gloria .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Gloria,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: we do have celery .
Sem:  lambda $0_{ev}.aux|do(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
example_end

Sent: we don 't have any carrots .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,qn|any($1,n|carrot-PL($1)),$0),$0),$0)
example_end

Sent: do you want celery ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,lambda $1_{e}.n|celery($1),$0),$0),$0)
example_end

Sent: we do have celery .
Sem:  lambda $0_{ev}.aux|do(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
example_end

Sent: maybe .
Sem:  lambda $0_{ev}.adv|maybe($0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm eating it .
Sem:  lambda $0_{ev}.aux|be&1S(part|eat-PROG(pro|I,pro|it,$0),$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: you want it ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,pro|it,$0),$0)
example_end

Sent: you want dessert .
Sem:  lambda $0_{ev}.v|want(pro|you,lambda $1_{e}.n|dessert($1),$0)
example_end

Sent: do you want this ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,pro:dem|this,$0),$0),$0)
example_end

Sent: I 'm sorely disappointed .
Sem:  lambda $0_{ev}.aux|be&1S(part|disappoint-PERF(pro|I,$0),$0)
example_end

Sent: I 've been working at it awhile .
Sem:  lambda $0_{ev}.and(aux|be&PERF(aux|have(part|work-PROG(pro|I,$0),$0),$0),adv|awhile($0))
example_end

Sent: I should be big .
Sem:  adj|big(pro|I)
example_end

Sent: snap .
Sem:  lambda $0_{e}.n|snap($0)
example_end

Sent: it certainly is .
Sem:  pro|it
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: where 's David ?
Sem:  lambda $0_{e}.eqLoc(n:prop|David,$0)
example_end

Sent: where 's Colin ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Colin,$0)
example_end

Sent: where 's Fraser ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
example_end

Sent: do you have an ashtray ?
Sem:  lambda $0_{ev}.Q(aux|do(v|have(pro|you,det|a($1,n|ashtray($1)),$0),$0),$0)
example_end

Sent: you were playing so long ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PAST(part|play-PROG(pro|you,$0),$0),adv|long($0)),$0)
example_end

Sent: climb over .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|over($0))
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: she 's doing fine .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|do-PROG(pro|she,$0),$0),adv|fine($0))
example_end

Sent: big help .
Sem:  lambda $0_{e}.and(adj|big($0),n|help($0))
example_end

Sent: big help .
Sem:  lambda $0_{e}.and(adj|big($0),n|help($0))
example_end

Sent: sit right here .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|here($0))
example_end

Sent: will Fraser do it ?
Sem:  lambda $0_{ev}.Q(aux|will(v|do(n:prop|Fraser,pro|it,$0),$0),$0)
example_end

Sent: what would you like ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: you just have your foot up there .
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|your($1,n|foot($1)),$0),adv:loc|up($0))
example_end

Sent: Fraser will do it .
Sem:  lambda $0_{ev}.aux|will(v|do(n:prop|Fraser,pro|it,$0),$0)
example_end

Sent: this is a complicated knot .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|a($1,n|knot($1)),$0)
example_end

Sent: it 's not finished .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|finish-PERF(pro|it,$0),$0),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: Jackie came yesterday .
Sem:  lambda $0_{ev}.and(v|come&PAST(n:prop|Jackie,$0),adv:tem|yesterday($0))
example_end

Sent: you 're going barefoot .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv|barefoot($0))
example_end

Sent: I can get you .
Sem:  lambda $0_{ev}.aux|can(v|get(pro|I,pro|you,$0),$0)
example_end

Sent: what 's the wise idea .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,and(adj|wise($2),n|idea($2))),$1)
example_end

Sent: the wise idea .
Sem:  det|the($0,and(adj|wise($0),n|idea($0)))
example_end

Sent: you like the grape .
Sem:  lambda $0_{ev}.v|like(pro|you,det|the($1,n|grape($1)),$0)
example_end

Sent: what else ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: icecubes .
Sem:  lambda $0_{e}.n|+n|ice+n|cube-PL($0)
example_end

Sent: do you like icecubes ?
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,lambda $1_{e}.n|+n|ice+n|cube-PL($1),$0),$0),$0)
example_end

Sent: and what 's she doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|she,$0,$1),$1),adv:loc|there($1))
example_end

Sent: a blue truck .
Sem:  det|a($0,and(adj|blue($0),n|truck($0)))
example_end

Sent: that 's my pencil .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: you stay down here .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|down($0))
example_end

Sent: Sarah is sleeping .
Sem:  lambda $0_{ev}.aux|be&3S(part|sleep-PROG(n:prop|Sarah,$0),$0)
example_end

Sent: she 's not crying .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|cry-PROG(pro|she,$0),$0),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Eve dear .
Sem:  n:prop|Eve
example_end

Sent: can you peek with Sarah ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|peek(pro|you,$0),$0),prep|with(n:prop|Sarah,$0)),$0)
example_end

Sent: it certainly is .
Sem:  pro|it
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: what is Papa doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Papa,$0,$1),$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it looks like a lady ?
Sem:  lambda $0_{ev}.Q(and(v|look-3S(pro|it,$0),prep|like(det|a($1,n|lady($1)),$0)),$0)
example_end

Sent: is that Sarah ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Sarah,$0),$0)
example_end

Sent: that 's a man ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
example_end

Sent: that 's another man .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|man($1)),$0)
example_end

Sent: what 's Sarah doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Sarah,$0,$1),$1)
example_end

Sent: where 's your crayon ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|crayon($1)),$0)
example_end

Sent: what 's the baby doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
example_end

Sent: what 's the baby doing .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
example_end

Sent: that 's a red baby .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|red($1),n|baby($1))),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: we 'll make a fat baby .
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|fat($1),n|baby($1))),$0),$0)
example_end

Sent: does this baby have hair ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|have(det|this($1,n|baby($1)),lambda $2_{e}.n|hair($2),$0),$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: isn 't that blue ?
Sem:  lambda $0_{ev}.Q(not(adj|blue(pro:dem|that),$0),$0)
example_end

Sent: you put yours on top .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss|yours,$0),prep|on(lambda $1_{e}.n|top($1),$0))
example_end

Sent: what 's Sarah doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Sarah,$0,$1),$1)
example_end

Sent: what does she have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|have(pro|she,$0,$1),$1)
example_end

Sent: what 'd you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: magic .
Sem:  lambda $0_{e}.n|magic($0)
example_end

Sent: magic .
Sem:  lambda $0_{e}.n|magic($0)
example_end

Sent: magic .
Sem:  lambda $0_{e}.n|magic($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there it goes .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),adv:loc|there($0))
example_end

Sent: it 's going away .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|away($0))
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: isn 't that awful .
Sem:  lambda $0_{ev}.not(adj|awful(pro:dem|that),$0)
example_end

Sent: you made a baby
Sem:  lambda $0_{ev}.v|make&PAST(pro|you,det|a($1,n|baby($1)),$0)
example_end

Sent: you drew a little baby .
Sem:  lambda $0_{ev}.v|draw&PAST(pro|you,det|a($1,and(adj|little($1),n|baby($1))),$0)
example_end

Sent: that 's your card ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|card($1)),$0),$0)
example_end

Sent: write Eve ?
Sem:  lambda $0_{ev}.Q(v|write(pro|you,n:prop|Eve,$0),$0)
example_end

Sent: el vl el Eve .
Sem:  n:prop|Eve
example_end

Sent: I wouldn 't put that .
Sem:  lambda $0_{ev}.not(aux|will&COND(v|put&ZERO(pro|I,pro:dem|that,$0),$0),$0)
example_end

Sent: do not do it again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|do(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: that 's an icecube .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|+n|ice+n|cube($1)),$0)
example_end

Sent: I put it on your stool .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|I,pro|it,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
example_end

Sent: do you see it ?
Sem:  lambda $0_{ev}.Q(aux|do(v|see(pro|you,pro|it,$0),$0),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: a big bottle ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|big($1),n|bottle($1))),$0)
example_end

Sent: and what 'll we put in the bottle ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|put&ZERO(pro|we,$0,$1),$1),prep|in(det|the($2,n|bottle($2)),$1))
example_end

Sent: that 's good .
Sem:  adj|good(pro:dem|that)
example_end

Sent: what shall we put in that bottle ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|put&ZERO(pro|we,$0,$1),$1),prep|in(det|that($2,n|bottle($2)),$1))
example_end

Sent: Fizzie .
Sem:  n:prop|Fizzie
example_end

Sent: what 's a matter ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|a($2,n|matter($2)),$1)
example_end

Sent: what 're you putting in ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|put-PROG(pro|you,$0,$1),$1),adv:loc|in($1))
example_end

Sent: put another milk .
Sem:  lambda $0_{ev}.v|put&ZERO(pro|you,qn|another($1,n|milk($1)),$0)
example_end

Sent: where 's your toy ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|toy($1)),$0)
example_end

Sent: Sarah can 't find her rattle .
Sem:  lambda $0_{ev}.not(aux|can(v|find(n:prop|Sarah,pro:poss:det|her($1,n|rattle($1)),$0),$0),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: don 't twist it .
Sem:  lambda $0_{ev}.not(aux|do(v|twist(pro|you,pro|it,$0),$0),$0)
example_end

Sent: we go .
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you must thank her .
Sem:  lambda $0_{ev}.aux|must(v|thank(pro|you,pro|her,$0),$0)
example_end

Sent: I don 't like that noise .
Sem:  lambda $0_{ev}.not(aux|do(v|like(pro|I,det|that($1,n|noise($1)),$0),$0),$0)
example_end

Sent: the spoon .
Sem:  det|the($0,n|spoon($0))
example_end

Sent: what 'd you put on the spoon ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|put&ZERO(pro|you,$0,$1),$1),prep|on(det|the($2,n|spoon($2)),$1))
example_end

Sent: put some jello in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,qn|some($1,n|jello($1)),$0),adv:loc|in($0))
example_end

Sent: that 's another spoon .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|spoon($1)),$0)
example_end

Sent: write Sarah ?
Sem:  lambda $0_{ev}.Q(v|write(pro|you,n:prop|Sarah,$0),$0)
example_end

Sent: write Sarah  .
Sem:  lambda $0_{ev}.v|write(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: you make the eyebrows .
Sem:  lambda $0_{ev}.v|make(pro|you,det|the($1,n|eyebrow-PL($1)),$0)
example_end

Sent: we 'll make a big face .
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|face($1))),$0),$0)
example_end

Sent: you make the eyebrows .
Sem:  lambda $0_{ev}.v|make(pro|you,det|the($1,n|eyebrow-PL($1)),$0)
example_end

Sent: nice eyebrows .
Sem:  lambda $0_{e}.and(adj|nice($0),n|eyebrow-PL($0))
example_end

Sent: beautiful eyebrows .
Sem:  lambda $0_{e}.and(adj|beautiful($0),n|eyebrow-PL($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: would you like that ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: this side ?
Sem:  lambda $0_{ev}.Q(det|this($1,n|side($1)),$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: is he ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Sarah .
Sem:  n:prop|Sarah
example_end

Sent: she 's looking out that window .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|look-PROG(pro|she,$0),$0),prep|out(det|that($1,n|window($1)),$0))
example_end

Sent: Papa ?
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
example_end

Sent: Papa 's wearing a dress
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Papa,det|a($1,n|dress($1)),$0),$0)
example_end

Sent: popsicle .
Sem:  lambda $0_{e}.n|popsicle($0)
example_end

Sent: Eve 's going to eat it .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|eat(n:prop|Eve,pro|it,$0)),$0)
example_end

Sent: Eve 's waving to Momma out the window .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|wave-PROG(n:prop|Eve,$0),$0),prep|out(det|the($1,n|window($1)),$0))
example_end

Sent: see her hand .
Sem:  lambda $0_{ev}.v|see(pro|you,pro:poss:det|her($1,n|hand($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: again .
Sem:  lambda $0_{ev}.adv|again($0)
example_end

Sent: the horse is tired .
Sem:  lambda $0_{ev}.aux|be&3S(part|tire-PERF(det|the($1,n|horse($1)),$0),$0)
example_end

Sent: my leg is the horse .
Sem:  lambda $0_{ev}.eq(pro:poss:det|my($1,n|leg($1)),det|the($2,n|horse($2)),$0)
example_end

Sent: it 's still eating .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|it,$0),$0),adv|still($0))
example_end

Sent: you 'll give the horse indigestion .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|you,det|the($1,n|horse($1)),lambda $2_{e}.n|indigestion($2),$0),$0)
example_end

Sent: you .
Sem:  pro|you
example_end

Sent: you 're falling off that horse .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|fall-PROG(pro|you,$0),$0),prep|off(det|that($1,n|horse($1)),$0))
example_end

Sent: you 're falling off that horse .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|fall-PROG(pro|you,$0),$0),prep|off(det|that($1,n|horse($1)),$0))
example_end

Sent: there
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: it 's called the near side .
Sem:  lambda $0_{ev}.aux|be&3S(v|call-PAST(pro|it,det|the($1,and(adj|near($1),n|side($1))),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: did she do that ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|do(pro|she,pro:dem|that,$0),$0),$0)
example_end

Sent: that silly .
Sem:  pro:dem|that
example_end

Sent: Sarah 's teething .
Sem:  lambda $0_{ev}.aux|be&3S(part|teethe-PROG(n:prop|Sarah,$0),$0)
example_end

Sent: it 's her baby ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|her($1,n|baby($1)),$0),$0)
example_end

Sent: kiss the baby .
Sem:  lambda $0_{ev}.v|kiss(pro|you,det|the($1,n|baby($1)),$0)
example_end

Sent: good jump .
Sem:  lambda $0_{e}.and(adj|good($0),n|jump($0))
example_end

Sent: did you see that ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: don 't hit that .
Sem:  lambda $0_{ev}.not(aux|do(v|hit&ZERO(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: that would hurt .
Sem:  lambda $0_{ev}.aux|will&COND(v|hurt&ZERO(pro:dem|that,$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: here we go .
Sem:  lambda $0_{ev}.and(v|go(pro|we,$0),adv:loc|here($0))
example_end

Sent: down we go .
Sem:  lambda $0_{ev}.and(v|go(pro|we,$0),adv:loc|down($0))
example_end

Sent: better  Papa 'd better close the window .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|close(n:prop|Papa,det|the($1,n|window($1)),$0),$0),adv|better($0))
example_end

Sent: we 're alright .
Sem:  pro|we
example_end

Sent: she hit her face .
Sem:  lambda $0_{ev}.v|hit&ZERO(pro|she,pro:poss:det|her($1,n|face($1)),$0)
example_end

Sent: there we go .
Sem:  lambda $0_{ev}.and(v|go(pro|we,$0),adv:loc|there($0))
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: you do it over here .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: don 't do that .
Sem:  lambda $0_{ev}.not(aux|do(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: what 's wrong ?
Sem:  lambda $0_{e}.adj|wrong($0)
example_end

Sent: put them on top .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|on(lambda $1_{e}.n|top($1),$0))
example_end

Sent: where 's your tablet ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|tablet($1)),$0)
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: many kinds .
Sem:  qn|many($0,n|kind-PL($0))
example_end

Sent: are you ?
Sem:  lambda $0_{ev}.Q(pro|you,$0)
example_end

Sent: go back soon .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|soon($0))
example_end

Sent: is that an exercise ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|exercise($1)),$0),$0)
example_end

Sent: it was ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: may I kiss it ?
Sem:  lambda $0_{ev}.Q(aux|may(v|kiss(pro|I,pro|it,$0),$0),$0)
example_end

Sent: eat lunch
Sem:  lambda $0_{ev}.v|eat(pro|you,lambda $1_{e}.n|lunch($1),$0)
example_end

Sent: are you sure ?
Sem:  lambda $0_{ev}.Q(adj|sure(pro|you),$0)
example_end

Sent: what do you want for lunch ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|want(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
example_end

Sent: cheese sandwich ?
Sem:  lambda $0_{e}.and(n|cheese($0),n|sandwich($0))
example_end

Sent: eggnog ?
Sem:  lambda $0_{e}.n|eggnog($0)
example_end

Sent: we do .
Sem:  lambda $0_{ev}.v|do(pro|we,$0)
example_end

Sent: an eggnog ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|eggnog($1)),$0)
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: hurry up .
Sem:  lambda $0_{ev}.and(v|hurry(pro|you,$0),adv:loc|up($0))
example_end

Sent: want me to come with you ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),prep|with(pro|you,$0)),$0)
example_end

Sent: shall I come ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|come(pro|I,$0),$0),$0)
example_end

Sent: are you coming down ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|come-PROG(pro|you,$0),$0),adv:loc|down($0)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: shall I come over there ?
Sem:  lambda $0_{ev}.Q(and(aux|shall(v|come(pro|I,$0),$0),adv:loc|there($0)),$0)
example_end

Sent: can you see me now ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|me,$0),$0),adv|now($0)),$0)
example_end

Sent: an egg .
Sem:  det|a($0,n|egg($0))
example_end

Sent: what else ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: some milk ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|milk($1)),$0)
example_end

Sent: now we need the sugar .
Sem:  lambda $0_{ev}.and(v|need(pro|we,det|the($1,n|sugar($1)),$0),adv|now($0))
example_end

Sent: where 's the pitcher .
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|pitcher($1)),$0)
example_end

Sent: slip on my part .
Sem:  lambda $0_{ev}.and(v|slip(pro|you,$0),prep|on(pro:poss:det|my($1,n|part($1)),$0))
example_end

Sent: you like cheese ?
Sem:  lambda $0_{ev}.Q(v|like(pro|you,lambda $1_{e}.n|cheese($1),$0),$0)
example_end

Sent: I didn 't hear you .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|hear(pro|I,pro|you,$0),$0),$0)
example_end

Sent: orange cheese .
Sem:  lambda $0_{e}.and(adj|orange($0),n|cheese($0))
example_end

Sent: where is she ?
Sem:  lambda $0_{e}.eqLoc(pro|she,$0)
example_end

Sent: she 's talking .
Sem:  lambda $0_{ev}.aux|be&3S(part|talk-PROG(pro|she,$0),$0)
example_end

Sent: did you finish it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|finish(pro|you,pro|it,$0),$0),$0)
example_end

Sent: it 's allgone .
Sem:  adj|all_gone(pro|it)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what 's Sara saying ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(n:prop|Sara,$0,$1),$1)
example_end

Sent: what 's the matter ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|matter($2)),$1)
example_end

Sent: may I top it ?
Sem:  lambda $0_{ev}.Q(aux|may(v|top(pro|I,pro|it,$0),$0),$0)
example_end

Sent: look at Sara .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(n:prop|Sara,$0))
example_end

Sent: you want some more eggnog ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|eggnog($1)),$0),$0)
example_end

Sent: that 's a finger
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|finger($1)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: is that a baby noise ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,and(n|baby($1),n|noise($1))),$0),$0)
example_end

Sent: that 's a baby noise .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|baby($1),n|noise($1))),$0)
example_end

Sent: that 's a thumb ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|thumb($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's another cup ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,qn|another($1,n|cup($1)),$0),$0)
example_end

Sent: new red sock slippers .
Sem:  lambda $0_{e}.and(adj|new($0),adj|red($0),n|sock($0),n|slipper-PL($0))
example_end

Sent: sign slippers ?
Sem:  lambda $0_{e}.n|slipper-PL($0)
example_end

Sent: here he comes .
Sem:  lambda $0_{ev}.and(v|come-3S(pro|he,$0),adv:loc|here($0))
example_end

Sent: hear him ?
Sem:  lambda $0_{ev}.Q(v|hear(pro|you,pro|him,$0),$0)
example_end

Sent: here he comes .
Sem:  lambda $0_{ev}.and(v|come-3S(pro|he,$0),adv:loc|here($0))
example_end

Sent: is that alright ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro:dem|that),$0)
example_end

Sent: can you see her now ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|her,$0),$0),adv|now($0)),$0)
example_end

Sent: we move the chair like this .
Sem:  lambda $0_{ev}.and(v|move(pro|we,det|the($1,n|chair($1)),$0),prep|like(pro:dem|this,$0))
example_end

Sent: can you see her now ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|see(pro|you,pro|her,$0),$0),adv|now($0)),$0)
example_end

Sent: you can see her .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|you,pro|her,$0),$0)
example_end

Sent: Sara .
Sem:  n:prop|Sara
example_end

Sent: that 's wonderful .
Sem:  adj|wonderful(pro:dem|that)
example_end

Sent: what 's he cutting ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|cut-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's the matter ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|matter($2)),$1)
example_end


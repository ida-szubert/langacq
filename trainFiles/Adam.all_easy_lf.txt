Sent: big drum ?
Sem: lambda $0_{e}.Q(and(adj|big($0),n|drum($0)))
example_end

Sent: who is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: those are checkers .
Sem: lambda $0_{ev}.n|checker-pl(pro:dem|those,$0)
example_end

Sent: two checkers yes .
Sem: lambda $0_{ev}.and(det:num|two(n|checker-pl($0)),co|yes($0))
example_end

Sent: play checkers ?
Sem: lambda $0_{ev}.Q(n|play(you,lambda $1_{e}.n|checker-pl($1),$0))
example_end

Sent: big horn ?
Sem: lambda $0_{e}.Q(and(adj|big($0),n|horn($0)))
example_end

Sent: are those your checkers ?
Sem: lambda $0_{ev}.Q(det:poss|your(det:dem|those,n|checker-pl(det:dem|those,$0)))
example_end

Sent: what 's this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: do you want to play with them ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|play(pro:per|you,$1),prep|with(pro:obj|them,$1)),$0),$0))
example_end

Sent: I like it .
Sem: lambda $0_{ev}.v|like(pro:sub|i,pro:per|it,$0)
example_end

Sent: why don 't you read Shadow yourself ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|read-zero(pro:per|you,n:prop|shadow,$0),$1($0)),pro:refl|yourself($0)),$0),$0)
example_end

Sent: why don 't you look at some of the toys in the basket .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(cop|look(pro:per|you,$0),$1($0)),prep|at(qn|some(det:art|the($2,att(n|toy-pl($2),prep|in(det:art|the($3,n|basket($3)))))),$0)),$0),$0)
example_end

Sent: what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: can you put them together Adam ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|together($0)),$0))
example_end

Sent: not in your mouth .
Sem: not(prep|in(det:poss|your($0,n|mouth($0))))
example_end

Sent: let me put them together .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.and(v|put-zero(pro:obj|me,pro:obj|them,$1),adv|together($1)),$0)
example_end

Sent: you 'll have_to pick them up .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|pick(pro:per|you,pro:obj|them,$0),adv|up($0)),$0),$0)
example_end

Sent: no that 's his pencil .
Sem: lambda $0_{ev}.and(det:poss|his(pro:dem|that,n|pencil(pro:dem|that,$0)),co|no($0))
example_end

Sent: that 's not Daddy that 's Colin .
Sem: lambda $0_{ev}.not(and(n:prop|daddy(pro:dem|that,$0),n:prop|colin(pro:rel|that,$0)),$0)
example_end

Sent: I think perhaps he 's going back to school .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(and(and(part|go-presp(pro:sub|he,$1),adv|perhaps($1)),adv|back(prep|to(lambda $2_{e}.n|school($2),$1))),$1),$0)
example_end

Sent: not on the window sill Adam .
Sem: not(prep|on(det:art|the($0,and_comp(n|window($0),n|sill($0)))))
example_end

Sent: you write on the paper .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: my paper .
Sem: det:poss|my($0,n|paper($0))
example_end

Sent: sitting in Adam 's chair .
Sem: lambda $0_{ev}.and(part|sit-presp(you,$0),prep|in(n:prop|adam's($1,n|chair($1)),$0))
example_end

Sent: why don 't you read it to me ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|read-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|to(pro:obj|me,$0)),$0),$0)
example_end

Sent: that 's Cathy .
Sem: lambda $0_{ev}.n:prop|cathy(pro:dem|that,$0)
example_end

Sent: is this a horn ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|this,n|horn(pro:dem|this,$0)))
example_end

Sent: look what game is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,n|game(pro:dem|that,$0)),co|look(you,$0))
example_end

Sent: how many do you have like this ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|have(pro:per|you,lambda $1_{e}.$2(qn|many($1)),$0),prep|like(pro:dem|this,$0)),$0)
example_end

Sent: where are you going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: how does a bunny walk ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(n|walk(det:art|a($1,n|bunny+rabbit($1)),$0),$2($0)),$0)
example_end

Sent: what are you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: sweep broom .
Sem: lambda $0_{e}.and_comp(n|sweep($0),n|broom($0))
example_end

Sent: is that a broom ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|broom(pro:rel|that,$0)))
example_end

Sent: I thought it was a brush .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,n|brush(pro:per|it,$1)),$0)
example_end

Sent: Adam Smith ?
Sem: lambda $0_{e}.Q(n:prop|smith_adam($0))
example_end

Sent: is that very heavy ?
Sem: lambda $0_{ev}.Q(adv|very(adj|heavy(pro:rel|that,$0)))
example_end

Sent: what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: hear a tractor ?
Sem: lambda $0_{ev}.Q(v|hear(you,det:art|a($1,n|tractor($1)),$0))
example_end

Sent: no I think that 's a truck .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|truck(pro:dem|that,$1)),$0),co|no($0))
example_end

Sent: if you look out the other window maybe you 'll see it .
Sem: lambda $0_{ev}.mod|~will(conj|if(and(cop|look(pro:per|you,$0),prep|out(det:art|the($1,and(qn|other($1),n|window($1))),$0)),and(v|see(pro:per|you,pro:per|it,$0),adv|maybe($0))),$0)
example_end

Sent: did you see the truck ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|truck($1)),$0),$0))
example_end

Sent: no you didn 't see it .
Sem: lambda $0_{ev}.and(not(mod|do(v|see(pro:per|you,pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: there goes one .
Sem: lambda $0_{ev}.v|go-3s_there(you,pro:indef|one,$0)
example_end

Sent: yes there goes one .
Sem: lambda $0_{ev}.and(v|go-3s_there(you,pro:indef|one,$0),co|yes($0))
example_end

Sent: put the truck where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|truck($1)),$0),$2($0))
example_end

Sent: tow truck come here ?
Sem: lambda $0_{ev}.Q(and(v|come(lambda $1_{e}.and_comp(n|tow($1),n|truck($1)),$0),adv|here($0)))
example_end

Sent: oh yeah .
Sem: lambda $0_{ev}.co|yeah_oh($0)
example_end

Sent: that 's a big truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|truck(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: busy bulldozer ?
Sem: lambda $0_{e}.Q(and(adj|busy($0),n|bulldoze-dv($0)))
example_end

Sent: did you show Ursula that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,pro:dem|that,n:prop|ursula,$0),$0))
example_end

Sent: do you know what those are ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.cop|be-pres(pro:dem|those,pro:int|what,$1),$0),$0))
example_end

Sent: I guess she might like to see that .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.mod|might(v|like(pro:sub|she,lambda $2_{ev}.v|see(pro:sub|she,pro:dem|that,$2),$1),$1),$0)
example_end

Sent: what kind of hat is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|hat($2))))
example_end

Sent: Adam 's hat ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|hat($1),$0))
example_end

Sent: where have you seen a hat like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|have(and(part|see-pastp(pro:per|you,det:art|a($1,att(n|hat($1),prep|like(pro:dem|that))),$0),$2($0)),$0)
example_end

Sent: not shoe ball .
Sem: and(not(lambda $0_{e}.n|shoe($0)),lambda $1_{e}.n|ball($1))
example_end

Sent: foot ball .
Sem: lambda $0_{e}.n|ball_foot($0)
example_end

Sent: I saw a tank truck .
Sem: lambda $0_{ev}.v|see-past(pro:sub|i,det:art|a($1,and_comp(n|tank($1),n|truck($1))),$0)
example_end

Sent: was he dirty ?
Sem: lambda $0_{ev}.Q(adj|dirt-dn(pro:sub|he,$0))
example_end

Sent: Adam fall toy .
Sem: lambda $0_{ev}.n|fall(n:prop|adam,lambda $1_{e}.n|toy($1),$0)
example_end

Sent: you didn 't fall that time .
Sem: lambda $0_{ev}.not(mod|do(and(v|fall(pro:per|you,$0),pro:dem|that($1,n|time($1),$0)),$0),$0)
example_end

Sent: you just sat down .
Sem: lambda $0_{ev}.and(and(v|sit-past(pro:per|you,$0),adv|just($0)),adv|down($0))
example_end

Sent: do you want to see this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,pro:dem|this,$1),$0),$0))
example_end

Sent: here 's a label .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|label($1)),$0),pro:exist|here($0))
example_end

Sent: do you want to paste it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|paste(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: those are her paper clips .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|those,and_comp(n|paper(pro:dem|those,$0),n|clip-pl(pro:dem|those,$0)))
example_end

Sent: may I give you some ?
Sem: lambda $0_{ev}.Q(mod|may(v|give(pro:sub|i,qn|some,pro:per|you,$0),$0))
example_end

Sent: you don 't need a pencil .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: you had a pencil .
Sem: lambda $0_{ev}.v|have-past(pro:per|you,det:art|a($1,n|pencil($1)),$0)
example_end

Sent: here 's a pencil .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|pencil($1)),$0),pro:exist|here($0))
example_end

Sent: why don 't you take that over and show it to him .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(and(v|show(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0)),v|take(pro:per|you,pro:dem|that,$0)),$1($0)),adv|over($0)),$0),$0)
example_end

Sent: maybe he likes ball players .
Sem: lambda $0_{ev}.and(v|like-3s(pro:sub|he,lambda $1_{e}.and_comp(n|ball($1),n|play-dv($1)),$0),adv|maybe($0))
example_end

Sent: do you think he would ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|will-cond(pro:sub|he,$1),$0),$0))
example_end

Sent: did you show him the ball player ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:art|the($1,and_comp(n|ball($1),n|play-dv($1))),pro:obj|him,$0),$0))
example_end

Sent: your ball player ?
Sem: lambda $0_{e}.Q(det:poss|your($1,and_comp(n|ball($1),n|play-dv($1)),$0))
example_end

Sent: boots yes .
Sem: lambda $0_{ev}.and(n|boot-pl($0),co|yes($0))
example_end

Sent: can you fix your bike ?
Sem: lambda $0_{ev}.Q(mod|can(v|fix(pro:per|you,det:poss|your($1,n|bike($1)),$0),$0))
example_end

Sent: is that part of the two truck ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,and_comp(det:num|two($1),n|truck($1))))))
example_end

Sent: are you ready to go night_night ?
Sem: lambda $0_{ev}.Q(adj|ready(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),co|night_night($1)),$0))
example_end

Sent: you hit your head didn 't you .
Sem: lambda $0_{ev}.and(v|hit-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),not(mod|do(pro:per|you,$0),$0))
example_end

Sent: did it hurt ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:per|it,$0),$0))
example_end

Sent: poor head .
Sem: lambda $0_{e}.and(adj|poor($0),n|head($0))
example_end

Sent: don 't pull Mommy .
Sem: lambda $0_{ev}.not(mod|do(v|pull(you,n:prop|mommy,$0),$0),$0)
example_end

Sent: put pillow on the floor ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|pillow($1),$0),prep|on(det:art|the($2,n|floor($2)),$0)))
example_end

Sent: you want Mommy to sit on the floor ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.and(v|sit(you,$2),prep|on(det:art|the($3,n|floor($3)),$2))),$0))
example_end

Sent: what do you want Mommy to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.v|do($2,$1),$0),n:prop|mommy($0)),$0)
example_end

Sent: do you want Mommy to stand up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|stand(n:prop|mommy,$1),adv|up($1)),$0),$0))
example_end

Sent: Mommy stand up ?
Sem: lambda $0_{ev}.Q(and(v|stand(n:prop|mommy,$0),adv|up($0)))
example_end

Sent: what about the chair ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|chair($0))))
example_end

Sent: nice pony ?
Sem: lambda $0_{e}.Q(and(adj|nice($0),n|pony($0)))
example_end

Sent: may please ?
Sem: lambda $0_{ev}.Q(and(mod|may(you,$0),co|please($0)))
example_end

Sent: fix kitty ?
Sem: lambda $0_{ev}.Q(v|fix(you,lambda $1_{e}.n|kitty($1),$0))
example_end

Sent: make mosquito ?
Sem: lambda $0_{ev}.Q(v|make(you,lambda $1_{e}.n|mosquito($1),$0))
example_end

Sent: fine book ?
Sem: lambda $0_{e}.Q(and(adj|fine($0),n|book($0)))
example_end

Sent: don 't take those out .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(you,pro:dem|those,$0),adv|out($0)),$0),$0)
example_end

Sent: leave them in there .
Sem: lambda $0_{ev}.and(v|leave(you,pro:obj|them,$0),prep|in(adv|there($0)))
example_end

Sent: what is in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1,$0),prep|in(adv|there($0)))
example_end

Sent: get Adam 's bike !
Sem: lambda $0_{ev}.v|get(you,n:prop|adam's($1,n|bike($1)),$0)
example_end

Sent: which book ?
Sem: lambda $0_{e}.$0($1,n|book($1))
example_end

Sent: see there are no pictures .
Sem: lambda $0_{ev}.and(v|see(you,$0),cop|be-pres(qn|no($1,n|picture-pl($1)),$0))
example_end

Sent: did you read that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|read-zero(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: you gave it to him .
Sem: lambda $0_{ev}.and(v|give-past(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0))
example_end

Sent: go get it ?
Sem: lambda $0_{ev}.Q(v|get(you,pro:per|it,$0))
example_end

Sent: go get what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|get(you,$1,$0)
example_end

Sent: what am I ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|i,$0)
example_end

Sent: I help to move rocks .
Sem: lambda $0_{ev}.v|help(pro:sub|i,lambda $1_{ev}.n|move(pro:sub|i,lambda $2_{e}.n|rock-pl($2),$1),$0)
example_end

Sent: what is this .
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: are you looking at the book ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|look-presp(pro:per|you,$0),prep|at(det:art|the($1,n|book($1)),$0)),$0))
example_end

Sent: no that 's a tape recorder .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0))),co|no($0))
example_end

Sent: yes tape recorder .
Sem: lambda $0_{ev}.and(and_comp(n|tape($0),n|record-dv($0)),co|yes($0))
example_end

Sent: read bunny .
Sem: lambda $0_{ev}.v|read-zero(you,lambda $1_{e}.n|bunny+rabbit($1),$0)
example_end

Sent: can the bunny read ?
Sem: lambda $0_{ev}.Q(mod|can(v|read-zero(det:art|the($1,n|bunny+rabbit($1)),$0),$0))
example_end

Sent: oh you 're going to read to the bunny .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|read-zero(pro:per|you,$1),prep|to(det:art|the($2,n|bunny+rabbit($2)),$1)),$0),$0),co|oh($0))
example_end

Sent: that 's a good idea .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|idea(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: you can 't write .
Sem: lambda $0_{ev}.not(mod|can(v|write(pro:per|you,$0),$0),$0)
example_end

Sent: I 'll get you .
Sem: lambda $0_{ev}.mod|~will(aux|get(pro:sub|i,pro:per|you,$0),$0)
example_end

Sent: poor Perro he was under the pillow .
Sem: lambda $0_{ev}.and(att(n:prop|perro,lambda $1_{e}.adj|poor($1)),and(aux|be-past(pro:sub|he,$0),prep|under(det:art|the($2,n|pillow($2)),$0)))
example_end

Sent: who 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: that 's little Robin Red Breast .
Sem: lambda $0_{ev}.n:prop|breast_red(pro:dem|that,$0)
example_end

Sent: what 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: you leave his pencil in there Adam .
Sem: lambda $0_{ev}.and(v|leave(pro:per|you,det:poss|his($1,n|pencil($1)),$0),prep|in(adv|there($0)))
example_end

Sent: look Adam .
Sem: lambda $0_{ev}.co|look(you,$0)
example_end

Sent: here 's one .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),pro:exist|here($0))
example_end

Sent: do you know this one ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0),$0))
example_end

Sent: now what are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|write-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: can you spell your name ?
Sem: lambda $0_{ev}.Q(mod|can(v|spell(pro:per|you,det:poss|your($1,n|name($1)),$0),$0))
example_end

Sent: mustn 't write on the book .
Sem: lambda $0_{ev}.not(mod|must(and(v|write(you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0),$0)
example_end

Sent: pencil and paper alright .
Sem: lambda $0_{ev}.and(coord|and(lambda $1_{e}.n|pencil($1),lambda $2_{e}.n|paper($2)),adj|alright($0))
example_end

Sent: does your writing look like his ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(cop|look(det:poss|your($1,n:gerund|write-presp($1)),$0),conj|like(det:poss|his,$0)),$0))
example_end

Sent: you tell me .
Sem: lambda $0_{ev}.v|tell(pro:per|you,pro:obj|me,$0)
example_end

Sent: don 't jump .
Sem: lambda $0_{ev}.not(mod|do(v|jump(you,$0),$0),$0)
example_end

Sent: he can 't write when you jump .
Sem: lambda $0_{ev}.not(conj|when(v|jump(pro:per|you,$0),mod|can(v|write(pro:sub|he,$0),$0)),$0)
example_end

Sent: put dirt up ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|dirt($1),$0),adv|up($0)))
example_end

Sent: are you a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|bulldoze-dv(pro:per|you,$0),adj|busy(pro:per|you,$0))))
example_end

Sent: why do you like to throw your book ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|like(pro:per|you,lambda $1_{ev}.v|throw(pro:per|you,det:poss|your($2,n|book($2)),$1),$0),$3($0)),$0)
example_end

Sent: oh you 're like a bulldozer ?
Sem: lambda $0_{ev}.Q(and(prep|like(det:art|a($1,n|bulldoze-dv($1)),pro:per|you,$0),co|oh($0)))
example_end

Sent: no that 's no funny .
Sem: lambda $0_{ev}.and(not(adj|fun-dn(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: you had such a funny expression .
Sem: lambda $0_{ev}.part|have-pastp(pro:per|you,qn|such(det:art|a($1,and(adj|fun-dn($1),n|expression($1)))),$0)
example_end

Sent: must go where ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|must(and(v|go(you,$0),$1($0)),$0)
example_end

Sent: Catherine too ?
Sem: lambda $0_{e}.Q(post|too(n:prop|catherine,$0))
example_end

Sent: well Cliffy 's at his house .
Sem: lambda $0_{ev}.and(prep|at(det:poss|his($1,n|house($1)),n:prop|cliffy,$0),co|well($0))
example_end

Sent: I guess Cliffy looks at Bozo at her house .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.and(and(cop|look-3s(n:prop|cliffy,$1),prep|at(n:prop|bozo,$1)),prep|at(det:poss|her($2,n|house($2)),$1)),$0)
example_end

Sent: how can you work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(and(v|work(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you don 't have anything else to put in the box do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|have(pro:per|you,lambda $1_{ev}.and(v|put-zero(post|else(pro:indef|anything),$1),prep|in(det:art|the($2,n|box($2)),$1)),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: this is your bulldozer ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:dem|this,n|bulldoze-dv(pro:dem|this,$0)))
example_end

Sent: oh my Adam bulldozer alright .
Sem: lambda $0_{ev}.and(co|alright(n:prop|adam's($1,n|bulldoze-dv($1)),$0),det:poss|my_oh($0))
example_end

Sent: don 't hit his feet .
Sem: lambda $0_{ev}.not(mod|do(v|hit-zero(you,det:poss|his($1,n|foot-pl($1)),$0),$0),$0)
example_end

Sent: you like hit ball ?
Sem: lambda $0_{ev}.Q(conj|like(pro:per|you,lambda $1_{ev}.v|hit-zero(pro:per|you,lambda $2_{e}.n|ball($2),$1),$0))
example_end

Sent: isn 't that part of your trailer ?
Sem: lambda $0_{ev}.Q(not(att(n|part(pro:dem|that,$0),prep|of(det:poss|your($1,n|trailer($1)))),$0))
example_end

Sent: you go get it .
Sem: lambda $0_{ev}.v|get(pro:per|you,pro:per|it,$0)
example_end

Sent: I 'll go get it .
Sem: lambda $0_{ev}.mod|~will(v|get(pro:sub|i,pro:per|it,$0),$0)
example_end

Sent: how did you get them in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|get(pro:per|you,pro:obj|them,$0),$1($0)),prep|in(adv|there($0))),$0)
example_end

Sent: there 's one .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),pro:exist|there($0))
example_end

Sent: two green ?
Sem: lambda $0_{e}.Q(det:num|two(n|green($0)))
example_end

Sent: I guess he 's working .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.aux|~be(part|work-presp(pro:sub|he,$1),$1),$0)
example_end

Sent: that 's a man ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|man(pro:dem|that,$0)))
example_end

Sent: what 's his name ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|his($2,n|name($2)),$0)
example_end

Sent: how can he see to deliver mail ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|can(and(v|see(pro:sub|he,lambda $1_{ev}.v|deliver(pro:sub|he,lambda $2_{e}.n|mail($2),$1),$0),$3($0)),$0)
example_end

Sent: where is a tomato ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|a($1,n|tomato($1)),$0),$2($0))
example_end

Sent: she 's gone home .
Sem: lambda $0_{ev}.aux|~be(and(part|go-pastp(pro:sub|she,$0),n|home($0)),$0)
example_end

Sent: she went home in July .
Sem: lambda $0_{ev}.and(and(v|go-past(pro:sub|she,$0),adv|home($0)),prep|in(n:prop|july,$0))
example_end

Sent: why don 't you come over here and play with the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(v|come(pro:per|you,$0),and(n|play(pro:per|you,$0),prep|with(det:art|the($1,n|ball($1)),$0))),$2($0)),adv|over(adv|here($0))),$0),$0)
example_end

Sent: you can get it .
Sem: lambda $0_{ev}.mod|can(aux|get(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: Daddy 's brief case .
Sem: n:prop|daddy's($0,n|case_brief($0))
example_end

Sent: did you get the ball ?
Sem: lambda $0_{ev}.Q(v|do-past(v|get(pro:per|you,det:art|the($1,n|ball($1)),$0),$0))
example_end

Sent: where is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s(pro:per|it,$0),$1($0))
example_end

Sent: those are Daddy 's books .
Sem: lambda $0_{ev}.n:prop|daddy's'(pro:dem|those,n|book-pl(pro:dem|those,$0))
example_end

Sent: would you like to have your books on the bookshelf too ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(and(v|have(pro:per|you,det:poss|your($2,n|book-pl($2)),$1),prep|on(det:art|the($3,n|book+shelf($3)),$1)),post|too($1)),$0),$0))
example_end

Sent: no that 's a church .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|church(pro:dem|that,$0)),co|no($0))
example_end

Sent: move your own road grader .
Sem: lambda $0_{ev}.v|move(you,det:poss|your($1,and_comp(n|road($1),and(adj|own($1),n|grade-dv($1)))),$0)
example_end

Sent: go move the road grader .
Sem: lambda $0_{ev}.v|move(you,det:art|the($1,and_comp(n|road($1),n|grade-dv($1))),$0)
example_end

Sent: you pick the road grader up .
Sem: lambda $0_{ev}.and(v|pick(pro:per|you,det:art|the($1,and_comp(n|road($1),n|grade-dv($1))),$0),adv|up($0))
example_end

Sent: the dog doesn 't want any paper does he ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|want(det:art|the($1,n|dog($1)),qn|any($2,n|paper($2)),$0),$0),$0),mod|do-3s(pro:sub|he,$0)))
example_end

Sent: here doggie .
Sem: adv|here(lambda $0_{e}.n|dog-dim($0))
example_end

Sent: that 's not a record .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|record(pro:dem|that,$0)),$0)
example_end

Sent: ask her what that is .
Sem: lambda $0_{ev}.v|ask(you,pro:obj|her,$0)
example_end

Sent: that 's a tape recorder .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)))
example_end

Sent: don 't touch .
Sem: lambda $0_{ev}.not(mod|do(v|touch(you,$0),$0),$0)
example_end

Sent: what is it doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(part|do-presp(pro:per|it,$1,$0),$0)
example_end

Sent: record is playing ?
Sem: lambda $0_{ev}.Q(aux|be-3s(part|play-presp(lambda $1_{e}.n|record($1),$0),$0))
example_end

Sent: what does it do when it plays ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(v|play-3s(pro:per|it,$0),mod|do-3s(v|do(pro:per|it,$1,$0),$0))
example_end

Sent: do you hear a horn playing ?
Sem: lambda $0_{ev}.Q(mod|do(v|hear(pro:per|you,lambda $1_{ev}.part|play-presp(det:art|a($2,n|horn($2)),$1),$0),$0))
example_end

Sent: I don 't hear a horn .
Sem: lambda $0_{ev}.not(mod|do(v|hear(pro:sub|i,det:art|a($1,n|horn($1)),$0),$0),$0)
example_end

Sent: is there a horn on there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|horn($1)),$0),prep|on(adv|there($0))))
example_end

Sent: did he like the water ?
Sem: lambda $0_{ev}.Q(mod|do-past(co|like(pro:sub|he,det:art|the($1,n|water($1)),$0),$0))
example_end

Sent: what do you see in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),adv|in(adv|there($0))),$0)
example_end

Sent: where does the ladder go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|go(det:art|the($1,n|ladder($1)),$0),$2($0)),$0)
example_end

Sent: can you put it on ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|on($0)),$0))
example_end

Sent: can you put them in there ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|in(adv|there($0))),$0))
example_end

Sent: I thought you couldn 't do it .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.not(mod|could(v|do(pro:per|you,pro:per|it,$1),$1),$1),$0)
example_end

Sent: that 's no ladder for that .
Sem: lambda $0_{ev}.not(att(n|ladder(pro:dem|that,$0),prep|for(pro:dem|that)),$0)
example_end

Sent: you read your paper and I 'll read mine .
Sem: lambda $0_{ev}.coord|and(mod|~will(v|read-zero(pro:sub|i,pro:poss|mine,$0),$0),v|read-zero(pro:per|you,det:poss|your($1,n|paper($1)),$0))
example_end

Sent: mine paper .
Sem: n|mine($0,n|paper($0))
example_end

Sent: alright it 's yours .
Sem: lambda $0_{ev}.and(pro:poss|yours(pro:per|it,$0),co|alright($0))
example_end

Sent: he 's going out .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:sub|he,$0),adv|out($0)),$0)
example_end

Sent: would you like some soup ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|soup($1)),$0),$0))
example_end

Sent: what kind of soup ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|soup($2))))
example_end

Sent: well you told her to sit there .
Sem: lambda $0_{ev}.and(v|tell-past(pro:per|you,lambda $1_{ev}.and(v|sit(pro:obj|her,$1),adv|there($1)),$0),co|well($0))
example_end

Sent: Mommy 's tea ?
Sem: lambda $0_{e}.Q(n:prop|mommy's($1,n|tea($1),$0))
example_end

Sent: what are you doing Adam .
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: did you see the sun ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|sun($1)),$0),$0))
example_end

Sent: is that a lady ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|lady(pro:rel|that,$0)))
example_end

Sent: is it hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:per|it,$0))
example_end

Sent: you can 't reach it ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|reach(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: put water in it ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|water($1),$0),prep|in(pro:per|it,$0)))
example_end

Sent: Adam drive record ?
Sem: lambda $0_{ev}.Q(n|drive(n:prop|adam,lambda $1_{e}.n|record($1),$0))
example_end

Sent: where 's your truck going ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|~be(and(part|go-presp(det:poss|your($1,n|truck($1)),$0),$2($0)),$0)
example_end

Sent: no there 's your paper .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|your($1,n|paper($1)),$0),pro:exist|there($0)),co|no($0))
example_end

Sent: oh doggie write paper ?
Sem: lambda $0_{ev}.Q(and(v|write(lambda $1_{e}.n|dog-dim($1),lambda $2_{e}.n|paper($2),$0),co|oh($0)))
example_end

Sent: that 's a smart doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|dog-dim(pro:dem|that,$0),adj|smart(pro:dem|that,$0)))
example_end

Sent: what did the doggie write ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|write(det:art|the($1,n|dog-dim($1)),$2,$0),$0)
example_end

Sent: that 's a hole .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|hole(pro:dem|that,$0))
example_end

Sent: oh climb ?
Sem: lambda $0_{ev}.Q(and(v|climb(you,$0),co|oh($0)))
example_end

Sent: what did he climb ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|climb(pro:sub|he,$1,$0),$0)
example_end

Sent: do you want to write on here ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|write(pro:per|you,$1),prep|on(adv|here($1))),$0),$0))
example_end

Sent: Daddy went to school .
Sem: lambda $0_{ev}.and(v|go-past(n:prop|daddy,$0),prep|to(lambda $1_{e}.n|school($1),$0))
example_end

Sent: those are her feet .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|those,n|foot-pl(pro:dem|those,$0))
example_end

Sent: how many feet does she have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|have(pro:sub|she,lambda $1_{e}.and($2(qn|many($1)),n|foot-pl($1)),$0),$0)
example_end

Sent: how many feet do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|foot-pl($1)),$0),$0)
example_end

Sent: Catherine stay tonight ?
Sem: lambda $0_{ev}.Q(and(n|stay(n:prop|catherine,$0),adv:tem|tonight($0)))
example_end

Sent: no Mommy is going to stay tonight .
Sem: lambda $0_{ev}.and(aux|be-3s(part|go-presp(n:prop|mommy,lambda $1_{ev}.and(cop|stay(n:prop|mommy,$1),adv:tem|tonight($1)),$0),$0),co|no($0))
example_end

Sent: yes Adam will stay tonight too .
Sem: lambda $0_{ev}.and(mod|will(and(and(cop|stay(n:prop|adam,$0),adv:tem|tonight($0)),post|too($0)),$0),co|yes($0))
example_end

Sent: no Howe won 't stay tonight .
Sem: lambda $0_{ev}.and(not(mod|will(and(cop|stay(n:prop|howe,$0),adv:tem|tonight($0)),$0),$0),co|no($0))
example_end

Sent: no there 's no fire back there .
Sem: lambda $0_{ev}.and(and(cop|~be(qn|no($1,n|fire($1)),$0),adv|back(adv|there($0))),co|no($0))
example_end

Sent: you drawing a kitty ?
Sem: lambda $0_{ev}.Q(n|drawing(pro:per|you,det:art|a($1,n|kitty($1)),$0))
example_end

Sent: what does Daddy say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|say(n:prop|daddy,$1,$0),$0)
example_end

Sent: write circle ?
Sem: lambda $0_{ev}.Q(v|write(you,lambda $1_{e}.n|circle($1),$0))
example_end

Sent: bumble bee ?
Sem: lambda $0_{e}.Q(n|bee_bumble($0))
example_end

Sent: where is he ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:sub|he,$0),$1($0))
example_end

Sent: why don 't you write that ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|write(pro:per|you,pro:dem|that,$0),$1($0)),$0),$0)
example_end

Sent: is that the bumble bee ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|bee_bumble(pro:rel|that,$0)))
example_end

Sent: do you want to read a book ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|read-zero(pro:per|you,det:art|a($2,n|book($2)),$1),$0),$0))
example_end

Sent: who is this .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:dem|this($0,$1)
example_end

Sent: Donald_Duck go ?
Sem: lambda $0_{ev}.Q(v|go(n:prop|donald_duck,$0))
example_end

Sent: I don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: did you look in your basket ?
Sem: lambda $0_{ev}.Q(v|do-past(and(cop|look(pro:per|you,$0),prep|in(det:poss|your($1,n|basket($1)),$0)),$0))
example_end

Sent: can you go with your bike ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|go(pro:per|you,$0),prep|with(det:poss|your($1,n|bike($1)),$0)),$0))
example_end

Sent: look a trailer ?
Sem: lambda $0_{ev}.Q(and(cop|look(you,$0),det:art|a($1,n|trailer($1))))
example_end

Sent: what are you going to pull ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|pull($2,$1),$0),$0)
example_end

Sent: pull Adam 's bike ?
Sem: lambda $0_{ev}.Q(v|pull(you,n:prop|adam's($1,n|bike($1)),$0))
example_end

Sent: no don 't take his head off .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|take(you,det:poss|his($1,n|head($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: leave him on there so he can drive it .
Sem: lambda $0_{ev}.conj|so(mod|can(v|drive(pro:sub|he,pro:per|it,$0),$0),and(v|leave(you,pro:obj|him,$0),prep|on(adv|there($0))))
example_end

Sent: yes his head is off .
Sem: lambda $0_{e}.lambda $1_{ev}.det:poss|his($0,n|head($0,$1))
example_end

Sent: do you have a comb ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|comb($1)),$0),$0))
example_end

Sent: is that a piggie ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pig-dim(pro:rel|that,$0)))
example_end

Sent: I can 't see .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:sub|i,$0),$0),$0)
example_end

Sent: no I can 't see .
Sem: lambda $0_{ev}.and(not(mod|can(v|see(pro:sub|i,$0),$0),$0),co|no($0))
example_end

Sent: where 's a ladder ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|ladder($1)),$0),$2($0))
example_end

Sent: that 's the tattooed man .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and(n|man(pro:dem|that,$0),part|tattoo-pastp(pro:dem|that,$0)))
example_end

Sent: tattooed man .
Sem: lambda $0_{e}.and(part|tattoo-pastp($0),n|man($0))
example_end

Sent: may I sit beside you ?
Sem: lambda $0_{ev}.Q(mod|may(and(v|sit(pro:sub|i,$0),prep|beside(pro:per|you,$0)),$0))
example_end

Sent: Judy and Buzz .
Sem: coord|and(n:prop|judy,n:prop|buzz)
example_end

Sent: you had an apple when you got up from your nap .
Sem: lambda $0_{ev}.conj|when(and(v|get-past_up(pro:per|you,$0),prep|from(det:poss|your($1,n|nap($1)),$0)),v|have-past(pro:per|you,det:art|a($2,n|apple($2)),$0))
example_end

Sent: Adam want to close the box ?
Sem: lambda $0_{ev}.Q(v|want(n:prop|adam,lambda $1_{ev}.v|close(n:prop|adam,det:art|the($2,n|box($2)),$1),$0))
example_end

Sent: do you want paper ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.n|paper($1),$0),$0))
example_end

Sent: whose brief case is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,and_comp(adj|brief(pro:dem|that,$0),n|case(pro:dem|that,$0)))
example_end

Sent: is that part of the game ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|game($1)))))
example_end

Sent: oh pin game .
Sem: lambda $0_{ev}.and(and_comp(n|pin($0),n|game($0)),co|oh($0))
example_end

Sent: Adam you don 't tell him what to write .
Sem: lambda $2_{e}.lambda $0_{ev}.and(not(mod|do(v|tell(pro:per|you,lambda $1_{ev}.v|write(pro:obj|him,$2,$1),$0),$0),$0),n:prop|adam)
example_end

Sent: don 't sit on that .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(you,$0),prep|on(pro:dem|that,$0)),$0),$0)
example_end

Sent: here 's your shoe .
Sem: lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|shoe($1)),$0),pro:exist|here($0))
example_end

Sent: no John Buzzhart .
Sem: lambda $0_{ev}.and(n:prop|buzzhart_john($0),co|no($0))
example_end

Sent: what kind of game ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|game($2))))
example_end

Sent: which one ?
Sem: lambda $0_{e}.$0($1,pro:indef|one($1))
example_end

Sent: oh shave a pig .
Sem: lambda $0_{ev}.and(v|shave(you,det:art|a($1,n|pig($1)),$0),co|oh($0))
example_end

Sent: that one ?
Sem: lambda $0_{e}.Q(pro:dem|that($1,pro:indef|one($1),$0))
example_end

Sent: you haven 't seen Bozo in a long time have you ?
Sem: lambda $0_{ev}.Q(and(not(aux|have(and(part|see-pastp(pro:per|you,n:prop|bozo,$0),prep|in(det:art|a($1,and(adj|long($1),n|time($1))),$0)),$0),$0),v|have(pro:per|you,$0)))
example_end

Sent: are you sitting with me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|sit-presp(pro:per|you,$0),prep|with(pro:obj|me,$0)),$0))
example_end

Sent: oh you found bunny .
Sem: lambda $0_{ev}.and(v|found(pro:per|you,lambda $1_{e}.n|bunny+rabbit($1),$0),co|oh($0))
example_end

Sent: that 's David 's Bunny_Rabbit .
Sem: lambda $0_{ev}.n:prop|david's'(pro:dem|that,n:prop|bunny_rabbit(pro:dem|that,$0))
example_end

Sent: yes I remember David .
Sem: lambda $0_{ev}.and(v|remember(pro:sub|i,n:prop|david,$0),co|yes($0))
example_end

Sent: do you remember David ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,n:prop|david,$0),$0))
example_end

Sent: no not her shoe .
Sem: lambda $0_{ev}.and(not(det:poss|her($1,n|shoe($1)),$0),co|no($0))
example_end

Sent: write on the paper .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: write on his shoe ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),prep|on(det:poss|his($1,n|shoe($1)),$0)))
example_end

Sent: no you can 't write on Mr Cromer 's show .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|write(pro:per|you,$0),prep|on(n:prop|cromer_mr's($1,n|show($1)),$0)),$0),$0),co|no($0))
example_end

Sent: like Adam 's horsie .
Sem: prep|like(n:prop|adam's($0,n|horse-dim($0)))
example_end

Sent: yes there 's a horse there .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|horse($1)),$0),adv|there($0)),co|yes($0))
example_end

Sent: he can 't copy me .
Sem: lambda $0_{ev}.not(mod|can(v|copy(pro:sub|he,pro:obj|me,$0),$0),$0)
example_end

Sent: I don 't care .
Sem: lambda $0_{ev}.not(mod|do(v|care(pro:sub|i,$0),$0),$0)
example_end

Sent: oh you 're going to give the kitty a ride in your wagon ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|give(pro:per|you,det:art|a($2,att(n|ride($2),prep|in(det:poss|your($3,n|wagon($3))))),det:art|the($4,n|kitty($4)),$1),$0),$0),co|oh($0)))
example_end

Sent: do you have a bite ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|bite($1)),$0),$0))
example_end

Sent: can you tell Mr Cromer about Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|tell(pro:per|you,n:prop|cromer_mr,$0),prep|about(n:prop|humpty_dumpty,$0)),$0))
example_end

Sent: oh he wants to shake hands .
Sem: lambda $0_{ev}.and(v|want-3s(pro:sub|he,lambda $1_{ev}.n|shake(pro:sub|he,lambda $2_{e}.n|hand-pl($2),$1),$0),co|oh($0))
example_end

Sent: is that a light ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|light(pro:rel|that,$0)))
example_end

Sent: is that Adam 's shoe ?
Sem: lambda $0_{ev}.Q(n:prop|adam's'(pro:dem|that,n|shoe(pro:dem|that,$0)))
example_end

Sent: can you play it ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you like to walk ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,lambda $1_{ev}.v|walk(pro:per|you,$1),$0))
example_end

Sent: Mommy can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(n:prop|mommy,$0),$0),$0)
example_end

Sent: no Mommy can 't march .
Sem: lambda $0_{ev}.and(not(mod|can(v|march(n:prop|mommy,$0),$0),$0),co|no($0))
example_end

Sent: maybe Catherine can march .
Sem: lambda $0_{ev}.mod|can(and(v|march(n:prop|catherine,$0),adv|maybe($0)),$0)
example_end

Sent: no you march .
Sem: lambda $0_{ev}.and(v|march(pro:per|you,$0),co|no($0))
example_end

Sent: where is Catherine ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|catherine,$0),$1($0))
example_end

Sent: no you write on paper with pencil .
Sem: lambda $0_{ev}.and(and(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|paper($1),$0)),prep|with(lambda $2_{e}.n|pencil($2),$0)),co|no($0))
example_end

Sent: whose suitcase is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|suitcase(pro:dem|that,$0))
example_end

Sent: that 's his name .
Sem: lambda $0_{ev}.det:poss|his(pro:dem|that,n|name(pro:dem|that,$0))
example_end

Sent: what does it say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|say(pro:per|it,$1,$0),$0)
example_end

Sent: whose tractor is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|tractor(pro:dem|that,$0))
example_end

Sent: put the ball where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: tape recorder ?
Sem: lambda $0_{e}.Q(and_comp(n|tape($0),n|record-dv($0)))
example_end

Sent: no you can 't put the ball on the tape recorder .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|put-zero(pro:per|you,det:art|the($1,n|ball($1)),$0),prep|on(det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$0)),$0),$0),co|no($0))
example_end

Sent: what did the ball hit ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|hit-zero(det:art|the($1,n|ball($1)),$2,$0),$0)
example_end

Sent: oh hit Mommy 's rug ?
Sem: lambda $0_{ev}.Q(and(n|hit(you,n:prop|mommy's($1,n|rug($1)),$0),co|oh($0)))
example_end

Sent: where did it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: is it under the chair ?
Sem: lambda $0_{ev}.Q(prep|under(det:art|the($1,n|chair($1)),pro:per|it,$0))
example_end

Sent: see you later again ?
Sem: lambda $0_{ev}.Q(and(and(v|see(you,pro:per|you,$0),adv|later($0)),adv|again($0)))
example_end

Sent: Adam whose ball is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|ball(pro:dem|that,$0))
example_end

Sent: no you can 't sit on my book .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|sit(pro:per|you,$0),prep|on(det:poss|my($1,n|book($1)),$0)),$0),$0),co|no($0))
example_end

Sent: what kind is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|kind(pro:dem|that,$0))
example_end

Sent: this is a diesel locomotive .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,and_comp(n|diesel(pro:dem|this,$0),n|locomotive(pro:dem|this,$0)))
example_end

Sent: can you say that ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: baggage car ?
Sem: lambda $0_{e}.Q(and_comp(n|baggage($0),n|car($0)))
example_end

Sent: streamlined coach .
Sem: lambda $0_{e}.and_comp(part|streamline-pastp($0),n|coach($0))
example_end

Sent: sleeping car .
Sem: lambda $0_{e}.and_comp(part|sleep-presp($0),n|car($0))
example_end

Sent: dining car .
Sem: lambda $0_{e}.and_comp(part|dine-presp($0),n|car($0))
example_end

Sent: modern steam locomotive .
Sem: lambda $0_{e}.and_comp(n|steam($0),and(adj|modern($0),n|locomotive($0)))
example_end

Sent: electric locomotive .
Sem: lambda $0_{e}.and_comp(adj|electric($0),n|locomotive($0))
example_end

Sent: rotary snow plow .
Sem: lambda $0_{e}.and_comp(and_comp(adj|rotary($0),n|snow($0)),n|plow($0))
example_end

Sent: flat car .
Sem: lambda $0_{e}.and_comp(adj|flat($0),n|car($0))
example_end

Sent: mail car .
Sem: lambda $0_{e}.and_comp(n|mail($0),n|car($0))
example_end

Sent: tank car .
Sem: lambda $0_{e}.and_comp(n|tank($0),n|car($0))
example_end

Sent: box car .
Sem: lambda $0_{e}.and_comp(n|box($0),n|car($0))
example_end

Sent: do you know what kind this is ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|know(pro:per|you,lambda $1_{ev}.$2(pro:dem|this,n|kind(pro:dem|this,$1)),$0),$0)
example_end

Sent: yes there 's a man .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|man($1)),$0),co|yes($0))
example_end

Sent: put the baby where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|baby($1)),$0),$2($0))
example_end

Sent: where is the baby ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|baby($1)),$0),$2($0))
example_end

Sent: where is she ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:sub|she,$0),$1($0))
example_end

Sent: bed yes .
Sem: lambda $0_{ev}.and(n|bed($0),co|yes($0))
example_end

Sent: this is the sleeping car .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and_comp(part|sleep-presp(pro:dem|this,$0),n|car(pro:dem|this,$0)))
example_end

Sent: this is a box car .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,and_comp(n|box(pro:dem|this,$0),n|car(pro:dem|this,$0)))
example_end

Sent: know what kind that is ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|know(you,lambda $1_{ev}.$2(pro:rel|that,n|kind(pro:rel|that,$1)),$0)
example_end

Sent: do you know what that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: you don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:per|you,$0),$0),$0)
example_end

Sent: that 's the mail car .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and_comp(n|mail(pro:dem|that,$0),n|car(pro:dem|that,$0)))
example_end

Sent: stop car .
Sem: lambda $0_{e}.and_comp(n|stop($0),n|car($0))
example_end

Sent: and the last car on a train is called the what ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-3s(part|call-pastp(det:art|the($1,att(and(adj|last($1),n|car($1)),prep|on(det:art|a($2,n|train($2))))),$3,$0),$0)
example_end

Sent: it 's called the caboose .
Sem: lambda $0_{ev}.aux|~be(part|call-pastp(pro:per|it,det:art|the($1,n|caboose($1)),$0),$0)
example_end

Sent: yes that does look like a broom doesn 't it .
Sem: lambda $0_{ev}.and(and(v|do-3s(and(cop|look(pro:rel|that,$0),conj|like(det:art|a($1,n|broom($1)),$0)),$0),not(mod|do(pro:per|it,$0),$0)),co|yes($0))
example_end

Sent: whose is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: fix bike ?
Sem: lambda $0_{ev}.Q(v|fix(you,lambda $1_{e}.n|bike($1),$0))
example_end

Sent: what do you want to take off ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|take($2,$1),adv|off($1)),$0),$0)
example_end

Sent: did you write it already ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|write(pro:per|you,pro:per|it,$0),adv|already($0)),$0))
example_end

Sent: careful don 't hit Ursula 's feet with the tow truck .
Sem: lambda $0_{ev}.and(not(mod|do(and(n|hit(you,n:prop|ursula's($1,n|foot-pl($1)),$0),prep|with(det:art|the($2,and_comp(n|tow($2),n|truck($2))),$0)),$0),$0),co|careful($0))
example_end

Sent: you hit your knee ?
Sem: lambda $0_{ev}.Q(v|hit-zero(pro:per|you,det:poss|your($1,n|knee($1)),$0))
example_end

Sent: the tow truck hit your knee ?
Sem: lambda $0_{ev}.Q(v|hit-zero(det:art|the($1,and_comp(n|tow($1),n|truck($1))),det:poss|your($2,n|knee($2)),$0))
example_end

Sent: yes that is Donald Duck .
Sem: lambda $0_{ev}.and(n:prop|duck_donald(pro:rel|that,$0),co|yes($0))
example_end

Sent: that 's not Pinnochio .
Sem: lambda $0_{ev}.not(n:prop|pinnochio(pro:dem|that,$0),$0)
example_end

Sent: those are chipmunks and Mickey_Mouse .
Sem: lambda $0_{ev}.coord|and(n|chipmunk-pl(pro:dem|those,$0),n:prop|mickey_mouse(pro:dem|those,$0))
example_end

Sent: put your pajamas on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:poss|your($1,n|pajamas($1)),$0),adv|on($0)))
example_end

Sent: put pajamas on and we can ride the car .
Sem: lambda $0_{ev}.coord|and(mod|can(v|ride(pro:sub|we,det:art|the($1,n|car($1)),$0),$0),and(v|put-zero(you,lambda $2_{e}.n|pajamas($2),$0),adv|on($0)))
example_end

Sent: Daddy 's racket ?
Sem: lambda $0_{e}.Q(n:prop|daddy's($1,n|racket($1),$0))
example_end

Sent: Adam whose racket is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|racket(pro:dem|that,$0))
example_end

Sent: where did your racket go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:poss|your($1,n|racket($1)),$0),$2($0)),$0)
example_end

Sent: yes Daddy 's racket .
Sem: lambda $0_{ev}.and(n:prop|daddy's($1,n|racket($1),$0),co|yes($0))
example_end

Sent: whose racket is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|racket(pro:dem|that,$0))
example_end

Sent: whose brief case is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,n|case_brief(pro:dem|this,$0))
example_end

Sent: get off her briefcase honey .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|her($1,n|briefcase($1)),$0),prep|off($0))
example_end

Sent: get up .
Sem: lambda $0_{ev}.and(v|get(you,$0),adv|up($0))
example_end

Sent: come on .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|on($0))
example_end

Sent: no you can 't sit on his either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|sit(pro:per|you,$0),prep|on(det:poss|his,$0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: where 's your foot ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|foot($1)),$0),$2($0))
example_end

Sent: where 's the other one ?
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0),$3($0))
example_end

Sent: oh did you find it ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|find(pro:per|you,pro:per|it,$0),$0),co|oh($0)))
example_end

Sent: how many do you have now ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,lambda $1_{e}.$2(qn|many($1)),$0),adv|now($0)),$0)
example_end

Sent: two feet .
Sem: lambda $0_{e}.det:num|two(n|foot-pl($0))
example_end

Sent: how many does Mr Cromer have ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(v|have(n:prop|cromer_mr,lambda $1_{e}.$2(qn|many($1)),$0),$0)
example_end

Sent: oh that 's the knee ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,n|knee(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: do you have elbow ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.n|elbow($1),$0),$0))
example_end

Sent: what 's an elbow ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|elbow($2)),$0)
example_end

Sent: oh it 's right on your arm .
Sem: lambda $0_{ev}.and(adv|right(prep|on(det:poss|your($1,n|arm($1)),pro:per|it,$0)),co|oh($0))
example_end

Sent: it 's all squashed .
Sem: lambda $0_{ev}.adv|all(part|squash-pastp(pro:per|it,$0))
example_end

Sent: all squashed .
Sem: lambda $0_{e}.post|all(part|squash-pastp($0))
example_end

Sent: you 're stepping on her feet .
Sem: lambda $0_{ev}.aux|~be(and(n:gerund|step-presp(pro:per|you,$0),prep|on(det:poss|her($1,n|foot-pl($1)),$0)),$0)
example_end

Sent: where are you sitting ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|sit-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: Joshua 's chair or did you say Joshua 's shirt ?
Sem: lambda $0_{ev}.Q(v|do-past(v|say(pro:per|you,n:prop|joshua's($1,n|shirt($1)),$0),$0))
example_end

Sent: you 're picking the dirt up with your bulldozer ?
Sem: lambda $0_{ev}.Q(aux|~be(and(and(part|pick-presp(pro:per|you,det:art|the($1,n|dirt($1)),$0),adv|up($0)),prep|with(det:poss|your($2,n|bulldoze-dv($2)),$0)),$0))
example_end

Sent: the big tow truck 's picking Joshua 's dirt up ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|pick-presp(det:art|the($1,and_comp(n|tow($1),and(adj|big($1),n|truck($1)))),n:prop|joshua's($2,n|dirt($2)),$0),adv|up($0)),$0))
example_end

Sent: write that ?
Sem: lambda $0_{ev}.Q(v|write(you,pro:dem|that,$0))
example_end

Sent: the tractor can 't write .
Sem: lambda $0_{ev}.not(mod|can(v|write(det:art|the($1,n|tractor($1)),$0),$0),$0)
example_end

Sent: the racket can 't write either .
Sem: lambda $0_{ev}.not(mod|can(and(v|write(det:art|the($1,n|racket($1)),$0),adv|either($0)),$0),$0)
example_end

Sent: Adam is sitting down .
Sem: lambda $0_{ev}.aux|be-3s(and(part|sit-presp(n:prop|adam,$0),adv|down($0)),$0)
example_end

Sent: pick the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|dirt($1)),$0),adv|up($0)))
example_end

Sent: pick the roadgrader up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|roadgrader($1)),$0),adv|up($0)))
example_end

Sent: no you don 't have a nail in there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|nail($1)),$0),prep|in(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: he 's just sharp .
Sem: lambda $0_{ev}.adv|just(adj|sharp(pro:sub|he,$0))
example_end

Sent: Robie 's nail ?
Sem: lambda $0_{e}.Q(n:prop|robie's($1,n|nail($1),$0))
example_end

Sent: pick the glove up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,v|glove($1)),$0),adv|up($0)))
example_end

Sent: pick the paper up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|paper($1)),$0),adv|up($0)))
example_end

Sent: oh you can see the rug now ?
Sem: lambda $0_{ev}.Q(and(mod|can(and(v|see(pro:per|you,det:art|the($1,n|rug($1)),$0),adv|now($0)),$0),co|oh($0)))
example_end

Sent: what color is the rug ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1($2,n|color($2)),n|rug($1($2,n|color($2)),$0))
example_end

Sent: what color is in the rug ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1($2,n|color($2)),$0),prep|in(det:art|the($3,n|rug($3)),$0))
example_end

Sent: what other color is in it ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(lambda $1_{e}.and($2($3,qn|other($3),$1),n|color($1)),$0),prep|in(pro:per|it,$0))
example_end

Sent: green and what ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|green($1),pro:int|what,$0))
example_end

Sent: well what did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do-past(v|hit-zero(pro:per|you,$1,$0),$0),co|well($0))
example_end

Sent: you hit your shoulder .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,det:poss|your($1,n|shoulder($1)),$0)
example_end

Sent: on the table ?
Sem: Q(prep|on(det:art|the($0,n|table($0))))
example_end

Sent: you don 't have a mosquito bite back there .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,and_comp(n|mosquito($1),n|bite($1))),$0),adv|back(adv|there($0))),$0),$0)
example_end

Sent: don 't hit your head on the bicycle .
Sem: lambda $0_{ev}.not(mod|do(and(part|hit-pastp(you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|cycle($2)),$0)),$0),$0)
example_end

Sent: yes that is a man .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,n|man(pro:rel|that,$0)),co|yes($0))
example_end

Sent: yes he 's pushing the dirt up .
Sem: lambda $0_{ev}.and(aux|~be(and(part|push-presp(pro:sub|he,det:art|the($1,n|dirt($1)),$0),adv|up($0)),$0),co|yes($0))
example_end

Sent: where did what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|go($1,$0),$2($0)),$0)
example_end

Sent: until he met how many men ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|meet-past(pro:sub|he,lambda $1_{e}.and($2(qn|many($1)),n|man-pl($1)),$0)
example_end

Sent: three men .
Sem: lambda $0_{e}.det:num|three(n|man-pl($0))
example_end

Sent: that 's one of the men .
Sem: lambda $0_{ev}.att(pro:indef|one(pro:dem|that,$0),prep|of(det:art|the($1,n|man-pl($1))))
example_end

Sent: come on pal .
Sem: lambda $0_{ev}.v|come_on(you,$0)
example_end

Sent: no don 't push Mommy 's book .
Sem: lambda $0_{ev}.and(not(mod|do(n|push(you,n:prop|mommy's($1,n|book($1)),$0),$0),$0),co|no($0))
example_end

Sent: no it isn 't yours .
Sem: lambda $0_{ev}.and(not(pro:poss|yours(pro:per|it,$0),$0),co|no($0))
example_end

Sent: your books are over in your basket .
Sem: lambda $0_{ev}.and(aux|be-pres(det:poss|your($1,n|book-pl($1)),$0),adv|over(prep|in(det:poss|your($2,n|basket($2)),$0)))
example_end

Sent: is that Doctor Dan ?
Sem: lambda $0_{ev}.Q(n:prop|dan_doctor(pro:rel|that,$0))
example_end

Sent: is it ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|it($0,$1)
example_end

Sent: I didn 't think it was .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.cop|be-past(pro:per|it,$1),$0),$0),$0)
example_end

Sent: why do you call that spaghetti ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|call(pro:per|you,pro:dem|that,$0),$1($0)),$0),lambda $2_{e}.n|spaghetti($2))
example_end

Sent: or is that what you 're saying ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:dem|that($0,$1)
example_end

Sent: what about Daddy ?
Sem: att(pro:int|what,prep|about(n:prop|daddy))
example_end

Sent: no that 's Mr Cromer 's suitcase .
Sem: lambda $0_{ev}.and(n:prop|cromer_mr's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),co|no($0))
example_end

Sent: no whose suitcase is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,n|suitcase(pro:dem|that,$0)),qn|no($0))
example_end

Sent: to whom does that belong ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|belong(det:dem|that,$1,$0),$0)
example_end

Sent: yes that 's Daddy 's suitcase .
Sem: lambda $0_{ev}.and(n:prop|daddy's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),co|yes($0))
example_end

Sent: it 's not a pocketbook .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|pocket+book(pro:per|it,$0)),$0)
example_end

Sent: no don 't sit on that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|sit(you,$0),prep|on(pro:dem|that,$0)),$0),$0),co|no($0))
example_end

Sent: what kind of car do you have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|car($3)))),$0),$0)
example_end

Sent: put Miss Munroe 's tow truck ?
Sem: lambda $0_{ev}.Q(v|put-zero(you,n:prop|munroe_miss's($1,and_comp(n|tow($1),n|truck($1))),$0))
example_end

Sent: is that your doggie ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,n|dog-dim(pro:rel|that,$0)))
example_end

Sent: Texaco star ?
Sem: lambda $0_{e}.Q(and_comp(n:prop|texaco($0),n|star($0)))
example_end

Sent: that 's not a star .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|star(pro:dem|that,$0)),$0)
example_end

Sent: what about Cliffy ?
Sem: att(pro:int|what,prep|about(n:prop|cliffy))
example_end

Sent: two boots ?
Sem: lambda $0_{e}.Q(det:num|two(n|boot-pl($0)))
example_end

Sent: it doesn 't belong there .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:per|it,$0),adv|there($0)),$0),$0)
example_end

Sent: Adam 's doggie ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|dog-dim($1),$0))
example_end

Sent: take his nose off ?
Sem: lambda $0_{ev}.Q(and(v|take(you,det:poss|his($1,n|nose($1)),$0),adv|off($0)))
example_end

Sent: no you can 't take his nose off .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: how will he smell anything .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|smell(pro:sub|he,pro:indef|anything,$0),$1($0)),$0)
example_end

Sent: no you can 't take his nose off either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: you can 't take his nose off .
Sem: lambda $0_{ev}.not(mod|can(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),$0),$0)
example_end

Sent: can you take your nose off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|take(pro:per|you,det:poss|your($1,n|nose($1)),$0),adv|off($0)),$0))
example_end

Sent: did you take it off ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: no I don 't think those two men can .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(pro:dem|those($2,det:num|two(n|man-pl($2))),$1),$0),$0),$0),co|no($0))
example_end

Sent: doggie take nose off ?
Sem: lambda $0_{ev}.Q(and(v|take(lambda $1_{e}.n|dog-dim($1),lambda $2_{e}.n|nose($2),$0),adv|off($0)))
example_end

Sent: no you can 't take the nose off .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,det:art|the($1,n|nose($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: Adam who take nose off ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|take($1,lambda $2_{e}.n|nose($2),$0),adv|off($0))
example_end

Sent: take nose off Donald Duck ?
Sem: lambda $0_{ev}.Q(and(and(v|take(you,lambda $1_{e}.n|nose($1),$0),prep|off($0)),n:prop|duck_donald($0)))
example_end

Sent: take nose off what ?
Sem: lambda $0_{ev}.and(v|take(you,lambda $1_{e}.n|nose($1),$0),prep|off($0))
example_end

Sent: no you can 't take the nose off the bird either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|take(pro:per|you,det:art|the($1,n|nose($1)),$0),prep|off(det:art|the($2,n|bird($2)),$0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: does the bird have a nose ?
Sem: lambda $0_{ev}.Q(v|do-3s(v|have(det:art|the($1,n|bird($1)),det:art|a($2,n|nose($2)),$0),$0))
example_end

Sent: that is a man .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|man(pro:rel|that,$0))
example_end

Sent: that 's a piggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|pig-dim(pro:dem|that,$0))
example_end

Sent: that 's a little baby doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(and(n|dog-dim(pro:dem|that,$0),adj|little(pro:dem|that,$0)),n|baby(pro:dem|that,$0)))
example_end

Sent: the baby doggie is a puppy .
Sem: lambda $0_{ev}.det:art|a(det:art|the($1,and(n|baby($1),n|dog-dim($1))),n|puppy(det:art|the($1,and(n|baby($1),n|dog-dim($1))),$0))
example_end

Sent: it 's not the same dog as Pepper .
Sem: lambda $0_{ev}.not(det:art|the(pro:per|it,att(and(n|dog(pro:per|it,$0),adj|same(pro:per|it,$0)),conj|as(n:prop|pepper))),$0)
example_end

Sent: record going to work ?
Sem: lambda $0_{ev}.Q(part|go-presp(lambda $1_{e}.n|record($1),lambda $2_{ev}.v|work(lambda $3_{e}.n|record($3),$2),$0))
example_end

Sent: it hasn 't finished .
Sem: lambda $0_{ev}.not(aux|have(part|finish-pastp(pro:per|it,$0),$0),$0)
example_end

Sent: Adam sit down .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: where are you going to sit ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|sit(pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: it doesn 't have nose .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|it,lambda $1_{e}.n|nose($1),$0),$0),$0)
example_end

Sent: where is the nose on the car ?
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,att(n|nose($1),prep|on(det:art|the($2,n|car($2))))),$0),$3($0))
example_end

Sent: that 's a train .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|train(pro:dem|that,$0))
example_end

Sent: the car is on the train .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|car($1)),$0),prep|on(det:art|the($2,n|train($2)),$0))
example_end

Sent: car train .
Sem: lambda $0_{e}.and_comp(n|car($0),n|train($0))
example_end

Sent: do you have anything in your pocket ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,pro:indef|anything,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)),$0))
example_end

Sent: do you have a penny ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|penny($1)),$0),$0))
example_end

Sent: that 's the rug .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|rug(pro:dem|that,$0))
example_end

Sent: whose rug is it Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|rug(pro:per|it,$0))
example_end

Sent: careful don 't step on his foot .
Sem: lambda $0_{ev}.and(not(mod|do(v|step(you,det:poss|his($1,n|foot($1)),$0),$0),$0),adj|care-dn($0))
example_end

Sent: how does it work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|work(pro:per|it,$0),$1($0)),$0)
example_end

Sent: that 's part of the broom .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|broom($1))))
example_end

Sent: what is that part of ?
Sem: lambda $1_{e}.lambda $0_{ev}.att($1(pro:dem|that,$0),prep|of(lambda $2_{e}.n|part($2)))
example_end

Sent: why don 't you put it in the trash ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|in(det:art|the($2,n|trash($2)),$0)),$0),$0)
example_end

Sent: what else is on there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s($1,$0),prep|on(adv|there($0)))
example_end

Sent: beans and what ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|bean-pl($1),pro:int|what,$0))
example_end

Sent: those aren 't beans they 're peas .
Sem: lambda $0_{ev}.not(and(n|bean-pl(pro:dem|those,$0),n|pea-pl(pro:sub|they,$0)),$0)
example_end

Sent: may I see them ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,pro:obj|them,$0),$0))
example_end

Sent: what did Humpty_Dumpty do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(n:prop|humpty_dumpty,$1,$0),$0)
example_end

Sent: he sat on the wall .
Sem: lambda $0_{ev}.and(v|sit-past(pro:sub|he,$0),prep|on(det:art|the($1,n|wall($1)),$0))
example_end

Sent: Ricky will fix that ?
Sem: lambda $0_{ev}.Q(mod|will(v|fix(n:prop|ricky,pro:dem|that,$0),$0))
example_end

Sent: oh Lilly will fix it .
Sem: lambda $0_{ev}.and(mod|will(v|fix(n:prop|lilly,pro:per|it,$0),$0),co|oh($0))
example_end

Sent: oh Jesus loves me ?
Sem: lambda $0_{ev}.Q(and(v|love-3s(n:prop|jesus,pro:obj|me,$0),co|oh($0)))
example_end

Sent: at church .
Sem: prep|at(lambda $0_{e}.n|church($0))
example_end

Sent: Jesus love me .
Sem: lambda $0_{ev}.v|love(n:prop|jesus,pro:obj|me,$0)
example_end

Sent: you want to go to church ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),prep|to(lambda $2_{e}.n|church($2),$1)),$0))
example_end

Sent: you don 't go to church today .
Sem: lambda $0_{ev}.not(mod|do(and(v|go(pro:per|you,lambda $1_{e}.n|church($1),$0),adv:tem|today($0)),$0),$0)
example_end

Sent: Adam 's driving ?
Sem: lambda $0_{ev}.Q(aux|~be(part|drive-presp(n:prop|adam,$0),$0))
example_end

Sent: where did Daddy go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|daddy,$0),$1($0)),$0)
example_end

Sent: careful Adam !
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: yes that is Daddy .
Sem: lambda $0_{ev}.and(n:prop|daddy(pro:rel|that,$0),co|yes($0))
example_end

Sent: may I see it ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: no leave that back there .
Sem: lambda $0_{ev}.and(and(n|leave(you,pro:rel|that,$0),adv|back(adv|there($0))),qn|no($0))
example_end

Sent: that 's Ursula 's tape recorder .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)))
example_end

Sent: Mommy is Ursula 's Daddy ?
Sem: lambda $0_{ev}.Q(n:prop|ursula's'(n:prop|mommy,n:prop|daddy(n:prop|mommy,$0)))
example_end

Sent: what does Daddy do at school ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|do(n:prop|daddy,$1,$0),prep|at(lambda $2_{e}.n|school($2),$0)),$0)
example_end

Sent: is the busy bulldozer at school ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),prep|at(lambda $2_{e}.n|school($2),$0)))
example_end

Sent: he can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(pro:sub|he,$0),$0),$0)
example_end

Sent: no he can 't march .
Sem: lambda $0_{ev}.and(not(mod|can(v|march(pro:sub|he,$0),$0),$0),co|no($0))
example_end

Sent: yes Mr Green_jeans can march .
Sem: lambda $0_{ev}.and(mod|can(v|march(n:prop|green_jeans_mr,$0),$0),co|yes($0))
example_end

Sent: Bambi can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(n:prop|bambi,$0),$0),$0)
example_end

Sent: oh yes the bear can march .
Sem: lambda $0_{ev}.and(mod|can(v|march(det:art|the($1,n|bear($1)),$0),$0),co|yes_oh($0))
example_end

Sent: where 's your bumble bee ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|bee_bumble($1)),$0),$2($0))
example_end

Sent: get the bumble bee alright .
Sem: lambda $0_{ev}.and(v|get(you,det:art|the($1,n|bee_bumble($1)),$0),adj|alright($0))
example_end

Sent: do you think he can drive with that there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|can(and(v|drive(pro:sub|he,$1),adv|there(prep|with(det:dem|that,$1))),$1),$0),$0))
example_end

Sent: that 's your name .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|name(pro:dem|that,$0))
example_end

Sent: you can take it off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: I doubt it .
Sem: lambda $0_{ev}.v|doubt(pro:sub|i,pro:per|it,$0)
example_end

Sent: put him to work ?
Sem: lambda $0_{ev}.Q(v|put-zero(you,lambda $1_{ev}.v|work(pro:obj|him,$1),$0))
example_end

Sent: oh put him on the rug .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|him,$0),prep|on(det:art|the($1,n|rug($1)),$0)),co|oh($0))
example_end

Sent: that 's Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:dem|that,$0))
example_end

Sent: do you see him ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,pro:obj|him,$0),$0))
example_end

Sent: do you see Ursula too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|see(pro:per|you,n:prop|ursula,$0),post|too($0)),$0))
example_end

Sent: who else do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: do you see your truck too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|see(pro:per|you,det:poss|your($1,n|truck($1)),$0),adv|too($0)),$0))
example_end

Sent: you don 't mean ball .
Sem: lambda $0_{ev}.not(mod|do(adj|mean(pro:per|you,lambda $1_{e}.n|ball($1),$0),$0),$0)
example_end

Sent: that 's a bat .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|bat(pro:dem|that,$0))
example_end

Sent: where 's the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: careful don 't spill it .
Sem: lambda $0_{ev}.and(not(mod|do(v|spill(you,pro:per|it,$0),$0),$0),co|careful($0))
example_end

Sent: don 't spill the water on the rug .
Sem: lambda $0_{ev}.not(mod|do(and(v|spill(you,det:art|the($1,n|water($1)),$0),prep|on(det:art|the($2,n|rug($2)),$0)),$0),$0)
example_end

Sent: he doesn 't want any water I don 't think .
Sem: lambda $0_{ev}.not(and(mod|do(v|want(pro:sub|he,qn|any($1,n|water($1)),$0),$0),not(mod|do(v|think(pro:sub|i,$0),$0),$0)),$0)
example_end

Sent: ask her if she 'd like some .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|she,qn|some,$0),$0),v|ask(you,pro:obj|her,$0))
example_end

Sent: ask me if I 'd like some .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|i,qn|some,$0),$0),v|ask(you,pro:obj|me,$0))
example_end

Sent: ask Mr Cromer if he 'd like some water .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|he,qn|some($1,n|water($1)),$0),$0),v|ask(you,n:prop|cromer_mr,$0))
example_end

Sent: the suitcase wants water .
Sem: lambda $0_{ev}.v|want-3s(det:art|the($1,n|suitcase($1)),lambda $2_{e}.n|water($2),$0)
example_end

Sent: that 's not your tummy .
Sem: lambda $0_{ev}.not(det:poss|your(pro:dem|that,n|tummy(pro:dem|that,$0)),$0)
example_end

Sent: how many tummies do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|tummy-pl($1)),$0),$0)
example_end

Sent: oh you 're wiping it off ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|wipe-presp(pro:per|you,pro:per|it,$0),adv|off($0)),$0),co|oh($0)))
example_end

Sent: are you the driver .
Sem: lambda $0_{ev}.det:art|the(pro:per|you,n|drive-dv(pro:per|you,$0))
example_end

Sent: how does it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: Adam go to work ?
Sem: lambda $0_{ev}.Q(and(v|go(n:prop|adam,$0),prep|to(lambda $1_{e}.n|work($1),$0)))
example_end

Sent: where does Adam work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(n|work(n:prop|adam,$0),$1($0)),$0)
example_end

Sent: oh Adam 's driving .
Sem: lambda $0_{ev}.and(aux|~be(part|drive-presp(n:prop|adam,$0),$0),co|oh($0))
example_end

Sent: who is driving ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(part|drive-presp($1,$0),$0)
example_end

Sent: Robbie 's driving too ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|drive-presp(n:prop|robbie,$0),post|too($0)),$0))
example_end

Sent: what kind of noise is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|noise($2))))
example_end

Sent: what kind of truck is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|truck($2))))
example_end

Sent: Hobo 's truck .
Sem: n:prop|hobo's($0,n|truck($0))
example_end

Sent: did you find it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: throw to Daddy ?
Sem: lambda $0_{ev}.Q(and(v|throw(you,$0),prep|to(n:prop|daddy,$0)))
example_end

Sent: Doctor Dan at the circus .
Sem: att(n:prop|dan_doctor,prep|at(det:art|the($0,n|circus($0))))
example_end

Sent: that 's a lion tamer .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|lion(pro:dem|that,$0),adj|tame-cp(pro:dem|that,$0)))
example_end

Sent: the lady of the elephant .
Sem: det:art|the($0,att(n|lady($0),prep|of(det:art|the($1,n|elephant($1)))))
example_end

Sent: that 's the doggie .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|dog-dim(pro:dem|that,$0))
example_end

Sent: yes tattooed man .
Sem: lambda $0_{ev}.and(and(part|tattoo-pastp($0),n|man($0)),co|yes($0))
example_end

Sent: they 're all falling down .
Sem: lambda $0_{ev}.aux|~be(and(and(part|fall-presp(pro:sub|they,$0),post|all($0)),adv|down($0)),$0)
example_end

Sent: see the bird gets away .
Sem: lambda $0_{ev}.and(v|get-3s_away(det:art|the($1,n|bird($1)),$0),v|see(you,$0))
example_end

Sent: first he does what ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|do-3s(pro:sub|he,$1,$0),adv|first($0))
example_end

Sent: no the doggie didn 't bite him .
Sem: lambda $0_{ev}.and(not(mod|do(v|bite(det:art|the($1,n|dog-dim($1)),pro:obj|him,$0),$0),$0),qn|no($0))
example_end

Sent: Adam doesn 't have cowboy boots like that .
Sem: lambda $0_{ev}.not(mod|do(v|have(n:prop|adam,lambda $1_{e}.att(and_comp(n|cow+boy($1),n|boot-pl($1)),prep|like(pro:dem|that)),$0),$0),$0)
example_end

Sent: do you recognize any of these pictures ?
Sem: lambda $0_{ev}.Q(mod|do(v|recognize(pro:per|you,pro:dem|these($1,n|picture-pl($1)),$0),$0))
example_end

Sent: yeah they all fall down .
Sem: lambda $0_{ev}.and(and(and(v|fall(pro:sub|they,$0),post|all($0)),adv|down($0)),co|yeah($0))
example_end

Sent: how did he get tattooed ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|get(mod|do-past(and(part|tattoo-pastp(pro:sub|he,$0),$1($0)),$0),$0)
example_end

Sent: who fell down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|fall-past($1,$0),adv|down($0))
example_end

Sent: what happened to your head ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|head($2)),$0))
example_end

Sent: what fell down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|fall-past($1,$0),adv|down($0))
example_end

Sent: when did Adam fall down ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(and(and(n|fall(n:prop|adam,$0),$1($0)),adv|down($0)),$0)
example_end

Sent: you beep beep Adam .
Sem: lambda $0_{ev}.v|beep_beep(pro:per|you,$0)
example_end

Sent: you move some of your toys ?
Sem: lambda $0_{ev}.Q(v|move(pro:per|you,att(qn|some,prep|of(det:poss|your($1,n|toy-pl($1)))),$0))
example_end

Sent: yes move your bike .
Sem: lambda $0_{ev}.and(v|move(you,det:poss|your($1,n|bike($1)),$0),co|yes($0))
example_end

Sent: where 's your racket ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|racket($1)),$0),$2($0))
example_end

Sent: you 're welcome .
Sem: lambda $0_{ev}.adj|welcome(pro:per|you,$0)
example_end

Sent: what shall I write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|write(pro:sub|i,$1,$0),$0)
example_end

Sent: what will you write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(v|write(pro:per|you,$1,$0),$0)
example_end

Sent: that 's for you .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,$0),conj|for(pro:per|you,$0))
example_end

Sent: whose book is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|book(pro:dem|that,$0))
example_end

Sent: playing the piano .
Sem: lambda $0_{ev}.part|play-presp(you,det:art|the($1,n|piano($1)),$0)
example_end

Sent: they do look like stars .
Sem: lambda $0_{ev}.mod|do(and(cop|look(pro:sub|they,$0),conj|like(lambda $1_{e}.n|star-pl($1),$0)),$0)
example_end

Sent: what 's he doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: no that 's no paper .
Sem: lambda $0_{ev}.and(not(n|paper(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: Adam didn 't write that .
Sem: lambda $0_{ev}.not(mod|do(v|write(you,pro:dem|that,$0),$0),$0)
example_end

Sent: Mr Walter did .
Sem: lambda $0_{ev}.v|do-past(n:prop|walter_mr,$0)
example_end

Sent: which one is Mr Walter ?
Sem: lambda $1_{e}.lambda $0_{ev}.n:prop|walter_mr($1($2,pro:indef|one($2)),$0)
example_end

Sent: did you read that book last time Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|read-zero(pro:per|you,pro:dem|that($1,n|book($1)),$0),and(adj|last($0),n|time($0))),$0))
example_end

Sent: what is he doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|do-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: he 's conducting .
Sem: lambda $0_{ev}.aux|~be(part|conduct-presp(pro:sub|he,$0),$0)
example_end

Sent: he 's in there .
Sem: lambda $0_{ev}.and(cop|~be(pro:sub|he,$0),prep|in(adv|there($0)))
example_end

Sent: you going to give back to Ursula now .
Sem: lambda $0_{ev}.part|go-presp(pro:per|you,lambda $1_{ev}.and(v|give(pro:per|you,$1),adv|now(adv|back(prep|to(n:prop|ursula,$1)))),$0)
example_end

Sent: put it back in the briefcase .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|back(prep|in(det:art|the($1,n|briefcase($1)),$0)))
example_end

Sent: have you met Mr Walter ?
Sem: lambda $0_{ev}.Q(aux|have(v|meet-past(pro:per|you,n:prop|walter_mr,$0),$0))
example_end

Sent: have you read this book before ?
Sem: lambda $0_{ev}.Q(aux|have(and(v|read-zero(pro:per|you,pro:dem|this($1,n|book($1)),$0),adv|before($0)),$0))
example_end

Sent: you have ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,$0))
example_end

Sent: Adam 's not funny .
Sem: lambda $0_{ev}.not(adj|fun-dn(n:prop|adam,$0),$0)
example_end

Sent: Daddy Cromer ?
Sem: lambda $0_{e}.Q(n:prop|cromer_daddy($0))
example_end

Sent: no that 's not Cromer 's Daddy .
Sem: lambda $0_{ev}.and(not(n:prop|cromer's'(pro:dem|that,n:prop|daddy(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: Adam Cromer ?
Sem: lambda $0_{e}.Q(n:prop|cromer_adam($0))
example_end

Sent: whose coat is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|coat(pro:dem|that,$0))
example_end

Sent: what are you going to do with the pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do($2,$1),prep|with(det:art|the($3,n|pencil($3)),$1)),$0),$0)
example_end

Sent: how do you know tha  your pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|know(pro:per|you,lambda $1_{ev}.det:poss|your(pro:rel|that,n|pencil(pro:rel|that,$1)),$0),$2($0)),$0)
example_end

Sent: yes it 's turned on .
Sem: lambda $0_{ev}.and(cop|~be(and(v|turn-past(pro:per|it,$0),adv|on($0)),$0),co|yes($0))
example_end

Sent: are you lying on the dog .
Sem: lambda $0_{ev}.cop|be-pres(part|lie-presp(pro:per|you,det:art|the($1,n|dog($1)),$0),$0)
example_end

Sent: what are you talking about ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|talk-presp(pro:per|you,$1,$0),$0)
example_end

Sent: you tell me what is that ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: Adam 's pencil ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|pencil($1),$0))
example_end

Sent: is that a pencil ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pencil(pro:rel|that,$0)))
example_end

Sent: you want some paper ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,qn|some($1,n|paper($1)),$0))
example_end

Sent: where did you get that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: Adam are you writing .
Sem: lambda $0_{ev}.aux|be-pres(part|write-presp(pro:per|you,$0),$0)
example_end

Sent: do you know how old you are ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.adv:int|how(adj|old(pro:per|you,$1)),$0),$0))
example_end

Sent: two boy ?
Sem: lambda $0_{e}.Q(det:num|two(n|boy($0)))
example_end

Sent: see the racket ?
Sem: lambda $0_{ev}.Q(v|see(you,det:art|the($1,n|racket($1)),$0))
example_end

Sent: oh you see that ?
Sem: lambda $0_{ev}.Q(and(v|see(pro:per|you,pro:dem|that,$0),co|oh($0)))
example_end

Sent: are those pillows .
Sem: lambda $0_{ev}.n|pillow-pl(pro:dem|those,$0)
example_end

Sent: Mommy 's pillows .
Sem: n:prop|mommy's($0,n|pillow-pl($0))
example_end

Sent: well I don 't want my pillows on the floor .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|want(pro:sub|i,det:poss|my($1,n|pillow-pl($1)),$0),prep|on(det:art|the($2,n|floor($2)),$0)),$0),$0),co|well($0))
example_end

Sent: oh they 're Adam 's pillows .
Sem: lambda $0_{ev}.and(n:prop|adam's'(pro:sub|they,n|pillow-pl(pro:sub|they,$0)),co|oh($0))
example_end

Sent: I don 't think Daddy wants his pillows on the floor either .
Sem: lambda $0_{ev}.not(mod|do(and(v|think(pro:sub|i,lambda $1_{ev}.and(v|want-3s(n:prop|daddy,det:poss|his($2,n|pillow-pl($2)),$1),prep|on(det:art|the($3,n|floor($3)),$1)),$0),adv|either($0)),$0),$0)
example_end

Sent: put together again .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,$0),adv|together($0)),adv|again($0))
example_end

Sent: are you fixing the dog .
Sem: lambda $0_{ev}.cop|be-pres(part|fix-presp(pro:per|you,det:art|the($1,n|dog($1)),$0),$0)
example_end

Sent: you want me to move my case ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|move(pro:obj|me,det:poss|my($2,n|case($2)),$1),$0))
example_end

Sent: did you ask him to move it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|ask(pro:per|you,lambda $1_{ev}.v|move(pro:obj|him,pro:per|it,$1),$0),$0))
example_end

Sent: are you pulling your dog .
Sem: lambda $0_{ev}.cop|be-pres(part|pull-presp(pro:per|you,det:poss|your($1,n|dog($1)),$0),$0)
example_end

Sent: is the doggie broken .
Sem: lambda $0_{ev}.part|break-pastp(det:art|the($1,n|dog-dim($1)),$0)
example_end

Sent: that 's no lion .
Sem: lambda $0_{ev}.not(n|lion(pro:dem|that,$0),$0)
example_end

Sent: well that 's the right way .
Sem: lambda $0_{ev}.and(det:art|the(pro:dem|that,and(n|way(pro:dem|that,$0),adj|right(pro:dem|that,$0))),co|well($0))
example_end

Sent: you can 't do that honey .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: are you writing a letter .
Sem: lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,det:art|a($1,n|letter($1)),$0),$0)
example_end

Sent: what are you Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: Adam did you pick up the pillows ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|pick_up(pro:per|you,det:art|the($1,n|pillow-pl($1)),$0),$0))
example_end

Sent: does the doggie like the pillows .
Sem: lambda $0_{ev}.mod|do-3s(prep|like(det:art|the($1,n|dog-dim($1)),det:art|the($2,n|pillow-pl($2)),$0),$0)
example_end

Sent: is that a racket .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|racket(pro:rel|that,$0))
example_end

Sent: what 's so funny ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|so(adj|fun-dn($1,$0))
example_end

Sent: did you think that was funny ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|think(pro:per|you,lambda $1_{ev}.adj|fun-dn(pro:rel|that,$1),$0),$0))
example_end

Sent: don 't ride the roadgrader up there .
Sem: lambda $0_{ev}.not(mod|do(and(v|ride(you,det:art|the($1,n|roadgrader($1)),$0),adv|up(adv|there($0))),$0),$0)
example_end

Sent: that 's right ?
Sem: lambda $0_{ev}.Q(n|right(pro:dem|that,$0))
example_end

Sent: it 's not a big hill .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,and(n|hill(pro:per|it,$0),adj|big(pro:per|it,$0))),$0)
example_end

Sent: where is your pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|pencil($1)),$0),$2($0))
example_end

Sent: I have mine .
Sem: lambda $0_{ev}.v|have(pro:sub|i,pro:poss|mine,$0)
example_end

Sent: can you read what 's on there Adam ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|read-zero($1,$0,$2)
example_end

Sent: do you want a piece ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,n|piece($1)),$0),$0))
example_end

Sent: are you writing your name .
Sem: lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,det:poss|your($1,n|name($1)),$0),$0)
example_end

Sent: doctor Dan ?
Sem: lambda $0_{e}.Q(n:prop|dan_doctor($0))
example_end

Sent: oh wash hands ?
Sem: lambda $0_{ev}.Q(and(n|wash(you,lambda $1_{e}.n|hand-pl($1),$0),co|oh($0)))
example_end

Sent: is that a boot .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|boot(pro:rel|that,$0))
example_end

Sent: why don 't you show it to Ursula ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|show(pro:per|you,pro:per|it,$0),$1($0)),prep|to(n:prop|ursula,$0)),$0),$0)
example_end

Sent: yes Donald_Duck .
Sem: lambda $0_{ev}.and(n:prop|donald_duck($0),co|yes($0))
example_end

Sent: is that a ladder .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|ladder(pro:rel|that,$0))
example_end

Sent: who is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: show it to Ursula .
Sem: lambda $0_{ev}.and(v|show(you,pro:per|it,$0),prep|to(n:prop|ursula,$0))
example_end

Sent: is that Bambi .
Sem: lambda $0_{ev}.n:prop|bambi(pro:rel|that,$0)
example_end

Sent: what did you say then Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|say(pro:per|you,$1,$0),adv:tem|then($0)),$0)
example_end

Sent: why is he like Perro ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(v|like(n:prop|perro,pro:sub|he,$0))
example_end

Sent: is there a bunny there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|bunny+rabbit($1)),$0),adv|there($0)))
example_end

Sent: wet your pants ?
Sem: lambda $0_{ev}.Q(part|wet-pastp(you,det:poss|your($1,n:pt|pants($1)),$0))
example_end

Sent: can you say you 're sorry ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,lambda $1_{ev}.adj|sorry(pro:per|you,$1),$0),$0))
example_end

Sent: where 's the kitchen ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|kitchen($1)),$0),$2($0))
example_end

Sent: is that the kitchen ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|kitchen(pro:rel|that,$0)))
example_end

Sent: Adam is that a ball .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|ball(pro:rel|that,$0))
example_end

Sent: oh take my hand out ?
Sem: lambda $0_{ev}.Q(and(and(v|take(you,co|my($1,n|hand($1)),$0),adv|out($0)),co|oh($0)))
example_end

Sent: are you as tall as Mommy ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|tall($0,$1)
example_end

Sent: get the hand out ?
Sem: lambda $0_{ev}.Q(and(v|get(you,det:art|the($1,v|hand($1)),$0),adv|out($0)))
example_end

Sent: that 's not Donald Duck .
Sem: lambda $0_{ev}.not(n:prop|duck_donald(pro:dem|that,$0),$0)
example_end

Sent: that 's an egg .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|egg(pro:dem|that,$0))
example_end

Sent: hello Chatter .
Sem: lambda $0_{ev}.and(n:prop|chatter($0),co|hello($0))
example_end

Sent: you 're eating Chatter 's what ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|eat-presp(pro:per|you,$1,$0),$0)
example_end

Sent: what did you bite ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|bite(pro:per|you,$1,$0),$0)
example_end

Sent: wipe it off .
Sem: lambda $0_{ev}.and(v|wipe(you,pro:per|it,$0),adv|off($0))
example_end

Sent: did you like it ?
Sem: lambda $0_{ev}.Q(v|do-past(prep|like(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: was it good ?
Sem: lambda $0_{ev}.Q(adj|good(pro:per|it,$0))
example_end

Sent: it doesn 't go in your mouth does it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|go(pro:per|it,det:poss|your($1,n|mouth($1)),$0),$0),$0),mod|do-3s(pro:per|it,$0)))
example_end

Sent: in whose mouth does it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|go(pro:per|it,$1($2,v|mouth($2)),$0),$0)
example_end

Sent: no not Mommy 's mouth .
Sem: lambda $0_{ev}.and(not(n:prop|mommy's($1,n|mouth($1)),$0),co|no($0))
example_end

Sent: not Adam 's mouth .
Sem: not(n:prop|adam's($0,n|mouth($0)))
example_end

Sent: bite whose mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|bite(you,$1($2,n|mouth($2)),$0)
example_end

Sent: does the tape recorder have a mouth ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(det:art|the($1,and_comp(n|tape($1),n|record-dv($1))),det:art|a($2,n|mouth($2)),$0),$0))
example_end

Sent: what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: is that hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:dem|that,$0))
example_end

Sent: Daddy 's desk ?
Sem: lambda $0_{e}.Q(n:prop|daddy's($1,n|desk($1),$0))
example_end

Sent: whose tummy hurts ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|hurt-3s($1($2,n|tummy($2)),$0)
example_end

Sent: oh your tummy hurts .
Sem: lambda $0_{ev}.and(v|hurt-3s(det:poss|your($1,n|tummy($1)),$0),co|oh($0))
example_end

Sent: if you put the tractor on your book won 't you tear it up ?
Sem: lambda $0_{ev}.Q(not(mod|will(conj|if(and(v|put-zero(pro:per|you,det:art|the($1,n|tractor($1)),$0),prep|on(det:poss|your($2,n|book($2)),$0)),and(v|tear(pro:per|you,pro:per|it,$0),adv|up($0))),$0),$0))
example_end

Sent: no you won 't tear the book up ?
Sem: lambda $0_{ev}.Q(and(not(mod|will(and(v|tear(pro:per|you,det:art|the($1,n|book($1)),$0),adv|up($0)),$0),$0),co|no($0)))
example_end

Sent: is that a green car .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,and(n|car(pro:rel|that,$0),n|green(pro:rel|that,$0)))
example_end

Sent: that 's a block .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|block(pro:dem|that,$0))
example_end

Sent: what color is the block ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|block($2)),n|color(det:art|the($2,n|block($2)),$0))
example_end

Sent: what color is the hammer ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|hammer($2)),n|color(det:art|the($2,n|hammer($2)),$0))
example_end

Sent: Bambi 's green .
Sem: lambda $0_{ev}.n|green(n:prop|bambi,$0)
example_end

Sent: what 's Bambi doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(n:prop|bambi,$1,$0),$0)
example_end

Sent: poor Bambi .
Sem: att(n:prop|bambi,lambda $0_{e}.adj|poor($0))
example_end

Sent: did you hurt your head when you feel ?
Sem: lambda $0_{ev}.Q(conj|when(v|feel(pro:per|you,$0),v|do-past(v|hurt-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),$0)))
example_end

Sent: did he hurt his head ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:sub|he,det:poss|his($1,n|head($1)),$0),$0))
example_end

Sent: is it there .
Sem: lambda $0_{ev}.and(aux|be-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: you get it .
Sem: lambda $0_{ev}.v|get(pro:per|you,pro:per|it,$0)
example_end

Sent: did you throw the ball ?
Sem: lambda $0_{ev}.Q(v|do-past(v|throw(pro:per|you,det:art|the($1,n|ball($1)),$0),$0))
example_end

Sent: the light ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|light($1),$0))
example_end

Sent: are you hitting the ball .
Sem: lambda $0_{ev}.cop|be-pres(part|hit-presp(pro:per|you,det:art|the($1,n|ball($1)),$0),$0)
example_end

Sent: where did the glove go .
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,n|glove($1)),$0),$2($0)),$0)
example_end

Sent: how can you use the glove and the racket at the same time ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(and(v|use(pro:per|you,det:art|the($1,n|glove($1)),$0),$2($0)),prep|at(det:art|the($3,and(adj|same($3),n|time($3))),$0)),$0)
example_end

Sent: is that a bat .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|bat(pro:rel|that,$0))
example_end

Sent: oh you lost your shoe ?
Sem: lambda $0_{ev}.Q(and(v|lose-past(pro:per|you,det:poss|your($1,n|shoe($1)),$0),co|oh($0)))
example_end

Sent: what did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|hit-zero(pro:per|you,$1,$0),$0)
example_end

Sent: you knocked Bambi off ?
Sem: lambda $0_{ev}.Q(and(v|knock-past(pro:per|you,n:prop|bambi,$0),adv|off($0)))
example_end

Sent: call Daddy .
Sem: lambda $0_{ev}.n|call(you,n:prop|daddy,$0)
example_end

Sent: Cromer 's at your home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|cromer,$0),prep|at(det:poss|your($1,n|home($1)),$0))
example_end

Sent: Joshua 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|joshua,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: Kenny 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|kenny,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: yes man driving tractor over there .
Sem: lambda $0_{ev}.and(and(part|drive-presp(lambda $1_{e}.n|man($1),lambda $2_{e}.n|tractor($2),$0),prep|over(adv|there($0))),co|yes($0))
example_end

Sent: oh yes .
Sem: lambda $0_{ev}.and(co|yes($0),co|oh($0))
example_end

Sent: Ricky 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|ricky,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: Susy is at her home .
Sem: lambda $0_{ev}.prep|at(det:poss|her($1,n|home($1)),n:prop|susy,$0)
example_end

Sent: what 's in his mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|his($2,n|mouth($2)),$0))
example_end

Sent: yes that 's an eye .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|eye(pro:dem|that,$0)),co|yes($0))
example_end

Sent: how many eyes ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|eye-pl($0))
example_end

Sent: two ears .
Sem: lambda $0_{e}.det:num|two(n|ear-pl($0))
example_end

Sent: two eyes .
Sem: lambda $0_{e}.det:num|two(n|eye-pl($0))
example_end

Sent: yes that is a bell .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,n|bell(pro:rel|that,$0)),co|yes($0))
example_end

Sent: Ursula 's at your home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|ursula,$0),prep|at(det:poss|your($1,n|home($1)),$0))
example_end

Sent: tape recorder 's at your home .
Sem: lambda $0_{ev}.and(poss|~s(lambda $1_{e}.and_comp(n|tape($1),n|record($1)),$0),prep|at(det:poss|your($2,n|home($2)),$0))
example_end

Sent: don 't you think you should pick it up and put it in the basket ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|should(and(coord|and(and(v|put-zero(pro:per|you,pro:per|it,$1),prep|in(det:art|the($2,n|basket($2)),$1)),v|pick(pro:per|you,pro:per|it,$1)),adv|up($1)),$1),$0),$0),$0))
example_end

Sent: make Cromer do it !
Sem: lambda $0_{ev}.v|make(you,lambda $1_{ev}.v|do(n:prop|cromer,pro:per|it,$1),$0)
example_end

Sent: you pick doc Dan up yourself .
Sem: lambda $0_{ev}.and(and(v|pick(pro:per|you,n:prop|dan_doctor,$0),adv|up($0)),pro:refl|yourself($0))
example_end

Sent: do you like this book .
Sem: lambda $0_{ev}.mod|do(v|like(pro:per|you,pro:dem|this($1,n|book($1)),$0),$0)
example_end

Sent: why don 't you show him the tattooed man ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|show(pro:per|you,det:art|the($1,and(part|tattoo-pastp($1),n|man($1))),pro:obj|him,$0),$2($0)),$0),$0)
example_end

Sent: is this the tattooed man .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and(n|man(pro:dem|this,$0),part|tattoo-pastp(pro:dem|this,$0)))
example_end

Sent: do you like the tattooed man .
Sem: lambda $0_{ev}.mod|do(conj|like(pro:per|you,det:art|the($1,and(part|tattoo-pastp($1),n|man($1))),$0),$0)
example_end

Sent: is that like your doggie .
Sem: lambda $0_{ev}.prep|like(det:poss|your($1,n|dog-dim($1)),pro:dem|that,$0)
example_end

Sent: part of an apple ?
Sem: lambda $0_{e}.Q(att(n|part($0),prep|of(det:art|a($1,n|apple($1)))))
example_end

Sent: I think maybe it came from your basket .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(and(v|come-past(pro:per|it,$1),adv|maybe($1)),prep|from(det:poss|your($2,n|basket($2)),$1)),$0)
example_end

Sent: go where it belongs ?
Sem: lambda $0_{ev}.Q(v|go(you,lambda $1_{ev}.and(v|belong-3s(pro:per|it,$1),adv:int|where($1)),$0))
example_end

Sent: I don 't think you can put it back .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|put-zero(pro:per|you,pro:per|it,$1),adv|back($1)),$1),$0),$0),$0)
example_end

Sent: no that 's not part of an apple .
Sem: lambda $0_{ev}.and(not(att(n|part(pro:dem|that,$0),prep|of(det:art|a($1,n|apple($1)))),$0),co|no($0))
example_end

Sent: it 's not part of the apple .
Sem: lambda $0_{ev}.not(att(n|part(pro:per|it,$0),prep|of(det:art|the($1,n|apple($1)))),$0)
example_end

Sent: careful Adam with that pencil .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: what happened to Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|adam,$0))
example_end

Sent: did somebody spank Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|spank(pro:indef|somebody,n:prop|adam,$0),$0))
example_end

Sent: change your diaper ?
Sem: lambda $0_{ev}.Q(v|change(you,det:poss|your($1,n|diaper($1)),$0))
example_end

Sent: that 's your back .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|back(pro:dem|that,$0))
example_end

Sent: you don 't have two tummies .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,lambda $1_{e}.det:num|two(n|tummy-pl($1)),$0),$0),$0)
example_end

Sent: your tummy 's in front .
Sem: lambda $0_{ev}.and(poss|~s(det:poss|your($1,n|tummy($1)),$0),n|front($0))
example_end

Sent: whose shoes did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|hit-zero(pro:per|you,$1($2,n|shoe-pl($2)),$0),$0)
example_end

Sent: shall I help you ?
Sem: lambda $0_{ev}.Q(mod|shall(v|help(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: Jack and Jill .
Sem: coord|and(n:prop|jack,n:prop|jill)
example_end

Sent: you want to take it over to Ursula ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,pro:per|it,$1),adv|over(prep|to(n:prop|ursula,$1))),$0))
example_end

Sent: oh thank_you .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|oh($0))
example_end

Sent: what did you say Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|say(pro:per|you,$1,$0),$0)
example_end

Sent: that 's tape .
Sem: lambda $0_{ev}.n|tape(pro:dem|that,$0)
example_end

Sent: no that 's tape .
Sem: lambda $0_{ev}.and(n|tape(pro:dem|that,$0),co|no($0))
example_end

Sent: that 's a screw .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|screw(pro:dem|that,$0))
example_end

Sent: Ursula 's all set ?
Sem: lambda $0_{ev}.Q(aux|~be(and(n|set(n:prop|ursula,$0),adv|all($0)),$0))
example_end

Sent: we leave this down here .
Sem: lambda $0_{ev}.and(v|leave(pro:sub|we,pro:dem|this,$0),adv|down(adv|here($0)))
example_end

Sent: so it will be out_of the way .
Sem: lambda $0_{ev}.mod|will(prep|out_of(det:art|the($1,n|way($1)),pro:per|it,$0),$0)
example_end

Sent: that 's not a screw .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|screw(pro:dem|that,$0)),$0)
example_end

Sent: well that 's a screw .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|screw(pro:dem|that,$0)),co|well($0))
example_end

Sent: get back ?
Sem: lambda $0_{ev}.Q(and(v|get(you,$0),adv|back($0)))
example_end

Sent: if it 's hot won 't it burn you ?
Sem: lambda $0_{ev}.Q(not(mod|will(conj|if(adj|hot(pro:per|it,$0),v|burn(pro:per|it,pro:per|you,$0)),$0),$0))
example_end

Sent: find a penny ?
Sem: lambda $0_{ev}.Q(v|find(you,det:art|a($1,n|penny($1)),$0))
example_end

Sent: where did you put it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: put it in your pocket ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)))
example_end

Sent: do you want a pencil ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: what are you going to write ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|write_to($2,$1),$0),$0)
example_end

Sent: you 're going to write Cromer ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|write(pro:per|you,$1),$0),$0),n:prop|cromer))
example_end

Sent: don 't knock it over .
Sem: lambda $0_{ev}.not(mod|do(and(v|knock(you,pro:per|it,$0),adv|over($0)),$0),$0)
example_end

Sent: good morning .
Sem: lambda $0_{e}.and(adj|good($0),n|morning($0))
example_end

Sent: hurt knee .
Sem: lambda $0_{ev}.v|hurt-zero(you,lambda $1_{e}.n|knee($1),$0)
example_end

Sent: you didn 't hurt yourself with the screwdriver .
Sem: lambda $0_{ev}.not(mod|do(and(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),prep|with(det:art|the($1,n|screw+driver($1)),$0)),$0),$0)
example_end

Sent: you can fix the screws in your firetruck .
Sem: lambda $0_{ev}.mod|can(v|fix(pro:per|you,det:art|the($1,att(n|screw-pl($1),prep|in(det:poss|your($2,n|fire+truck($2))))),$0),$0)
example_end

Sent: put this one here .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:dem|this($1,pro:indef|one($1)),$0),adv|here($0))
example_end

Sent: what kind of truck is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|truck($2))))
example_end

Sent: truck broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(lambda $1_{e}.n|truck($1),$0))
example_end

Sent: you put the truck where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,det:art|the($1,n|truck($1)),$0),$2($0))
example_end

Sent: you 're a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|bulldoze-dv(pro:per|you,$0),adj|busy(pro:per|you,$0))))
example_end

Sent: oh it 's a truck ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|it,n|truck(pro:per|it,$0)),co|oh($0)))
example_end

Sent: red and yellow .
Sem: lambda $0_{e}.coord|and(adj|red($0),n|yellow($0))
example_end

Sent: which one is yellow ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|yellow($1($2,pro:indef|one($2)),$0)
example_end

Sent: Ursula 's right there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n:prop|ursula,$0),adv|right(adv|there($0))))
example_end

Sent: can you put it together again ?
Sem: lambda $0_{ev}.Q(mod|can(and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|together($0)),adv|again($0)),$0))
example_end

Sent: you put it together .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|together($0))
example_end

Sent: you turned it around properly and then you put them together .
Sem: lambda $0_{ev}.coord|and(and(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv:tem|then($0)),adv|together($0)),and(and(v|turn-past(pro:per|you,pro:per|it,$0),adv|around($0)),adv|proper-dadj($0)))
example_end

Sent: see the other one and put them together ?
Sem: lambda $0_{ev}.Q(coord|and(and(v|put-zero(you,pro:obj|them,$0),adv|together($0)),v|see(you,det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0)))
example_end

Sent: is it like this one ?
Sem: lambda $0_{ev}.Q(v|like(pro:dem|this($1,pro:indef|one($1)),pro:per|it,$0))
example_end

Sent: which one looks like that one ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|look-3s($1($2,pro:indef|one($2)),pro:dem|that($3,pro:indef|one($3)),$0)
example_end

Sent: what kind of horn is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|horn($2))))
example_end

Sent: what 's the matter with you ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1,att(n|matter($1,$0),prep|with(pro:per|you)))
example_end

Sent: where did Adam go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|adam,$0),$1($0)),$0)
example_end

Sent: well what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|well($0))
example_end

Sent: what does the baby have in his mouth ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|have(det:art|the($1,n|baby($1)),$2,$0),prep|in(det:poss|his($3,n|mouth($3)),$0)),$0)
example_end

Sent: whistle baby .
Sem: lambda $0_{e}.and_comp(n|whistle($0),n|baby($0))
example_end

Sent: mouth oh .
Sem: lambda $0_{ev}.and(meta|mouth($0),co|oh($0))
example_end

Sent: that 's Adam 's baby .
Sem: lambda $0_{ev}.n:prop|adam's'(pro:dem|that,n|baby(pro:dem|that,$0))
example_end

Sent: yes that 's water .
Sem: lambda $0_{ev}.and(n|water(pro:dem|that,$0),co|yes($0))
example_end

Sent: those are rocks .
Sem: lambda $0_{ev}.n|rock-pl(pro:dem|those,$0)
example_end

Sent: there may be fish in the water .
Sem: lambda $0_{ev}.mod|may(and(cop|be(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|water($2)),$0)),$0)
example_end

Sent: yes there may be some fish in the water .
Sem: lambda $0_{ev}.and(mod|may(and(cop|be(qn|some($1,n|fish($1)),$0),prep|in(det:art|the($2,n|water($2)),$0)),$0),co|yes($0))
example_end

Sent: that 's no tape recorder .
Sem: lambda $0_{ev}.not(and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)),$0)
example_end

Sent: those are records in a box .
Sem: lambda $0_{ev}.att(n|record-pl(pro:dem|those,$0),prep|in(det:art|a($1,n|box($1))))
example_end

Sent: how do you spell your name Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|spell(pro:per|you,det:poss|your($1,n|name($1)),$0),$2($0)),$0)
example_end

Sent: what does the label on Mr Cromer 's suitcase say ?
Sem: lambda $3_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|the($1,att(n|label($1),prep|on(n:prop|cromer_mr's($2,n|suitcase($2))))),$3,$0),$0)
example_end

Sent: that 's no horse .
Sem: lambda $0_{ev}.not(n|horse(pro:dem|that,$0),$0)
example_end

Sent: what about Cromer 's suitcase ?
Sem: att(pro:int|what,prep|about(n:prop|cromer's($0,n|suitcase($0))))
example_end

Sent: Adam break suitcase Cromer ?
Sem: lambda $0_{ev}.Q(v|break(n:prop|adam,n:prop|cromer's($1,n|suitcase($1)),$0))
example_end

Sent: no Adam shouldn 't break Cromer 's suitcase .
Sem: lambda $0_{ev}.and(not(mod|should(v|break(n:prop|adam,n:prop|cromer's($1,n|suitcase($1)),$0),$0),$0),co|no($0))
example_end

Sent: he 'd do without a suitcase .
Sem: lambda $0_{ev}.mod|~genmod(and(v|do(pro:sub|he,$0),prep|without(det:art|a($1,n|suitcase($1)),$0)),$0)
example_end

Sent: do with a suitcase ?
Sem: lambda $0_{ev}.Q(and(v|do(you,$0),prep|with(det:art|a($1,n|suitcase($1)),$0)))
example_end

Sent: Catherine take the suitcase ?
Sem: lambda $0_{ev}.Q(v|take(n:prop|catherine,det:art|the($1,n|suitcase($1)),$0))
example_end

Sent: raining outside .
Sem: lambda $0_{ev}.and(part|rain-presp(you,$0),adv|outside($0))
example_end

Sent: is it raining ?
Sem: lambda $0_{ev}.Q(aux|be-3s(part|rain-presp(you,$0),$0))
example_end

Sent: well is the sun shining ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(part|shine-presp(det:art|the($1,n|sun($1)),$0),$0),co|well($0)))
example_end

Sent: the sun 's not shining ?
Sem: lambda $0_{ev}.Q(not(aux|~be(part|shine-presp(det:art|the($1,n|sun($1)),$0),$0),$0))
example_end

Sent: is it cloudy ?
Sem: lambda $0_{ev}.Q(adj|cloud-dn($0))
example_end

Sent: Adam 's pieces ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|piece-pl($1),$0))
example_end

Sent: take a piece of candy .
Sem: lambda $0_{ev}.v|take(you,det:art|a($1,att(n|piece($1),prep|of(lambda $2_{e}.n|candy($2)))),$0)
example_end

Sent: write with pencil ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),prep|with(lambda $1_{e}.n|pencil($1),$0)))
example_end

Sent: put the radio in ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:art|the($1,n|radio($1)),$0),adv|in($0)))
example_end

Sent: you know Humpty_Dumpty .
Sem: lambda $0_{ev}.v|know(pro:per|you,n:prop|humpty_dumpty,$0)
example_end

Sent: do you think that radio will go in that box ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|will(v|go(pro:dem|that($2,n|radio($2)),pro:dem|that($3,n|box($3)),$1),$1),$0),$0))
example_end

Sent: it 's a windmill .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|windmill(pro:per|it,$0))
example_end

Sent: whose bike ?
Sem: lambda $0_{e}.$0($1,n|bike($1))
example_end

Sent: do you want to play Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|play(pro:per|you,$1),$0),$0))
example_end

Sent: what is that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:rel|that,$0)
example_end

Sent: you 're going to put all of your toys away .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,qn|all($3,n|toy-pl($3),$2)),$1),adv|away($1)),$0),$0)
example_end

Sent: you going to put your toys in there ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,n|toy-pl($2)),$1),prep|in(adv|there($1))),$0))
example_end

Sent: play toy ?
Sem: lambda $0_{e}.Q(and_comp(n|play($0),n|toy($0)))
example_end

Sent: what about your play toy ?
Sem: att(pro:int|what,adv|about(det:poss|your($0,and_comp(n|play($0),n|toy($0)))))
example_end

Sent: what happened to the play toy ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,and_comp(n|play($2),n|toy($2))),$0))
example_end

Sent: you dropped the play toy ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|the($1,and_comp(n|play($1),n|toy($1))),$0))
example_end

Sent: how many play toys do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and_comp(n|play($1),and($2(qn|many($1)),n|toy-pl($1))),$0),$0)
example_end

Sent: Adam fell down .
Sem: lambda $0_{ev}.and(v|fall-past(n:prop|adam,$0),adv|down($0))
example_end

Sent: oh you 're crawling on the radio ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|crawl-presp(pro:per|you,$0),prep|on(det:art|the($1,n|radio($1)),$0)),$0),co|oh($0)))
example_end

Sent: but I though you were crawling .
Sem: lambda $0_{ev}.adv|though(pro:sub|i,lambda $1_{ev}.aux|be-past(part|crawl-presp(pro:per|you,$1),$1),$0)
example_end

Sent: on your knees .
Sem: prep|on(det:poss|your($0,n|knee-pl($0)))
example_end

Sent: put shoe on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|shoe($1),$0),adv|on($0)))
example_end

Sent: where did your foot go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:poss|your($1,n|foot($1)),$0),$2($0)),$0)
example_end

Sent: is it in the shoe ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),prep|in(det:art|the($1,n|shoe($1)),$0)))
example_end

Sent: do you have play toys in the kitchen ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,lambda $1_{e}.and_comp(n|play($1),n|toy-pl($1)),$0),prep|in(det:art|the($2,n|kitchen($2)),$0)),$0))
example_end

Sent: what toy do you kick ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|kick(pro:per|you,$1($2,n|toy($2)),$0),$0)
example_end

Sent: kick your shoe ?
Sem: lambda $0_{ev}.Q(v|kick(you,det:poss|your($1,n|shoe($1)),$0))
example_end

Sent: you fell down .
Sem: lambda $0_{ev}.and(v|fall-past(pro:per|you,$0),adv|down($0))
example_end

Sent: doggie and the car ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|dog-dim($1),det:art|the($2,n|car($2)),$0))
example_end

Sent: where did you go yesterday ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|go(pro:per|you,$0),$1($0)),adv:tem|yesterday($0)),$0)
example_end

Sent: you saw some pretty flowers ?
Sem: lambda $0_{ev}.Q(v|saw(pro:per|you,qn|some($1,and(adj|pretty($1),n|flower-pl($1))),$0))
example_end

Sent: are you a boat or an airplane ?
Sem: lambda $0_{ev}.Q(coord|or(det:art|a(pro:per|you,n|boat(pro:per|you,$0)),det:art|a(pro:per|you,n|airplane(pro:per|you,$0))))
example_end

Sent: are you a Texaco star ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and_comp(n:prop|texaco(pro:per|you,$0),n|star(pro:per|you,$0))))
example_end

Sent: oh you 're a man with a Texaco star .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|you,att(n|man(pro:per|you,$0),prep|with(det:art|a($1,and_comp(n:prop|texaco($1),n|star($1)))))),co|oh($0))
example_end

Sent: don 't put your mouth on the paper .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,det:poss|your($1,n|mouth($1)),$0),prep|on(det:art|the($2,n|paper($2)),$0)),$0),$0)
example_end

Sent: what did you do here ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),adv|here($0)),$0)
example_end

Sent: what did you do to the paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|to(det:art|the($2,n|paper($2)),$0)),$0)
example_end

Sent: game Adam ?
Sem: lambda $0_{e}.Q(n|game($0))
example_end

Sent: play tail ?
Sem: lambda $0_{ev}.Q(n|play(you,lambda $1_{e}.n|tail($1),$0))
example_end

Sent: you put your gloves on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,det:poss|your($1,n|glove-pl($1)),$0),prep|on($0)))
example_end

Sent: can you put your gloves on ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,det:poss|your($1,n|glove-pl($1)),$0),prep|on($0)),$0))
example_end

Sent: what about the book and the door ?
Sem: coord|and(att(pro:int|what,adv|about(det:art|the($0,n|book($0)))),det:art|the($1,n|door($1)))
example_end

Sent: who puts your gloves on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-3s($1,det:poss|your($2,n|glove-pl($2)),$0),prep|on($0))
example_end

Sent: why are you going to put the book outside ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:art|the($2,n|book($2)),$1),adv|outside($1)),$0),$3($0)),$0)
example_end

Sent: another book yes .
Sem: lambda $0_{ev}.and(qn|another($1,n|book($1),$0),co|yes($0))
example_end

Sent: a book isn 't a ball .
Sem: lambda $0_{ev}.not(det:art|a(det:art|a($1,n|book($1)),n|ball(det:art|a($1,n|book($1)),$0)),$0)
example_end

Sent: don 't throw the book .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,det:art|the($1,n|book($1)),$0),$0),$0)
example_end

Sent: you ask somebody to play with you .
Sem: lambda $0_{ev}.v|ask(pro:per|you,lambda $1_{ev}.v|play(pro:indef|somebody,pro:per|you,$1),$0)
example_end

Sent: Chatter what 's the matter with you ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1,att(n|matter($1,$0),prep|with(pro:per|you)))
example_end

Sent: can 't you think of another game ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|think(pro:per|you,qn|another($1,n|game($1)),$0),$0),$0))
example_end

Sent: what are you doing with that chair ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|with(pro:dem|that($2,n|chair($2)),$0)),$0)
example_end

Sent: oh Adam sit in the chair .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),prep|in(det:art|the($1,n|chair($1)),$0)),co|oh($0))
example_end

Sent: oh Adam sit in the chair and watch the game ?
Sem: lambda $0_{ev}.Q(and(coord|and(v|watch(you,det:art|the($1,n|game($1)),$0),and(v|sit(you,$0),prep|in(det:art|the($2,n|chair($2)),$0))),co|oh($0)))
example_end

Sent: what kind of game are you going to watch ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|watch($2($3,att(n|kind($3),prep|of(lambda $4_{e}.n|game($4)))),$1),$0),$0)
example_end

Sent: watch the game ?
Sem: lambda $0_{ev}.Q(v|watch(you,det:art|the($1,n|game($1)),$0))
example_end

Sent: they usually come on the weekend .
Sem: lambda $0_{ev}.and(and(v|come(pro:sub|they,$0),adv|usual-dadj($0)),prep|on(det:art|the($1,n|week+end($1)),$0))
example_end

Sent: come at the end of the week .
Sem: lambda $0_{ev}.and(v|come(you,$0),prep|at(det:art|the($1,att(n|end($1),prep|of(det:art|the($2,n|week($2))))),$0))
example_end

Sent: Sunday yes is at the end of the week .
Sem: lambda $0_{ev}.and(and(cop|be-3s(n:prop|sunday,$0),prep|at(det:art|the($1,att(n|end($1),prep|of(det:art|the($2,n|week($2))))),$0)),co|yes($0))
example_end

Sent: the power shovel pick the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick(det:art|the($1,and_comp(n|power($1),n|shovel($1))),det:art|the($2,n|dirt($2)),$0),adv|up($0)))
example_end

Sent: did you see a power shovel yesterday ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|see(pro:per|you,det:art|a($1,and_comp(n|power($1),n|shovel($1))),$0),adv:tem|yesterday($0)),$0))
example_end

Sent: you say a busy bulldozer yesterday .
Sem: lambda $0_{ev}.and(v|say(pro:per|you,det:art|a($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),adv:tem|yesterday($0))
example_end

Sent: what was the busy bulldozer doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-past(part|do-presp(det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$2,$0),$0)
example_end

Sent: was it pushing the dirt around too ?
Sem: lambda $0_{ev}.Q(cop|be-past(and(and(part|push-presp(pro:per|it,det:art|the($1,n|dirt($1)),$0),adv|around($0)),adv|too($0)),$0))
example_end

Sent: moon picks the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick-3s(lambda $1_{e}.n|moon($1),det:art|the($2,n|dirt($2)),$0),adv|up($0)))
example_end

Sent: when do you see the moon ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|see(pro:per|you,det:art|the($1,n|moon($1)),$0),$2($0)),$0)
example_end

Sent: what are you going to say to the busy bulldozer ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|say($2,det:art|the($3,and(adj|busy($3),n|bulldoze-dv($3))),$1),$0),$0)
example_end

Sent: you 're a little rascal ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|rascal(pro:per|you,$0),adj|little(pro:per|you,$0))))
example_end

Sent: yes you are .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|you($0,$1)
example_end

Sent: just checking ?
Sem: lambda $0_{ev}.Q(and(part|check-presp(you,$0),adv|just($0)))
example_end

Sent: no you don 't need your temperature taken .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:per|you,lambda $1_{ev}.part|take-pastp(det:poss|your($2,n|temperature($2)),$1),$0),$0),$0),co|no($0))
example_end

Sent: Adam 's shirt !
Sem: n:prop|adam's($0,n|shirt($0))
example_end

Sent: don 't wear a shirt Mommy ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|wear(you,det:art|a($1,n|shirt($1)),$0),$0),$0))
example_end

Sent: Mommy doesn 't wear a shirt .
Sem: lambda $0_{ev}.not(mod|do(v|wear(n:prop|mommy,det:art|a($1,n|shirt($1)),$0),$0),$0)
example_end

Sent: yes Adam does wear shoes .
Sem: lambda $0_{ev}.and(mod|do-3s(v|wear(n:prop|adam,lambda $1_{e}.n|shoe-pl($1),$0),$0),co|yes($0))
example_end

Sent: that 's right don 't bite .
Sem: lambda $0_{ev}.and(adv|right(pro:dem|that,$0),not(mod|do(v|bite(you,$0),$0),$0))
example_end

Sent: don 't ride on the briefcase .
Sem: lambda $0_{ev}.not(mod|do(v|ride(you,det:art|the($1,n|briefcase($1)),$0),$0),$0)
example_end

Sent: that 's right you sit in a chair .
Sem: lambda $0_{ev}.and(adj|right(pro:dem|that,$0),and(v|sit(pro:per|you,$0),prep|in(det:art|a($1,n|chair($1)),$0)))
example_end

Sent: do you want to sit next_to me ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|sit(pro:per|you,$1),prep|next_to(pro:obj|me,$1)),$0),$0))
example_end

Sent: that 's Ursula 's pocket book .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:dem|that,and_comp(n|pocket(pro:dem|that,$0),n|book(pro:dem|that,$0)))
example_end

Sent: is it heavy ?
Sem: lambda $0_{ev}.Q(adj|heavy(pro:per|it,$0))
example_end

Sent: isn 't that a pretty box Adam ?
Sem: lambda $0_{ev}.Q(not(det:art|a(det:dem|that,and(n|box(det:dem|that,$0),adj|pretty(det:dem|that,$0))),$0))
example_end

Sent: can you bring me my pocket book ?
Sem: lambda $0_{ev}.Q(mod|can(v|bring(pro:per|you,det:poss|my($1,and_comp(n|pocket($1),n|book($1))),pro:obj|me,$0),$0))
example_end

Sent: no it 's not all finished .
Sem: lambda $0_{ev}.and(not(cop|~be(and(part|finish-pastp(pro:per|it,$0),adv|all($0)),$0),$0),co|no($0))
example_end

Sent: won 't you please go over and take Ursula 's pocketbook to her ?
Sem: lambda $0_{ev}.Q(not(mod|will(and(and(and(v|take(pro:per|you,n:prop|ursula's($1,n|pocket+book($1)),$0),co|please($0)),adv|over($0)),prep|to(pro:obj|her,$0)),$0),$0))
example_end

Sent: no you hit your head here on the bench .
Sem: lambda $0_{ev}.and(and(v|hit-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),adv|here(prep|on(det:art|the($2,n|bench($2)),$0))),co|no($0))
example_end

Sent: Adam what are you doing back there ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),adv|back(adv|there($0))),$0)
example_end

Sent: looking at the water ?
Sem: lambda $0_{ev}.Q(and(part|look-presp(you,$0),prep|at(det:art|the($1,n|water($1)),$0)))
example_end

Sent: no there isn 't any water in there .
Sem: lambda $0_{ev}.and(and(cop|be(not(qn|any($1,n|water($1))),$0),prep|in(adv|there($0))),co|no($0))
example_end

Sent: that wasn 't a drum .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|drum(pro:dem|that,$0)),$0)
example_end

Sent: picking tomatoes up ?
Sem: lambda $0_{ev}.Q(and(part|pick-presp(you,lambda $1_{e}.n|tomato-pl($1),$0),adv|up($0)))
example_end

Sent: why would you pick a tomato up like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(and(v|pick(pro:per|you,det:art|a($1,n|tomato($1)),$0),$2($0)),adv|up($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: what 's on your tongue ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),prep|on(det:poss|your($2,n|tongue($2)),$0))
example_end

Sent: you 've got a string of Mommy 's hair in your mouth .
Sem: lambda $0_{ev}.aux|~have(and(part|get-pastp(pro:per|you,det:art|a($1,att(n|string($1),prep|of(n:prop|mommy's($2,n|hair($2))))),$0),prep|in(det:poss|your($3,n|mouth($3)),$0)),$0)
example_end

Sent: use the eraser and then the writing is all_gone .
Sem: lambda $0_{ev}.coord|and(adv:tem|then(adj|all_gone(det:art|the($1,n:gerund|write-presp($1)),$0)),v|use(you,det:art|the($2,n|erase-dv($2)),$0))
example_end

Sent: no you don 't write on buttons .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|button-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: tomato soup .
Sem: lambda $0_{e}.and_comp(n|tomato($0),n|soup($0))
example_end

Sent: how can I drink so much coffee ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(n|drink(pro:sub|i,adv|so(qn|much($1,n|coffee($1))),$0),$2($0)),$0)
example_end

Sent: oh Adam will drink some coffee too .
Sem: lambda $0_{ev}.and(mod|will(and(v|drink(n:prop|adam,qn|some($1,n|coffee($1)),$0),post|too($0)),$0),co|oh($0))
example_end

Sent: did you have a pumpkin at Halloween ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|have(pro:per|you,det:art|a($1,n|pumpkin($1)),$0),prep|at(n:prop|halloween,$0)),$0))
example_end

Sent: that 's a mouth .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|mouth(pro:dem|that,$0))
example_end

Sent: it looks like a tomato ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|tomato($1)),$0)))
example_end

Sent: that 's three .
Sem: lambda $0_{e}.det:num|three($0)
example_end

Sent: get your ball ?
Sem: lambda $0_{ev}.Q(v|get(you,det:poss|your($1,n|ball($1)),$0))
example_end

Sent: do you know ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,$0),$0))
example_end

Sent: when did you see the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|ball($1)),$0),$2($0)),$0)
example_end

Sent: do you like grapefruit ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.n|grape+fruit($1),$0),$0))
example_end

Sent: if you break it then you won 't have a pumpkin .
Sem: lambda $0_{ev}.not(mod|will(conj|if(v|break(pro:per|you,pro:per|it,$0),and(v|have(pro:per|you,det:art|a($1,n|pumpkin($1)),$0),adv:tem|then($0))),$0),$0)
example_end

Sent: poor pumpkin .
Sem: lambda $0_{e}.and(adj|poor($0),n|pumpkin($0))
example_end

Sent: oh is that Pepper ?
Sem: lambda $0_{ev}.Q(and(n:prop|pepper(pro:rel|that,$0),co|oh($0)))
example_end

Sent: he went out to the kitchen soon .
Sem: lambda $0_{ev}.and(and(and(v|go-past(pro:sub|he,$0),adv|out($0)),prep|to(det:art|the($1,n|kitchen($1)),$0)),adv|soon($0))
example_end

Sent: you do it .
Sem: lambda $0_{ev}.v|do(pro:per|you,pro:per|it,$0)
example_end

Sent: my that would be a big hat .
Sem: lambda $0_{ev}.and(mod|will-cond(det:art|a(pro:dem|that,and(n|hat(pro:dem|that,$0),adj|big(pro:dem|that,$0))),$0),det:poss|my($0))
example_end

Sent: where would you wear a hat like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|wear(pro:per|you,det:art|a($1,n|hat($1)),$0),$2($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: you put the pencil in your mouth ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,det:art|the($1,n|pencil($1)),$0),prep|in(det:poss|your($2,n|mouth($2)),$0)))
example_end

Sent: that 's not Daddy 's suitcase .
Sem: lambda $0_{ev}.not(n:prop|daddy's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),$0)
example_end

Sent: you knocked it over .
Sem: lambda $0_{ev}.and(v|knock-past(pro:per|you,pro:per|it,$0),adv|over($0))
example_end

Sent: buy milk ?
Sem: lambda $0_{ev}.Q(n|buy(you,lambda $1_{e}.n|milk($1),$0))
example_end

Sent: is milk on there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(lambda $1_{e}.v|milk($1),$0),prep|on(adv|there($0))))
example_end

Sent: what kind of bread ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|bread($2))))
example_end

Sent: fresh milk ?
Sem: lambda $0_{e}.Q(and(adj|fresh($0),n|milk($0)))
example_end

Sent: more candy .
Sem: qn|more($0,n|candy($0))
example_end

Sent: is that Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:rel|that,$0))
example_end

Sent: it 's not candy .
Sem: lambda $0_{ev}.not(n|candy(pro:per|it,$0),$0)
example_end

Sent: Adam 's suitcase ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|suitcase($1),$0))
example_end

Sent: what will happen if you drop it ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(v|drop(pro:per|you,pro:per|it,$0),mod|will(v|happen(you,$1,$0),$0))
example_end

Sent: is that a letter for somebody ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,att(n|letter(pro:rel|that,$0),prep|for(pro:indef|somebody))))
example_end

Sent: whose letter is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|letter(pro:per|it,$0))
example_end

Sent: Adam 's letter .
Sem: n:prop|adam's($0,n|letter($0))
example_end

Sent: the paint came off in your mouth .
Sem: lambda $0_{ev}.and(v|come-past_off(det:art|the($1,n|paint($1)),$0),prep|in(det:poss|your($2,n|mouth($2)),$0))
example_end

Sent: oh ice .
Sem: lambda $0_{ev}.and(n|ice+cream($0),co|oh($0))
example_end

Sent: put it in your mouth .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|mouth($1)),$0))
example_end

Sent: where are you going now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|go-presp(pro:per|you,$0),$1($0)),adv|now($0)),$0)
example_end

Sent: did you take the suitcase out ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,det:art|the($1,n|suitcase($1)),$0),adv|out($0)),$0))
example_end

Sent: they 'll cut you and hurt .
Sem: lambda $0_{ev}.mod|~will(coord|and(v|cut-zero(pro:sub|they,pro:per|you,$0),v|hurt-zero(pro:sub|they,pro:per|you,$0)),$0)
example_end

Sent: they 're too large .
Sem: lambda $0_{ev}.adv|too(adj|large(pro:sub|they,$0))
example_end

Sent: no it 's not broken .
Sem: lambda $0_{ev}.and(not(cop|~be(part|break-pastp(pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: no that side isn 't broken .
Sem: lambda $0_{ev}.and(not(cop|be(part|break-pastp(pro:dem|that($1,n|side($1)),$0),$0),$0),qn|no($0))
example_end

Sent: do you have a whistle over there ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,v|whistle($1)),$0),adv|over(adv|there($0))),$0))
example_end

Sent: the microphone .
Sem: det:art|the($0,n|microphone($0))
example_end

Sent: big boys don 't bother things like that .
Sem: lambda $0_{ev}.not(mod|do(v|bother(lambda $1_{e}.and(adj|big($1),n|boy-pl($1)),lambda $2_{e}.att(n|thing-pl($2),prep|like(pro:dem|that)),$0),$0),$0)
example_end

Sent: the record 's in the folder .
Sem: lambda $0_{ev}.and(poss|~s(det:art|the($1,n|record($1)),$0),prep|in(det:art|the($2,n|folder($2)),$0))
example_end

Sent: the record is in the folder .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|record($1)),$0),prep|in(det:art|the($2,n|folder($2)),$0))
example_end

Sent: is that yours ?
Sem: lambda $0_{ev}.Q(pro:poss|yours(pro:dem|that,$0))
example_end

Sent: whose is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: what 's the name of that song ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,att(n|name($2),prep|of(pro:dem|that($3,n|song($3))))),$0)
example_end

Sent: don 't scratch the record .
Sem: lambda $0_{ev}.not(mod|do(v|scratch(you,det:art|the($1,n|record($1)),$0),$0),$0)
example_end

Sent: put the toys in the basket .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|toy-pl($1)),$0),prep|in(det:art|the($2,n|basket($2)),$0))
example_end

Sent: where is the record ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|record($1)),$0),$2($0))
example_end

Sent: in your hand ?
Sem: Q(prep|in(det:poss|your($0,n|hand($0))))
example_end

Sent: see the record falling out_of the folder ?
Sem: lambda $0_{ev}.Q(and(v|see(you,det:art|the($1,n|record($1)),$0),and(part|fall-presp(you,$0),prep|out_of(det:art|the($2,n|folder($2)),$0))))
example_end

Sent: no that 's not the top to that .
Sem: lambda $0_{ev}.and(not(det:art|the(pro:dem|that,att(adj|top(pro:dem|that,$0),prep|to(pro:dem|that))),$0),co|no($0))
example_end

Sent: what kind of fish ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|fish($2))))
example_end

Sent: that 's not a bus .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|bus(pro:dem|that,$0)),$0)
example_end

Sent: that 's part of a train .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|a($1,n|train($1))))
example_end

Sent: I still don 't know what fish is in there .
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.and(cop|be-3s($2($3,n|fish($3)),$1),prep|in(adv|there($1))),$0),adv|still($0)),$0),$0)
example_end

Sent: I 'll put it in the drawer .
Sem: lambda $0_{ev}.mod|~will(and(v|put-zero(pro:sub|i,pro:per|it,$0),prep|in(det:art|the($1,n|drawer($1)),$0)),$0)
example_end

Sent: careful with the record .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: did Adam do that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|do(n:prop|adam,pro:dem|that,$0),$0))
example_end

Sent: the man did that ?
Sem: lambda $0_{ev}.Q(v|do-past(det:art|the($1,n|man($1)),pro:dem|that,$0))
example_end

Sent: Adam did that ?
Sem: lambda $0_{ev}.Q(v|do-past(n:prop|adam,pro:dem|that,$0))
example_end

Sent: why did Adam do that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(n:prop|adam,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: Adam take it off ?
Sem: lambda $0_{ev}.Q(and(v|take(n:prop|adam,pro:per|it,$0),adv|off($0)))
example_end

Sent: what makes the windmill turn around ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{ev}.and(n|turn(det:art|the($3,n|windmill($3)),$2),adv|around($2)),$0)
example_end

Sent: what makes a real windmill turn around ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{ev}.and(n|turn(det:art|a($3,and(adj|real($3),n|windmill($3))),$2),adv|around($2)),$0)
example_end

Sent: no you don 't know ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|know(pro:per|you,$0),$0),$0),co|no($0)))
example_end

Sent: I see it .
Sem: lambda $0_{ev}.v|see(pro:sub|i,pro:per|it,$0)
example_end

Sent: I 'm looking right at it .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:sub|i,pro:per|it,$0),adv|right($0)),$0)
example_end

Sent: yes I 'm looking .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:sub|i,$0),$0),co|yes($0))
example_end

Sent: what are you doing now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: oh you 're looking at the windmill .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:per|you,det:art|the($1,n|windmill($1)),$0),$0),co|oh($0))
example_end

Sent: you 're turning it on ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|on($0)),$0))
example_end

Sent: here comes an airplane ?
Sem: lambda $0_{ev}.Q(and(v|come-3s(you,det:art|a($1,n|airplane($1)),$0),adv|here($0)))
example_end

Sent: what does an airplane say ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|a($1,n|airplane($1)),$2,$0),$0)
example_end

Sent: do you want Mommy to take it and put it up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.coord|and(and(v|put-zero(you,pro:per|it,$2),adv|up($2)),v|take(_,pro:per|it,$2))),$0),$0))
example_end

Sent: get it again ?
Sem: lambda $0_{ev}.Q(and(aux|get(you,pro:per|it,$0),adv|again($0)))
example_end

Sent: is that a flag ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|flag(pro:rel|that,$0)))
example_end

Sent: oh you 're getting supper ready ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|get-presp(pro:per|you,lambda $1_{ev}.adj|ready(lambda $2_{e}.n|supper($2),$1),$0),$0),co|oh($0)))
example_end

Sent: do you like tomato soup ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.and_comp(n|tomato($1),n|soup($1)),$0),$0))
example_end

Sent: no you don 't like tomato soup ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(co|like(pro:per|you,lambda $1_{e}.and_comp(n|tomato($1),n|soup($1)),$0),$0),$0),co|no($0)))
example_end

Sent: you 're making two bowls of tomato soup .
Sem: lambda $0_{ev}.aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.att(det:num|two(n|bowl-pl($1)),prep|of(lambda $2_{e}.and_comp(n|tomato($2),n|soup($2)))),$0),$0)
example_end

Sent: other side .
Sem: qn|other($0,n|side($0))
example_end

Sent: well what are you cooking down there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(and(part|cook-presp(pro:per|you,$1,$0),adv|down(adv|there($0))),$0),co|well($0))
example_end

Sent: cooking water ?
Sem: lambda $0_{ev}.Q(part|cook-presp(you,lambda $1_{e}.n|water($1),$0))
example_end

Sent: Adam swimming .
Sem: lambda $0_{ev}.part|swim-presp(n:prop|adam,$0)
example_end

Sent: do you want Mommy to take the whistle and put it up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.coord|and(and(v|put-zero(you,pro:per|it,$2),adv|up($2)),v|take(_,det:art|the($3,n|whistle($3)),$2))),$0),$0))
example_end

Sent: when you throw it it hurts your head .
Sem: lambda $0_{ev}.conj|when(v|throw(pro:per|you,pro:per|it,$0),v|hurt-3s(pro:per|it,det:poss|your($1,n|head($1)),$0))
example_end

Sent: don 't throw it .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,pro:per|it,$0),$0),$0)
example_end

Sent: you 'll hurt Mr Cromer 's head .
Sem: lambda $0_{ev}.mod|~will(part|hurt-pastp(pro:per|you,n:prop|cromer_mr's($1,n|head($1)),$0),$0)
example_end

Sent: you 'll hurt Ursula too .
Sem: lambda $0_{ev}.mod|~will(and(part|hurt-pastp(pro:per|you,n:prop|ursula,$0),post|too($0)),$0)
example_end

Sent: you 'll hurt the suitcase too .
Sem: lambda $0_{ev}.mod|~will(and(v|hurt-zero(pro:per|you,det:art|the($1,n|suitcase($1)),$0),post|too($0)),$0)
example_end

Sent: you hit the floor .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,det:art|the($1,n|floor($1)),$0)
example_end

Sent: do you think you hurt the floor ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|hurt-zero(pro:per|you,det:art|the($2,n|floor($2)),$1),$0),$0))
example_end

Sent: hurt your knee ?
Sem: lambda $0_{ev}.Q(v|hurt-zero(you,det:poss|your($1,n|knee($1)),$0))
example_end

Sent: how did you hurt your knee ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|knee($1)),$0),$2($0)),$0)
example_end

Sent: on the chair .
Sem: prep|on(det:art|the($0,n|chair($0)))
example_end

Sent: how did you hurt your arm ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|arm($1)),$0),$2($0)),$0)
example_end

Sent: you hurt your arm on the chair .
Sem: lambda $0_{ev}.and(v|hurt-zero(pro:per|you,det:poss|your($1,n|arm($1)),$0),prep|on(det:art|the($2,n|chair($2)),$0))
example_end

Sent: pick the play toys up .
Sem: lambda $0_{ev}.and(v|pick(you,det:art|the($1,and_comp(n|play($1),v|toy-3s($1))),$0),adv|up($0))
example_end

Sent: that 's a good boy .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|boy(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: no that 's not yellow .
Sem: lambda $0_{ev}.and(not(adj|yellow(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: the papers are yellow .
Sem: lambda $0_{ev}.adj|yellow(det:art|the($1,n|paper-pl($1)),$0)
example_end

Sent: what are you checking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|check-presp(pro:per|you,$1,$0),$0)
example_end

Sent: that 's a radiator .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|radiator(pro:dem|that,$0))
example_end

Sent: there is another one in the kitchen .
Sem: lambda $0_{ev}.and(cop|be-3s(qn|another($1,pro:indef|one($1)),$0),prep|in(det:art|the($2,n|kitchen($2)),$0))
example_end

Sent: the other is hot ?
Sem: lambda $0_{ev}.Q(adj|hot(det:art|the($1,qn|other($1)),$0))
example_end

Sent: don 't fall pencil ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|fall(you,$0),$0),$0),lambda $1_{e}.n|pencil($1)))
example_end

Sent: I don 't hurt myself thank_you .
Sem: lambda $0_{ev}.and(not(mod|do(v|hurt-zero(pro:sub|i,pro:refl|myself,$0),$0),$0),n|thank_you($0))
example_end

Sent: time for bed ?
Sem: lambda $0_{e}.Q(att(n|time($0),prep|for(lambda $1_{e}.n|bed($1))))
example_end

Sent: for Mommy .
Sem: conj|for(n:prop|mommy)
example_end

Sent: it 's not time for bed for Adam ?
Sem: lambda $0_{ev}.Q(not(att(att(v|time(pro:per|it,$0),prep|for(lambda $1_{e}.n|bed($1))),prep|for(n:prop|adam)),$0))
example_end

Sent: are you saying Bambi ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|say-presp(pro:per|you,n:prop|bambi,$0),$0))
example_end

Sent: oh you 're going to show Ursula .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.n|show(pro:per|you,n:prop|ursula,$1),$0),$0),co|oh($0))
example_end

Sent: what happened to Bambi ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|bambi,$0))
example_end

Sent: Adam you give Bambi a ride .
Sem: lambda $0_{ev}.v|give(pro:per|you,det:art|a($1,n|ride($1)),n:prop|bambi,$0)
example_end

Sent: on your foot .
Sem: prep|on(det:poss|your($0,n|foot($0)))
example_end

Sent: do you think he likes that ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|like-3s(pro:sub|he,pro:dem|that,$1),$0),$0))
example_end

Sent: alright you read book .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,lambda $1_{e}.n|book($1),$0),co|alright($0))
example_end

Sent: ups_a_daisy you dropped your shoe .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,det:poss|your($1,n|shoe($1)),$0),co|ups_a_daisy($0))
example_end

Sent: he ate his dinner on this table last night and he dropped some beans .
Sem: lambda $0_{ev}.coord|and(v|drop-past(pro:sub|he,qn|some($1,n|bean-pl($1)),$0),and(and(v|eat-past(pro:sub|he,det:poss|his($2,n|dinner($2)),$0),prep|on(pro:dem|this($3,n|table($3)),$0)),and(adv|last($0),n|night($0))))
example_end

Sent: Papa bear .
Sem: lambda $0_{e}.and_comp(n:prop|papa($0),n|bear($0))
example_end

Sent: did you see bunny ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,lambda $1_{e}.n|bunny+rabbit($1),$0),$0))
example_end

Sent: the deer looks like Bambi .
Sem: lambda $0_{ev}.cop|look-3s(det:art|the($1,n|deer($1)),n:prop|bambi,$0)
example_end

Sent: bunny running ?
Sem: lambda $0_{ev}.Q(part|run-presp(lambda $1_{e}.n|bunny+rabbit($1),$0))
example_end

Sent: if he 's not careful yes they will stick him .
Sem: lambda $0_{ev}.and(mod|will(conj|if(not(co|careful(pro:sub|he,$0),$0),v|stick(pro:sub|they,pro:obj|him,$0)),$0),co|yes($0))
example_end

Sent: Mr Bear is dancing .
Sem: lambda $0_{ev}.aux|be-3s(part|dance-presp(n:prop|bear_mr,$0),$0)
example_end

Sent: he 's dancing .
Sem: lambda $0_{ev}.aux|~be(part|dance-presp(pro:sub|he,$0),$0)
example_end

Sent: I just read them .
Sem: lambda $0_{ev}.and(v|read-zero(pro:sub|i,pro:obj|them,$0),adv|just($0))
example_end

Sent: now you take them over to Ursula .
Sem: lambda $0_{ev}.and(and(and(v|take(pro:per|you,pro:obj|them,$0),adv|now($0)),adv|over($0)),prep|to(n:prop|ursula,$0))
example_end

Sent: they 're Ursula 's books .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:sub|they,n|book-pl(pro:sub|they,$0))
example_end

Sent: no I just read them .
Sem: lambda $0_{ev}.and(and(v|read-zero(pro:sub|i,pro:obj|them,$0),adv|just($0)),co|no($0))
example_end

Sent: you dropped a book .
Sem: lambda $0_{ev}.v|drop-past(pro:per|you,det:art|a($1,n|book($1)),$0)
example_end

Sent: poor Ursula ?
Sem: lambda $0_{e}.Q(att(n:prop|ursula,lambda $1_{e}.adj|poor($1),$0))
example_end

Sent: she needs her books .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|she,det:poss|her($1,n|book-pl($1)),$0)
example_end

Sent: poor Cromer ?
Sem: lambda $0_{e}.Q(att(n:prop|cromer,lambda $1_{e}.adj|poor($1),$0))
example_end

Sent: what 's yours ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:poss|yours($0,$1)
example_end

Sent: no that 's a lion .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|lion(pro:dem|that,$0)),co|no($0))
example_end

Sent: hungry lion .
Sem: lambda $0_{e}.and(adj|hungry($0),n|lion($0))
example_end

Sent: you go tell Ursula then .
Sem: lambda $0_{ev}.v|go(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,n:prop|ursula,$1),adv:tem|then($1)),$0)
example_end

Sent: I can 't see it .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: I thought you were going to tell her .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|tell(pro:per|you,pro:obj|her,$2),$1),$1),$0)
example_end

Sent: you have_to take it over there where she is .
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod:aux|have_to(and(v|take(pro:per|you,pro:per|it,$0),adv|over(adv|there($0))),$0),and(cop|be-3s(pro:sub|she,$0),$1($0)))
example_end

Sent: oh you 're going walking ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{e}.part|walk-presp($1),$0),$0),co|oh($0)))
example_end

Sent: did you step on the book ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|step(pro:per|you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0))
example_end

Sent: that 's alright then if you didn 't do it on purpose .
Sem: lambda $0_{ev}.conj|if(not(mod|do(and(v|do(pro:per|you,pro:per|it,$0),n|purpose($0)),$0),$0),adv:tem|then(adj|alright(pro:dem|that,$0)))
example_end

Sent: that 's red .
Sem: lambda $0_{ev}.adj|red(pro:dem|that,$0)
example_end

Sent: do you see a deer ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|a($1,n|deer($1)),$0),$0))
example_end

Sent: he 's hungry ?
Sem: lambda $0_{ev}.Q(adj|hungry(pro:sub|he,$0))
example_end

Sent: you turn it around ?
Sem: lambda $0_{ev}.Q(and(v|turn(pro:per|you,pro:per|it,$0),adv|around($0)))
example_end

Sent: I don 't think that really goes there do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(and(v|go-3s(pro:rel|that,$1),adv|real-dadj($1)),adv|there($1)),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: one pretty ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,lambda $1_{e}.adv|pretty($1),$0))
example_end

Sent: off Perro ?
Sem: Q(prep|off(n:prop|perro))
example_end

Sent: yes it 's alright .
Sem: lambda $0_{ev}.and(adj|alright(pro:per|it,$0),co|yes($0))
example_end

Sent: knock over ?
Sem: lambda $0_{ev}.Q(and(n|knock(you,$0),adv|over($0)))
example_end

Sent: go over ?
Sem: lambda $0_{ev}.Q(and(v|go(you,$0),adv|over($0)))
example_end

Sent: do you think that belongs there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|belong-3s(pro:rel|that,$1),adv|there($1)),$0),$0))
example_end

Sent: you 're turning it over .
Sem: lambda $0_{ev}.aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|over($0)),$0)
example_end

Sent: you 're turning it around .
Sem: lambda $0_{ev}.aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|around($0)),$0)
example_end

Sent: turning it around .
Sem: lambda $0_{ev}.and(part|turn-presp(you,pro:per|it,$0),adv|around($0))
example_end

Sent: that 's your brush .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|brush(pro:dem|that,$0))
example_end

Sent: that 's not a hammer .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|hammer(pro:dem|that,$0)),$0)
example_end

Sent: oh it looks like a hammer ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,det:art|a($1,n|hammer($1)),$0),co|oh($0)))
example_end

Sent: that 's not a doggie .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|dog-dim(pro:dem|that,$0)),$0)
example_end

Sent: no that 's a deer .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|deer(pro:dem|that,$0)),co|no($0))
example_end

Sent: oh you 're a big boy ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|big(pro:per|you,$0))),co|oh($0)))
example_end

Sent: why are you turning that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|turn-presp(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: well yes it 's heavy .
Sem: lambda $0_{ev}.and(and(adj|heavy(pro:per|it,$0),co|well($0)),co|yes($0))
example_end

Sent: what are you brushing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|brush-presp(pro:per|you,$1,$0),$0)
example_end

Sent: what does this say today ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|say(pro:dem|this,$1,$0),adv:tem|today($0)),$0)
example_end

Sent: oh you hurt your head on the table .
Sem: lambda $0_{ev}.and(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|table($2)),$0)),co|oh($0))
example_end

Sent: what happened Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|happen-past($1,$0)
example_end

Sent: the chair didn 't hit your head did it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|hit-zero(det:art|the($1,n|chair($1)),det:poss|your($2,n|head($2)),$0),$0),$0),mod|do-past(pro:per|it,$0)))
example_end

Sent: no the head hit the table .
Sem: lambda $0_{ev}.and(v|hit-zero(det:art|the($1,n|head($1)),det:art|the($2,n|table($2)),$0),qn|no($0))
example_end

Sent: did you step on the books ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|step(pro:per|you,$0),prep|on(det:art|the($1,n|book-pl($1)),$0)),$0))
example_end

Sent: Perro 's going to read the book .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(n:prop|perro,lambda $1_{ev}.v|read-zero(n:prop|perro,det:art|the($2,n|book($2)),$1),$0),$0)
example_end

Sent: oh Adam will read the book ?
Sem: lambda $0_{ev}.Q(and(mod|will(v|read-zero(n:prop|adam,det:art|the($1,n|book($1)),$0),$0),co|oh($0)))
example_end

Sent: you 're excused .
Sem: lambda $0_{ev}.aux|~be(part|excuse-pastp(pro:per|you,$0),$0)
example_end

Sent: turn what over ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|turn(you,$1,$0),adv|over($0))
example_end

Sent: I thought you were going to read to Perro .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.and(v|read-zero(pro:per|you,$2),prep|to(n:prop|perro,$2)),$1),$1),$0)
example_end

Sent: good morning to you .
Sem: lambda $0_{e}.att(and(adj|good($0),n|morning($0)),prep|to(pro:per|you))
example_end

Sent: oh good morning .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|morning($0)),co|oh($0))
example_end

Sent: oh laughing .
Sem: lambda $0_{ev}.and(part|laugh-presp(you,$0),co|oh($0))
example_end

Sent: what did Donald_Duck safety book say ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(v|say(lambda $1_{e}.and_comp(and_comp(n:prop|donald_duck($1),n|safety($1)),n|book($1)),$2,$0),$0)
example_end

Sent: you don 't play with plugs do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|play(pro:per|you,lambda $1_{e}.n|plug-pl($1),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: you don 't play with cords either .
Sem: lambda $0_{ev}.not(mod|do(and(v|play(pro:per|you,lambda $1_{e}.n|cord-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: put it down .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|down($0))
example_end

Sent: no it doesn 't go there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:per|it,$0),adv|there($0)),$0),$0),co|no($0))
example_end

Sent: you don 't play with matches either do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|play(pro:per|you,lambda $1_{e}.n|match-pl($1),$0),coord|either($0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: yeah you dropped it .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,pro:per|it,$0),co|yeah($0))
example_end

Sent: well what happened to five six seven ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|five($2),$0)),co|well($0))
example_end

Sent: that 's no broom .
Sem: lambda $0_{ev}.not(n|broom(pro:dem|that,$0),$0)
example_end

Sent: that 's brush .
Sem: lambda $0_{ev}.n|brush(pro:dem|that,$0)
example_end

Sent: oh it looks like a broom does it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(pro:per|it,det:art|a($1,n|broom($1)),$0),mod|do-3s(pro:per|it,$0)),co|oh($0)))
example_end

Sent: I can 't put it together .
Sem: lambda $0_{ev}.not(mod|can(and(v|put-zero(pro:sub|i,pro:per|it,$0),adv|together($0)),$0),$0)
example_end

Sent: you have_to go get the car .
Sem: lambda $0_{ev}.mod:aux|have_to(v|get(pro:per|you,det:art|the($1,n|car($1)),$0),$0)
example_end

Sent: the car got tickled ?
Sem: lambda $0_{ev}.Q(aux|get-past(part|tickle-pastp(det:art|the($1,n|car($1)),$0),$0))
example_end

Sent: does it go there ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|go(pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: car dropped ?
Sem: lambda $0_{ev}.Q(v|drop-past(lambda $1_{e}.n|car($1),$0))
example_end

Sent: you missed that ?
Sem: lambda $0_{ev}.Q(v|miss-past(pro:per|you,pro:dem|that,$0))
example_end

Sent: what 's he going to sit against if you take all the pillows off .
Sem: lambda $3_{e}.lambda $0_{ev}.conj|if(and(v|take(pro:per|you,qn|all(det:art|the($1,n|pillow-pl($1))),$0),adv|off($0)),aux|~be(part|go-presp(pro:sub|he,lambda $2_{ev}.and(v|sit($3,$2),adv|against($2)),$0),$0))
example_end

Sent: how can he sit comfortably if you take all the pillows off ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|if(and(v|take(pro:per|you,qn|all(det:art|the($1,n|pillow-pl($1))),$0),adv|off($0)),mod|can(and(and(v|sit(pro:sub|he,$0),$2($0)),adv|comfort-dadj($0)),$0))
example_end

Sent: you 're going to give him one .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|give(pro:per|you,pro:indef|one,pro:obj|him,$1),$0),$0)
example_end

Sent: who uses a pillow on the floor for exercising ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|use-3s($1,det:art|a($2,n|pillow($2)),$0),prep|on(det:art|the($3,n|floor($3)),$0)),prep|for(lambda $4_{e}.n:gerund|exercise-presp($4),$0))
example_end

Sent: all finished with your exercises ?
Sem: lambda $0_{ev}.Q(and(and(v|finish-past(you,$0),post|all($0)),prep|with(det:poss|your($1,n|exercise-pl($1)),$0)))
example_end

Sent: why don 't you put the pillows up ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,det:art|the($1,n|pillow-pl($1)),$0),$2($0)),adv|up($0)),$0),$0)
example_end

Sent: would you like to have this ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,pro:dem|this,$1),$0),$0))
example_end

Sent: a big lion .
Sem: det:art|a($0,and(adj|big($0),n|lion($0)))
example_end

Sent: that 's a baby giraffe .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|giraffe(pro:dem|that,$0),n|baby(pro:dem|that,$0)))
example_end

Sent: just one wheel left .
Sem: lambda $0_{ev}.and(v|leave-past(lambda $1_{e}.det:num|one(n|wheel($1)),$0),adv|just($0))
example_end

Sent: saggy baggy .
Sem: lambda $0_{e}.adj|sag-dv($0)
example_end

Sent: what 's the elephant doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|elephant($1)),$2,$0),$0)
example_end

Sent: that 's a porcupine .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|porcupine(pro:dem|that,$0))
example_end

Sent: that 's a hippopotamus .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|hippopotamus(pro:dem|that,$0))
example_end

Sent: and this ?
Sem: lambda $0_{e}.Q(pro:dem|this($0))
example_end

Sent: this is a panda .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|panda(pro:dem|this,$0))
example_end

Sent: no that 's not a giraffe .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|giraffe(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: a polar bear .
Sem: det:art|a($0,and_comp(adj|polar($0),n|bear($0)))
example_end

Sent: he 's sitting on top of ice .
Sem: lambda $0_{ev}.aux|~be(and(part|sit-presp(pro:sub|he,$0),prep|on(lambda $1_{e}.att(n|top($1),prep|of(lambda $2_{e}.n|ice($2))),$0)),$0)
example_end

Sent: this one 's the leopard .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this($1,pro:indef|one($1)),n|leopard(pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: do you see a seal ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|a($1,n|seal($1)),$0),$0))
example_end

Sent: is that a seal ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|seal(pro:rel|that,$0)))
example_end

Sent: sitting on the broom ?
Sem: lambda $0_{ev}.Q(and(part|sit-presp(you,$0),prep|on(det:art|the($1,n|broom($1)),$0)))
example_end

Sent: would you like one ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,pro:indef|one,$0),$0))
example_end

Sent: do you want a piece of this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,att(n|piece($1),prep|of(pro:dem|this))),$0),$0))
example_end

Sent: what are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|write-presp(pro:per|you,$1,$0),$0)
example_end

Sent: oh you 're writing Cromer ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|write-presp(pro:per|you,$0),n:prop|cromer($0)),$0),co|oh($0)))
example_end

Sent: you dropped your pencil .
Sem: lambda $0_{ev}.v|drop-past(pro:per|you,det:poss|your($1,n|pencil($1)),$0)
example_end

Sent: you have some paper .
Sem: lambda $0_{ev}.v|have(pro:per|you,qn|some($1,n|paper($1)),$0)
example_end

Sent: there 's one on the table .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),prep|on(det:art|the($1,n|table($1)),$0))
example_end

Sent: no give her her pencil back Adam because you 've been breaking pencils lately .
Sem: lambda $0_{ev}.and(conj|because(aux|be-pastp(aux|~have(and(part|break-presp(pro:per|you,lambda $1_{e}.n|pencil-pl($1),$0),adv|late-dadj($0)),$0),$0),and(v|give(you,det:poss|her($2,n|pencil($2)),pro:obj|her,$0),adj|back($0))),co|no($0))
example_end

Sent: that 's a flute .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|flute(pro:dem|that,$0))
example_end

Sent: what kind of bird is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|bird($2))))
example_end

Sent: here 's my mail from this morning .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|my($1,n|mail($1)),$0),pro:exist|here($0)),prep|from(pro:dem|this($2,n|morning($2)),$0))
example_end

Sent: letters the mailman brought .
Sem: lambda $0_{ev}.v|bring-past(det:art|the($1,n|mail+man($1)),lambda $2_{e}.n|letter-pl($2),$0)
example_end

Sent: may I show you ?
Sem: lambda $0_{ev}.Q(mod|may(v|show(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: you show me .
Sem: lambda $0_{ev}.v|show(pro:per|you,pro:obj|me,$0)
example_end

Sent: get up there and sit down .
Sem: lambda $0_{ev}.coord|and(and(v|sit(you,$0),adv|down($0)),and(v|get(you,$0),adv|up(adv|there($0))))
example_end

Sent: can you see the snow ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,det:art|the($1,n|snow($1)),$0),$0))
example_end

Sent: oh you want to watch it .
Sem: lambda $0_{ev}.and(v|want(pro:per|you,lambda $1_{ev}.v|watch(pro:per|you,pro:per|it,$1),$0),co|oh($0))
example_end

Sent: I 'm sorry .
Sem: lambda $0_{ev}.adj|sorry(pro:sub|i,$0)
example_end

Sent: I don 't think that 's yellow .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.adj|yellow(pro:dem|that,$1),$0),$0),$0)
example_end

Sent: if that 's yellow what color is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(adj|yellow(pro:dem|that,$0),$1(pro:dem|this,n|color(pro:dem|this,$0)))
example_end

Sent: don 't do that .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: you 'll bend it .
Sem: lambda $0_{ev}.mod|~will(v|bend(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: because it will disrupt the machine .
Sem: lambda $0_{ev}.mod|will(v|disrupt(pro:per|it,det:art|the($1,n|machine($1)),$0),$0)
example_end

Sent: whose pencils are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.pro:sub|they($1($2,n|pencil-pl($2)),$0)
example_end

Sent: one door !
Sem: lambda $0_{e}.det:num|one(n|door($0))
example_end

Sent: will you read it to me ?
Sem: lambda $0_{ev}.Q(mod|will(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),$0))
example_end

Sent: can you find the seal ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,det:art|the($1,n|seal($1)),$0),$0))
example_end

Sent: looks like Chatter .
Sem: lambda $0_{ev}.cop|look-3s(you,n:prop|chatter,$0)
example_end

Sent: oh that 's all .
Sem: lambda $0_{ev}.and(pro:indef|all(pro:dem|that,$0),co|oh($0))
example_end

Sent: it 's a camera .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|camera(pro:per|it,$0))
example_end

Sent: is that a hammer Adam ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|hammer(pro:rel|that,$0)))
example_end

Sent: here a hammer ?
Sem: lambda $0_{e}.Q(adv|here(det:art|a($1,n|hammer($1)),$0))
example_end

Sent: oh that 's not a hammer .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|hammer(pro:dem|that,$0)),$0),co|oh($0))
example_end

Sent: what 's that on it ?
Sem: lambda $0_{e}.lambda $1_{ev}.att(pro:dem|that($0,$1),prep|on(pro:per|it))
example_end

Sent: oh Chicken_Little .
Sem: lambda $0_{ev}.and(n:prop|chicken_little($0),co|oh($0))
example_end

Sent: where did you see Chicken_Little ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,n:prop|chicken_little,$0),$1($0)),$0)
example_end

Sent: you do ?
Sem: lambda $0_{ev}.Q(v|do(pro:per|you,$0))
example_end

Sent: well what is it that you love ?
Sem: lambda $0_{ev}.and(v|love(pro:per|you,$0),co|well($0))
example_end

Sent: what does a windmill do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|a($1,n|windmill($1)),$2,$0),$0)
example_end

Sent: silly boy .
Sem: lambda $0_{e}.and(co|silly($0),n|boy($0))
example_end

Sent: yes you have_to blow your nose don 't you .
Sem: lambda $0_{ev}.and(and(mod:aux|have_to(v|blow(pro:per|you,det:poss|your($1,n|nose($1)),$0),$0),not(mod|do(pro:per|you,$0),$0)),co|yes($0))
example_end

Sent: that 's a nice flute .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|flute(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))
example_end

Sent: no that 's a flute .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|flute(pro:dem|that,$0)),co|no($0))
example_end

Sent: it 's just from the rug honey .
Sem: lambda $0_{ev}.adj|just(prep|from(det:art|the($1,n|rug($1)),pro:per|it,$0))
example_end

Sent: oh turning like a windmill ?
Sem: lambda $0_{ev}.Q(and(and(part|turn-presp(you,$0),prep|like(det:art|a($1,n|windmill($1)),$0)),co|oh($0)))
example_end

Sent: what else has wings like that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|have-3s($1,lambda $2_{e}.n|wing-pl($2),$0),prep|like(pro:dem|that,$0))
example_end

Sent: oh here it is .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:per|it,$0),adv|here($0)),co|oh($0))
example_end

Sent: part of your car ?
Sem: lambda $0_{e}.Q(att(n|part($0),prep|of(det:poss|your($1,n|car($1)))))
example_end

Sent: poor Adam .
Sem: att(n:prop|adam,lambda $0_{e}.adj|poor($0))
example_end

Sent: did you hurt yourself ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),$0))
example_end

Sent: screw happened !
Sem: lambda $0_{ev}.v|happen-past(lambda $1_{e}.n|screw($1),$0)
example_end

Sent: you didn 't even have a screw .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|screw($1)),$0),v|even($0)),$0),$0)
example_end

Sent: you didn 't have a screw .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,det:art|a($1,n|screw($1)),$0),$0),$0)
example_end

Sent: are you playing peekaboo with me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|play-presp(pro:per|you,lambda $1_{e}.v|peekaboo($1),$0),prep|with(pro:obj|me,$0)),$0))
example_end

Sent: you peekaboo back out in the kitchen with your juice .
Sem: lambda $0_{ev}.and(and(and(and(v|peekaboo(pro:per|you,$0),adv|back($0)),adv|out($0)),prep|in(det:art|the($1,n|kitchen($1)),$0)),prep|with(det:poss|your($2,n|juice($2)),$0))
example_end

Sent: is that juice ?
Sem: lambda $0_{ev}.Q(n|juice(pro:dem|that,$0))
example_end

Sent: get broom .
Sem: lambda $0_{ev}.v|get(you,lambda $1_{e}.n|broom($1),$0)
example_end

Sent: what 's all_gone ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(co|all_gone($1,$0),$0)
example_end

Sent: oh you 're going to draw a picture .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|draw(pro:per|you,det:art|a($2,n|picture($2)),$1),$0),$0),co|oh($0))
example_end

Sent: well he doesn 't want that paper .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|he,pro:dem|that($1,n|paper($1)),$0),$0),$0),co|well($0))
example_end

Sent: he has some nice paper .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|he,qn|some($1,and(adj|nice($1),n|paper($1))),$0)
example_end

Sent: what do you want me to write ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,lambda $1_{ev}.v|write(pro:obj|me,$2,$1),$0),$0)
example_end

Sent: does that fit there Adam ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:dem|that,$0),adv|there($0)),$0))
example_end

Sent: does that one fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: does it fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(pro:per|it,$0),$0))
example_end

Sent: does it fit there ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: does it fit that way ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:per|it,$0),pro:dem|that($1,n|way($1),$0)),$0))
example_end

Sent: does boy ?
Sem: lambda $0_{ev}.Q(mod|do-3s(lambda $1_{e}.n|boy($1),$0))
example_end

Sent: no Adam I 'll have_to take the flute away if you do that .
Sem: lambda $0_{ev}.and(conj|if(v|do(pro:per|you,pro:dem|that,$0),mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|flute($1)),$0),adv|away($0)),$0),$0)),co|no($0))
example_end

Sent: it 's not hollow all the way down .
Sem: lambda $0_{e}.lambda $1_{ev}.v|hollow($0,$1)
example_end

Sent: look in that way and it 's hollow .
Sem: lambda $0_{ev}.coord|and(adj|hollow(pro:per|it,$0),and(cop|look(you,$0),prep|in(pro:dem|that($1,n|way($1)),$0)))
example_end

Sent: how many ends does it have ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(v|have(pro:per|it,lambda $1_{e}.and($2(qn|many($1)),n|end-pl($1)),$0),$0)
example_end

Sent: a little hole .
Sem: det:art|a($0,and(adj|little($0),n|hole($0)))
example_end

Sent: that doesn 't belong there either .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|belong(pro:dem|that,$0),adv|there($0)),adv|either($0)),$0),$0)
example_end

Sent: you spilled your juice .
Sem: lambda $0_{ev}.v|spill-past(pro:per|you,det:poss|your($1,n|juice($1)),$0)
example_end

Sent: shall we open it ?
Sem: lambda $0_{ev}.Q(mod|shall(v|open(pro:sub|we,pro:per|it,$0),$0))
example_end

Sent: yes paper 's in there .
Sem: lambda $0_{ev}.and(and(poss|~s(lambda $1_{e}.n|paper($1),$0),adv|in(adv|there($0))),co|yes($0))
example_end

Sent: did you find a pencil ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: we 'll use that one tomorrow .
Sem: lambda $0_{ev}.mod|~will(and(v|use(pro:sub|we,pro:dem|that($1,pro:indef|one($1)),$0),adv:tem|tomorrow($0)),$0)
example_end

Sent: shall we use it tomorrow ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|use(pro:sub|we,pro:per|it,$0),adv:tem|tomorrow($0)),$0))
example_end

Sent: are you putting it back ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|put-presp(pro:per|you,pro:per|it,$0),adv|back($0)),$0))
example_end

Sent: does the box of tape fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(det:art|the($1,att(n|box($1),prep|of(lambda $2_{e}.n|tape($2)))),$0),$0))
example_end

Sent: there are so many papers .
Sem: lambda $0_{ev}.cop|be-pres(lambda $1_{e}.and(adv|so(qn|many($1)),n|paper-pl($1)),$0)
example_end

Sent: shall we do a game ?
Sem: lambda $0_{ev}.Q(mod|shall(v|do(pro:sub|we,det:art|a($1,n|game($1)),$0),$0))
example_end

Sent: can you give the baby in the bed ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|give(pro:per|you,det:art|the($1,n|baby($1)),$0),prep|in(det:art|the($2,n|bed($2)),$0)),$0))
example_end

Sent: can you give me the boy in the bath ?
Sem: lambda $0_{ev}.Q(mod|can(v|give(pro:per|you,det:art|the($1,att(n|boy($1),prep|in(det:art|the($2,n|bath+tub($2))))),pro:obj|me,$0),$0))
example_end

Sent: here he is in the bed .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:sub|he,$0),adv|here($0)),prep|in(det:art|the($1,n|bed($1)),$0))
example_end

Sent: is the boy in the bed ?
Sem: lambda $0_{ev}.Q(prep|in(det:art|the($1,n|bed($1)),det:art|the($2,n|boy($2)),$0))
example_end

Sent: that 's a bath .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|bath+tub(pro:dem|that,$0))
example_end

Sent: that 's a boy in the bath .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|boy(pro:dem|that,$0),prep|in(det:art|the($1,n|bath+tub($1)))))
example_end

Sent: can you say that boy in the bath ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,pro:rel|that($1,att(n|boy($1),prep|in(det:art|the($2,n|bath+tub($2))))),$0),$0))
example_end

Sent: may I have them .
Sem: lambda $0_{ev}.mod|may(v|have(pro:sub|i,pro:obj|them,$0),$0)
example_end

Sent: you 're going to put them back ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back($1)),$0),$0))
example_end

Sent: can you give me the dog in the house ?
Sem: lambda $0_{ev}.Q(mod|can(v|give(pro:per|you,det:art|the($1,att(n|dog($1),prep|in(det:art|the($2,n|house($2))))),pro:obj|me,$0),$0))
example_end

Sent: is there a doggie in this house ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|dog-dim($1)),$0),prep|in(pro:dem|this($2,n|house($2)),$0)))
example_end

Sent: sit on the rug ?
Sem: lambda $0_{ev}.Q(and(v|sit(you,$0),prep|on(det:art|the($1,n|rug($1)),$0)))
example_end

Sent: his face cloth got stuck in the drain .
Sem: lambda $0_{ev}.aux|get-past(and(part|stick-pastp(det:poss|his($1,and_comp(n|face($1),n|cloth($1))),$0),prep|in(det:art|the($2,n|drain($2)),$0)),$0)
example_end

Sent: it got stuck in the drain ?
Sem: lambda $0_{ev}.Q(aux|get-past(and(part|stick-pastp(pro:per|it,$0),prep|in(det:art|the($1,n|drain($1)),$0)),$0))
example_end

Sent: which one has the doghouse ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|have-3s($1($2,pro:indef|one($2)),det:art|the($3,n|dog+house($3)),$0)
example_end

Sent: can you find it ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: are those too many Adam ?
Sem: lambda $0_{ev}.Q(adv|too(qn|many(pro:dem|those,$0)))
example_end

Sent: is there a boy in there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|boy($1)),$0),prep|in(adv|there($0))))
example_end

Sent: where is the boy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|boy($1)),$0),$2($0))
example_end

Sent: do you have a bed like that ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,n|bed($1)),$0),prep|like(pro:dem|that,$0)),$0))
example_end

Sent: you saw the pictures .
Sem: lambda $0_{ev}.v|see-past(pro:per|you,det:art|the($1,n|picture-pl($1)),$0)
example_end

Sent: in the kitchen ?
Sem: Q(prep|in(det:art|the($0,n|kitchen($0))))
example_end

Sent: no you saw a giraffe on the television .
Sem: lambda $0_{ev}.and(and(v|see-past(pro:per|you,det:art|a($1,n|giraffe($1)),$0),prep|on(det:art|the($2,n|television($2)),$0)),co|no($0))
example_end

Sent: that 's a kangaroo .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|kangaroo(pro:dem|that,$0))
example_end

Sent: here 's a leopard .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|leopard($1)),$0),pro:exist|here($0))
example_end

Sent: look at this .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|at(pro:dem|this,$0))
example_end

Sent: that 's a reindeer .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|reindeer(pro:dem|that,$0))
example_end

Sent: oh taking a shower ?
Sem: lambda $0_{ev}.Q(and(part|take-presp(you,det:art|a($1,n|shower($1)),$0),co|oh($0)))
example_end

Sent: that 's a lion .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|lion(pro:dem|that,$0))
example_end

Sent: hungry lion yes .
Sem: lambda $0_{ev}.and(and(adj|hungry($0),n|lion($0)),co|yes($0))
example_end

Sent: oh close the mouth .
Sem: lambda $0_{ev}.and(v|close(you,det:art|the($1,n|mouth($1)),$0),co|oh($0))
example_end

Sent: what does the knife do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|knife($1)),$2,$0),$0)
example_end

Sent: that 's a monkey .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|monkey(pro:dem|that,$0))
example_end

Sent: what is the monkey eating ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-3s(part|eat-presp(det:art|the($1,n|monkey($1)),$2,$0),$0)
example_end

Sent: eating crayon ?
Sem: lambda $0_{ev}.Q(part|eat-presp(you,lambda $1_{e}.n|crayon($1),$0))
example_end

Sent: what is he ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|he,$0)
example_end

Sent: that 's a fox .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fox(pro:dem|that,$0))
example_end

Sent: that 's a panda .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|panda(pro:dem|that,$0))
example_end

Sent: his legs are strong .
Sem: lambda $0_{ev}.adj|strong(det:poss|his($1,n|leg-pl($1)),$0)
example_end

Sent: sing a song .
Sem: lambda $0_{ev}.v|sing(you,det:art|a($1,n|song($1)),$0)
example_end

Sent: I don 't think that car is broken .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.part|break-pastp(pro:dem|that($2,n|car($2)),$1),$0),$0),$0)
example_end

Sent: no Adam !
Sem: lambda $0_{ev}.co|no($0)
example_end

Sent: here it is ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(pro:per|it,$0),adv|here($0)))
example_end

Sent: no thank_you !
Sem: qn|no($0,n|thank_you($0))
example_end

Sent: you 're tired .
Sem: lambda $0_{ev}.part|tire-pastp(pro:per|you,$0)
example_end

Sent: turn it over .
Sem: lambda $0_{ev}.and(v|turn(you,pro:per|it,$0),adv|over($0))
example_end

Sent: you 're dripping .
Sem: lambda $0_{ev}.aux|~be(part|drip-presp(pro:per|you,$0),$0)
example_end

Sent: excuse me please .
Sem: lambda $0_{ev}.and(v|excuse(you,pro:obj|me,$0),co|please($0))
example_end

Sent: too big .
Sem: lambda $0_{e}.adv|too(adj|big($0))
example_end

Sent: be careful .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|care-dn($0,$1)
example_end

Sent: that 's his tongue ?
Sem: lambda $0_{ev}.Q(det:poss|his(pro:dem|that,n|tongue(pro:dem|that,$0)))
example_end

Sent: this one ?
Sem: lambda $0_{e}.Q(pro:dem|this($1,pro:indef|one($1),$0))
example_end

Sent: you missed it .
Sem: lambda $0_{ev}.v|miss-past(pro:per|you,pro:per|it,$0)
example_end

Sent: see it .
Sem: lambda $0_{ev}.v|see(you,pro:per|it,$0)
example_end

Sent: get down .
Sem: lambda $0_{ev}.and(v|get(you,$0),adv|down($0))
example_end

Sent: Rusty 's hat ?
Sem: lambda $0_{e}.Q(n:prop|rusty's($1,n|hat($1),$0))
example_end

Sent: behind you .
Sem: prep|behind(pro:per|you)
example_end

Sent: we don 't want all these beetles .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|we,qn|all(pro:dem|these($1,n|beetle-pl($1))),$0),$0),$0)
example_end

Sent: oh that 's a big one .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|big(pro:dem|that,$0))),co|oh($0))
example_end

Sent: we didn 't go to the grocery store .
Sem: lambda $0_{ev}.not(mod|do(and(v|go(pro:sub|we,$0),prep|to(det:art|the($1,and_comp(n|grocery($1),n|store($1))),$0)),$0),$0)
example_end

Sent: where did we go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:sub|we,$0),$1($0)),$0)
example_end

Sent: yes we went in the car .
Sem: lambda $0_{ev}.and(and(v|go-past(pro:sub|we,$0),prep|in(det:art|the($1,n|car($1)),$0)),co|yes($0))
example_end

Sent: and what did you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: a big doggie eating ?
Sem: lambda $0_{ev}.Q(part|eat-presp(det:art|a($1,and(adj|big($1),n|dog-dim($1))),$0))
example_end

Sent: but he was much bigger than Perro .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|big-cp($0,$1)
example_end

Sent: do you remember what the place was called ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,lambda $1_{ev}.part|call-pastp(_,pro:int|what,det:art|the($2,n|place($2)),$1),$0),$0))
example_end

Sent: no zoo .
Sem: qn|no($0,n|zoo($0))
example_end

Sent: yeah we saw the parrot .
Sem: lambda $0_{ev}.and(v|see-past(pro:sub|we,det:art|the($1,n|parrot($1)),$0),co|yeah($0))
example_end

Sent: you didn 't see an elephant .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:per|you,det:art|a($1,n|elephant($1)),$0),$0),$0)
example_end

Sent: what else did you see .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: a lamb ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|lamb($1),$0))
example_end

Sent: is that what it says ?
Sem: lambda $0_{ev}.Q(cop|be-3s(pro:dem|that,lambda $1_{ev}.v|say-3s(pro:per|it,pro:int|what,$1),$0))
example_end

Sent: big dog .
Sem: lambda $0_{e}.and(adj|big($0),n|dog($0))
example_end

Sent: yeah big doggie was eating .
Sem: lambda $0_{ev}.and(aux|be-past(part|eat-presp(lambda $1_{e}.and(adj|big($1),n|dog-dim($1)),$0),$0),co|yeah($0))
example_end

Sent: oh broke a pencil .
Sem: lambda $0_{ev}.and(v|break-past(you,det:art|a($1,n|pencil($1)),$0),co|oh($0))
example_end

Sent: you mustn 't play with a pencil in your hand .
Sem: lambda $0_{ev}.not(mod|must(and(v|play(pro:per|you,$0),prep|with(det:art|a($1,att(n|pencil($1),prep|in(det:poss|your($2,n|hand($2))))),$0)),$0),$0)
example_end

Sent: what is what ?
Sem: lambda $2_{e}.lambda $0_{e}.lambda $1_{ev}.$2($0,$1)
example_end

Sent: oh those are shoes .
Sem: lambda $0_{ev}.and(n|shoe-pl(pro:dem|those,$0),co|oh($0))
example_end

Sent: lots_of boots ?
Sem: lambda $0_{e}.Q(qn|lots_of($1,n|boot-pl($1),$0))
example_end

Sent: a big needle .
Sem: det:art|a($0,and(adj|big($0),n|needle($0)))
example_end

Sent: oh another needle .
Sem: lambda $0_{ev}.and(qn|another($1,n|needle($1),$0),co|oh($0))
example_end

Sent: I don 't know what is it ?
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: oh Cromer 's pencil .
Sem: lambda $0_{ev}.and(n:prop|cromer's($1,n|pencil($1),$0),co|oh($0))
example_end

Sent: oh is that the sky ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:rel|that,n|sky(pro:rel|that,$0)),co|oh($0)))
example_end

Sent: is that Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(n:prop|humpty_dumpty(pro:rel|that,$0))
example_end

Sent: who spanked Humpty_Dumpty 's face ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|spank-past($1,n:prop|humpty_dumpty's($2,n|face($2)),$0)
example_end

Sent: oh he 's under your finger .
Sem: lambda $0_{ev}.and(and(aux|~be(pro:sub|he,$0),adv|under(det:poss|your($1,n|finger($1)),$0)),co|oh($0))
example_end

Sent: write on the other side honey .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:art|the($1,and(qn|other($1),n|side($1))),$0))
example_end

Sent: you need a chair .
Sem: lambda $0_{ev}.v|need(pro:per|you,det:art|a($1,n|chair($1)),$0)
example_end

Sent: there 's Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(and(cop|~be(n:prop|humpty_dumpty,$0),pro:exist|there($0)))
example_end

Sent: where did you say he was ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|say(pro:per|you,lambda $1_{ev}.cop|be-past(pro:sub|he,$1),$0),$2($0)),$0)
example_end

Sent: a muffin man ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|muffin($1),n|man($1)),$0))
example_end

Sent: where 's the muffin man ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,and_comp(n|muffin($1),n|man($1))),$0),$2($0))
example_end

Sent: you 'll be back ?
Sem: lambda $0_{ev}.Q(mod|~will(and(cop|be(pro:per|you,$0),adv|back($0)),$0))
example_end

Sent: where does the muffin man live ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(adj|live(det:art|the($1,and_comp(n|muffin($1),n|man($1))),$0),$2($0)),$0)
example_end

Sent: yes I 'm alright .
Sem: lambda $0_{ev}.and(adj|alright(pro:sub|i,$0),co|yes($0))
example_end

Sent: is that a refrigerator ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|refrigerator(pro:rel|that,$0)))
example_end

Sent: on your side of the paper .
Sem: prep|on(det:poss|your($0,att(n|side($0),prep|of(det:art|the($1,n|paper($1))))))
example_end

Sent: shall we use a new piece ?
Sem: lambda $0_{ev}.Q(mod|shall(v|use(pro:sub|we,det:art|a($1,and(adj|new($1),n|piece($1))),$0),$0))
example_end

Sent: my turn ?
Sem: lambda $0_{e}.Q(det:poss|my($1,n|turn($1),$0))
example_end

Sent: oh what 're you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be(part|do-presp(pro:per|you,$1,$0),$0),co|oh($0))
example_end

Sent: on the paper .
Sem: prep|on(det:art|the($0,n|paper($0)))
example_end

Sent: you wrote on my finger .
Sem: lambda $0_{ev}.and(v|write-past(pro:per|you,$0),prep|on(det:poss|my($1,n|finger($1)),$0))
example_end

Sent: there 's nothing in here to read .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|nothing,lambda $1_{ev}.v|read-zero(pro:indef|nothing,$1),$0),prep|in(adv|here($0)))
example_end

Sent: Mommy 's read it .
Sem: lambda $0_{ev}.poss|~s(v|read-zero(n:prop|mommy,pro:per|it,$0),$0)
example_end

Sent: no that 's not shampoo .
Sem: lambda $0_{ev}.and(not(v|shampoo(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: that 's dressing .
Sem: lambda $0_{ev}.part|dress-presp(pro:rel|that,$0)
example_end

Sent: salad dressing .
Sem: lambda $0_{e}.and_comp(n|salad($0),part|dress-presp($0))
example_end

Sent: what you put on salad .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,$1,$0),prep|on(lambda $2_{e}.n|salad($2),$0))
example_end

Sent: you do what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(pro:per|you,$1,$0)
example_end

Sent: you 're picking the ball .
Sem: lambda $0_{ev}.aux|~be(part|pick-presp(pro:per|you,det:art|the($1,n|ball($1)),$0),$0)
example_end

Sent: and what did you do with my piece of paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|with(det:poss|my($2,att(n|piece($2),prep|of(lambda $3_{e}.n|paper($3)))),$0)),$0)
example_end

Sent: why would he want that in his face ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|want(pro:sub|he,pro:dem|that,$0),$1($0)),prep|in(det:poss|his($2,n|face($2)),$0)),$0)
example_end

Sent: no what do I do ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(v|do(pro:sub|i,$1,$0),$0),co|no($0))
example_end

Sent: you take the card .
Sem: lambda $0_{ev}.v|take(pro:per|you,det:art|the($1,n|card($1)),$0)
example_end

Sent: where 's your page ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|page($1)),$0),$2($0))
example_end

Sent: no you don 't pull on books .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|pull(pro:per|you,$0),prep|on(lambda $1_{e}.n|book-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: you don 't throw books either .
Sem: lambda $0_{ev}.not(mod|do(and(v|throw(pro:per|you,lambda $1_{e}.n|book-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: can you read it ?
Sem: lambda $0_{ev}.Q(mod|can(v|read-zero(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you don 't find pictures ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|find(pro:per|you,lambda $1_{e}.n|picture-pl($1),$0),$0),$0))
example_end

Sent: you may fall .
Sem: lambda $0_{ev}.mod|may(v|fall(pro:per|you,$0),$0)
example_end

Sent: you 're tires .
Sem: lambda $0_{ev}.n|tire-pl(pro:per|you,$0)
example_end

Sent: oh I thought you were tired .
Sem: lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.part|tire-pastp(pro:per|you,$1),$0),co|oh($0))
example_end

Sent: I did .
Sem: lambda $0_{ev}.v|do-past(pro:sub|i,$0)
example_end

Sent: oh you 're in the rodeo .
Sem: lambda $0_{ev}.and(and(aux|~be(pro:per|you,$0),prep|in(det:art|the($1,n|rodeo($1)),$0)),co|oh($0))
example_end

Sent: oh what are you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0),co|oh($0))
example_end

Sent: are you riding a horse ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|ride-presp(pro:per|you,det:art|a($1,n|horse($1)),$0),$0))
example_end

Sent: what are you riding ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|ride-presp(pro:per|you,$1,$0),$0)
example_end

Sent: oh you 're going to ride a horse .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|ride(pro:per|you,det:art|a($2,n|horse($2)),$1),$0),$0),co|oh($0))
example_end

Sent: yes he is heavy .
Sem: lambda $0_{ev}.and(adj|heavy(pro:sub|he,$0),co|yes($0))
example_end

Sent: you 're okay ?
Sem: lambda $0_{ev}.Q(adj|okay(pro:per|you,$0))
example_end

Sent: no but that 's not ground .
Sem: lambda $0_{ev}.and(not(n|ground(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: you don 't use a pencil for that do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|use(pro:per|you,det:art|a($1,n|pencil($1)),$0),prep|for(pro:dem|that,$0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: you write with a pencil .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|with(det:art|a($1,n|pencil($1)),$0))
example_end

Sent: you don 't use that either .
Sem: lambda $0_{ev}.not(mod|do(and(v|use(pro:per|you,pro:dem|that,$0),adv|either($0)),$0),$0)
example_end

Sent: pushing what away ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(part|push-presp(you,$1,$0),adv|away($0))
example_end

Sent: you 're pushing that shadow away ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|push-presp(pro:per|you,pro:dem|that($1,n|shadow($1)),$0),adv|away($0)),$0))
example_end

Sent: whose shadow ?
Sem: lambda $0_{e}.$0($1,n|shadow($1))
example_end

Sent: your shadow .
Sem: det:poss|your($0,n|shadow($0))
example_end

Sent: I don 't see your shadow .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,det:poss|your($1,n|shadow($1)),$0),$0),$0)
example_end

Sent: Ricky 's in there ?
Sem: lambda $0_{ev}.Q(and(poss|~s(n:prop|ricky,$0),adv|in(adv|there($0))))
example_end

Sent: what 's funny ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|fun-dn($1,$0)
example_end

Sent: you can 't ride that horse can you ?
Sem: lambda $0_{ev}.Q(and(not(mod|can(v|ride(pro:per|you,pro:dem|that($1,n|horse($1)),$0),$0),$0),mod|can(pro:per|you,$0)))
example_end

Sent: it 's a big horse ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,and(n|horse(pro:per|it,$0),adj|big(pro:per|it,$0))))
example_end

Sent: oh you can ride that one .
Sem: lambda $0_{ev}.and(mod|can(v|ride(pro:per|you,pro:dem|that($1,pro:indef|one($1)),$0),$0),co|oh($0))
example_end

Sent: you can 't ride Perro .
Sem: lambda $0_{ev}.not(mod|can(v|ride(pro:per|you,n:prop|perro,$0),$0),$0)
example_end

Sent: he 's too small isn 't he ?
Sem: lambda $0_{ev}.Q(and(adv|too(adj|small(pro:sub|he,$0)),not(cop|be(pro:sub|he,$0),$0)))
example_end

Sent: no you can 't ride on the tail .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|ride(pro:per|you,$0),prep|on(det:art|the($1,n|tail($1)),$0)),$0),$0),co|no($0))
example_end

Sent: no you don 't need a blanket .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:per|you,det:art|a($1,n|blanket($1)),$0),$0),$0),co|no($0))
example_end

Sent: funny Pinocchio !
Sem: att(n:prop|pinocchio,lambda $0_{e}.adj|fun-dn($0))
example_end

Sent: what do you say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|say(pro:per|you,$1,$0),$0)
example_end

Sent: you didn 't kick Perro .
Sem: lambda $0_{ev}.not(mod|do(v|kick(pro:per|you,n:prop|perro,$0),$0),$0)
example_end

Sent: whom did you kick with your shoe ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|kick(pro:per|you,$1,$0),prep|with(det:poss|your($2,n|shoe($2)),$0)),$0)
example_end

Sent: you hit Mr Cromer with your shoes .
Sem: lambda $0_{ev}.and(v|hit-zero(pro:per|you,n:prop|cromer_mr,$0),prep|with(det:poss|your($1,n|shoe-pl($1)),$0))
example_end

Sent: you kicked him with your shoe .
Sem: lambda $0_{ev}.and(v|kick-past(pro:per|you,pro:obj|him,$0),prep|with(det:poss|your($1,n|shoe($1)),$0))
example_end

Sent: kiss it !
Sem: lambda $0_{ev}.v|kiss(you,pro:per|it,$0)
example_end

Sent: you want him to kiss your dirty shoes .
Sem: lambda $0_{ev}.v|want(pro:per|you,lambda $1_{ev}.v|kiss(pro:obj|him,det:poss|your($2,and(adj|dirt-dn($2),n|shoe-pl($2))),$1),$0)
example_end

Sent: he has dirty feet doesn 't he ?
Sem: lambda $0_{ev}.Q(and(aux|have-3s(pro:sub|he,lambda $1_{e}.and(v|dirty($1),n|foot-pl($1)),$0),not(mod|do(pro:sub|he,$0),$0)))
example_end

Sent: no that 's not yours is it ?
Sem: lambda $0_{ev}.Q(and(and(not(pro:poss|yours(pro:dem|that,$0),$0),aux|be-3s(pro:per|it,$0)),co|no($0)))
example_end

Sent: that one doesn 't work that way .
Sem: lambda $0_{ev}.not(mod|do(v|work(pro:dem|that($1,pro:indef|one($1)),pro:dem|that($2,n|way($2)),$0),$0),$0)
example_end

Sent: that one 's different .
Sem: lambda $0_{ev}.adj|different(pro:dem|that($1,pro:indef|one($1)),$0)
example_end

Sent: let who ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|let-zero(you,$1,$0)
example_end

Sent: don 't step on it .
Sem: lambda $0_{ev}.not(mod|do(and(v|step(you,$0),prep|on(pro:per|it,$0)),$0),$0)
example_end

Sent: Daddy 's going to ride in the car ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(n:prop|daddy,lambda $1_{ev}.and(n|ride(n:prop|daddy,$1),prep|in(det:art|the($2,n|car($2)),$1)),$0),$0))
example_end

Sent: he 's not a copy cat .
Sem: lambda $0_{ev}.not(det:art|a(pro:sub|he,and_comp(n|copy(pro:sub|he,$0),n|cat(pro:sub|he,$0))),$0)
example_end

Sent: you 're a copy cat .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and_comp(n|copy(pro:per|you,$0),n|cat(pro:per|you,$0)))
example_end

Sent: don 't break the points Adam he needs that to write with .
Sem: lambda $0_{ev}.not(and(mod|do(v|break(you,det:art|the($1,n|point-pl($1)),$0),$0),v|need-3s(pro:sub|he,lambda $2_{ev}.v|write(pro:rel|that,$2),$0)),$0)
example_end

Sent: I think he meant let me play with Mr Cromer .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|mean-past(pro:sub|he,lambda $2_{ev}.v|let-zero(_,lambda $3_{ev}.and(v|play(pro:obj|me,$3),prep|with(n:prop|cromer_mr,$3)),$2),$1),$0)
example_end

Sent: where did you put that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|put-zero(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: something broke ?
Sem: lambda $0_{ev}.Q(adj|broke(pro:indef|something,$0))
example_end

Sent: don 't break Mr Cromer 's pencil .
Sem: lambda $0_{ev}.not(mod|do(v|break(you,n:prop|cromer_mr's($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: he won 't be able to write anymore .
Sem: lambda $0_{ev}.not(mod|will(adj|able(pro:sub|he,lambda $1_{ev}.and(v|write(pro:sub|he,$1),adv|anymore($1)),$0),$0),$0)
example_end

Sent: where are you putting that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,pro:rel|that,$0),$1($0)),$0)
example_end

Sent: where is the point ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|point($1)),$0),$2($0))
example_end

Sent: show me the point .
Sem: lambda $0_{ev}.v|show(you,det:art|the($1,n|point($1)),pro:obj|me,$0)
example_end

Sent: put your finger on the point .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:poss|your($1,n|finger($1)),$0),prep|on(det:art|the($2,n|point($2)),$0))
example_end

Sent: birdie toe .
Sem: lambda $0_{e}.and_comp(n|bird-dim($0),n|toe($0))
example_end

Sent: that 's the point .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|point(pro:dem|that,$0))
example_end

Sent: no thanks .
Sem: not(lambda $0_{e}.co|thanks($0))
example_end

Sent: you dropped your hat ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:poss|your($1,n|hat($1)),$0))
example_end

Sent: don 't hit the table so hard .
Sem: lambda $0_{ev}.not(mod|do(and(v|hit-zero(you,det:art|the($1,n|table($1)),$0),adv|so(adv|hard($0))),$0),$0)
example_end

Sent: why did you fall down ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|fall(pro:per|you,$0),$1($0)),adv|down($0)),$0)
example_end

Sent: I 'm not hungry .
Sem: lambda $0_{ev}.not(adj|hungry(pro:sub|i,$0),$0)
example_end

Sent: I don 't want a spoon .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|i,det:art|a($1,n|spoon($1)),$0),$0),$0)
example_end

Sent: oh you 're going to eat ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|eat(pro:per|you,$1),$0),$0),co|oh($0)))
example_end

Sent: you already brought the supper .
Sem: lambda $0_{ev}.and(v|bring-past(pro:per|you,det:art|the($1,n|supper($1)),$0),adv|already($0))
example_end

Sent: you two be quiet .
Sem: lambda $0_{e}.lambda $1_{ev}.n|quiet($0,$1)
example_end

Sent: oh it 's macaroni ?
Sem: lambda $0_{ev}.Q(and(n|macaroni(pro:per|it,$0),co|oh($0)))
example_end

Sent: let me eat the macaroni ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|eat(pro:obj|me,det:art|the($2,n|macaroni($2)),$1),$0))
example_end

Sent: that 's very good .
Sem: lambda $0_{ev}.adv|very(adj|good(pro:dem|that,$0))
example_end

Sent: did you bake that yourself ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|bake(pro:per|you,pro:rel|that,$0),pro:refl|yourself($0)),$0))
example_end

Sent: like a piece of meat ?
Sem: Q(prep|like(det:art|a($0,att(n|piece($0),prep|of(lambda $1_{e}.n|meat($1))))))
example_end

Sent: maybe you dropped it out in the kitchen .
Sem: lambda $0_{ev}.and(and(v|drop-past(pro:per|you,pro:per|it,$0),adv|maybe($0)),adv|out(prep|in(det:art|the($1,n|kitchen($1)),$0)))
example_end

Sent: what kind of meat is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|meat($2))))
example_end

Sent: big meat .
Sem: lambda $0_{e}.and(adj|big($0),n|meat($0))
example_end

Sent: don 't push Adam that 's not nice .
Sem: lambda $0_{ev}.not(and(mod|do(v|push(you,$0),$0),not(adj|nice(pro:dem|that,$0),$0)),$0)
example_end

Sent: what are you getting now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|get-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: I don 't think you need a fork .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,det:art|a($2,n|fork($2)),$1),$0),$0),$0)
example_end

Sent: why do you have a hat and why do you have that ?
Sem: lambda $3_{e}.lambda $1_{e}.lambda $0_{ev}.coord|and(mod|do(and(v|have(pro:per|you,pro:dem|that,$0),$1($0)),$0),mod|do(and(v|have(pro:per|you,det:art|a($2,n|hat($2)),$0),$3($0)),$0))
example_end

Sent: that was in the trash and you took it out didn 't you ?
Sem: lambda $0_{ev}.Q(coord|and(and(and(v|take-past(pro:per|you,pro:per|it,$0),adv|out($0)),not(mod|do(pro:per|you,$0),$0)),and(cop|be-past(pro:dem|that,$0),prep|in(det:art|the($1,n|trash($1)),$0))))
example_end

Sent: bite your pants ?
Sem: lambda $0_{ev}.Q(v|bite(you,det:poss|your($1,n:pt|pants($1)),$0))
example_end

Sent: who bit your pants ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|bit($1,det:poss|your($2,n:pt|pants($2)),$0)
example_end

Sent: doggie did ?
Sem: lambda $0_{ev}.Q(v|do-past(lambda $1_{e}.n|dog-dim($1),$0))
example_end

Sent: which doggie ?
Sem: lambda $0_{e}.$0($1,n|dog-dim($1))
example_end

Sent: you got lots_of bites didn 't you ?
Sem: lambda $0_{ev}.Q(and(part|get-pastp(pro:per|you,qn|lots_of($1,n|bite-pl($1)),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: why do you have_to put the hat on when you 're out there .
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(and(aux|~be(pro:per|you,$0),adv|out(adv|there($0))),mod:aux|have_to(mod|do(and(and(v|put-zero(pro:per|you,det:art|the($1,n|hat($1)),$0),$2($0)),adv|on($0)),$0),$0))
example_end

Sent: why do you have_to wear a hat ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(and(v|wear(pro:per|you,det:art|a($1,n|hat($1)),$0),$2($0)),$0),$0)
example_end

Sent: cowboy lost the hat ?
Sem: lambda $0_{ev}.Q(v|lose-past(lambda $1_{e}.n|cow+boy($1),det:art|the($2,n|hat($2)),$0))
example_end

Sent: you don 't wear a bandana .
Sem: lambda $0_{ev}.not(mod|do(v|wear(pro:per|you,det:art|a($1,n|bandana($1)),$0),$0),$0)
example_end

Sent: cowboy likes a boot ?
Sem: lambda $0_{ev}.Q(v|like-3s(lambda $1_{e}.n|cow+boy($1),det:art|a($2,n|boot($2)),$0))
example_end

Sent: why does the cowboy like boots .
Sem: lambda $3_{e}.lambda $0_{ev}.v|do-3s(and(prep|like(det:art|the($1,n|cow+boy($1)),lambda $2_{e}.n|boot-pl($2),$0),$3($0)),$0)
example_end

Sent: you don 't have any boots on .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,qn|any($1,n|boot-pl($1)),$0),prep|on($0)),$0),$0)
example_end

Sent: you have a hat on .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,det:art|a($1,n|hat($1)),$0),adv|on($0))
example_end

Sent: what else do you have on Adam .
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(and(v|have(pro:per|you,$1,$0),prep|on($0)),$0)
example_end

Sent: you don 't have any bandana .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,qn|any($1,n|bandana($1)),$0),$0),$0)
example_end

Sent: who took them ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|take-past($1,pro:obj|them,$0)
example_end

Sent: Santa did ?
Sem: lambda $0_{ev}.Q(v|do-past(n:prop|santa,$0))
example_end

Sent: oh he can 't write with a spoon .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|write(pro:sub|he,$0),prep|with(det:art|a($1,n|spoon($1)),$0)),$0),$0),co|oh($0))
example_end

Sent: put it in your hat .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|hat($1)),$0))
example_end

Sent: just a minute Santa Claus .
Sem: adv|just(det:art|a($0,n|minute($0)))
example_end

Sent: oh Santa Claus has boots on just like you .
Sem: lambda $0_{ev}.and(and(and(aux|have-3s(n:prop|claus_santa,lambda $1_{e}.v|boot-3s($1),$0),adv|on($0)),adv|just(prep|like(pro:per|you,$0))),co|oh($0))
example_end

Sent: let you need them on ?
Sem: lambda $0_{ev}.Q(and(v|need(pro:per|you,pro:obj|them,$0),adv|on($0)))
example_end

Sent: oh the saddle and bridle are all_gone ?
Sem: lambda $0_{ev}.Q(and(adj|all_gone(coord|and(det:art|the($1,n|saddle($1)),lambda $2_{e}.n|bridle($2)),$0),co|oh($0)))
example_end

Sent: what happened to them ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|them,$0))
example_end

Sent: Mommy 's pointing ?
Sem: lambda $0_{ev}.Q(aux|~be(part|point-presp(n:prop|mommy,$0),$0))
example_end

Sent: your saddle and bridle .
Sem: coord|and(det:poss|your($0,n|saddle($0)),lambda $1_{e}.n|bridle($1))
example_end

Sent: oh that 's what cowboy 's horses wear .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,lambda $1_{ev}.v|wear(n|cow+boy's($2,n|horse-pl($2)),pro:int|what,$1),$0),co|oh($0))
example_end

Sent: who get out ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|get($1,$0),adv|out($0))
example_end

Sent: cowboys did ?
Sem: lambda $0_{ev}.Q(v|do-past(lambda $1_{e}.n|cow+boy($1),$0))
example_end

Sent: watch your head .
Sem: lambda $0_{ev}.v|watch(you,det:poss|your($1,n|head($1)),$0)
example_end

Sent: oh you 'll be back ?
Sem: lambda $0_{ev}.Q(and(mod|~will(and(cop|be(pro:per|you,$0),adv|back($0)),$0),co|oh($0)))
example_end

Sent: where are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(pro:per|you,$0),$1($0))
example_end

Sent: you 're where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be(pro:per|you,$0),$1($0))
example_end

Sent: a little while ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|little($1),n|while($1)),$0))
example_end

Sent: other bunkhouse .
Sem: lambda $0_{e}.and(qn|other($0),n|bunkhouse($0))
example_end

Sent: somebody went away .
Sem: lambda $0_{ev}.and(v|go-past(pro:indef|somebody,$0),adv|away($0))
example_end

Sent: you 're going to dance with Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|dance(pro:per|you,$1),prep|with(n:prop|cromer,$1)),$0),$0))
example_end

Sent: no Adam don 't put that in the microphone .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,pro:dem|that,$0),prep|in(det:art|the($1,n|microphone($1)),$0)),$0),$0),co|no($0))
example_end

Sent: that can 't go in there .
Sem: lambda $0_{ev}.not(mod|can(and(v|go(pro:rel|that,$0),prep|in(adv|there($0))),$0),$0)
example_end

Sent: no don 't put it in the microphone .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,pro:per|it,$0),prep|in(det:art|the($1,n|microphone($1)),$0)),$0),$0),co|no($0))
example_end

Sent: is that part of the broom ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|broom($1)))))
example_end

Sent: Adam no !
Sem: lambda $0_{ev}.co|no($0)
example_end

Sent: she needs to write with the pencil .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|she,lambda $1_{ev}.and(v|write(pro:sub|she,$1),prep|with(det:art|the($2,n|pencil($2)),$1)),$0)
example_end

Sent: that wasn 't nice was it ?
Sem: lambda $0_{ev}.Q(and(not(adj|nice(pro:dem|that,$0),$0),cop|be-past(pro:per|it,$0)))
example_end

Sent: Jesus stands up what ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|stand-3s_up(n:prop|jesus,$0),$1($0))
example_end

Sent: oh horsie .
Sem: lambda $0_{ev}.and(n|horse-dim($0),co|oh($0))
example_end

Sent: another Jesus ?
Sem: lambda $0_{e}.Q(qn|another($1,n:prop|jesus($1),$0))
example_end

Sent: Jesus does what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(n:prop|jesus,$1,$0)
example_end

Sent: Jesus walks ?
Sem: lambda $0_{ev}.Q(v|walk-3s(n:prop|jesus,$0))
example_end

Sent: no Adam that 's not nice .
Sem: lambda $0_{ev}.and(not(adj|nice(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: write on your paper .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:poss|your($1,n|paper($1)),$0))
example_end

Sent: no don 't get on the table .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|get(you,det:art|the($1,n|table($1)),$0),prep|on($0)),$0),$0),co|no($0))
example_end

Sent: get off the table honey .
Sem: lambda $0_{ev}.and(v|get(you,det:art|the($1,n|table($1)),$0),prep|off($0))
example_end

Sent: the table may fall .
Sem: lambda $0_{ev}.mod|may(v|fall(det:art|the($1,n|table($1)),$0),$0)
example_end

Sent: careful with the pencil honey .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: we 're Jesus .
Sem: lambda $0_{ev}.n:prop|jesus(pro:sub|we,$0)
example_end

Sent: no don 't you hit anybody with the pencil .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|hit-zero(pro:per|you,pro:indef|anybody,$0),prep|with(det:art|the($1,n|pencil($1)),$0)),$0),$0),co|no($0))
example_end

Sent: Adam be careful with the pencil .
Sem: lambda $0_{e}.lambda $1_{ev}.co|careful($0,$1)
example_end

Sent: well you bring it and put it on the table .
Sem: lambda $0_{ev}.and(coord|and(and(v|put-zero(pro:per|you,pro:per|it,$0),prep|on(det:art|the($1,n|table($1)),$0)),v|bring(pro:per|you,pro:per|it,$0)),co|well($0))
example_end

Sent: you 're rolling the tape ?
Sem: lambda $0_{ev}.Q(aux|~be(part|roll-presp(pro:per|you,det:art|the($1,n|tape($1)),$0),$0))
example_end

Sent: careful with your pencil honey .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: Adam no don 't do that to the rug .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|do(you,pro:dem|that,$0),prep|to(det:art|the($1,n|rug($1)),$0)),$0),$0),co|no($0))
example_end

Sent: don 't put the screwdriver on the rug like that .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|put-zero(you,det:art|the($1,n|screw+driver($1)),$0),prep|on(det:art|the($2,n|rug($2)),$0)),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: not for digging .
Sem: not(prep|for(lambda $0_{e}.n:gerund|dig-presp($0)))
example_end

Sent: you use a shovel for digging .
Sem: lambda $0_{ev}.and(v|use(pro:per|you,det:art|a($1,n|shovel($1)),$0),prep|for(lambda $2_{e}.n:gerund|dig-presp($2),$0))
example_end

Sent: yes but you don 't have a shovel do you ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|have(pro:per|you,det:art|a($1,n|shovel($1)),$0),$0),$0),v|do(pro:per|you,$0)),co|yes($0)))
example_end

Sent: when spring comes and we go outside you may have a shovel to dig in the sand outside .
Sem: lambda $0_{ev}.coord|and(and(v|go(pro:sub|we,$0),adv|outside($0)),and(v|come-3s(lambda $1_{e}.n|spring($1),$0),mod|may(v|have(pro:per|you,lambda $2_{ev}.and(n|dig(det:art|a($3,n|shovel($3)),$2),adv|outside(prep|in(det:art|the($4,n|sand($4)),$2))),$0),$0)))
example_end

Sent: why don 't you go work on your firetruck with the screwdriver ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(and(n|work(pro:per|you,det:poss|your($1,n|fire+truck($1)),$0),$2($0)),prep|on($0)),prep|with(det:art|the($3,n|screw+driver($3)),$0)),$0),$0)
example_end

Sent: what about the screws on your firetruck .
Sem: att(pro:int|what,adv|about(det:art|the($0,att(n|screw-pl($0),prep|on(det:poss|your($1,n|fire+truck($1)))))))
example_end

Sent: are they all there ?
Sem: lambda $0_{ev}.Q(and(cop|be-pres(pro:sub|they,$0),post|all(adv|there($0))))
example_end

Sent: she doesn 't have anything to show you in that bag .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|she,lambda $1_{ev}.v|show(att(pro:indef|anything,prep|in(pro:dem|that($2,n|bag($2)))),pro:per|you,$1),$0),$0),$0)
example_end

Sent: let me show you ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|show(pro:obj|me,_,pro:per|you,$1),$0))
example_end

Sent: do you want to see some more pictures ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,qn|some($2,and(qn|more($2),n|picture-pl($2))),$1),$0),$0))
example_end

Sent: where 's Robin on there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(cop|~be(n:prop|robin,$0),$1($0)),prep|on(adv|there($0)))
example_end

Sent: no that 's not David .
Sem: lambda $0_{ev}.and(not(n:prop|david(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: can you see what they 're doing ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,lambda $1_{ev}.aux|~be(part|do-presp(pro:sub|they,pro:int|what,$1),$1),$0),$0))
example_end

Sent: they are working .
Sem: lambda $0_{ev}.aux|be-pres(part|work-presp(pro:sub|they,$0),$0)
example_end

Sent: oh Robin is a little boy ?
Sem: lambda $0_{ev}.Q(and(det:art|a(n:prop|robin,and(n|boy(n:prop|robin,$0),adj|little(n:prop|robin,$0))),co|oh($0)))
example_end

Sent: you don 't like it ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|like(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: no there 's nothing in there .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:indef|nothing,$0),prep|in(adv|there($0))),co|no($0))
example_end

Sent: no that 's Urs  bag .
Sem: lambda $0_{ev}.and(n:prop|ursula's'(pro:dem|that,n|bag(pro:dem|that,$0)),co|no($0))
example_end

Sent: no don 't take it out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|take(you,pro:per|it,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: you ask Urs .
Sem: lambda $0_{ev}.v|ask(pro:per|you,n:prop|ursula,$0)
example_end

Sent: that 's her bag .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|that,n|bag(pro:dem|that,$0))
example_end

Sent: what are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|they,$0)
example_end

Sent: yes I see .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,$0),co|yes($0))
example_end

Sent: bu I don 't think she wants the glove on now .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(and(v|want-3s(pro:sub|she,det:art|the($2,n|glove($2)),$1),prep|on($1)),adv|now($1)),$0),$0),$0)
example_end

Sent: she can 't write with the glove on .
Sem: lambda $0_{ev}.not(mod|can(and(v|write(pro:sub|she,$0),adv|on(prep|with(det:art|the($1,n|glove($1)),$0))),$0),$0)
example_end

Sent: you can put them on your hand .
Sem: lambda $0_{ev}.mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|on(det:poss|your($1,n|hand($1)),$0)),$0)
example_end

Sent: you keep that .
Sem: lambda $0_{ev}.v|keep(pro:per|you,pro:dem|that,$0)
example_end

Sent: you put them on your hand .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|on(det:poss|your($1,n|hand($1)),$0))
example_end

Sent: is that the right one ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),adj|right(pro:rel|that,$0))))
example_end

Sent: you put it on .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|on($0))
example_end

Sent: that 's a fastener .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fasten-dv(pro:dem|that,$0))
example_end

Sent: he doesn 't have fingers .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|he,lambda $1_{e}.n|finger-pl($1),$0),$0),$0)
example_end

Sent: small doggie .
Sem: lambda $0_{e}.and(adj|small($0),n|dog-dim($0))
example_end

Sent: he doesn 't have fingers either .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:sub|he,lambda $1_{e}.n|finger-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: well what do you have in the trash can ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:art|the($2,and_comp(n|trash($2),mod|can($2))),$0)),$0),co|well($0))
example_end

Sent: you got them .
Sem: lambda $0_{ev}.v|get-past(pro:per|you,pro:obj|them,$0)
example_end

Sent: where did you get them ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|you,pro:obj|them,$0),$1($0)),$0)
example_end

Sent: from the bag .
Sem: prep|from(det:art|the($0,n|bag($0)))
example_end

Sent: alright put them back .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|them,$0),adv|back($0)),co|alright($0))
example_end

Sent: Adam you have another one out here .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,qn|another($1,pro:indef|one($1)),$0),adv|out(adv|here($0)))
example_end

Sent: no we don 't need our forks .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:sub|we,det:poss|our($1,n|fork-pl($1)),$0),$0),$0),co|no($0))
example_end

Sent: I already have mine .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,pro:poss|mine,$0),adv|already($0))
example_end

Sent: okay thank_you .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|okay($0))
example_end

Sent: little talk .
Sem: lambda $0_{e}.and(adj|little($0),n|talk($0))
example_end

Sent: maybe she 's afraid of doggies .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|afraid($0,$1)
example_end

Sent: read a magazine ?
Sem: lambda $0_{ev}.Q(v|read-zero(you,det:art|a($1,n|magazine($1)),$0))
example_end

Sent: is that what you have a magazine ?
Sem: lambda $0_{ev}.Q(cop|be-3s(pro:dem|that,lambda $1_{ev}.v|have(pro:per|you,pro:int|what,$1),$0))
example_end

Sent: what are you reading in the magazine ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|read-presp(pro:per|you,$1,$0),prep|in(det:art|the($2,n|magazine($2)),$0)),$0)
example_end

Sent: let me want fork .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|want(pro:obj|me,lambda $2_{e}.n|fork($2),$1),$0)
example_end

Sent: what is that in the bottle ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(att(pro:dem|that,prep|in(det:art|the($2,n|bottle($2)))),$0)
example_end

Sent: it 's hot .
Sem: lambda $0_{ev}.adj|hot(pro:per|it,$0)
example_end

Sent: what 's hot ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|hot($1,$0)
example_end

Sent: radiator is hot ?
Sem: lambda $0_{ev}.Q(adj|hot(lambda $1_{e}.n|radiator($1),$0))
example_end

Sent: bandana belongs to the cowboy ?
Sem: lambda $0_{ev}.Q(and(v|belong-3s(lambda $1_{e}.n|bandana($1),$0),prep|to(det:art|the($2,n|cow+boy($2)),$0)))
example_end

Sent: oh that 's corn ?
Sem: lambda $0_{ev}.Q(and(n|corn(pro:dem|that,$0),co|oh($0)))
example_end

Sent: what kind of corn is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|corn($2))))
example_end

Sent: corn on the cob ?
Sem: lambda $0_{e}.Q(att(n|corn($0),prep|on(det:art|the($1,n|cob($1)))))
example_end

Sent: you 've finished your corn haven 't you ?
Sem: lambda $0_{ev}.Q(and(aux|~have(part|finish-pastp(pro:per|you,det:poss|your($1,n|corn($1)),$0),$0),not(aux|have(pro:per|you,$0),$0)))
example_end

Sent: what kind of smoke is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|smoke($2))))
example_end

Sent: you 're sitting at the table ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|sit-presp(pro:per|you,$0),prep|at(det:art|the($1,n|table($1)),$0)),$0))
example_end

Sent: well what kind of smoke is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|smoke($2)))),co|well($0))
example_end

Sent: oh cigarette smoke .
Sem: lambda $0_{ev}.and(and_comp(n|cigarette($0),n|smoke($0)),co|oh($0))
example_end

Sent: put the pencil right on the table .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|pencil($1)),$0),adv|right(prep|on(det:art|the($2,n|table($2)),$0)))
example_end

Sent: why don 't you write a tomato for me ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|write(pro:per|you,det:art|a($1,n|tomato($1)),$0),$2($0)),prep|for(pro:obj|me,$0)),$0),$0)
example_end

Sent: okay you draw a cowboy hat .
Sem: lambda $0_{ev}.and(v|draw(pro:per|you,det:art|a($1,and_comp(n|cow+boy($1),n|hat($1))),$0),co|okay($0))
example_end

Sent: oh that 's a nice cowboy hat .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and_comp(n|cow+boy(pro:dem|that,$0),and(n|hat(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))),co|oh($0))
example_end

Sent: come on Adam .
Sem: lambda $0_{ev}.and(v|come(you,$0),prep|on($0))
example_end

Sent: leave those mops alone and come out here .
Sem: lambda $0_{ev}.coord|and(and(v|come(you,$0),adv|out(adv|here($0))),and(v|leave(you,pro:dem|those($1,n|mop-pl($1)),$0),adv|alone($0)))
example_end

Sent: no you don 't do that on Mommy 's rug .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|do(pro:per|you,pro:dem|that,$0),prep|on(n:prop|mommy's($1,n|rug($1)),$0)),$0),$0),co|no($0))
example_end

Sent: no you don 't do that Adam what do you say ?
Sem: lambda $0_{ev}.Q(and(not(and(mod|do(v|do(pro:per|you,det:dem|that,$0),$0),mod|do(v|say(pro:per|you,pro:int|what,$0),$0)),$0),co|no($0)))
example_end

Sent: no where could she go ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|could(and(v|go(pro:sub|she,$0),$1($0)),$0),co|no($0))
example_end

Sent: where could she sit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|could(and(v|sit(pro:sub|she,$0),$1($0)),$0)
example_end

Sent: yes you sit down there and read a story to the microphone .
Sem: lambda $0_{ev}.and(and(coord|and(and(v|read-zero(pro:per|you,det:art|a($1,n|story($1)),$0),prep|to(det:art|the($2,n|microphone($2)),$0)),v|sit(pro:per|you,$0)),adv|down(adv|there($0))),co|yes($0))
example_end

Sent: are you going to listen to a story ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|listen(pro:per|you,$1),prep|to(det:art|a($2,n|story($2)),$1)),$0),$0))
example_end

Sent: well your story books are out here aren 't they ?
Sem: lambda $0_{ev}.Q(and(and(and(cop|be-pres(det:poss|your($1,and_comp(n|story($1),n|book-pl($1))),$0),adv|out(adv|here($0))),not(aux|be(pro:sub|they,$0),$0)),co|well($0)))
example_end

Sent: you can 't read without your hat .
Sem: lambda $0_{ev}.not(mod|can(and(v|read-zero(pro:per|you,$0),prep|without(det:poss|your($1,n|hat($1)),$0)),$0),$0)
example_end

Sent: a nice train ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|nice($1),n|train($1)),$0))
example_end

Sent: yes I 'd like to listen to shadow .
Sem: lambda $0_{ev}.and(mod|~genmod(v|like(pro:sub|i,lambda $1_{ev}.and(v|listen(pro:sub|i,$1),prep|to(lambda $2_{e}.n|shadow($2),$1)),$0),$0),co|yes($0))
example_end

Sent: very nice .
Sem: lambda $0_{e}.adv|very(adj|nice($0))
example_end

Sent: that 's a good one .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: a big one .
Sem: det:art|a($0,att(pro:indef|one,lambda $1_{e}.adj|big($1),$0))
example_end

Sent: a saddle and a bridle .
Sem: coord|and(det:art|a($0,n|saddle($0)),det:art|a($1,n|bridle($1)))
example_end

Sent: that 's a nice story .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|story(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))
example_end

Sent: yes that 's a nice story .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(n|story(pro:dem|that,$0),adj|nice(pro:dem|that,$0))),co|yes($0))
example_end

Sent: where did all the pieces go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(qn|all(det:art|the($1,n|piece-pl($1))),$0),$2($0)),$0)
example_end

Sent: you can use the table Adam if you want to .
Sem: lambda $0_{ev}.conj|if(v|want(pro:per|you,$0),mod|can(v|use(pro:per|you,det:art|the($1,n|table($1)),$0),$0))
example_end

Sent: I think he 's standing on his feet .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(and(part|stand-presp(pro:sub|he,$1),prep|on(det:poss|his($2,n|foot-pl($2)),$1)),$1),$0)
example_end

Sent: that goes there doesn 't it ?
Sem: lambda $0_{ev}.Q(and(and(v|go-3s(pro:rel|that,$0),adv|there($0)),not(mod|do(pro:per|it,$0),$0)))
example_end

Sent: am I going to what ?
Sem: lambda $0_{ev}.aux|be-1s(part|go-presp(pro:sub|i,$0),$0)
example_end

Sent: that 's her pocketbook .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|that,n|pocket+book(pro:dem|that,$0))
example_end

Sent: have you seen everything ?
Sem: lambda $0_{ev}.Q(v|have(part|see-pastp(pro:per|you,pro:indef|everything,$0),$0))
example_end

Sent: oh teasing .
Sem: lambda $0_{ev}.and(part|tease-presp(you,$0),co|oh($0))
example_end

Sent: you 're teasing Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(part|tease-presp(pro:per|you,n:prop|cromer,$0),$0))
example_end

Sent: do you know what this is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no that 's not a car .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|car(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: what kind of pen ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|pen($2))))
example_end

Sent: what kind of car ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|car($2))))
example_end

Sent: red car ?
Sem: lambda $0_{e}.Q(and(adj|red($0),n|car($0)))
example_end

Sent: yellow car ?
Sem: lambda $0_{e}.Q(and(n|yellow($0),n|car($0)))
example_end

Sent: what do you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0)
example_end

Sent: where what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.and(v|go($1,$0),$2($0))
example_end

Sent: did he go to the corral ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|go(pro:sub|he,$0),prep|to(det:art|the($1,n|corral($1)),$0)),$0))
example_end

Sent: you 're doing tricks ?
Sem: lambda $0_{ev}.Q(aux|~be(part|do-presp(pro:per|you,lambda $1_{e}.n|trick-pl($1),$0),$0))
example_end

Sent: doing tricks ?
Sem: lambda $0_{ev}.Q(part|do-presp(you,lambda $1_{e}.n|trick-pl($1),$0))
example_end

Sent: what kind of tricks ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|trick-pl($2))))
example_end

Sent: chair tricks ?
Sem: lambda $0_{e}.Q(and_comp(n|chair($0),v|trick-3s($0)))
example_end

Sent: oh you 're laughing ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|laugh-presp(pro:per|you,$0),$0),co|oh($0)))
example_end

Sent: do I remember chair tricks ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:sub|i,lambda $1_{e}.and_comp(n|chair($1),n|trick-pl($1)),$0),$0))
example_end

Sent: you 're pressing a button ?
Sem: lambda $0_{ev}.Q(aux|~be(part|press-presp(pro:per|you,det:art|a($1,n|button($1)),$0),$0))
example_end

Sent: and what happens ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|happen-3s(you,$1,$0)
example_end

Sent: rope tricks ?
Sem: lambda $0_{e}.Q(and_comp(n|rope($0),v|trick-3s($0)))
example_end

Sent: oh you fell down on Mommy 's floor ?
Sem: lambda $0_{ev}.Q(and(and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|on(n:prop|mommy's($1,n|floor($1)),$0)),co|oh($0)))
example_end

Sent: no don 't throw that .
Sem: lambda $0_{ev}.and(not(mod|do(v|throw(you,pro:dem|that,$0),$0),$0),co|no($0))
example_end

Sent: oh your rope tricks .
Sem: lambda $0_{ev}.and(det:poss|your($1,and_comp(n|rope($1),n|trick-pl($1)),$0),co|oh($0))
example_end

Sent: I don 't think it will if you put him down there .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: try him up there .
Sem: lambda $0_{ev}.and(v|try(you,pro:obj|him,$0),adv|up(adv|there($0)))
example_end

Sent: well it doesn 't really belong there .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|belong(pro:per|it,$0),adv|real-dadj($0)),adv|there($0)),$0),$0),co|well($0))
example_end

Sent: I don 't know what happened .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|happen-past(pro:int|what,$1),$0),$0),$0)
example_end

Sent: what happened to him ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|him,$0))
example_end

Sent: Rusty 's down there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n:prop|rusty,$0),adv|down(adv|there($0))))
example_end

Sent: cowboy 's grass ?
Sem: lambda $0_{e}.Q(n|cow+boy's($1,n|grass($1),$0))
example_end

Sent: oh don 't take it from you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|take(you,pro:per|it,$0),prep|from(pro:per|you,$0)),$0),$0),co|oh($0)))
example_end

Sent: what is it now ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|it($0,$1)
example_end

Sent: you can 't play with that .
Sem: lambda $0_{ev}.not(mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|that,$0)),$0),$0)
example_end

Sent: it 's a can top .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and_comp(n|can(pro:per|it,$0),n|top(pro:per|it,$0)))
example_end

Sent: strong and healthy .
Sem: lambda $0_{e}.coord|and(adj|strong($0),adj|health-dn($0))
example_end

Sent: that 's not a rocket .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|rocket(pro:dem|that,$0)),$0)
example_end

Sent: that 's a Wheaties box .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n:prop|wheaties(pro:dem|that,$0),n|box(pro:dem|that,$0)))
example_end

Sent: you go over near the door .
Sem: lambda $0_{ev}.and(and(v|go(pro:per|you,$0),adv|over($0)),prep|near(det:art|the($1,n|door($1)),$0))
example_end

Sent: you got your rocket ?
Sem: lambda $0_{ev}.Q(v|get-past(pro:per|you,det:poss|your($1,n|rocket($1)),$0))
example_end

Sent: where are you trying to send your rocket ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-pres(and(part|try-presp(pro:per|you,lambda $1_{ev}.v|send(pro:per|you,det:poss|your($2,n|rocket($2)),$1),$0),$3($0)),$0)
example_end

Sent: what are you doing with the rocket ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|with(det:art|the($2,n|rocket($2)),$0)),$0)
example_end

Sent: you might hurt him .
Sem: lambda $0_{ev}.mod|might(v|hurt-zero(pro:per|you,pro:obj|him,$0),$0)
example_end

Sent: isn 't the rocket heavy ?
Sem: lambda $0_{ev}.Q(not(adj|heavy(det:art|the($1,n|rocket($1)),$0),$0))
example_end

Sent: what kind of flag ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|flag($2))))
example_end

Sent: Adam don 't throw the ball okay ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|throw(you,det:art|the($1,n|ball($1)),$0),$0),$0),adj|okay($0)))
example_end

Sent: what 's wrong with it ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|wrong($0,$1)
example_end

Sent: oh it 's a trailer ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|it,n|trailer(pro:per|it,$0)),co|oh($0)))
example_end

Sent: push Rusty down ?
Sem: lambda $0_{ev}.Q(and(n|push(you,n:prop|rusty,$0),adv|down($0)))
example_end

Sent: go where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go(you,$0),$1($0))
example_end

Sent: well I can 't do that .
Sem: lambda $0_{ev}.and(not(mod|can(v|do(pro:sub|i,pro:dem|that,$0),$0),$0),co|well($0))
example_end

Sent: what 's the trailer doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|trailer($1)),$2,$0),$0)
example_end

Sent: watching you ?
Sem: lambda $0_{ev}.Q(part|watch-presp(you,pro:per|you,$0))
example_end

Sent: I wouldn 't throw my hat .
Sem: lambda $0_{ev}.not(mod|will(v|throw(pro:sub|i,det:poss|my($1,n|hat($1)),$0),$0),$0)
example_end

Sent: careful of the light Adam .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: you 're going to leave your horses down there ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|leave(pro:per|you,det:poss|your($2,n|horse-pl($2)),$1),adv|down(adv|there($1))),$0),$0))
example_end

Sent: yes I 'm watching you .
Sem: lambda $0_{ev}.and(aux|~be(part|watch-presp(pro:sub|i,pro:per|you,$0),$0),co|yes($0))
example_end

Sent: no Adam you don 't climb up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|climb(pro:per|you,$0),adv|up(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: come down .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|down($0))
example_end

Sent: no I don 't want that book thank_you .
Sem: lambda $0_{ev}.and(and(not(mod|do(v|want(pro:sub|i,pro:dem|that($1,n|book($1)),$0),$0),$0),co|no($0)),n|thank_you($0))
example_end

Sent: come down or else you can 't player over there anymore .
Sem: lambda $0_{ev}.post|else_or(not(mod|can(and(and(n|play-dv(pro:per|you,$0),adv|over(adv|there($0))),adv|anymore($0)),$0),$0),and(v|come(you,$0),adv|down($0)))
example_end

Sent: I don 't know what happened to you ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|happen-past(pro:int|what,$1),prep|to(pro:per|you,$1)),$0),$0),$0))
example_end

Sent: oh what happened to the cowboy ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(det:art|the($2,n|cow+boy($2)),$0)),co|oh($0))
example_end

Sent: don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(you,$0),$0),$0)
example_end

Sent: he doesn 't see you putting any boots on .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|he,lambda $1_{ev}.and(part|put-presp(pro:per|you,qn|any($2,n|boot-pl($2)),$1),prep|on($1)),$0),$0),$0)
example_end

Sent: you aren 't putting any boots on .
Sem: lambda $0_{ev}.not(aux|be(and(part|put-presp(pro:per|you,qn|any($1,n|boot-pl($1)),$0),prep|on($0)),$0),$0)
example_end

Sent: Adam you 're going to fall .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|fall(pro:per|you,$1),$0),$0)
example_end

Sent: how can you see when you 've broken it .
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(aux|~have(part|break-pastp(pro:per|you,pro:per|it,$0),$0),mod|can(and(v|see(pro:per|you,$0),$1($0)),$0))
example_end

Sent: what do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: see you what ?
Sem: lambda $0_{ev}.v|see(you,pro:per|you,$0)
example_end

Sent: it 's broken .
Sem: lambda $0_{ev}.part|break-pastp(pro:per|it,$0)
example_end

Sent: no it doesn 't come out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|come(pro:per|it,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: it won 't come out .
Sem: lambda $0_{ev}.not(mod|will(and(v|come(pro:per|it,$0),adv|out($0)),$0),$0)
example_end

Sent: well she needs her pencil .
Sem: lambda $0_{ev}.and(v|need-3s(pro:sub|she,det:poss|her($1,n|pencil($1)),$0),co|well($0))
example_end

Sent: here 's your pencil over here .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|your($1,n|pencil($1)),$0),pro:exist|here($0)),adv|over(adv|here($0)))
example_end

Sent: get out_of the way ?
Sem: lambda $0_{ev}.Q(and(v|get(you,$0),prep|out_of(det:art|the($1,n|way($1)),$0)))
example_end

Sent: who 's in your way ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|your($2,n|way($2)),$0))
example_end

Sent: that doesn 't belong on the floor .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:dem|that,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0)
example_end

Sent: ask Ursula what that is .
Sem: lambda $0_{ev}.v|ask(you,n:prop|ursula,$0)
example_end

Sent: you ask her .
Sem: lambda $0_{ev}.v|ask(pro:per|you,pro:obj|her,$0)
example_end

Sent: give it back to Ursla .
Sem: lambda $0_{ev}.and(v|give(you,pro:per|it,$0),adv|back(prep|to(n:prop|ursla,$0)))
example_end

Sent: it 's a brush for a typewriter with an eraser on this end .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,att(att(n|brush(pro:per|it,$0),prep|for(det:art|a($1,n|type+writer($1)))),prep|with(det:art|a($2,att(n|erase-dv($2),prep|on(pro:dem|this($3,n|end($3))))))))
example_end

Sent: I don 't think that 's yours .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.pro:poss|yours(pro:rel|that,$1),$0),$0),$0)
example_end

Sent: no let Urs look now Adam .
Sem: lambda $0_{ev}.and(part|let-pastp(you,lambda $1_{ev}.and(cop|look(n:prop|ursula,$1),adv|now($1)),$0),co|no($0))
example_end

Sent: let her finish looking in her pocket book now .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.v|finish(pro:obj|her,$1),$0),adv|now($0))
example_end

Sent: a picture of somebody .
Sem: det:art|a($0,att(n|picture($0),prep|of(pro:indef|somebody)))
example_end

Sent: who is the somebody ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,pro:indef|somebody($0,$1))
example_end

Sent: Adam wait .
Sem: lambda $0_{ev}.v|wait(you,$0)
example_end

Sent: oh that 's dollar ?
Sem: lambda $0_{ev}.Q(and(n|dollar(pro:dem|that,$0),co|oh($0)))
example_end

Sent: this doesn 't cut .
Sem: lambda $0_{ev}.not(mod|do(v|cut-zero(pro:dem|this,$0),$0),$0)
example_end

Sent: here are some more paper clips .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some(qn|more($1,and_comp(n|paper($1),n|clip-pl($1)))),$0),adv|here($0))
example_end

Sent: are you going to put them back in the box ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back(prep|in(det:art|the($2,n|box($2)),$1))),$0),$0))
example_end

Sent: oh then put it .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:per|it,$0),adv:tem|then($0)),co|oh($0))
example_end

Sent: what do you do with the pipe ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|pipe($2)),$0)),$0)
example_end

Sent: oh button press .
Sem: lambda $0_{ev}.and(and_comp(n|button($0),n|press($0)),co|oh($0))
example_end

Sent: what happens when you press the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),v|happen-3s($2,$0))
example_end

Sent: got it ?
Sem: lambda $0_{ev}.Q(v|get-past(you,pro:per|it,$0))
example_end

Sent: what did you get ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|get(pro:per|you,$1,$0),$0)
example_end

Sent: you caught it ?
Sem: lambda $0_{ev}.Q(v|catch-past(pro:per|you,pro:per|it,$0))
example_end

Sent: what did you catch ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|catch(pro:per|you,$1,$0),$0)
example_end

Sent: meadow pond .
Sem: lambda $0_{e}.and_comp(adj|meadow($0),n|pond($0))
example_end

Sent: oh a meadow pond .
Sem: lambda $0_{ev}.and(det:art|a($1,and_comp(adj|meadow($1),n|pond($1)),$0),co|oh($0))
example_end

Sent: what about the meadow pond ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|meadow($0),n|pond($0)))))
example_end

Sent: you jumped over it ?
Sem: lambda $0_{ev}.Q(and(v|jump-past(pro:per|you,$0),adv|over(pro:per|it,$0)))
example_end

Sent: I don 't think you can jump over the pipe .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|jump(pro:per|you,$1),adv|over(det:art|the($2,n|pipe($2)),$1)),$1),$0),$0),$0)
example_end

Sent: yes you did jump over the pipe didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|do-past(and(n|jump(pro:per|you,$0),adv|over(det:art|the($1,n|pipe($1)),$0)),$0),not(mod|do(pro:per|you,$0),$0)),co|yes($0)))
example_end

Sent: missed it ?
Sem: lambda $0_{ev}.Q(v|miss-past(you,pro:per|it,$0))
example_end

Sent: Adam what happens when you press the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),v|happen-3s($2,$0))
example_end

Sent: what does the button do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|button($1)),$2,$0),$0)
example_end

Sent: press over the candle maker .
Sem: lambda $0_{ev}.and(n|press(you,$0),adv|over(lambda $1_{e}.and_comp(det:art|the($2,n|candle+stick($2),$1),n|make-dv($1)),$0))
example_end

Sent: when did you press the button ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),$0))
example_end

Sent: where were you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-past(pro:per|you,$0),$1($0))
example_end

Sent: when you pressed the button where were you Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press-past(pro:per|you,det:art|the($1,n|button($1)),$0),and(cop|be-past(pro:per|you,$0),$2($0)))
example_end

Sent: where were you when you pressed the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press-past(pro:per|you,det:art|the($1,n|button($1)),$0),and(cop|be-past(pro:per|you,$0),$2($0)))
example_end

Sent: what were you riding in ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-past(and(part|ride-presp(pro:per|you,$1,$0),adv|in($0)),$0)
example_end

Sent: in a what ?
Sem: det:art|a($0,pro:int|what($0))
example_end

Sent: in taxi ?
Sem: Q(prep|in(lambda $0_{e}.n|taxi($0)))
example_end

Sent: you dropped a taxi wheel ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|a($1,and_comp(n|taxi($1),n|wheel($1))),$0))
example_end

Sent: if you like to .
Sem: lambda $0_{ev}.v|like(pro:per|you,$0)
example_end

Sent: oh what happened to the taxi wheels ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(det:art|the($2,and_comp(n|taxi($2),n|wheel-pl($2))),$0)),co|oh($0))
example_end

Sent: here are some .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some,$0),adv|here($0))
example_end

Sent: oh that 's for Cromer ?
Sem: lambda $0_{ev}.Q(and(and(cop|~be(pro:dem|that,$0),prep|for(n:prop|cromer,$0)),co|oh($0)))
example_end

Sent: Urs has one ?
Sem: lambda $0_{ev}.Q(aux|have-3s(n:prop|ursula,pro:indef|one,$0))
example_end

Sent: what shall I buy with my dollar ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(and(v|buy(pro:sub|i,$1,$0),prep|with(det:poss|my($2,n|dollar($2)),$0)),$0)
example_end

Sent: I don 't know where to find a unicorn .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|find(_,det:art|a($2,n|unicorn($2)),$1),adv:int|where($1)),$0),$0),$0)
example_end

Sent: well where 's your unicorn ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(aux|~be(det:poss|your($1,n|unicorn($1)),$0),$2($0)),co|well($0))
example_end

Sent: you took our money now you have_to give us a unicorn .
Sem: lambda $0_{ev}.and(v|take-past(pro:per|you,det:poss|our($1,n|money($1)),$0),mod:aux|have_to(and(v|give(pro:per|you,det:art|a($2,n|unicorn($2)),pro:obj|us,$0),adv|now($0)),$0))
example_end

Sent: why I thought you were buying us a unicorn .
Sem: lambda $3_{e}.lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|buy-presp(pro:per|you,det:art|a($2,n|unicorn($2)),pro:obj|us,$1),$1),$0),$3($0))
example_end

Sent: the unicorn didn 't want to come ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(det:art|the($1,n|unicorn($1)),lambda $2_{ev}.v|come(det:art|the($1,n|unicorn($1)),$2),$0),$0),$0))
example_end

Sent: help you reach ?
Sem: lambda $0_{ev}.Q(v|help(you,lambda $1_{ev}.v|reach(pro:per|you,$1),$0))
example_end

Sent: that 's for the unicorn ?
Sem: lambda $0_{ev}.Q(and(cop|~be(pro:dem|that,$0),conj|for(det:art|the($1,n|unicorn($1)),$0)))
example_end

Sent: where 's the unicorn ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|unicorn($1)),$0),$2($0))
example_end

Sent: buy this one ?
Sem: lambda $0_{ev}.Q(v|buy(you,pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: in it ?
Sem: Q(prep|in(pro:per|it))
example_end

Sent: putting them in Rusty 's hat ?
Sem: lambda $0_{ev}.Q(and(part|put-presp(you,pro:obj|them,$0),prep|in(n:prop|rusty's($1,n|hat($1)),$0)))
example_end

Sent: Rusty didn 't want them in his hat ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|want(n:prop|rusty,pro:obj|them,$0),prep|in(det:poss|his($1,n|hat($1)),$0)),$0),$0))
example_end

Sent: why are you throwing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|throw-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: no Adam what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: are you tired ?
Sem: lambda $0_{ev}.Q(v|tire-past(pro:per|you,$0))
example_end

Sent: what does she have_to buy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(v|do-3s(v|buy(pro:sub|she,$1,$0),$0),$0)
example_end

Sent: what did he do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(pro:sub|he,$1,$0),$0)
example_end

Sent: what did Rusty do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(n:prop|rusty,$1,$0),$0)
example_end

Sent: well what are you buying ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(part|buy-presp(pro:per|you,$1,$0),$0),co|well($0))
example_end

Sent: what did you buy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|buy(pro:per|you,$1,$0),$0)
example_end

Sent: I see you have some crumpled dollars .
Sem: lambda $0_{ev}.v|see(pro:sub|i,lambda $1_{ev}.v|have(pro:per|you,qn|some($2,and(v|crumple-past($2),n|dollar-pl($2))),$1),$0)
example_end

Sent: you 're going shopping ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{e}.part|shop-presp($1),$0),$0))
example_end

Sent: what did you do with the dollars ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|dollar-pl($2)),$0)),$0)
example_end

Sent: let Urs do it .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|do(n:prop|ursula,pro:per|it,$1),$0)
example_end

Sent: can you put them back in the bag ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|back(prep|in(det:art|the($1,n|bag($1)),$0))),$0))
example_end

Sent: I know what you might like .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.mod|might(prep|like(pro:per|you,pro:int|what,$1),$1),$0)
example_end

Sent: I have very long gloves .
Sem: lambda $0_{ev}.v|have(pro:sub|i,adv|very(lambda $1_{e}.and(adj|long($1),n|glove-pl($1))),$0)
example_end

Sent: you plug this in .
Sem: lambda $0_{ev}.and(v|plug(pro:per|you,pro:dem|this,$0),adv|in($0))
example_end

Sent: we have_to put this up now .
Sem: lambda $0_{ev}.mod:aux|have_to(and(and(v|put-zero(pro:sub|we,pro:dem|this,$0),adv|up($0)),adv|now($0)),$0)
example_end

Sent: what do you hear ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|hear(pro:per|you,$1,$0),$0)
example_end

Sent: can you hear Urs ?
Sem: lambda $0_{ev}.Q(mod|can(v|hear(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: no it 's not a toy .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:per|it,n|toy(pro:per|it,$0)),$0),co|no($0))
example_end

Sent: are you going home Adam ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|go-presp(pro:per|you,$0),adv|home($0)),$0))
example_end

Sent: there you are .
Sem: lambda $0_{ev}.and(cop|be-pres(pro:per|you,$0),adv|there($0))
example_end

Sent: I don 't know what that is .
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: button let you press ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|press(pro:per|you,$1),$0))
example_end

Sent: a box .
Sem: det:art|a($0,n|box($0))
example_end

Sent: Cromer can 't change your diaper .
Sem: lambda $0_{ev}.not(mod|can(v|change(n:prop|cromer,det:poss|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: she can 't change your diaper either .
Sem: lambda $0_{ev}.not(mod|can(and(v|change(pro:sub|she,det:poss|your($1,n|diaper($1)),$0),adv|either($0)),$0),$0)
example_end

Sent: no don 't put your foot up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,det:poss|your($1,n|foot($1)),$0),adv|up(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: Urs can 't change your diaper like that .
Sem: lambda $0_{ev}.not(mod|can(and(v|change(n:prop|ursula,det:poss|your($1,n|diaper($1)),$0),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: do you want me to change your diaper ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|change(pro:obj|me,det:poss|your($2,n|diaper($2)),$1),$0),$0))
example_end

Sent: oh you 're telling the microphone ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|tell-presp(pro:per|you,det:art|the($1,n|microphone($1)),$0),$0),co|oh($0)))
example_end

Sent: will you ask them to excuse you ?
Sem: lambda $0_{ev}.Q(mod|will(v|ask(pro:per|you,lambda $1_{ev}.v|excuse(pro:obj|them,pro:per|you,$1),$0),$0))
example_end

Sent: did he catch you ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|catch(pro:sub|he,pro:per|you,$0),$0))
example_end

Sent: you 're playing peekaboo with Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|play-presp(pro:per|you,lambda $1_{e}.v|peekaboo($1),$0),prep|with(n:prop|cromer,$0)),$0))
example_end

Sent: oh you caught him ?
Sem: lambda $0_{ev}.Q(and(v|catch-past(pro:per|you,pro:obj|him,$0),co|oh($0)))
example_end

Sent: oh you fell down in the bunkhouse .
Sem: lambda $0_{ev}.and(and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|in(det:art|the($1,n|bunkhouse($1)),$0)),co|oh($0))
example_end

Sent: you fell down with your shoes .
Sem: lambda $0_{ev}.and(v|fall-past_down(pro:per|you,$0),prep|with(det:poss|your($1,n|shoe-pl($1)),$0))
example_end

Sent: with your shoes ?
Sem: Q(prep|with(det:poss|your($0,n|shoe-pl($0))))
example_end

Sent: I put it in my pocket .
Sem: lambda $0_{ev}.and(v|put-zero(pro:sub|i,pro:per|it,$0),prep|in(det:poss|my($1,n|pocket($1)),$0))
example_end

Sent: don 't break the point Adam .
Sem: lambda $0_{ev}.not(mod|do(v|break(you,det:art|the($1,n|point($1)),$0),$0),$0)
example_end

Sent: now you 're getting it .
Sem: lambda $0_{ev}.aux|~be(and(n:gerund|get-presp(pro:per|you,pro:per|it,$0),adv|now($0)),$0)
example_end

Sent: drop it on the point ?
Sem: lambda $0_{ev}.Q(and(v|drop(you,pro:per|it,$0),prep|on(det:art|the($1,n|point($1)),$0)))
example_end

Sent: how many glasses ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|glass-pl($0))
example_end

Sent: oh there it goes ?
Sem: lambda $0_{ev}.Q(and(and(v|go-3s(pro:per|it,$0),adv|there($0)),co|oh($0)))
example_end

Sent: no don 't play with glasses .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|play(you,$0),prep|with(lambda $1_{e}.n|glass-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: how many pencils do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|pencil-pl($1)),$0),$0)
example_end

Sent: big one ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,lambda $1_{e}.adj|big($1),$0))
example_end

Sent: you like cereal .
Sem: lambda $0_{ev}.v|like(pro:per|you,lambda $1_{e}.n|cereal($1),$0)
example_end

Sent: oh I see .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,$0),co|oh($0))
example_end

Sent: when I eat grapefruit .
Sem: lambda $0_{ev}.v|eat(pro:sub|i,lambda $1_{e}.n|grape+fruit($1),$0)
example_end

Sent: okay you have your bib on ?
Sem: lambda $0_{ev}.Q(and(and(v|have(pro:per|you,det:poss|your($1,n|bib($1)),$0),adv|on($0)),co|okay($0)))
example_end

Sent: you like it .
Sem: lambda $0_{ev}.v|like(pro:per|you,pro:per|it,$0)
example_end

Sent: he dropped his pencil .
Sem: lambda $0_{ev}.v|drop-past(pro:sub|he,det:poss|his($1,n|pencil($1)),$0)
example_end

Sent: yes now you pick it up .
Sem: lambda $0_{ev}.and(and(and(v|pick(pro:per|you,pro:per|it,$0),adv|now($0)),adv|up($0)),co|yes($0))
example_end

Sent: who turned around ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|turn-past($1,$0),adv|around($0))
example_end

Sent: cd ?
Sem: lambda $0_{ev}.Q(aux|~have(part|get-pastp(pro:per|you,det:art|a($1,n|tunnel($1)),$0),$0))
example_end

Sent: where are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-pres(pro:sub|they,$0),$1($0))
example_end

Sent: don 't go down ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|go(you,$0),adv|down($0)),$0),$0))
example_end

Sent: where do you want to go ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.v|go(pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: Daddy went down ?
Sem: lambda $0_{ev}.Q(and(v|go-past(n:prop|daddy,$0),adv|down($0)))
example_end

Sent: how many pencils ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|pencil-pl($0))
example_end

Sent: this is a radiator .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|radiator(pro:dem|this,$0))
example_end

Sent: so you mean elevator .
Sem: lambda $0_{ev}.and(adj|mean(pro:per|you,lambda $1_{e}.n|elevator($1),$0),co|so($0))
example_end

Sent: where are you putting them ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,pro:obj|them,$0),$1($0)),$0)
example_end

Sent: there 's some .
Sem: lambda $0_{ev}.and(cop|~be(qn|some,$0),pro:exist|there($0))
example_end

Sent: oh peek you .
Sem: lambda $0_{ev}.and(v|peek(you,pro:per|you,$0),co|oh($0))
example_end

Sent: see what you can do ?
Sem: lambda $0_{ev}.Q(v|see(you,lambda $1_{ev}.mod|can(v|do(pro:per|you,pro:int|what,$1),$1),$0))
example_end

Sent: that 's good .
Sem: lambda $0_{ev}.adj|good(pro:dem|that,$0)
example_end

Sent: put it on the wall ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|wall($1)),$0)))
example_end

Sent: what do you call that ?
Sem: lambda $0_{ev}.v|call(pro:per|you,pro:dem|that,$0)
example_end

Sent: I 'm watching .
Sem: lambda $0_{ev}.aux|~be(part|watch-presp(pro:sub|i,$0),$0)
example_end

Sent: no go get your rubber band .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|your($1,and_comp(n|rubber($1),n|band($1))),$0),co|no($0))
example_end

Sent: did you have any more ?
Sem: lambda $0_{ev}.Q(v|do-past(v|have(pro:per|you,qn|any($1,pro:indef|more($1)),$0),$0))
example_end

Sent: yes you sit outside .
Sem: lambda $0_{ev}.and(and(v|sit(pro:per|you,$0),adv|outside($0)),co|yes($0))
example_end

Sent: whose blanket ?
Sem: lambda $0_{e}.$0($1,n|blanket($1))
example_end

Sent: oh does Adam have a blanket ?
Sem: lambda $0_{ev}.Q(and(mod|do-3s(v|have(n:prop|adam,det:art|a($1,n|blanket($1)),$0),$0),co|oh($0)))
example_end

Sent: why do you need your blanket ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|need(pro:per|you,det:poss|your($1,n|blanket($1)),$0),$2($0)),$0)
example_end

Sent: I think it 's out in the kitchen .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(cop|~be(pro:per|it,$1),adv|out(prep|in(det:art|the($2,n|kitchen($2)),$1))),$0)
example_end

Sent: are you taking your nap ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|take-presp(pro:per|you,det:poss|your($1,n|nap($1)),$0),$0))
example_end

Sent: oh is that a small one ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),adj|small(pro:rel|that,$0))),co|oh($0)))
example_end

Sent: well you give him the pen .
Sem: lambda $0_{ev}.and(v|give(pro:per|you,det:art|the($1,n|pen($1)),pro:obj|him,$0),co|well($0))
example_end

Sent: Adam dropped the pencil .
Sem: lambda $0_{ev}.v|drop-past(n:prop|adam,det:art|the($1,n|pencil($1)),$0)
example_end

Sent: oh a trombone .
Sem: lambda $0_{ev}.and(det:art|a($1,n|trombone($1),$0),co|oh($0))
example_end

Sent: can you play the trombone ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:per|you,det:art|the($1,n|trombone($1)),$0),$0))
example_end

Sent: a fish ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|fish($1),$0))
example_end

Sent: swim with you ?
Sem: lambda $0_{ev}.Q(and(n|swim(you,$0),prep|with(pro:per|you,$0)))
example_end

Sent: looks like a real tiny fish .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),adj|real(prep|like(det:art|a($1,and(adj|tiny($1),n|fish($1))),$0)))
example_end

Sent: know what that is ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|know(you,$0,$1)
example_end

Sent: that 's a circle .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|circle(pro:dem|that,$0))
example_end

Sent: where is the cowboy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|cow+boy($1)),$0),$2($0))
example_end

Sent: can you draw his boots ?
Sem: lambda $0_{ev}.Q(mod|can(v|draw(pro:per|you,det:poss|his($1,n|boot-pl($1)),$0),$0))
example_end

Sent: oh his spurs .
Sem: lambda $0_{ev}.and(det:poss|his($1,n|spur-pl($1),$0),co|oh($0))
example_end

Sent: it 's Goldilocks .
Sem: lambda $0_{ev}.n:prop|goldilocks(pro:per|it,$0)
example_end

Sent: cowboy bill ?
Sem: lambda $0_{e}.Q(and_comp(n|cow+boy($0),n|bill($0)))
example_end

Sent: looks like a road .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|road($1)),$0))
example_end

Sent: is it a road ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|road(pro:per|it,$0)))
example_end

Sent: looks like another one is it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(you,$0),prep|like(qn|another($1,pro:indef|one($1)),$0)),cop|be-3s(pro:per|it,$0)))
example_end

Sent: a road another road ?
Sem: lambda $0_{e}.Q(and(det:art|a($1,n|road($1)),qn|another($2,n|road($2)),$0))
example_end

Sent: it 's a cowboy ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|cow+boy(pro:per|it,$0)))
example_end

Sent: he has a what on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|have-3s(pro:sub|he,$1,$0),adv|on($0))
example_end

Sent: whose boots are those ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|those,n|boot-pl(pro:dem|those,$0))
example_end

Sent: is that a hat ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|hat(pro:rel|that,$0)))
example_end

Sent: oh it 's a boy .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,n|boy(pro:per|it,$0)),co|oh($0))
example_end

Sent: does he have hat on ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|have(pro:sub|he,lambda $1_{e}.n|hat($1),$0),adv|on($0)),$0))
example_end

Sent: whose bandana is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|bandana(pro:dem|that,$0))
example_end

Sent: looks like a square .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|square($1)),$0))
example_end

Sent: is it a square ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|square(pro:per|it,$0)))
example_end

Sent: it 's a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.det:art|a(pro:per|it,$1(pro:per|it,$0))
example_end

Sent: it 's a clown he said .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{ev}.det:art|a(pro:per|it,n|clown(pro:per|it,$1)),$0)
example_end

Sent: it 's clown Adam .
Sem: lambda $0_{ev}.n|clown(pro:per|it,$0)
example_end

Sent: is Adam a clown ?
Sem: lambda $0_{ev}.Q(det:art|a(n:prop|adam,n|clown(n:prop|adam,$0)))
example_end

Sent: Adam 's busy ?
Sem: lambda $0_{ev}.Q(adj|busy(n:prop|adam,$0))
example_end

Sent: what is Adam busy doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|busy(n:prop|adam,lambda $1_{ev}.part|do-presp(n:prop|adam,$2,$1),$0)
example_end

Sent: you 're busy at home ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|busy($0,$1)
example_end

Sent: it is your home .
Sem: lambda $0_{ev}.det:poss|your(pro:per|it,n|home(pro:per|it,$0))
example_end

Sent: is it my home ?
Sem: lambda $0_{ev}.Q(det:poss|my(pro:per|it,n|home(pro:per|it,$0)))
example_end

Sent: yes I came on my bicycle .
Sem: lambda $0_{ev}.and(and(v|come-past(pro:sub|i,$0),prep|on(det:poss|my($1,n|cycle($1)),$0)),co|yes($0))
example_end

Sent: is it another clown .
Sem: lambda $0_{ev}.qn|another(pro:per|it,n|clown(pro:per|it,$0))
example_end

Sent: oh that 's a rope ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|rope(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: rope for tricks ?
Sem: lambda $0_{e}.Q(att(n|rope($0),prep|for(lambda $1_{e}.n|trick-pl($1))))
example_end

Sent: whose rope is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|rope(pro:per|it,$0))
example_end

Sent: another fish ?
Sem: lambda $0_{e}.Q(qn|another($1,n|fish($1),$0))
example_end

Sent: is that a fish ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|fish(pro:rel|that,$0)))
example_end

Sent: it 's a boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|boy(pro:per|it,$0))
example_end

Sent: did you reach the towel ?
Sem: lambda $0_{ev}.Q(v|do-past(v|reach(pro:per|you,det:art|the($1,n|towel($1)),$0),$0))
example_end

Sent: no you didn 't reach it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|reach(pro:per|you,pro:per|it,$0),$0),$0),co|no($0)))
example_end

Sent: what did you do in the kitchen ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|in(det:art|the($2,n|kitchen($2)),$0)),$0)
example_end

Sent: is it a flag ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|flag(pro:per|it,$0)))
example_end

Sent: it 's a pipe ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|pipe(pro:per|it,$0)))
example_end

Sent: looks like a circle .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|circle($1)),$0))
example_end

Sent: let 's put this on the other side .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,pro:dem|this,$1),prep|on(det:art|the($2,and(qn|other($2),n|side($2))),$1)),$0)
example_end

Sent: oh yes he needs that one .
Sem: lambda $0_{ev}.and(and(v|need-3s(pro:sub|he,pro:dem|that($1,pro:indef|one($1)),$0),co|oh($0)),co|yes($0))
example_end

Sent: he needs that .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|he,pro:dem|that,$0)
example_end

Sent: I 'll write you a note then you can have one .
Sem: lambda $0_{ev}.adv:tem|then(mod|can(v|have(pro:per|you,pro:indef|one,$0),$0),mod|~will(v|write(pro:sub|i,det:art|a($1,n|note($1)),pro:per|you,$0),$0))
example_end

Sent: you want me to fold it ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|fold(pro:obj|me,pro:per|it,$1),$0))
example_end

Sent: yes what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,$0),co|yes($0))
example_end

Sent: coat hanger ?
Sem: lambda $0_{e}.Q(and_comp(n|coat($0),n|hang-dv($0)))
example_end

Sent: like penguins ?
Sem: Q(prep|like(lambda $0_{e}.n|penguin-pl($0)))
example_end

Sent: penguins don 't fly do they ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|fly(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0),mod|do(pro:sub|they,$0)))
example_end

Sent: they do fly .
Sem: lambda $0_{ev}.mod|do(v|fly(pro:sub|they,$0),$0)
example_end

Sent: no they don 't fly I don 't think .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(not(mod|do(v|fly(pro:sub|they,$1),$1),$1),co|no($1)),$0),$0),$0)
example_end

Sent: no they don 't .
Sem: lambda $0_{ev}.and(not(mod|do(pro:sub|they,$0),$0),co|no($0))
example_end

Sent: no he can 't fly like a kite .
Sem: lambda $0_{ev}.and(not(mod|can(and(n|fly(pro:sub|he,$0),prep|like(det:art|a($1,n|kite($1)),$0)),$0),$0),co|no($0))
example_end

Sent: you did what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(pro:per|you,$1,$0)
example_end

Sent: penguins can 't fly .
Sem: lambda $0_{ev}.not(mod|can(v|fly(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0)
example_end

Sent: in the water ?
Sem: Q(prep|in(det:art|the($0,n|water($0))))
example_end

Sent: cold outside yes .
Sem: lambda $0_{ev}.and(and(n|cold($0),prep|outside($0)),co|yes($0))
example_end

Sent: yes the wind 's blowing .
Sem: lambda $0_{ev}.and(aux|~be(part|blow-presp(det:art|the($1,n|wind($1)),$0),$0),co|yes($0))
example_end

Sent: did you see all the snow ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|see(pro:per|you,adv|all(det:art|the($1,n|snow($1))),$0),$0))
example_end

Sent: drummer show .
Sem: lambda $0_{e}.and_comp(n|drum-dv($0),n|show($0))
example_end

Sent: oh look up the cowboy 's hat ?
Sem: lambda $0_{ev}.Q(and(and(co|look(you,$0),prep|up(n|cow+boy's($1,det:art|the($2,n|hat($2),$1)),$0)),co|oh($0)))
example_end

Sent: didn 't you go out in the snow ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(and(v|go(pro:per|you,$0),adv|out($0)),prep|in(det:art|the($1,n|snow($1)),$0)),$0),$0))
example_end

Sent: you didn 't go for a walk in the snow ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(and(v|go(pro:per|you,$0),prep|for(det:art|a($1,n|walk($1)),$0)),prep|in(det:art|the($2,n|snow($2)),$0)),$0),$0))
example_end

Sent: did you go over to the library in the snow ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(and(v|go(pro:per|you,$0),adv|over($0)),prep|to(det:art|the($1,n|library($1)),$0)),prep|in(det:art|the($2,n|snow($2)),$0)),$0))
example_end

Sent: and ride the elevator ?
Sem: lambda $0_{ev}.Q(v|ride(you,det:art|the($1,n|elevator($1)),$0))
example_end

Sent: in the library ?
Sem: Q(prep|in(det:art|the($0,n|library($0))))
example_end

Sent: Daddy took you for a walk ?
Sem: lambda $0_{ev}.Q(and(v|take-past(n:prop|daddy,pro:per|you,$0),prep|for(det:art|a($1,n|walk($1)),$0)))
example_end

Sent: did you touch the snow Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|touch(pro:per|you,det:art|the($1,n|snow($1)),$0),$0))
example_end

Sent: did you throw some ?
Sem: lambda $0_{ev}.Q(v|do-past(v|throw(pro:per|you,qn|some,$0),$0))
example_end

Sent: you threw some snow like Joshua ?
Sem: lambda $0_{ev}.Q(and(v|throw-past(pro:per|you,qn|some($1,n|snow($1)),$0),co|like(n:prop|joshua,$0)))
example_end

Sent: Joshua throws like a penguin ?
Sem: lambda $0_{ev}.Q(and(v|throw-3s(n:prop|joshua,$0),prep|like(det:art|a($1,n|penguin($1)),$0)))
example_end

Sent: penguins can 't throw can they ?
Sem: lambda $0_{ev}.Q(and(not(mod|can(v|throw(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0),mod|can(pro:sub|they,$0)))
example_end

Sent: yes they are big and heavy .
Sem: lambda $0_{ev}.and(coord|and(adj|big(pro:sub|they,$0),adj|heavy(pro:sub|they,$0)),co|yes($0))
example_end

Sent: listen to you ?
Sem: lambda $0_{ev}.Q(and(v|listen(you,$0),prep|to(pro:per|you,$0)))
example_end

Sent: what are you saying ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|say-presp(pro:per|you,$1,$0),$0)
example_end

Sent: yes I see you .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:per|you,$0),co|yes($0))
example_end

Sent: do you see me ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,pro:obj|me,$0),$0))
example_end

Sent: it 's how I wonder what you are .
Sem: lambda $0_{ev}.aux|~be(pro:per|it,lambda $1_{ev}.and(v|wonder(pro:sub|i,lambda $2_{ev}.pro:int|what(pro:per|you,$2),$1),adv:int|how($1)),$0)
example_end

Sent: you finished ?
Sem: lambda $0_{ev}.Q(v|finish-past(pro:per|you,$0))
example_end

Sent: what are you doing to the paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|to(det:art|the($2,n|paper($2)),$0)),$0)
example_end

Sent: who 's that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:rel|that,$0)
example_end

Sent: here we are .
Sem: lambda $0_{ev}.and(cop|be-pres(pro:sub|we,$0),adv|here($0))
example_end

Sent: oh he gave you some candy .
Sem: lambda $0_{ev}.and(v|give-past(pro:sub|he,qn|some($1,n|candy($1)),pro:per|you,$0),co|oh($0))
example_end

Sent: it 's snowing out .
Sem: lambda $0_{ev}.aux|~be(and(part|snow-presp(you,$0),adv|out($0)),$0)
example_end

Sent: no just a little bit .
Sem: lambda $0_{ev}.and(adv|just(det:art|a($1,and(adj|little($1),n|bit($1))),$0),co|no($0))
example_end

Sent: what am I doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-1s(part|do-presp(pro:sub|i,$1,$0),$0)
example_end

Sent: I 'm not doing anything .
Sem: lambda $0_{ev}.not(cop|~be(part|do-presp(pro:sub|i,lambda $1_{e}.pro:indef|anything($1),$0),$0),$0)
example_end

Sent: you 're playing with Urs ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|play-presp(pro:per|you,$0),prep|with(n:prop|ursula,$0)),$0))
example_end

Sent: you draw up here .
Sem: lambda $0_{ev}.and(v|draw(you,$0),adv|up(adv|here($0)))
example_end

Sent: what kind of pinwheel ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|pin+wheel($2))))
example_end

Sent: why do you have so many pinwheels ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,adv|so(qn|many($1,n|pin+wheel($1))),$0),$2($0)),$0)
example_end

Sent: you have fourteen ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,lambda $1_{e}.det:num|fourteen($1),$0))
example_end

Sent: pushing the door ?
Sem: lambda $0_{ev}.Q(part|push-presp(you,det:art|the($1,n|door($1)),$0))
example_end

Sent: is that another penguin ?
Sem: lambda $0_{ev}.Q(qn|another(pro:rel|that,n|penguin(pro:rel|that,$0)))
example_end

Sent: oh Bozo 's Butch .
Sem: lambda $0_{ev}.and(n:prop|butch(n:prop|bozo,$0),co|oh($0))
example_end

Sent: that 's Butch 's bed ?
Sem: lambda $0_{ev}.Q(n:prop|butch's'(pro:dem|that,n|bed(pro:dem|that,$0)))
example_end

Sent: that 's what ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: Butch 's hat ?
Sem: lambda $0_{e}.Q(n:prop|butch's($1,n|hat($1),$0))
example_end

Sent: what kind of hat does Rusty have ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|have(n:prop|rusty,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|hat($3)))),$0),$0)
example_end

Sent: a blue hat ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|blue($1),n|hat($1)),$0))
example_end

Sent: is that true ?
Sem: lambda $0_{ev}.Q(adj|true(pro:dem|that,$0))
example_end

Sent: okay yes .
Sem: lambda $0_{ev}.and(co|yes($0),co|okay($0))
example_end

Sent: you want me to come there ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|come(pro:obj|me,$1),adv|there($1)),$0))
example_end

Sent: okay wait a minute .
Sem: lambda $0_{ev}.and(v|wait(you,det:art|a($1,n|minute($1)),$0),co|okay($0))
example_end

Sent: well you 're not going to have coffee .
Sem: lambda $0_{ev}.and(not(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,lambda $2_{e}.n|coffee($2),$1),$0),$0),$0),co|well($0))
example_end

Sent: no I 'm going to bring it in there Adam .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:sub|i,lambda $1_{ev}.and(v|bring(pro:sub|i,pro:per|it,$1),prep|in(adv|there($1))),$0),$0),co|no($0))
example_end

Sent: are we going to have it in here ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:sub|we,lambda $1_{ev}.and(v|have(pro:sub|we,pro:per|it,$1),prep|in(adv|here($1))),$0),$0))
example_end

Sent: what are you bringing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|bring-presp(pro:per|you,$1,$0),$0)
example_end

Sent: that 's very nice .
Sem: lambda $0_{ev}.adv|very(adj|nice(pro:dem|that,$0))
example_end

Sent: ask him if he does .
Sem: lambda $0_{ev}.v|ask(you,pro:obj|him,$0)
example_end

Sent: wait you have_to ask him first .
Sem: lambda $0_{ev}.and(v|wait(you,$0),mod:aux|have_to(and(v|ask(pro:per|you,pro:obj|him,$0),adv|first($0)),$0))
example_end

Sent: well you don 't want milk in your orange juice .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|want(pro:per|you,lambda $1_{e}.n|milk($1),$0),prep|in(det:poss|your($2,and_comp(n|orange($2),n|juice($2))),$0)),$0),$0),co|well($0))
example_end

Sent: you sit on the other side of the table .
Sem: lambda $0_{ev}.and(v|sit(pro:per|you,$0),prep|on(det:art|the($1,att(and(qn|other($1),n|side($1)),prep|of(det:art|the($2,n|table($2))))),$0))
example_end

Sent: are you drinking your coffee ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|drink-presp(pro:per|you,det:poss|your($1,n|coffee($1)),$0),$0))
example_end

Sent: yes he spilled something on his hands .
Sem: lambda $0_{ev}.and(and(v|spill-past(pro:sub|he,lambda $1_{e}.pro:indef|something($1),$0),prep|on(det:poss|his($2,n|hand-pl($2)),$0)),co|yes($0))
example_end

Sent: who drinks coffee like that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(n|drink-pl($1,lambda $2_{e}.n|coffee($2),$0),prep|like(pro:dem|that,$0))
example_end

Sent: you have sugar in there ?
Sem: lambda $0_{ev}.Q(and(v|have(pro:per|you,lambda $1_{e}.n|sugar($1),$0),prep|in(adv|there($0))))
example_end

Sent: and what else ?
Sem: post|else(pro:int|what)
example_end

Sent: what kind of exercise is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|exercise($2))))
example_end

Sent: you 're exercising ?
Sem: lambda $0_{ev}.Q(aux|~be(part|exercise-presp(pro:per|you,$0),$0))
example_end

Sent: what about Hump Dump ?
Sem: att(pro:int|what,prep|about(lambda $0_{e}.and_comp(n:prop|humpty($0),n:prop|dumpty($0))))
example_end

Sent: let you reach what ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|reach(pro:per|you,$2,$1),$0)
example_end

Sent: more juice ?
Sem: lambda $0_{e}.Q(qn|more($1,n|juice($1),$0))
example_end

Sent: did you get more coffee Adam ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|get(pro:per|you,adv|more($1,n|coffee($1)),$0),$0))
example_end

Sent: what did happen to you ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|happen(you,$1,$0),prep|to(pro:per|you,$0)),$0)
example_end

Sent: oh where did you hurt yourself ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do-past(and(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),$1($0)),$0),co|oh($0))
example_end

Sent: what are you going to push ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|push($2,$1),$0),$0)
example_end

Sent: don 't spill your coffee .
Sem: lambda $0_{ev}.not(mod|do(v|spill(you,det:poss|your($1,n|coffee($1)),$0),$0),$0)
example_end

Sent: you 're going around ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|go-presp(pro:per|you,$0),adv|around($0)),$0))
example_end

Sent: what happens when you go around like that ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.and(v|happen-3s($1,$0),and(and(and(v|go(pro:per|you,$0),$2($0)),adv|around($0)),prep|like(pro:dem|that,$0)))
example_end

Sent: excuse you please ?
Sem: lambda $0_{ev}.Q(and(v|excuse(you,pro:per|you,$0),co|please($0)))
example_end

Sent: why were you talking like that ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-past(and(and(part|talk-presp(pro:per|you,$0),$1($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: oh your tummy made a noise ?
Sem: lambda $0_{ev}.Q(and(v|make-past(det:poss|your($1,n|tummy($1)),det:art|a($2,n|noise($2)),$0),co|oh($0)))
example_end

Sent: let Adam stir you .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|stir(n:prop|adam,pro:per|you,$1),$0)
example_end

Sent: I don 't want milk over me .
Sem: lambda $0_{ev}.not(mod|do(and(v|want(pro:sub|i,lambda $1_{e}.n|milk($1),$0),adv|over(pro:obj|me,$0)),$0),$0)
example_end

Sent: he doesn 't want to exercise .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|he,lambda $1_{ev}.v|exercise(pro:sub|he,$1),$0),$0),$0)
example_end

Sent: Adam he doesn 't want to exercise .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|he,lambda $1_{ev}.v|exercise(pro:sub|he,$1),$0),$0),$0)
example_end

Sent: am I supposed to exercise ?
Sem: lambda $0_{ev}.Q(aux|be-1s(v|suppose-past(pro:sub|i,lambda $1_{ev}.n|exercise(pro:sub|i,$1),$0),$0))
example_end

Sent: but I can 't stand on my head .
Sem: lambda $0_{ev}.not(mod|can(and(v|stand(pro:sub|i,$0),prep|on(det:poss|my($1,n|head($1)),$0)),$0),$0)
example_end

Sent: is it alright if he drinks his coffee now ?
Sem: lambda $0_{ev}.Q(conj|if(and(v|drink-3s(pro:sub|he,det:poss|his($1,n|coffee($1)),$0),adv|now($0)),adj|alright($0)))
example_end

Sent: well he can 't exercise like you .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|exercise(pro:sub|he,$0),prep|like(pro:per|you,$0)),$0),$0),adv|well($0))
example_end

Sent: you made it ?
Sem: lambda $0_{ev}.Q(v|make-past(pro:per|you,pro:per|it,$0))
example_end

Sent: Adam you write on one side of the paper remember ?
Sem: lambda $0_{ev}.Q(and(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.att(det:num|one(n|side($1)),prep|of(det:art|the($2,n|paper($2)))),$0)),v|remember(you,$0)))
example_end

Sent: with gas .
Sem: prep|with(lambda $0_{e}.n|gas($0))
example_end

Sent: don 't be so rough with the pen .
Sem: lambda $0_{e}.lambda $1_{ev}.v|rough($0,$1)
example_end

Sent: are those stars ?
Sem: lambda $0_{ev}.Q(n|star-pl(pro:dem|those,$0))
example_end

Sent: Adam what am I doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-1s(part|do-presp(pro:sub|i,$1,$0),$0)
example_end

Sent: today isn 't Thursday .
Sem: lambda $0_{e}.lambda $1_{ev}.n:prop|thursday($0,$1)
example_end

Sent: what is today ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.adv:tem|today($2),$0)
example_end

Sent: what comes after Wednesday ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|come-3s($1,$0),adv:tem|after(n:prop|wednesday,$0))
example_end

Sent: what happens now ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-3s($1,$0),adv|now($0))
example_end

Sent: you 'd like more coffee ?
Sem: lambda $0_{ev}.Q(mod|~genmod(v|like(pro:per|you,lambda $1_{e}.and(qn|more($1),n|coffee($1)),$0),$0))
example_end

Sent: more coffee ?
Sem: lambda $0_{e}.Q(and(qn|more($0),n|coffee($0)))
example_end

Sent: whose what is that ?
Sem: lambda $1_{e}.lambda $2_{e}.lambda $0_{ev}.$1(pro:dem|that,$2(pro:dem|that,$0))
example_end

Sent: where 's the other Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,qn|other($1)),$0),$2($0))
example_end

Sent: put your coffee down .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:poss|your($1,n|coffee($1)),$0),adv|down($0))
example_end

Sent: stir that ?
Sem: lambda $0_{ev}.Q(v|stir(you,pro:dem|that,$0))
example_end

Sent: one leg ?
Sem: lambda $0_{e}.Q(det:num|one(n|leg($0)))
example_end

Sent: what 's the matter with your eye ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,att(n|matter($0,$1),prep|with(det:poss|your($2,n|eye($2)))))
example_end

Sent: you 're riding over the rocks ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|ride-presp(pro:per|you,$0),prep|over(det:art|the($1,n|rock-pl($1)),$0)),$0))
example_end

Sent: you 're going to ride over the rocks ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(n|ride(pro:per|you,$1),adv|over(det:art|the($2,n|rock-pl($2)),$1)),$0),$0))
example_end

Sent: why do you have your mouth open ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,det:poss|your($1,and(adj|open($1),n|mouth($1))),$0),$2($0)),$0)
example_end

Sent: what 's that noise ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,n|noise($2)),$0)
example_end

Sent: ride over the rug ?
Sem: lambda $0_{ev}.Q(and(n|ride(you,$0),adv|over(det:art|the($1,n|rug($1)),$0)))
example_end

Sent: do you have enough gas ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.and(adj|enough($1),n|gas($1)),$0),$0))
example_end

Sent: oh you ran out_of gas ?
Sem: lambda $0_{ev}.Q(and(v|run-past_out_of(pro:per|you,lambda $1_{e}.n|gas($1),$0),co|oh($0)))
example_end

Sent: you have_to push it now ?
Sem: lambda $0_{ev}.Q(mod:aux|have_to(and(v|push(pro:per|you,pro:per|it,$0),adv|now($0)),$0))
example_end

Sent: you want me to put gas in ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:obj|me,lambda $2_{e}.n|gas($2),$1),adv|in($1)),$0))
example_end

Sent: oh did you pay him ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|pay(pro:per|you,pro:obj|him,$0),$0),co|oh($0)))
example_end

Sent: do you want your change ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:poss|your($1,n|change($1)),$0),$0))
example_end

Sent: you mustn 't drive off until you get your change .
Sem: lambda $0_{ev}.not(prep|until(v|get(pro:per|you,det:poss|your($1,n|change($1)),$0),mod|must(and(v|drive(pro:per|you,$0),adv|off($0)),$0)),$0)
example_end

Sent: is she finished ?
Sem: lambda $0_{ev}.Q(v|finish-past(pro:sub|she,$0))
example_end

Sent: yes I 'm finished .
Sem: lambda $0_{ev}.and(part|finish-pastp(pro:sub|i,$0),co|yes($0))
example_end

Sent: you don 't put gas in the wheel in the tire you put air .
Sem: lambda $0_{ev}.not(and(mod|do(and(v|put-zero(pro:per|you,lambda $1_{e}.n|gas($1),$0),prep|in(det:art|the($2,n|wheel($2)),$0)),$0),and(v|put-zero(pro:per|you,lambda $3_{e}.n|air($3),$0),prep|in(det:art|the($4,n|tire($4)),$0))),$0)
example_end

Sent: can I check the tires ?
Sem: lambda $0_{ev}.Q(mod|can(v|check(pro:sub|i,det:art|the($1,n|tire-pl($1)),$0),$0))
example_end

Sent: I think they 're okay .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.co|okay(pro:sub|they,$1),$0)
example_end

Sent: I think they have enough air .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|have(pro:sub|they,lambda $2_{e}.and(adj|enough($2),n|air($2)),$1),$0)
example_end

Sent: take care .
Sem: lambda $0_{ev}.v|take_care(you,$0)
example_end

Sent: that 's Mommy ?
Sem: lambda $0_{ev}.Q(n:prop|mommy(pro:dem|that,$0))
example_end

Sent: oh that 's Mommy 's change .
Sem: lambda $0_{ev}.and(n:prop|mommy's'(pro:dem|that,n|change(pro:dem|that,$0)),co|oh($0))
example_end

Sent: is that Mommy 's change .
Sem: lambda $0_{ev}.n:prop|mommy's'(pro:dem|that,n|change(pro:dem|that,$0))
example_end

Sent: hit Mommy ?
Sem: lambda $0_{ev}.Q(v|hit-zero(you,n:prop|mommy,$0))
example_end

Sent: don 't whisper ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|whisper(you,$0),$0),$0))
example_end

Sent: oh you 're busy .
Sem: lambda $0_{ev}.and(adj|busy(pro:per|you,$0),co|oh($0))
example_end

Sent: you 're checking the wheels ?
Sem: lambda $0_{ev}.Q(aux|~be(part|check-presp(pro:per|you,det:art|the($1,n|wheel-pl($1)),$0),$0))
example_end

Sent: are they alright ?
Sem: lambda $0_{ev}.Q(co|alright(pro:sub|they,$0))
example_end

Sent: that wheel 's alright .
Sem: lambda $0_{ev}.co|alright(pro:dem|that($1,n|wheel($1)),$0)
example_end

Sent: that 's a gas station ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,and_comp(n|gas(pro:dem|that,$0),n|station(pro:dem|that,$0))))
example_end

Sent: yes it 's squeaking .
Sem: lambda $0_{ev}.and(cop|~be(part|squeak-presp(pro:per|it,$0),$0),co|yes($0))
example_end

Sent: yes you did .
Sem: lambda $0_{ev}.and(v|do-past(pro:per|you,$0),co|yes($0))
example_end

Sent: little red spots .
Sem: lambda $0_{e}.and(adj|red($0),and(adj|little($0),n|spot-pl($0)))
example_end

Sent: came from the dog .
Sem: lambda $0_{ev}.and(v|come-past(you,$0),prep|from(det:art|the($1,n|dog($1)),$0))
example_end

Sent: he has a dog named Spot .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|he,det:art|a($1,and(n|dog($1),lambda $2_{ev}.v|name-past($1,n:prop|spot,$2))),$0)
example_end

Sent: your tire is broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(det:poss|your($1,n|tire($1)),$0))
example_end

Sent: you must go over there ?
Sem: lambda $0_{ev}.Q(mod|must(and(v|go(pro:per|you,$0),adv|over(adv|there($0))),$0))
example_end

Sent: you almost fell down ?
Sem: lambda $0_{ev}.Q(and(and(v|fall-past(pro:per|you,$0),adv|almost($0)),adv|down($0)))
example_end

Sent: the tire is broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(det:art|the($1,n|tire($1)),$0))
example_end

Sent: you almost fell down because you weren 't looking where you were going .
Sem: lambda $1_{e}.lambda $0_{ev}.conj|because(not(and(cop|be(part|look-presp(pro:per|you,$0),$0),aux|be-past(and(part|go-presp(pro:per|you,$0),$1($0)),$0)),$0),and(and(v|fall-past(pro:per|you,$0),adv|almost($0)),adv|down($0)))
example_end

Sent: you almost rode over a stick ?
Sem: lambda $0_{ev}.Q(and(and(v|ride-past(pro:per|you,$0),adv|almost($0)),prep|over(det:art|a($1,n|stick($1)),$0)))
example_end

Sent: you want me to put gas in there ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:obj|me,lambda $2_{e}.n|gas($2),$1),prep|in(adv|there($1))),$0))
example_end

Sent: because a nail 's in there ?
Sem: lambda $0_{ev}.Q(and(poss|~s(det:art|a($1,n|nail($1)),$0),adv|in(adv|there($0))))
example_end

Sent: let you sit on the tire ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.and(v|sit(pro:per|you,$1),prep|on(det:art|the($2,n|tire($2)),$1)),$0))
example_end

Sent: well didn 't you say there was a nail in there ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|say(pro:per|you,lambda $1_{ev}.and(cop|be-past(det:art|a($2,n|nail($2)),$1),prep|in(adv|there($1))),$0),$0),$0),co|well($0)))
example_end

Sent: I think it 's filled .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.part|fill-pastp(pro:per|it,$1),$0)
example_end

Sent: you touched Cromer ?
Sem: lambda $0_{ev}.Q(v|touch-past(pro:per|you,n:prop|cromer,$0))
example_end

Sent: you hit your handle bar on your tricycle .
Sem: lambda $0_{ev}.and(v|hit-zero(pro:per|you,det:poss|your($1,and_comp(n|handle($1),n|bar($1))),$0),prep|on(det:poss|your($2,n|tricycle($2)),$0))
example_end

Sent: more gas ?
Sem: lambda $0_{e}.Q(and(qn|more($0),n|gas($0)))
example_end

Sent: you just got some gas in it .
Sem: lambda $0_{ev}.and(v|get-past(pro:per|you,qn|some($1,att(n|gas($1),prep|in(pro:per|it))),$0),adv|just($0))
example_end

Sent: did you pay for the gas ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|pay(pro:per|you,$0),prep|for(det:art|the($1,n|gas($1)),$0)),$0))
example_end

Sent: did you ?
Sem: lambda $0_{ev}.Q(v|do-past(pro:per|you,$0))
example_end

Sent: ask him for change Adam .
Sem: lambda $0_{ev}.and(v|ask(you,pro:obj|him,$0),prep|for(lambda $1_{e}.n|change($1),$0))
example_end

Sent: he said stamps .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{e}.n|stamp-pl($1),$0)
example_end

Sent: good bye you take came .
Sem: lambda $0_{ev}.and(v|take_come-past(pro:per|you,$0),co|bye_good($0))
example_end

Sent: oh don 't do that .
Sem: lambda $0_{ev}.and(not(mod|do(v|do(you,pro:dem|that,$0),$0),$0),co|oh($0))
example_end

Sent: we 'll have_to have the doctor take care of my foot if you run over it with your tricycle .
Sem: lambda $0_{ev}.conj|if(and(and(v|run_over(pro:per|you,$0),pro:per|it($0)),prep|with(det:poss|your($1,n|tricycle($1)),$0)),mod:aux|have_to(mod|~will(v|have(pro:sub|we,lambda $2_{ev}.and(v|take_care(det:art|the($3,n|doctor($3)),$2),prep|of(det:poss|my($4,n|foot($4)),$2)),$0),$0),$0))
example_end

Sent: doctor yes .
Sem: lambda $0_{ev}.and(n|doctor($0),co|yes($0))
example_end

Sent: don 't you think you 're finished ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.part|finish-pastp(pro:per|you,$1),$0),$0),$0))
example_end

Sent: don 't you think you 've had enough ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.aux|~have(and(part|have-pastp(pro:per|you,$1),adv|enough($1)),$1),$0),$0),$0))
example_end

Sent: are you sure ?
Sem: lambda $0_{ev}.Q(adj|sure(pro:per|you,$0))
example_end

Sent: you don 't have enough ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|have(pro:per|you,$0),adv|enough($0)),$0),$0))
example_end

Sent: just take the cup first Adam .
Sem: lambda $0_{ev}.and(and(v|take(you,det:art|the($1,n|cup($1)),$0),adv|just($0)),adv|first($0))
example_end

Sent: no you just take the cup .
Sem: lambda $0_{ev}.and(and(v|take(pro:per|you,det:art|the($1,n|cup($1)),$0),adv|just($0)),co|no($0))
example_end

Sent: don 't drink it ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|drink(you,pro:per|it,$0),$0),$0))
example_end

Sent: yeah little boys like you .
Sem: lambda $0_{ev}.and(att(and(adj|little($0),n|boy-pl($0)),prep|like(pro:per|you)),co|yeah($0))
example_end

Sent: is it good Adam ?
Sem: lambda $0_{ev}.Q(adj|good(pro:per|it,$0))
example_end

Sent: is it delicious ?
Sem: lambda $0_{ev}.Q(adj|delicious(pro:per|it,$0))
example_end

Sent: it 's delicious .
Sem: lambda $0_{ev}.adj|delicious(pro:per|it,$0)
example_end

Sent: what else is delicious ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|delicious($1,$0)
example_end

Sent: tie your shoe ?
Sem: lambda $0_{ev}.Q(v|tie(you,det:poss|your($1,n|shoe($1)),$0))
example_end

Sent: let Cromer tie it ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.n|tie(n:prop|cromer,pro:per|it,$1),$0))
example_end

Sent: well I 've tied it now .
Sem: lambda $0_{ev}.and(aux|~have(and(part|tie-pastp(pro:sub|i,pro:per|it,$0),adv|now($0)),$0),co|well($0))
example_end

Sent: that doesn 't belong under there does it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|belong(pro:dem|that,$0),prep|under(adv|there($0))),$0),$0),mod|do-3s(pro:per|it,$0)))
example_end

Sent: alright you 're seeing the penguin .
Sem: lambda $0_{ev}.and(aux|~be(part|see-presp(pro:per|you,det:art|the($1,n|penguin($1)),$0),$0),co|alright($0))
example_end

Sent: no Adam you 'll tear that .
Sem: lambda $0_{ev}.and(mod|~will(v|tear(pro:per|you,pro:dem|that,$0),$0),co|no($0))
example_end

Sent: Daddy 's desk isn 't a toy is it ?
Sem: lambda $0_{ev}.Q(and(not(det:art|a(n:prop|daddy's($1,n|desk($1)),n|toy(n:prop|daddy's($1,n|desk($1)),$0)),$0),aux|be-3s(pro:per|it,$0)))
example_end

Sent: where did you have it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|have(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: did you put a bib on ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|put-zero(pro:per|you,det:art|a($1,n|bib($1)),$0),adv|on($0)),$0))
example_end

Sent: where did you eat it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|eat(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: what kind was it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,adj|kind(pro:per|it,$0))
example_end

Sent: what else did you do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(pro:per|you,$1,$0),$0)
example_end

Sent: did you see a bridge ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,det:art|a($1,n|bridge($1)),$0))
example_end

Sent: you saw an open can ?
Sem: lambda $0_{ev}.Q(v|see-past(pro:per|you,det:art|a($1,and(adj|open($1),mod|can($1))),$0))
example_end

Sent: what kind of can ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.mod|can($2))))
example_end

Sent: I wasn 't smiling .
Sem: lambda $0_{ev}.not(aux|be(part|smile-presp(pro:sub|i,$0),$0),$0)
example_end

Sent: it 's the telephone .
Sem: lambda $0_{ev}.det:art|the(pro:per|it,n|telephone(pro:per|it,$0))
example_end

Sent: yes he is over at the school .
Sem: lambda $0_{ev}.and(and(aux|be-3s(pro:sub|he,$0),adv|over(prep|at(det:art|the($1,n|school($1)),$0))),co|yes($0))
example_end

Sent: what about Urs ?
Sem: att(pro:int|what,prep|about(n:prop|ursula))
example_end

Sent: was that Urs on the phone ?
Sem: lambda $0_{ev}.Q(att(n:prop|ursula(pro:rel|that,$0),prep|on(det:art|the($1,n|phone($1)))))
example_end

Sent: perhaps she doesn 't have anything for you to see in the bag .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|have(pro:sub|she,lambda $1_{ev}.and(v|see(lambda $2_{e}.pro:indef|anything($2),$1),prep|in(det:art|the($3,n|bag($3)),$1)),$0),co|perhaps($0)),prep|for(pro:per|you,$0)),$0),$0)
example_end

Sent: do you want to see what this is ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|want($0,lambda $2_{ev}.v|see($0,$2),$1)
example_end

Sent: card for you ?
Sem: lambda $0_{e}.Q(att(n|card($0),prep|for(pro:per|you)))
example_end

Sent: no it 's from Robin .
Sem: lambda $0_{ev}.and(prep|from(n:prop|robin,pro:per|it,$0),co|no($0))
example_end

Sent: measles yes .
Sem: lambda $0_{ev}.and(n:pt|measles($0),co|yes($0))
example_end

Sent: here 's a little spot .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,and(adj|little($1),n|spot($1))),$0),pro:exist|here($0))
example_end

Sent: no I don 't think she has anything else to show you .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.aux|have-3s(pro:sub|she,lambda $2_{ev}.v|show(post|else(lambda $3_{e}.pro:indef|anything($3)),pro:per|you,$2),$1),$0),$0),$0),co|no($0))
example_end

Sent: I know .
Sem: lambda $0_{ev}.v|know(pro:sub|i,$0)
example_end

Sent: would you like this ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,pro:dem|this,$0),$0))
example_end

Sent: he 's going to play basketball .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.n|play(pro:sub|he,lambda $2_{e}.n|basket+ball($2),$1),$0),$0)
example_end

Sent: oh that 's too big ?
Sem: lambda $0_{ev}.Q(and(adv|too(adj|big(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: that 's big too ?
Sem: lambda $0_{ev}.Q(post|too(adj|big(pro:dem|that,$0)))
example_end

Sent: why do you need those on the tow truck ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(and(v|need(pro:per|you,pro:dem|those,$0),$1($0)),prep|on(det:art|the($2,and_comp(n|tow($2),n|truck($2))),$0)),$0)
example_end

Sent: don 't fell down .
Sem: lambda $0_{ev}.not(mod|do(and(v|fall-past(you,$0),adv|down($0)),$0),$0)
example_end

Sent: what doctor are you going to ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-pres(part|go-presp(pro:per|you,$1($2,n|doctor($2)),$0),$0)
example_end

Sent: do you think you car ride like that Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(n|ride(pro:per|you($2,n|car($2)),$1),co|like(det:dem|that,$1)),$0),$0))
example_end

Sent: you 're going to fix the tricycle ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|fix(pro:per|you,det:art|the($2,n|tricycle($2)),$1),$0),$0))
example_end

Sent: ask him if he will .
Sem: lambda $0_{ev}.v|ask(you,pro:obj|him,$0)
example_end

Sent: should I put something in there ?
Sem: lambda $0_{ev}.Q(mod|should(and(v|put-zero(pro:sub|i,lambda $1_{e}.pro:indef|something($1),$0),prep|in(adv|there($0))),$0))
example_end

Sent: put it in here ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|in(adv|here($0))))
example_end

Sent: do you want me to attach it to the tricycle ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|attach(pro:obj|me,pro:per|it,$1),prep|to(det:art|the($2,n|tricycle($2)),$1)),$0),$0))
example_end

Sent: well if you know how why don 't you do it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(not(mod|do(conj|if(and(v|know(pro:per|you,$0),adv:int|how($0)),and(v|do(pro:per|you,pro:per|it,$0),$1($0))),$0),$0),co|well($0))
example_end

Sent: do you think Cromer can do it ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|can(v|do(n:prop|cromer,pro:per|it,$1),$1),$0),$0))
example_end

Sent: ask him if he can .
Sem: lambda $0_{ev}.v|ask(you,pro:obj|him,$0)
example_end

Sent: bulldozer song ?
Sem: lambda $0_{e}.Q(and_comp(n|bulldoze-dv($0),n|song($0)))
example_end

Sent: what 's the bulldozer song ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,and_comp(n|bulldoze-dv($2),n|song($2))),$0)
example_end

Sent: but I 'm trying .
Sem: lambda $0_{ev}.aux|~be(part|try-presp(pro:sub|i,$0),$0)
example_end

Sent: bulldozer strong ?
Sem: lambda $0_{e}.Q(and(adj|strong($0),n|bulldoze-dv($0)))
example_end

Sent: can you sing it ?
Sem: lambda $0_{ev}.Q(mod|can(v|sing(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: it 's attached .
Sem: lambda $0_{ev}.aux|~be(part|attach-pastp(pro:per|it,$0),$0)
example_end

Sent: well what is the bulldozer song ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|the($2,and_comp(n|bulldoze-dv($2),n|song($2))),$0),co|well($0))
example_end

Sent: would you like her to go to the doctor ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(v|go(pro:obj|her,$1),prep|to(det:art|the($2,n|doctor($2)),$1)),$0),$0))
example_end

Sent: what doctor would you like her to go to ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(v|go(pro:obj|her,$1),prep|to($2($3,n|doctor($3)),$1)),$0),$0)
example_end

Sent: now the tricycle is fixed .
Sem: lambda $0_{ev}.adv|now(part|fix-pastp(det:art|the($1,n|tricycle($1)),$0))
example_end

Sent: don 't run it over her again .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|run(you,pro:per|it,$0),adv|over(pro:obj|her,$0)),adv|again($0)),$0),$0)
example_end

Sent: you 're giving Perro a ride ?
Sem: lambda $0_{ev}.Q(aux|~be(part|give-presp(pro:per|you,det:art|a($1,n|ride($1)),n:prop|perro,$0),$0))
example_end

Sent: does he like it ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|like(pro:sub|he,pro:per|it,$0),$0))
example_end

Sent: what about the tire ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|tire($0))))
example_end

Sent: push tire ?
Sem: lambda $0_{ev}.Q(n|push(you,lambda $1_{e}.n|tire($1),$0))
example_end

Sent: Adam write on one side of the paper only .
Sem: lambda $0_{ev}.and(and(v|write(you,$0),prep|on(lambda $1_{e}.att(det:num|one(n|side($1)),prep|of(det:art|the($2,n|paper($2)))),$0)),qn|only($0))
example_end

Sent: what did you write Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|write(pro:per|you,$1,$0),$0)
example_end

Sent: a neck ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|neck($1),$0))
example_end

Sent: where 's the neck ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|neck($1)),$0),$2($0))
example_end

Sent: three six ears ?
Sem: lambda $0_{e}.Q(det:num|six(det:num|three(n|ear-pl($0))))
example_end

Sent: where is the ship going ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-3s(and(part|go-presp(det:art|the($1,n|ship($1)),$0),$2($0)),$0)
example_end

Sent: going to fish school ?
Sem: lambda $0_{ev}.Q(and(part|go-presp(you,$0),prep|to(lambda $1_{e}.and_comp(n|fish($1),n|school($1)),$0)))
example_end

Sent: what does it learn at fish school ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|learn(pro:per|it,$1,$0),prep|at(lambda $2_{e}.and_comp(n|fish($2),n|school($2)),$0)),$0)
example_end

Sent: no fish school .
Sem: qn|no($0,and_comp(n|fish($0),n|school($0)))
example_end

Sent: Adam if you write all over the paper where will Urs write ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will(conj|if(and(v|write(pro:per|you,$0),adv|all(prep|over(det:art|the($1,n|paper($1)),$0))),and(v|write(n:prop|ursula,$0),$2($0))),$0)
example_end

Sent: you 're doing what ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: she hasn 't finished with that page .
Sem: lambda $0_{ev}.not(aux|have(and(v|finish-past(pro:sub|she,$0),prep|with(pro:dem|that($1,n|page($1)),$0)),$0),$0)
example_end

Sent: would you like to use this one Adam ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|use(pro:per|you,pro:dem|this($2,pro:indef|one($2)),$1),$0),$0))
example_end

Sent: what did you write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|write(pro:per|you,$1,$0),$0)
example_end

Sent: remember firetruck .
Sem: lambda $0_{ev}.v|remember(you,lambda $1_{e}.n|fire+truck($1),$0)
example_end

Sent: a rope ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|rope($1),$0))
example_end

Sent: let you make a rope ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|make(pro:per|you,det:art|a($2,n|rope($2)),$1),$0))
example_end

Sent: what do you do with this rope ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(pro:dem|this($2,n|rope($2)),$0)),$0)
example_end

Sent: that 's not a story .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|story+book(pro:dem|that,$0)),$0)
example_end

Sent: it 's a book with numbers .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,att(n|book(pro:per|it,$0),prep|with(lambda $1_{e}.n|number-pl($1))))
example_end

Sent: that 's a boy with a horse .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|boy(pro:dem|that,$0),prep|with(det:art|a($1,n|horse($1)))))
example_end

Sent: see the horse ?
Sem: lambda $0_{ev}.Q(v|see(you,det:art|the($1,n|horse($1)),$0))
example_end

Sent: it 's a boy in armor .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,att(n|boy(pro:per|it,$0),prep|in(lambda $1_{e}.n|armor($1))))
example_end

Sent: what 's he looking at .
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|look-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: maybe the sunrise .
Sem: adv|maybe(det:art|the($0,n|sunrise($0)))
example_end

Sent: no Adam don 't stand on his foot .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|stand(you,$0),prep|on(det:poss|his($1,n|foot($1)),$0)),$0),$0),co|no($0))
example_end

Sent: that hurts .
Sem: lambda $0_{ev}.v|hurt-3s(pro:dem|that,$0)
example_end

Sent: here stand on the cart .
Sem: lambda $0_{ev}.and(and(n|stand(you,$0),adv|here($0)),prep|on(det:art|the($1,n|cart($1)),$0))
example_end

Sent: would you like for him to stand on your foot ?
Sem: lambda $0_{ev}.Q(mod|will-cond(and(v|like(pro:per|you,lambda $1_{ev}.and(v|stand(pro:per|you,$1),prep|on(det:poss|your($2,n|foot($2)),$1)),$0),prep|for(pro:obj|him,$0)),$0))
example_end

Sent: push it over near the table .
Sem: lambda $0_{ev}.and(and(v|push(you,pro:per|it,$0),adv|over($0)),prep|near(det:art|the($1,n|table($1)),$0))
example_end

Sent: let Urs show you .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.n|show(n:prop|ursula,pro:per|you,$1),$0)
example_end

Sent: Adam just look .
Sem: lambda $0_{ev}.and(cop|look(you,$0),adv|just($0))
example_end

Sent: and this one ?
Sem: lambda $0_{e}.Q(pro:dem|this($1,pro:indef|one($1),$0))
example_end

Sent: the sunshine is laughing .
Sem: lambda $0_{ev}.aux|be-3s(part|laugh-presp(det:art|the($1,n|sunshine($1)),$0),$0)
example_end

Sent: what 's this one ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this($2,pro:indef|one($2)),$0)
example_end

Sent: a violin ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|violin($1),$0))
example_end

Sent: the end .
Sem: det:art|the($0,n|end($0))
example_end

Sent: that 's a tail .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|tail(pro:dem|that,$0))
example_end

Sent: he doesn 't feel like exercising .
Sem: lambda $0_{ev}.not(mod|do(and(v|feel(pro:sub|he,$0),co|like(lambda $1_{e}.part|exercise-presp($1),$0)),$0),$0)
example_end

Sent: do you do exercises ?
Sem: lambda $0_{ev}.Q(mod|do(v|do(pro:per|you,lambda $1_{e}.n|exercise-pl($1),$0),$0))
example_end

Sent: what did it have on it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|have(pro:per|it,$1,$0),prep|on(pro:per|it,$0)),$0)
example_end

Sent: well what kind of trailer truck was it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.and_comp(n|trailer($2),n|truck($2))))),co|well($0))
example_end

Sent: yes it was gold .
Sem: lambda $0_{ev}.and(adj|gold(pro:per|it,$0),co|yes($0))
example_end

Sent: a car trailer truck yellow .
Sem: det:art|a($0,and_comp(and_comp(n|car($0),n|trailer($0)),n|truck($0)))
example_end

Sent: what else is there ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s($1,$0)
example_end

Sent: put it back in the folder .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|back(prep|in(det:art|the($1,n|folder($1)),$0)))
example_end

Sent: I want you to tell her about this book .
Sem: lambda $0_{ev}.v|want(pro:sub|i,lambda $1_{ev}.and(v|tell(pro:per|you,pro:obj|her,$1),prep|about(pro:dem|this($2,n|book($2)),$1)),$0)
example_end

Sent: you don 't want to tell her about the book ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,pro:obj|her,$1),prep|about(det:art|the($2,n|book($2)),$1)),$0),$0),$0))
example_end

Sent: frightens the chickens ?
Sem: lambda $0_{ev}.Q(v|frighten-3s(you,det:art|the($1,n|chicken-pl($1)),$0))
example_end

Sent: driving by itself ?
Sem: lambda $0_{ev}.Q(and(part|drive-presp(you,$0),prep|by(pro:refl|itself,$0)))
example_end

Sent: big cloud ?
Sem: lambda $0_{e}.Q(and(adj|big($0),n|cloud($0)))
example_end

Sent: angry faces on the dial .
Sem: lambda $0_{e}.att(and(adj|angry($0),n|face-pl($0)),prep|on(det:art|the($1,n|dial($1))))
example_end

Sent: yes we had coffee .
Sem: lambda $0_{ev}.and(v|have-past(pro:sub|we,lambda $1_{e}.n|coffee($1),$0),co|yes($0))
example_end

Sent: what 's the fireman doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|fire+man($1)),$2,$0),$0)
example_end

Sent: oh the fireman 's brave ?
Sem: lambda $0_{ev}.Q(and(n|brave(det:art|the($1,n|fire+man($1)),$0),co|oh($0)))
example_end

Sent: calling all cars ?
Sem: lambda $0_{ev}.Q(part|call-presp(you,qn|all($1,n|car-pl($1)),$0))
example_end

Sent: fireman is brave ?
Sem: lambda $0_{ev}.Q(n|brave(lambda $1_{e}.n|fire+man($1),$0))
example_end

Sent: yes it 's finished .
Sem: lambda $0_{ev}.and(part|finish-pastp(pro:per|it,$0),co|yes($0))
example_end

Sent: can you say thank_you ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,lambda $1_{e}.n|thank_you($1),$0),$0))
example_end

Sent: yes she gave it to you .
Sem: lambda $0_{ev}.and(and(v|give-past(pro:sub|she,pro:per|it,$0),prep|to(pro:per|you,$0)),co|yes($0))
example_end

Sent: is it an egg ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|egg(pro:per|it,$0)))
example_end

Sent: that 's not for eating .
Sem: lambda $0_{ev}.not(and(cop|~be(pro:dem|that,$0),prep|for(lambda $1_{e}.n:gerund|eat-presp($1),$0)),$0)
example_end

Sent: you can open it up .
Sem: lambda $0_{ev}.mod|can(and(v|open(pro:per|you,pro:per|it,$0),adv|up($0)),$0)
example_end

Sent: she said you could open it .
Sem: lambda $0_{ev}.v|say-past(pro:sub|she,lambda $1_{ev}.mod|could(v|open(pro:per|you,pro:per|it,$1),$1),$0)
example_end

Sent: egg apple ?
Sem: lambda $0_{e}.Q(and_comp(n|egg($0),n|apple($0)))
example_end

Sent: oh is that Christmas ?
Sem: lambda $0_{ev}.Q(and(n:prop|christmas(pro:rel|that,$0),co|oh($0)))
example_end

Sent: it looks like an egg ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|egg($1)),$0)))
example_end

Sent: keep going .
Sem: lambda $0_{ev}.v|keep(you,lambda $1_{e}.n:gerund|go-presp($1),$0)
example_end

Sent: that looks like something in a box .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:dem|that,$0),prep|like(lambda $1_{e}.att(pro:indef|something($1),prep|in(det:art|a($2,n|box($2)))),$0))
example_end

Sent: yes it 's yours .
Sem: lambda $0_{ev}.and(pro:poss|yours(pro:per|it,$0),co|yes($0))
example_end

Sent: who opened it ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|open-past($1,pro:per|it,$0)
example_end

Sent: you just opened it .
Sem: lambda $0_{ev}.and(v|open-past(pro:per|you,pro:per|it,$0),adv|just($0))
example_end

Sent: oh you dropped something .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,lambda $1_{e}.pro:indef|something($1),$0),co|oh($0))
example_end

Sent: you dropped something over there .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,lambda $1_{e}.pro:indef|something($1),$0),adv|over(adv|there($0)))
example_end

Sent: you dropped a pocket book ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|a($1,and_comp(n|pocket($1),n|book($1))),$0))
example_end

Sent: oh that 's mine ?
Sem: lambda $0_{ev}.Q(and(pro:poss|mine(pro:dem|that,$0),co|oh($0)))
example_end

Sent: don 't have it ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(you,pro:per|it,$0),$0),$0))
example_end

Sent: did you say thank_you to Ursla ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|say(pro:per|you,lambda $1_{e}.co|thank_you($1),$0),prep|to(n:prop|ursla,$0)),$0))
example_end

Sent: no we don 't eat rattles .
Sem: lambda $0_{ev}.and(not(mod|do(v|eat(pro:sub|we,lambda $1_{e}.n|rattle-pl($1),$0),$0),$0),co|no($0))
example_end

Sent: you can 't take the top off .
Sem: lambda $0_{ev}.not(mod|can(and(v|take(pro:per|you,det:art|the($1,n|top($1)),$0),adv|off($0)),$0),$0)
example_end

Sent: where are you going to put this ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|put-zero(pro:per|you,pro:dem|this,$1),$0),$2($0)),$0)
example_end

Sent: around your neck ?
Sem: Q(prep|around(det:poss|your($0,n|neck($0))))
example_end

Sent: it sticks .
Sem: lambda $0_{ev}.v|stick-3s(pro:per|it,$0)
example_end

Sent: to the truck ?
Sem: Q(prep|to(det:art|the($0,n|truck($0))))
example_end

Sent: where does Mommy keep her pocket book ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(and(v|keep(n:prop|mommy,det:poss|her($1,and_comp(n|pocket($1),n|book($1))),$0),$2($0)),$0)
example_end

Sent: it 's so tiny .
Sem: lambda $0_{ev}.adv|so(adj|tiny(pro:per|it,$0))
example_end

Sent: yes I guess it is a dump truck .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,and_comp(n|dump(pro:per|it,$1),n|truck(pro:per|it,$1))),$0),co|yes($0))
example_end

Sent: is that a bear ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|bear(pro:rel|that,$0)))
example_end

Sent: will it go in there ?
Sem: lambda $0_{ev}.Q(mod|will(and(v|go(pro:per|it,$0),prep|in(adv|there($0))),$0))
example_end

Sent: is that a rocket ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|rocket(pro:rel|that,$0)))
example_end

Sent: that 's a steam shovel ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,and_comp(n|steam(pro:dem|that,$0),n|shovel(pro:dem|that,$0))))
example_end

Sent: the trailer doesn 't fit in there ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|fit-zero(det:art|the($1,n|trailer($1)),$0),adv|in(adv|there($0))),$0),$0))
example_end

Sent: does it ?
Sem: lambda $0_{ev}.Q(mod|do-3s(you,pro:per|it,$0))
example_end

Sent: I don 't think it does .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: the bus was in the box .
Sem: lambda $0_{ev}.and(cop|be-past(det:art|the($1,n|bus($1)),$0),prep|in(det:art|the($2,n|box($2)),$0))
example_end

Sent: was it shaped like an egg ?
Sem: lambda $0_{ev}.Q(cop|be-past(and(part|shape-pastp(pro:per|it,$0),prep|like(det:art|a($1,n|egg($1)),$0)),$0))
example_end

Sent: how do you know who did it if you don 't ask ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|if(not(mod|do(v|ask(pro:per|you,$0),$0),$0),mod|do(and(v|know(pro:per|you,lambda $1_{ev}.mod|do-past(pro:rel|who,pro:per|it,$1),$0),$2($0)),$0))
example_end

Sent: what 's inside ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),adv|inside($0))
example_end

Sent: want me to play with this ?
Sem: lambda $0_{ev}.Q(v|want(you,lambda $1_{ev}.and(v|play(pro:obj|me,$1),prep|with(pro:dem|this,$1)),$0))
example_end

Sent: that 's funny .
Sem: lambda $0_{ev}.adj|fun-dn(pro:dem|that,$0)
example_end

Sent: you caught the train ?
Sem: lambda $0_{ev}.Q(v|catch-past(pro:per|you,det:art|the($1,n|train($1)),$0))
example_end

Sent: that one fits what ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|fit-3s(pro:dem|that($1,pro:indef|one($1)),$2,$0)
example_end

Sent: got stuck .
Sem: lambda $0_{ev}.v|get-past(you,$0)
example_end

Sent: where did it get stuck ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|it,$0),$1($0)),$0)
example_end

Sent: from that ?
Sem: Q(prep|from(pro:dem|that))
example_end

Sent: I can 't do that .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:sub|i,pro:dem|that,$0),$0),$0)
example_end

Sent: isn 't that tiny ?
Sem: lambda $0_{ev}.Q(not(adj|tiny(pro:dem|that,$0),$0))
example_end

Sent: what size is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|size(pro:per|it,$0))
example_end

Sent: here 's a tiny letter for your purse .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,att(and(adj|tiny($1),n|letter($1)),prep|for(det:poss|your($2,n|purse($2))))),$0),pro:exist|here($0))
example_end

Sent: I think he was saying something else .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|be-past(part|say-presp(pro:sub|he,post|else(lambda $2_{e}.pro:indef|something($2)),$1),$1),$0)
example_end

Sent: this is mine .
Sem: lambda $0_{ev}.pro:poss|mine(pro:dem|this,$0)
example_end

Sent: you 're welcome Adam .
Sem: lambda $0_{ev}.adj|welcome(pro:per|you,$0)
example_end

Sent: by Pablo Picasso .
Sem: prep|by(n:prop|picasso_pablo)
example_end

Sent: don 't fold it ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|fold(you,pro:per|it,$0),$0),$0))
example_end

Sent: can you tell me what this is ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: for Adam .
Sem: conj|for(n:prop|adam)
example_end

Sent: for Cromer .
Sem: conj|for(n:prop|cromer)
example_end

Sent: for Urs .
Sem: conj|for(n:prop|ursula)
example_end

Sent: for microphone ?
Sem: Q(prep|for(lambda $0_{e}.n|microphone($0)))
example_end

Sent: does the microphone talk ?
Sem: lambda $0_{ev}.Q(mod|do-3s(n|talk(det:art|the($1,n|microphone($1)),$0),$0))
example_end

Sent: it said talk ?
Sem: lambda $0_{ev}.Q(v|say-past(pro:per|it,lambda $1_{e}.n|talk($1),$0))
example_end

Sent: I 'm just putting it here .
Sem: lambda $0_{ev}.aux|~be(and(and(part|put-presp(pro:sub|i,pro:per|it,$0),adv|just($0)),adv|here($0)),$0)
example_end

Sent: do you like it ?
Sem: lambda $0_{ev}.Q(mod|do(v|like(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: when you went for a ride in the car .
Sem: lambda $0_{ev}.and(v|go-past(pro:per|you,$0),prep|for(det:art|a($1,att(n|ride($1),prep|in(det:art|the($2,n|car($2))))),$0))
example_end

Sent: where did you go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you went to Cambridge .
Sem: lambda $0_{ev}.and(v|go-past(pro:per|you,$0),prep|to(n:prop|cambridge,$0))
example_end

Sent: that 's where you live .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.and(v|live(pro:per|you,$1),pro:rel|where($1)),$0)
example_end

Sent: where else did you go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|you,$0),$1($0)),$0)
example_end

Sent: well where is the house ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(cop|be-3s(det:art|the($1,n|house($1)),$0),$2($0)),co|well($0))
example_end

Sent: do you know what street it 's on ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|know(pro:per|you,lambda $1_{ev}.adv|on($2($3,n|street($3)),pro:per|it,$1),$0),$0)
example_end

Sent: Boston University ?
Sem: lambda $0_{e}.Q(n:prop|university_boston($0))
example_end

Sent: I don 't know what else he said .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,post|else(pro:int|what),$1),$0),$0),$0)
example_end

Sent: what did your grandmother get on ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|get(det:poss|your($1,n|mother($1)),$2,$0),$0)
example_end

Sent: what did she ride in ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|ride(pro:sub|she,$1,$0),$0)
example_end

Sent: in an airplane ?
Sem: Q(prep|in(det:art|a($0,n|airplane($0))))
example_end

Sent: ship airplane .
Sem: and(lambda $0_{e}.n|ship($0),lambda $1_{e}.n|airplane($1))
example_end

Sent: what kind of airplane is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|airplane($2))))
example_end

Sent: where do you see ships ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,lambda $1_{e}.n|ship-pl($1),$0),$2($0)),$0)
example_end

Sent: well what 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|well($0))
example_end

Sent: a pig ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|pig($1),$0))
example_end

Sent: well what does the pig say ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|do-3s(v|say(det:art|the($1,n|pig($1)),$2,$0),$0),co|well($0))
example_end

Sent: have you seen a pig ?
Sem: lambda $0_{ev}.Q(v|have(part|see-pastp(pro:per|you,det:art|a($1,n|pig($1)),$0),$0))
example_end

Sent: a real one ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|real($1),pro:indef|one($1)),$0))
example_end

Sent: don 't hit anybody with that Adam .
Sem: lambda $0_{ev}.not(mod|do(and(n|hit(you,lambda $1_{e}.pro:indef|anybody($1),$0),prep|with(det:dem|that,$0)),$0),$0)
example_end

Sent: for a ball .
Sem: conj|for(det:art|a($0,n|ball($0)))
example_end

Sent: that 's not a ball .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|ball(pro:dem|that,$0)),$0)
example_end

Sent: where Mommy lives ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(n|life-pl(n:prop|mommy,$0),$1($0))
example_end

Sent: the small letter would fit in your purse .
Sem: lambda $0_{ev}.mod|will-cond(and(part|fit-pastp(det:art|the($1,and(adj|small($1),n|letter($1))),$0),prep|in(det:poss|your($2,n|purse($2)),$0)),$0)
example_end

Sent: oh it 's a pocket book .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,and_comp(n|pocket(pro:per|it,$0),n|book(pro:per|it,$0))),co|oh($0))
example_end

Sent: is it from Rusty ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),prep|from(n:prop|rusty,$0)))
example_end

Sent: what are you blowing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|blow-presp(pro:per|you,$1,$0),$0)
example_end

Sent: can you blow Urs down ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|blow(pro:per|you,n:prop|ursula,$0),adv|down($0)),$0))
example_end

Sent: I don 't believe that .
Sem: lambda $0_{ev}.not(mod|do(v|believe(pro:sub|i,pro:dem|that,$0),$0),$0)
example_end

Sent: the purse fit ?
Sem: lambda $0_{ev}.Q(v|fit-zero(det:art|the($1,n|purse($1)),$0))
example_end

Sent: what fits Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|fit-3s($1,$0)
example_end

Sent: put the pocket book in ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:art|the($1,and_comp(n|pocket($1),n|book($1))),$0),adv|in($0)))
example_end

Sent: put it in the pocketbook ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|in(det:art|the($1,n|pocket+book($1)),$0)))
example_end

Sent: oh that 's a saucer .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|saucer(pro:dem|that,$0)),co|oh($0))
example_end

Sent: what do you have in the saucer ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:art|the($2,n|saucer($2)),$0)),$0)
example_end

Sent: oh you ate it all up ?
Sem: lambda $0_{ev}.Q(and(and(v|eat-past(pro:per|you,pro:per|it,$0),adv|all(adv|up($0))),co|oh($0)))
example_end

Sent: you said you ate it .
Sem: lambda $0_{ev}.v|say-past(pro:per|you,lambda $1_{ev}.v|eat-past(pro:per|you,pro:per|it,$1),$0)
example_end

Sent: did you eat it all up ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|eat(pro:per|you,pro:per|it,$0),adv|all(adv|up($0))),$0))
example_end

Sent: it 's still in there ?
Sem: lambda $0_{ev}.Q(and(and(cop|~be(pro:per|it,$0),adv|still($0)),prep|in(adv|there($0))))
example_end

Sent: saucer 's all_gone .
Sem: lambda $0_{ev}.adj|all_gone(lambda $1_{e}.n|saucer($1),$0)
example_end

Sent: it 's right there ?
Sem: lambda $0_{ev}.Q(and(cop|~be(pro:per|it,$0),adv|right(adv|there($0))))
example_end

Sent: where is right there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(cop|be-3s(you,$0),$1($0)),adv|right(adv|there($0)))
example_end

Sent: oh it travels fast doesn 't it ?
Sem: lambda $0_{ev}.Q(and(and(and(v|travel-3s(pro:per|it,$0),adv|fast($0)),not(mod|do(pro:per|it,$0),$0)),co|oh($0)))
example_end

Sent: do you have a new Humpty_Dumpty Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,att(lambda $2_{e}.n:prop|humpty_dumpty($2),lambda $3_{e}.adj|new($3),$1)),$0),$0))
example_end

Sent: poor Humpty_Dumpty ?
Sem: lambda $0_{e}.Q(att(n:prop|humpty_dumpty,lambda $1_{e}.adj|poor($1),$0))
example_end

Sent: what 's he doing now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(pro:sub|he,$1,$0),adv|now($0)),$0)
example_end

Sent: he 's jumping ?
Sem: lambda $0_{ev}.Q(aux|~be(part|jump-presp(pro:sub|he,$0),$0))
example_end

Sent: those are shoes .
Sem: lambda $0_{ev}.n|shoe-pl(pro:dem|those,$0)
example_end

Sent: that 's his tie .
Sem: lambda $0_{ev}.det:poss|his(pro:dem|that,n|tie(pro:dem|that,$0))
example_end

Sent: what happened to Humpty_Dumpty ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|humpty_dumpty,$0))
example_end

Sent: he broke ?
Sem: lambda $0_{ev}.Q(adj|broke(pro:sub|he,$0))
example_end

Sent: how did he break ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|break(pro:sub|he,$0),$1($0)),$0)
example_end

Sent: he broke his leg ?
Sem: lambda $0_{ev}.Q(v|break-past(pro:sub|he,det:poss|his($1,n|leg($1)),$0))
example_end

Sent: how did he break his leg ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|break(pro:sub|he,det:poss|his($1,n|leg($1)),$0),$2($0)),$0)
example_end

Sent: would you like to have a pencil ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,det:art|a($2,n|pencil($2)),$1),$0),$0))
example_end

Sent: why didn 't you ask for a pencil ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|ask(pro:per|you,$0),$1($0)),prep|for(det:art|a($2,n|pencil($2)),$0)),$0),$0)
example_end

Sent: another purse ?
Sem: lambda $0_{e}.Q(qn|another($1,n|purse($1),$0))
example_end

Sent: another what Adam ?
Sem: pro:indef|another($0,pro:int|what($0))
example_end

Sent: is that a purse ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|purse(pro:rel|that,$0)))
example_end

Sent: you don 't use the pencil for screwing do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|use(pro:per|you,det:art|the($1,n|pencil($1)),$0),prep|for(lambda $2_{e}.n:gerund|screw-presp($2),$0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: where do you write with pencils ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(and(v|write(pro:per|you,$0),$1($0)),prep|with(lambda $2_{e}.n|pencil-pl($2),$0)),$0)
example_end

Sent: write on the paper yes .
Sem: lambda $0_{ev}.and(and(v|write(you,$0),prep|on(det:art|the($1,n|paper($1)),$0)),co|yes($0))
example_end

Sent: do you want some paper to write on ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,qn|some($1,rel(n|paper($1),lambda $2_{ev}.and(v|write(you,$2),adv|on($2)))),$0),$0))
example_end

Sent: well get your screwdriver .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|your($1,n|screw+driver($1)),$0),co|well($0))
example_end

Sent: do you want Mommy to take the pencil from you ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|take(n:prop|mommy,det:art|the($2,att(n|pencil($2),prep|from(pro:per|you))),$1),$0),$0))
example_end

Sent: hit on the bench .
Sem: lambda $0_{ev}.and(v|hit-zero(you,$0),prep|on(det:art|the($1,n|bench($1)),$0))
example_end

Sent: not on the microphone .
Sem: not(prep|on(det:art|the($0,n|microphone($0))))
example_end

Sent: you have_to taste that ?
Sem: lambda $0_{ev}.Q(mod:aux|have_to(v|taste(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: it tastes like ice ?
Sem: lambda $0_{ev}.Q(and(v|taste-3s(pro:per|it,$0),co|like(lambda $1_{e}.n|ice+cream($1),$0)))
example_end

Sent: on the wall .
Sem: prep|on(det:art|the($0,n|wall($0)))
example_end

Sent: yes I see it over there .
Sem: lambda $0_{ev}.and(and(v|see(pro:sub|i,pro:per|it,$0),adv|over(adv|there($0))),co|yes($0))
example_end

Sent: who write that on that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|write($1,pro:rel|that,$0),prep|on(pro:dem|that,$0))
example_end

Sent: didn 't you do that ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|do(pro:per|you,pro:dem|that,$0),$0),$0))
example_end

Sent: it 's not supposed to fit there is it ?
Sem: lambda $0_{ev}.Q(and(not(cop|~be(part|suppose-pastp(pro:per|it,lambda $1_{ev}.and(v|fit-zero(pro:per|it,$1),adv|there($1)),$0),$0),$0),cop|be-3s(pro:per|it,$0)))
example_end

Sent: don 't you have_to use some tape ?
Sem: lambda $0_{ev}.Q(not(mod:aux|have_to(mod|do(v|use(pro:per|you,qn|some($1,n|tape($1)),$0),$0),$0),$0))
example_end

Sent: it 's a bus .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|bus(pro:per|it,$0))
example_end

Sent: can you find the door ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,det:art|the($1,n|door($1)),$0),$0))
example_end

Sent: did you close it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|close(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you take it off .
Sem: lambda $0_{ev}.and(v|take(pro:per|you,pro:per|it,$0),adv|off($0))
example_end

Sent: you have_to unscrew this .
Sem: lambda $0_{ev}.mod:aux|have_to(v|screw(pro:per|you,pro:dem|this,$0),$0)
example_end

Sent: you screw it ?
Sem: lambda $0_{ev}.Q(v|screw(pro:per|you,pro:per|it,$0))
example_end

Sent: train pull ?
Sem: lambda $0_{ev}.Q(v|pull(you,lambda $1_{e}.n|train($1),$0))
example_end

Sent: is that a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,and(n|bulldoze-dv(pro:rel|that,$0),adj|busy(pro:rel|that,$0))))
example_end

Sent: see that little dog looking ?
Sem: lambda $0_{ev}.Q(v|see(you,lambda $1_{ev}.part|look-presp(pro:rel|that($2,and(adj|little($2),n|dog($2))),$1),$0))
example_end

Sent: can you see a little dog ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,det:art|a($1,and(adj|little($1),n|dog($1))),$0),$0))
example_end

Sent: do you see it ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you can 't see it now .
Sem: lambda $0_{ev}.not(mod|can(and(v|see(pro:per|you,pro:per|it,$0),adv|now($0)),$0),$0)
example_end

Sent: pushing dirt ?
Sem: lambda $0_{ev}.Q(part|push-presp(you,lambda $1_{e}.n|dirt($1),$0))
example_end

Sent: no it 's not pushing dirt .
Sem: lambda $0_{ev}.and(not(cop|~be(part|push-presp(pro:per|it,lambda $1_{e}.n|dirt($1),$0),$0),$0),co|no($0))
example_end

Sent: you see it ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,pro:per|it,$0))
example_end

Sent: I don 't think that 's a derrick .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|derrick(pro:dem|that,$1)),$0),$0),$0)
example_end

Sent: it looks like a crane .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|crane($1)),$0))
example_end

Sent: I don 't know it went up the street .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|go-past(pro:per|it,$1),adv|up(det:art|the($2,n|street($2)),$1)),$0),$0),$0)
example_end

Sent: it 's gone to do a job .
Sem: lambda $0_{ev}.aux|~be(part|go-pastp(pro:per|it,lambda $1_{ev}.v|do(pro:per|it,det:art|a($2,n|job($2)),$1),$0),$0)
example_end

Sent: touching your head ?
Sem: lambda $0_{ev}.Q(part|touch-presp(you,det:poss|your($1,n|head($1)),$0))
example_end

Sent: on the window ?
Sem: Q(prep|on(det:art|the($0,n|window($0))))
example_end

Sent: do you see Daddy 's car ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,n:prop|daddy's($1,n|car($1)),$0),$0))
example_end

Sent: he 's gone to church ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|go-pastp(pro:sub|he,$0),prep|to(lambda $1_{e}.n|church($1),$0)),$0))
example_end

Sent: no he 's not .
Sem: lambda $0_{ev}.and(not(aux|~be(pro:sub|he,$0),$0),co|no($0))
example_end

Sent: yes gone to school .
Sem: lambda $0_{ev}.and(and(part|go-pastp(you,$0),prep|to(lambda $1_{e}.n|school($1),$0)),co|yes($0))
example_end

Sent: do you want to show Urs your new book ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.n|show(pro:per|you,det:poss|your($2,and(adj|new($2),n|book($2))),n:prop|ursula,$1),$0),$0))
example_end

Sent: wait for Miss Monroe ?
Sem: lambda $0_{ev}.Q(and(v|wait(you,$0),prep|for(n:prop|monroe_miss,$0)))
example_end

Sent: a pretty book .
Sem: det:art|a($0,and(adj|pretty($0),n|book($0)))
example_end

Sent: tell me about this one .
Sem: lambda $0_{ev}.and(v|tell(you,pro:obj|me,$0),prep|about(pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: what did the little boy see ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|see(det:art|the($1,and(adj|little($1),n|boy($1))),$2,$0),$0)
example_end

Sent: what else did the little boy see ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|see(det:art|the($1,and(adj|little($1),n|boy($1))),$2,$0),$0)
example_end

Sent: a tree .
Sem: det:art|a($0,n|tree($0))
example_end

Sent: a tree barn ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|tree($1),n|barn($1)),$0))
example_end

Sent: is this a tree barn ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|this,and_comp(n|tree(pro:dem|this,$0),n|barn(pro:dem|this,$0))))
example_end

Sent: a sunny day ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|sun-dn($1),n|day($1)),$0))
example_end

Sent: under the hay ?
Sem: Q(prep|under(det:art|the($0,n|hay($0))))
example_end

Sent: the children going up ?
Sem: lambda $0_{ev}.Q(and(part|go-presp(det:art|the($1,n|child-pl($1)),$0),adv|up($0)))
example_end

Sent: the boy is sitting on the chimney .
Sem: lambda $0_{ev}.aux|be-3s(and(part|sit-presp(det:art|the($1,n|boy($1)),$0),prep|on(det:art|the($2,n|chimney($2)),$0)),$0)
example_end

Sent: he 's getting off ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|get-presp(pro:sub|he,$0),prep|off($0)),$0))
example_end

Sent: it 's very funny .
Sem: lambda $0_{ev}.adv|very(adj|fun-dn(pro:per|it,$0))
example_end

Sent: what happened to the house ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,n|house($2)),$0))
example_end

Sent: you want to go up ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),adv|up($1)),$0))
example_end

Sent: kitty laughing at you ?
Sem: lambda $0_{ev}.Q(and(part|laugh-presp(n|kitty,$0),prep|at(pro:per|you,$0)))
example_end

Sent: a white balloon ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|white($1),n|balloon($1)),$0))
example_end

Sent: use the eraser on the pencil .
Sem: lambda $0_{ev}.v|use(you,det:art|the($1,att(n|erase-dv($1),prep|on(det:art|the($2,n|pencil($2))))),$0)
example_end

Sent: where 's the water ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|water($1)),$0),$2($0))
example_end

Sent: did you ever see a barn in the water ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(v|see(pro:per|you,det:art|a($1,n|barn($1)),$0),adv|ever($0)),prep|in(det:art|the($2,n|water($2)),$0)),$0))
example_end

Sent: and what does he say ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(v|say(pro:sub|he,$1,$0),$0)
example_end

Sent: the barn is going up .
Sem: lambda $0_{ev}.aux|be-3s(and(part|go-presp(det:art|the($1,n|barn($1)),$0),adv|up($0)),$0)
example_end

Sent: a tree can 't dance can it ?
Sem: lambda $0_{ev}.Q(and(not(mod|can(n|dance(det:art|a($1,n|tree($1)),$0),$0),$0),mod|can(pro:per|it,$0)))
example_end

Sent: did you ever see a tree dancing ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|see(pro:per|you,det:art|a($1,and(n|tree($1),lambda $2_{ev}.part|dance-presp(_,$1,$2))),$0),adv|ever($0)),$0))
example_end

Sent: can a barn sail ?
Sem: lambda $0_{ev}.Q(mod|can(n|sail(det:art|a($1,n|barn($1)),$0),$0))
example_end

Sent: can a tree dance ?
Sem: lambda $0_{ev}.Q(mod|can(n|dance(det:art|a($1,n|tree($1)),$0),$0))
example_end

Sent: a mouse can 't read his mail .
Sem: lambda $0_{ev}.not(mod|can(v|read-zero(det:art|a($1,n|mouse($1)),det:poss|his($2,n|mail($2)),$0),$0),$0)
example_end

Sent: the monkey can 't skip rope with his tail ?
Sem: lambda $0_{ev}.Q(not(mod|can(and(n|skip(det:art|the($1,n|monkey($1)),lambda $2_{e}.n|rope($2),$0),prep|with(det:poss|his($3,n|tail($3)),$0)),$0),$0))
example_end

Sent: who 's reading the mail ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|read-presp($1,det:art|the($2,n|mail($2)),$0),$0)
example_end

Sent: where 's the cat ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|cat($1)),$0),$2($0))
example_end

Sent: he looks like a mouse .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:sub|he,$0),prep|like(det:art|a($1,n|mouse($1)),$0))
example_end

Sent: what is the elephant doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-3s(part|do-presp(det:art|the($1,n|elephant($1)),$2,$0),$0)
example_end

Sent: skipping like a monkey ?
Sem: lambda $0_{ev}.Q(and(part|skip-presp(you,$0),prep|like(det:art|a($1,n|monkey($1)),$0)))
example_end

Sent: the kitty 's reading the mail .
Sem: lambda $0_{ev}.aux|~be(part|read-presp(det:art|the($1,n|kitty($1)),det:art|the($2,n|mail($2)),$0),$0)
example_end

Sent: is this mail ?
Sem: lambda $0_{ev}.Q(n|mail(pro:dem|this,$0))
example_end

Sent: dries his eye .
Sem: lambda $0_{ev}.v|dry-3s(you,det:poss|his($1,n|eye($1)),$0)
example_end

Sent: turtle make what ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|make(lambda $1_{e}.n|turtle($1),$2,$0)
example_end

Sent: the turtle makes a mud pie .
Sem: lambda $0_{ev}.v|make-3s(det:art|the($1,n|turtle($1)),det:art|a($2,and_comp(n|mud($2),n|pie($2))),$0)
example_end

Sent: and what did he see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|see(pro:sub|he,$1,$0),$0)
example_end

Sent: don 't like what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|like(you,$1,$0),$0),$0)
example_end

Sent: you like this page ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,pro:dem|this($1,n|page($1)),$0))
example_end

Sent: the turtle making mud pies ?
Sem: lambda $0_{ev}.Q(part|make-presp(det:art|the($1,n|turtle($1)),lambda $2_{e}.and_comp(n|mud($2),n|pie-pl($2)),$0))
example_end

Sent: the cat ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|cat($1),$0))
example_end

Sent: who put a mud pie ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|put-zero($1,det:art|a($2,and_comp(n|mud($2),n|pie($2))),$0)
example_end

Sent: do you like that page ?
Sem: lambda $0_{ev}.Q(mod|do(v|like(pro:per|you,pro:dem|that($1,n|page($1)),$0),$0))
example_end

Sent: with the bunny rabbit .
Sem: prep|with(det:art|the($0,and_comp(n|bunny($0),n|rabbit($0))))
example_end

Sent: would you like to draw ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|draw(pro:per|you,$1),$0),$0))
example_end

Sent: who gave that book to you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|give-past($1,pro:dem|that($2,n|book($2)),$0),prep|to(pro:per|you,$0))
example_end

Sent: mud pies ?
Sem: lambda $0_{e}.Q(and_comp(n|mud($0),n|pie-pl($0)))
example_end

Sent: who makes mud pies ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{e}.and_comp(n|mud($2),n|pie-pl($2)),$0)
example_end

Sent: and who else ?
Sem: post|else(pro:int|who)
example_end

Sent: who reads his mail ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|read-3s($1,det:poss|his($2,n|mail($2)),$0)
example_end

Sent: well who counts his money ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|count-3s($1,det:poss|his($2,n|money($2)),$0),co|well($0))
example_end

Sent: where are the other parts ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-pres(det:art|the($1,and(qn|other($1),n|part-pl($1))),$0),$2($0))
example_end

Sent: part of the train .
Sem: lambda $0_{e}.att(n|part($0),prep|of(det:art|the($1,n|train($1))))
example_end

Sent: do you have a screwdriver ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|screw+driver($1)),$0),$0))
example_end

Sent: make a ship ?
Sem: lambda $0_{ev}.Q(v|make(you,det:art|a($1,n|ship($1)),$0))
example_end

Sent: where is the train going ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-3s(and(part|go-presp(det:art|the($1,n|train($1)),$0),$2($0)),$0)
example_end

Sent: don 't see it .
Sem: lambda $0_{ev}.not(mod|do(v|see(you,pro:per|it,$0),$0),$0)
example_end

Sent: that fell out .
Sem: lambda $0_{ev}.and(v|fall-past(pro:rel|that,$0),adv|out($0))
example_end

Sent: that one fell out .
Sem: lambda $0_{ev}.and(v|fall-past(pro:dem|that($1,pro:indef|one($1)),$0),adv|out($0))
example_end

Sent: grandmother rode in one like that ?
Sem: lambda $0_{ev}.Q(and(v|ride-past(n|mother,$0),prep|in(att(det:num|one,prep|like(pro:dem|that)),$0)))
example_end

Sent: she rode in one like that ?
Sem: lambda $0_{ev}.Q(and(v|ride-past(pro:sub|she,$0),prep|in(att(det:num|one,prep|like(pro:dem|that)),$0)))
example_end

Sent: did you see her get on the airplane ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,lambda $1_{ev}.v|get_on(det:poss|her,det:art|the($2,n|airplane($2)),$1),$0),$0))
example_end

Sent: going back where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(part|go-presp(you,$0),adv|back($0)),$1($0))
example_end

Sent: the airplane ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|airplane($1),$0))
example_end

Sent: poor Urs !
Sem: att(n:prop|ursula,lambda $0_{e}.adj|poor($0))
example_end

Sent: don 't run it on him .
Sem: lambda $0_{ev}.not(mod|do(and(v|run(you,pro:per|it,$0),prep|on(pro:obj|him,$0)),$0),$0)
example_end

Sent: he 's too tiny .
Sem: lambda $0_{ev}.adv|too(adj|tiny(pro:sub|he,$0))
example_end

Sent: put it on the floor .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|floor($1)),$0))
example_end

Sent: no that doesn 't come off .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|come(pro:dem|that,$0),adv|off($0)),$0),$0),qn|no($0))
example_end

Sent: that 's a kitten ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|kitten(pro:dem|that,$0)))
example_end

Sent: don 't go back where ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|go(you,$0),adv|back($0)),$1($0)),$0),$0)
example_end

Sent: see if that fits in your tiny purse .
Sem: lambda $0_{ev}.v|see(you,lambda $1_{ev}.and(v|fit-3s(pro:dem|that,$1),prep|in(det:poss|your($2,and(adj|tiny($2),n|purse($2))),$1)),$0)
example_end

Sent: you found it downtown .
Sem: lambda $0_{ev}.and(v|find-past(pro:per|you,pro:per|it,$0),adv|downtown($0))
example_end

Sent: the button dropped Adam .
Sem: lambda $0_{ev}.v|drop-past(det:art|the($1,n|button($1)),$0)
example_end

Sent: Adam what did you see at the airport ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,$1,$0),prep|at(det:art|the($2,n|airport($2)),$0)),$0)
example_end

Sent: where did Grandmother go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|grandmother,$0),$1($0)),$0)
example_end

Sent: it must be almost time .
Sem: lambda $0_{ev}.mod|must(cop|be(adv|almost(lambda $1_{e}.n|time($1)),$0),$0)
example_end

Sent: how do you know what time it is .
Sem: lambda $4_{e}.lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,lambda $1_{ev}.cop|be-3s(_,$2($3,n|time($3)),$1),$0),$4($0)),$0)
example_end

Sent: can you tell time ?
Sem: lambda $0_{ev}.Q(mod|can(v|tell(pro:per|you,lambda $1_{e}.n|time($1),$0),$0))
example_end

Sent: you keep this one .
Sem: lambda $0_{ev}.v|keep(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0)
example_end

Sent: did you write a pencil Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|write(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: let me see that Adam .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,pro:rel|that,$1),$0)
example_end

Sent: is there a picture on it ?
Sem: lambda $0_{ev}.Q(cop|be-3s(det:art|a($1,att(n|picture($1),prep|on(pro:per|it))),$0))
example_end

Sent: picture on the other one ?
Sem: lambda $0_{e}.Q(att(n|picture($0),prep|on(det:art|the($1,and(qn|other($1),pro:indef|one($1))))))
example_end

Sent: but there wasn 't one on that .
Sem: lambda $0_{ev}.not(cop|be(lambda $1_{e}.att(pro:indef|one($1),prep|on(pro:dem|that)),$0),$0)
example_end

Sent: you mean what came from that ?
Sem: lambda $0_{ev}.Q(v|mean(pro:per|you,lambda $1_{ev}.and(v|come-past(pro:int|what,$1),prep|from(pro:dem|that,$1)),$0))
example_end

Sent: the tape was in that box .
Sem: lambda $0_{ev}.and(cop|be-past(det:art|the($1,n|tape($1)),$0),prep|in(pro:dem|that($2,n|box($2)),$0))
example_end

Sent: why don 't you give Urs the box ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|give(pro:per|you,det:art|the($1,n|box($1)),n:prop|ursula,$0),$2($0)),$0),$0)
example_end

Sent: she 'll need it to put the tape in .
Sem: lambda $0_{ev}.mod|~will(v|need(pro:sub|she,lambda $1_{ev}.and(v|put-zero(pro:per|it,det:art|the($2,n|tape($2)),$1),adv|in($1)),$0),$0)
example_end

Sent: yes when she goes home she 'll need to put the tape in the box .
Sem: lambda $0_{ev}.and(mod|~will(conj|when(and(v|go-3s(pro:sub|she,$0),n|home($0)),v|need(pro:sub|she,lambda $1_{ev}.v|put-zero(pro:sub|she,det:art|the($2,att(n|tape($2),prep|in(det:art|the($3,n|box($3))))),$1),$0)),$0),co|yes($0))
example_end

Sent: sandwich too ?
Sem: lambda $0_{e}.Q(post|too(lambda $1_{e}.n|sandwich($1),$0))
example_end

Sent: that 's not what you said .
Sem: lambda $0_{ev}.not(cop|~be(you,pro:dem|that,$0),$0)
example_end

Sent: bow and arrow .
Sem: coord|and(lambda $0_{e}.n|bow($0),lambda $1_{e}.n|arrow($1))
example_end

Sent: are you going to bring it in ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|bring(pro:per|you,pro:per|it,$1),adv|in($1)),$0),$0))
example_end

Sent: oh thank_you Adam .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|oh($0))
example_end

Sent: don 't put the tape in ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|put-zero(you,det:art|the($1,n|tape($1)),$0),adv|in($0)),$0),$0))
example_end

Sent: yes look at that .
Sem: lambda $0_{ev}.and(and(cop|look(you,$0),prep|at(pro:dem|that,$0)),co|yes($0))
example_end

Sent: stuck with the record ?
Sem: lambda $0_{ev}.Q(and(v|stick-past(you,$0),prep|with(det:art|the($1,n|record($1)),$0)))
example_end

Sent: come on for a ride ?
Sem: lambda $0_{ev}.Q(and(and(v|come(you,$0),adv|on($0)),prep|for(det:art|a($1,n|ride($1)),$0)))
example_end

Sent: where am I going to fit Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-1s(and(part|go-presp(pro:sub|i,lambda $1_{ev}.v|fit-zero(pro:sub|i,$1),$0),$2($0)),$0)
example_end

Sent: I don 't think I would fit in that little corner .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|will-cond(and(part|fit-pastp(pro:sub|i,$1),prep|in(pro:dem|that($2,and(adj|little($2),n|corner($2))),$1)),$1),$0),$0),$0)
example_end

Sent: if you put one foot on the floor you can push it .
Sem: lambda $0_{ev}.mod|can(conj|if(and(v|put-zero(pro:per|you,lambda $1_{e}.det:num|one(n|foot($1)),$0),prep|on(det:art|the($2,n|floor($2)),$0)),v|push(pro:per|you,pro:per|it,$0)),$0)
example_end

Sent: like that now push .
Sem: and(adv|now(lambda $0_{e}.n|push($0)),pro:dem|that)
example_end

Sent: now bring it over to here .
Sem: lambda $0_{ev}.and(and(v|bring(you,pro:per|it,$0),adv|now($0)),adv|over(prep|to(adv|here,$0)))
example_end

Sent: you pull it over here first .
Sem: lambda $0_{ev}.and(and(v|pull(pro:per|you,pro:per|it,$0),adv|over(adv|here($0))),adv|first($0))
example_end

Sent: what shall I do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|do(pro:sub|i,$1,$0),$0)
example_end

Sent: put some pillow in it ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,qn|some($1,n|pillow($1)),$0),prep|in(pro:per|it,$0)))
example_end

Sent: aren 't you ashamed having Urs pull you in the wagon ?
Sem: lambda $0_{ev}.Q(not(and(adj|ashamed(pro:per|you,$0),part|have-presp(you,lambda $1_{ev}.and(v|pull(n:prop|ursula,pro:per|you,$1),prep|in(det:art|the($2,n|wagon($2)),$1)),$0)),$0))
example_end

Sent: you look like it .
Sem: lambda $0_{ev}.and(co|look(pro:per|you,$0),co|like(pro:per|it,$0))
example_end

Sent: oh you push yourself .
Sem: lambda $0_{ev}.and(v|push(pro:per|you,pro:refl|yourself,$0),co|oh($0))
example_end

Sent: why don 't you get out and give Humpty_Dumpty a ride ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(v|give(pro:per|you,det:art|a($1,n|ride($1)),n:prop|humpty_dumpty,$0),v|get(pro:per|you,$0)),$2($0)),adv|out($0)),$0),$0)
example_end

Sent: you might go to sleep .
Sem: lambda $0_{ev}.mod|might(v|go(pro:per|you,lambda $1_{ev}.v|sleep(pro:per|you,$1),$0),$0)
example_end

Sent: where 's your magazine ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|magazine($1)),$0),$2($0))
example_end

Sent: do you have a story about Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,att(n|story($1),prep|about(n:prop|humpty_dumpty))),$0),$0))
example_end

Sent: what 's that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:rel|that,$0)
example_end

Sent: dump truck does what with the sand ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(lambda $1_{e}.and_comp(n|dump($1),n|truck($1)),$2,$0)
example_end

Sent: Adam why don 't you pick Cromer 's pen up and give it to him ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(and(v|give(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0)),v|pick(pro:per|you,n:prop|cromer's($1,n|pen($1)),$0)),$2($0)),adv|up($0)),$0),$0)
example_end

Sent: oh it 's not a nail clippers .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:per|it,and_comp(n|nail(pro:per|it,$0),n|clip-dv(pro:per|it,$0))),$0),co|oh($0))
example_end

Sent: piece of a trailer ?
Sem: lambda $0_{e}.Q(att(n|piece($0),prep|of(det:art|a($1,n|trailer($1)))))
example_end

Sent: are you mailing it ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|mail-presp(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: power shovel ?
Sem: lambda $0_{e}.Q(and_comp(n|power($0),n|shovel($0)))
example_end

Sent: lost your what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|lose-past(you,$1,$0)
example_end

Sent: what happened to the pen ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,n|pen($2)),$0))
example_end

Sent: how are you going to get it out ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|get(pro:per|you,pro:per|it,$1),adv|out($1)),$0),$2($0)),$0)
example_end

Sent: you lost your dirt .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:poss|your($1,n|dirt($1)),$0)
example_end

Sent: she didn 't make any noise .
Sem: lambda $0_{ev}.not(mod|do(v|make(pro:sub|she,qn|any($1,n|noise($1)),$0),$0),$0)
example_end

Sent: listen to it .
Sem: lambda $0_{ev}.and(v|listen(you,$0),prep|to(pro:per|it,$0))
example_end

Sent: how do you know ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you aren 't even looking out the window .
Sem: lambda $0_{ev}.not(aux|be(and(and(part|look-presp(pro:per|you,$0),adv|even($0)),prep|out(det:art|the($1,n|window($1)),$0)),$0),$0)
example_end

Sent: are you cooking ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|cook-presp(pro:per|you,$0),$0))
example_end

Sent: I don 't know what time fourteen o'clock is .
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.$2(lambda $3_{e}.det:num|fourteen(n|o'clock($3)),n|time(lambda $4_{e}.det:num|fourteen(n|o'clock($4)),$1)),$0),$0),$0)
example_end

Sent: can you tell me ?
Sem: lambda $0_{ev}.Q(mod|can(v|tell(pro:per|you,pro:obj|me,$0),$0))
example_end

Sent: nineteen o'clock ?
Sem: lambda $0_{e}.Q(det:num|nineteen(n|o'clock($0)))
example_end

Sent: what time is nineteen o'clock ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.det:num|nineteen(n|o'clock($2)),n|time(lambda $3_{e}.det:num|nineteen(n|o'clock($3)),$0))
example_end

Sent: Adam don 't you think you might break the clock ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|might(v|break(pro:per|you,det:art|the($2,n|clock($2)),$1),$1),$0),$0),$0))
example_end

Sent: it doesn 't belong like that .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:per|it,$0),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: it doesn 't go that way .
Sem: lambda $0_{ev}.not(mod|do(v|go(pro:per|it,pro:dem|that($1,n|way($1)),$0),$0),$0)
example_end

Sent: it works .
Sem: lambda $0_{ev}.v|work-3s(pro:per|it,$0)
example_end

Sent: is that coffee ?
Sem: lambda $0_{ev}.Q(n|coffee(pro:dem|that,$0))
example_end

Sent: just pretend .
Sem: lambda $0_{ev}.and(adj|pretend(you,$0),adv|just($0))
example_end

Sent: a tooth ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|tooth($1),$0))
example_end

Sent: what does Cromer have ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|have(n:prop|cromer,$1,$0),$0)
example_end

Sent: no he doesn 't have any teeth yet .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|have(pro:sub|he,qn|any($1,n|tooth-pl($1)),$0),adv|yet($0)),$0),$0),co|no($0))
example_end

Sent: he 's too small .
Sem: lambda $0_{ev}.adv|too(adj|small(pro:sub|he,$0))
example_end

Sent: no that 's the baby 's .
Sem: det:art|the($0,n|baby's($0))
example_end

Sent: you 're the big baby yes .
Sem: lambda $0_{ev}.and(det:art|the(pro:per|you,and(n|baby(pro:per|you,$0),adj|big(pro:per|you,$0))),co|yes($0))
example_end

Sent: well pick them up off the floor .
Sem: lambda $0_{ev}.and(and(and(v|pick(you,pro:obj|them,$0),adv|up($0)),prep|off(det:art|the($1,n|floor($1)),$0)),co|well($0))
example_end

Sent: she can 't play on the floor .
Sem: lambda $0_{ev}.not(mod|can(and(v|play(pro:sub|she,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0)
example_end

Sent: put them on the table .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:obj|them,$0),prep|on(det:art|the($1,n|table($1)),$0))
example_end

Sent: well she can 't sit on the floor .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|sit(pro:sub|she,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0),co|well($0))
example_end

Sent: shall we put them on the table Adam ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|put-zero(pro:sub|we,pro:obj|them,$0),prep|on(det:art|the($1,n|table($1)),$0)),$0))
example_end

Sent: what about a bench ?
Sem: att(pro:int|what,adv|about(det:art|a($0,n|bench($0))))
example_end

Sent: which bench ?
Sem: lambda $0_{e}.$0($1,n|bench($1))
example_end

Sent: come from the other one ?
Sem: lambda $0_{ev}.Q(and(v|come(you,$0),prep|from(det:art|the($1,and(qn|other($1),pro:indef|one($1))),$0)))
example_end

Sent: what are you showing her Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|show-presp(pro:per|you,$1,det:poss|her,$0),$0)
example_end

Sent: oh that can 't fly .
Sem: lambda $0_{ev}.and(not(mod|can(v|fly(pro:rel|that,$0),$0),$0),co|oh($0))
example_end

Sent: down by the bed Adam .
Sem: lambda $0_{e}.att(adv|down($0),prep|by(det:art|the($1,n|bed($1))))
example_end

Sent: Adam where does this go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|go(pro:dem|this,$0),$1($0)),$0)
example_end

Sent: put some pencil in there ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,qn|some($1,n|pencil($1)),$0),prep|in(adv|there($0))))
example_end

Sent: show me how .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|show(_,_,pro:obj|me,$0),$1($0))
example_end

Sent: take it at home ?
Sem: lambda $0_{ev}.Q(and(v|take(you,pro:per|it,$0),prep|at(lambda $1_{e}.n|home($1),$0)))
example_end

Sent: Robin 's home .
Sem: n:prop|robin's($0,n|home($0))
example_end

Sent: is that a butterfly ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|butter+fly(pro:rel|that,$0)))
example_end

Sent: oh you 're going to put them back in the envelope ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back($1)),prep|in(det:art|the($2,n|envelope($2)),$1)),$0),$0),co|oh($0)))
example_end

Sent: and talk ?
Sem: lambda $0_{ev}.Q(n|talk(you,$0))
example_end

Sent: talk about Urs ?
Sem: lambda $0_{ev}.Q(and(n|talk(you,$0),prep|about(n:prop|ursula,$0)))
example_end

Sent: what are you going to say about Urs ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|say($2,$1),prep|about(n:prop|ursula,$1)),$0),$0)
example_end

Sent: is that envelopes ?
Sem: lambda $0_{ev}.Q(n|envelope-pl(pro:dem|that,$0))
example_end

Sent: do you have pennies in there ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,lambda $1_{e}.n|penny-pl($1),$0),prep|in(adv|there($0))),$0))
example_end

Sent: you 're Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:per|you,$0))
example_end

Sent: what did that come from ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|come(pro:rel|that,$1,$0),$0)
example_end

Sent: well go check .
Sem: lambda $0_{ev}.and(n|check(you,$0),co|well($0))
example_end

Sent: well you took your book over there .
Sem: lambda $0_{ev}.and(and(v|take-past(pro:per|you,det:poss|your($1,n|book($1)),$0),adv|over(adv|there($0))),co|well($0))
example_end

Sent: you want to play with that one ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|play(pro:per|you,$1),prep|with(pro:dem|that($2,pro:indef|one($2)),$1)),$0))
example_end

Sent: your magazine .
Sem: det:poss|your($0,n|magazine($0))
example_end

Sent: that 's part of the train I think .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.att(n|part(pro:dem|that,$1),prep|of(det:art|the($2,n|train($2)))),$0)
example_end

Sent: what about over here ?
Sem: adv|here(pro:int|what)
example_end

Sent: get it there ?
Sem: lambda $0_{ev}.Q(and(aux|get(you,pro:per|it,$0),adv|there($0)))
example_end

Sent: where did that go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:rel|that,$0),$1($0)),$0)
example_end

Sent: well it doesn 't go like that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:per|it,$0),prep|like(pro:dem|that,$0)),$0),$0),co|well($0))
example_end

Sent: why don 't you turn it around and try ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(v|turn(pro:per|you,pro:per|it,$0),v|try(pro:per|you,pro:per|it,$0)),$1($0)),adv|around($0)),$0),$0)
example_end

Sent: no that 's not right either .
Sem: lambda $0_{ev}.and(not(adv|either(adv|right(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: no try it on the other side .
Sem: lambda $0_{ev}.and(and(v|try(you,pro:per|it,$0),prep|on(det:art|the($1,and(qn|other($1),n|side($1))),$0)),co|no($0))
example_end

Sent: you 're drinking water like a dog !
Sem: lambda $0_{ev}.aux|~be(and(part|drink-presp(pro:per|you,lambda $1_{e}.n|water($1),$0),prep|like(det:art|a($2,n|dog($2)),$0)),$0)
example_end

Sent: yeah pretend that that 's water .
Sem: lambda $0_{ev}.and(adj|pretend(you,lambda $1_{ev}.n|water(pro:rel|that,$1),$0),co|yeah($0))
example_end

Sent: oh the camel 's drinking some water ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|drink-presp(det:art|the($1,n|camel($1)),qn|some($2,n|water($2)),$0),$0),co|oh($0)))
example_end

Sent: what d you mean ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(adj|mean(pro:per|you,$1,$0),$0)
example_end

Sent: you folded it ?
Sem: lambda $0_{ev}.Q(v|fold-past(pro:per|you,pro:per|it,$0))
example_end

Sent: don 't break it .
Sem: lambda $0_{ev}.not(mod|do(v|break(you,pro:per|it,$0),$0),$0)
example_end

Sent: if you break it you 'll have_to take some pennies out_of your bank and buy her another one .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(conj|if(v|break(pro:per|you,pro:per|it,$0),and(coord|and(v|buy(pro:per|you,qn|another($1,pro:indef|one($1)),pro:obj|her,$0),v|take(pro:per|you,qn|some($2,n|penny-pl($2)),$0)),prep|out_of(det:poss|your($3,n|bank($3)),$0))),$0),$0)
example_end

Sent: yes that 's a clock .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|clock(pro:dem|that,$0)),co|yes($0))
example_end

Sent: you lost your food ?
Sem: lambda $0_{ev}.Q(v|lose-past(pro:per|you,det:poss|your($1,n|food($1)),$0))
example_end

Sent: the table almost tipped .
Sem: lambda $0_{ev}.and(part|tip-pastp(det:art|the($1,n|table($1)),$0),adv|almost($0))
example_end

Sent: where 's your shoe ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|shoe($1)),$0),$2($0))
example_end

Sent: it 's already .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,$0),adv|already($0))
example_end

Sent: it already is .
Sem: lambda $0_{ev}.and(cop|be-3s(pro:per|it,$0),adv|already($0))
example_end

Sent: where 's the other pen Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,and(qn|other($1),n|pen($1))),$0),$2($0))
example_end

Sent: pick it up and take it over there .
Sem: lambda $0_{ev}.coord|and(and(v|take(you,pro:per|it,$0),adv|over(adv|there($0))),and(v|pick(you,pro:per|it,$0),adv|up($0)))
example_end

Sent: I think the other one is in your wagon .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(cop|be-3s(det:art|the($2,and(qn|other($2),pro:indef|one($2))),$1),prep|in(det:poss|your($3,n|wagon($3)),$1)),$0)
example_end

Sent: that 's not it .
Sem: lambda $0_{ev}.not(pro:per|it(pro:dem|that,$0),$0)
example_end

Sent: I need something to write with .
Sem: lambda $0_{ev}.v|need(pro:sub|i,lambda $1_{ev}.v|write(pro:indef|something,$1),$0)
example_end

Sent: may I use one ?
Sem: lambda $0_{ev}.Q(mod|may(v|use(pro:sub|i,pro:indef|one,$0),$0))
example_end

Sent: who does that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s($1,det:dem|that,$0)
example_end

Sent: who else does ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s($1,$0)
example_end

Sent: what 's Ricky ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n:prop|ricky,$0)
example_end

Sent: where did you see Ricky ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,n:prop|ricky,$0),$1($0)),$0)
example_end

Sent: did he catch any fish ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|catch(pro:sub|he,qn|any($1,n|fish($1)),$0),$0))
example_end

Sent: I was just looking at it .
Sem: lambda $0_{ev}.cop|be-past(and(and(part|look-presp(pro:sub|i,$0),adv|just($0)),prep|at(pro:per|it,$0)),$0)
example_end

Sent: no don 't write on the book .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|write(you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0),$0),co|no($0))
example_end

Sent: oh I need a little spanking ?
Sem: lambda $0_{ev}.Q(and(v|need(pro:sub|i,det:art|a($1,and(adj|little($1),n:gerund|spank-presp($1))),$0),co|oh($0)))
example_end

Sent: do you need a little spanking ?
Sem: lambda $0_{ev}.Q(mod|do(v|need(pro:per|you,det:art|a($1,and(adj|little($1),n:gerund|spank-presp($1))),$0),$0))
example_end

Sent: who 's crying Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|cry-presp($1,$0),$0)
example_end

Sent: he got it out .
Sem: lambda $0_{ev}.and(v|get-past(pro:sub|he,pro:per|it,$0),adv|out($0))
example_end

Sent: because I don 't want it open .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|i,lambda $1_{ev}.adj|open(pro:per|it,$1),$0),$0),$0)
example_end

Sent: you shoot him with a gun ?
Sem: lambda $0_{ev}.Q(and(v|shoot(pro:per|you,pro:obj|him,$0),prep|with(det:art|a($1,n|gun($1)),$0)))
example_end

Sent: is it a gun ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|gun(pro:per|it,$0)))
example_end

Sent: it 's a comb .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|comb(pro:per|it,$0))
example_end

Sent: Adam give him his comb please honey .
Sem: lambda $0_{ev}.and(v|give(you,det:poss|his($1,n|comb($1)),pro:obj|him,$0),co|please($0))
example_end

Sent: I don 't want to take a bath !
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|take(pro:sub|i,det:art|a($2,n|bath($2)),$1),$0),$0),$0)
example_end

Sent: see the circus ?
Sem: lambda $0_{ev}.Q(v|see(you,det:art|the($1,n|circus($1)),$0))
example_end

Sent: I don 't know but don 't you bother it again .
Sem: lambda $0_{ev}.not(conj|but(not(mod|do(and(v|bother(pro:per|you,pro:per|it,$0),adv|again($0)),$0),$0),mod|do(v|know(pro:sub|i,$0),$0)),$0)
example_end

Sent: they 're all_gone until tomorrow .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|all_gone($0,$1)
example_end

Sent: they 're all rolled up on some tape somewhere .
Sem: lambda $0_{ev}.aux|~be(and(and(and(and(v|roll-past(pro:sub|they,$0),post|all($0)),adv|up($0)),prep|on(qn|some($1,n|tape($1)),$0)),n|somewhere($0)),$0)
example_end

Sent: dum_dum doggie ?
Sem: lambda $0_{e}.Q(and_comp(co|dum_dum($0),n|dog-dim($0)))
example_end

Sent: roping me ?
Sem: lambda $0_{ev}.Q(part|rope-presp(you,pro:obj|me,$0))
example_end

Sent: that 's not rope honey .
Sem: lambda $0_{ev}.not(v|rope(pro:dem|that,$0),$0)
example_end

Sent: don 't do that Adam .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,det:dem|that,$0),$0),$0)
example_end

Sent: you can 't do that .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: you may hit somebody .
Sem: lambda $0_{ev}.mod|may(n|hit(pro:per|you,lambda $1_{e}.pro:indef|somebody($1),$0),$0)
example_end

Sent: you stay over there in the corner there .
Sem: lambda $0_{ev}.and(and(n|stay(pro:per|you,$0),adv|over(adv|there($0))),adv|there(prep|in(det:art|the($1,n|corner($1)),$0)))
example_end

Sent: where is your rope ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|rope($1)),$0),$2($0))
example_end

Sent: didn 't you have some shoelaces down here ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|have(pro:per|you,qn|some($1,n|shoe+lace($1)),$0),adv|down(adv|here($0))),$0),$0))
example_end

Sent: in the fireplace ?
Sem: Q(prep|in(det:art|the($0,n|fire+place($0))))
example_end

Sent: it 's messy ?
Sem: lambda $0_{ev}.Q(adj|mess-dn(pro:per|it,$0))
example_end

Sent: where did you hear of dum_dum ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|hear(pro:per|you,$0),$1($0)),prep|of(co|dum_dum,$0)),$0)
example_end

Sent: or who is dum_dum ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(co|dum_dum,$0)
example_end

Sent: what is dum_dum ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(co|dum_dum,$0)
example_end

Sent: I 'm dum_dum ?
Sem: lambda $0_{ev}.Q(co|dum_dum(pro:sub|i,$0))
example_end

Sent: a camel or a camera ?
Sem: lambda $0_{e}.Q(coord|or(det:art|a($1,n|camel($1)),det:art|a($2,n|camera($2)),$0))
example_end

Sent: a hammer .
Sem: det:art|a($0,n|hammer($0))
example_end

Sent: you had a nail didn 't you ?
Sem: lambda $0_{ev}.Q(and(v|have-past(pro:per|you,det:art|a($1,n|nail($1)),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: there was one before on the floor .
Sem: lambda $0_{ev}.and(and(aux|be-past(pro:indef|one,$0),adv|before($0)),prep|on(det:art|the($1,n|floor($1)),$0))
example_end

Sent: you left a nail ?
Sem: lambda $0_{ev}.Q(v|leave-past(pro:per|you,det:art|a($1,n|nail($1)),$0))
example_end

Sent: you lost a nail .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:art|a($1,n|nail($1)),$0)
example_end

Sent: yes but where do you spit ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|spit(pro:per|you,$0),$1($0)),$0),co|yes($0))
example_end

Sent: spit on toilet seat .
Sem: lambda $0_{ev}.and(n|spit(you,$0),prep|on(lambda $1_{e}.and_comp(n|toilet($1),n|seat($1)),$0))
example_end

Sent: yes if you have_to spit you go up and spit in the toilet .
Sem: lambda $0_{ev}.and(conj|if(mod:aux|have_to(v|spit(pro:per|you,$0),$0),and(and(n|spit(pro:per|you,$0),adv|up($0)),prep|in(det:art|the($1,n|toilet($1)),$0))),co|yes($0))
example_end

Sent: well then don 't do that again .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|do(you,pro:dem|that,$0),adv:tem|then($0)),adv|again($0)),$0),$0),co|well($0))
example_end

Sent: Adam do .
Sem: lambda $0_{ev}.v|do(n:prop|adam,$0)
example_end

Sent: didn 't he go to school ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|go(pro:sub|he,$0),prep|to(lambda $1_{e}.n|school($1),$0)),$0),$0))
example_end

Sent: because you may hit somebody with it .
Sem: lambda $0_{ev}.mod|may(and(n|hit(pro:per|you,lambda $1_{e}.pro:indef|somebody($1),$0),prep|with(pro:per|it,$0)),$0)
example_end

Sent: you may throw it .
Sem: lambda $0_{ev}.mod|may(v|throw(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: no throw it to me .
Sem: lambda $0_{ev}.and(and(v|throw(you,pro:per|it,$0),prep|to(pro:obj|me,$0)),co|no($0))
example_end

Sent: I can 't catch but one .
Sem: lambda $0_{ev}.not(mod|can(v|catch(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: is there one behind the door ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(pro:indef|one,$0),prep|behind(det:art|the($1,n|door($1)),$0)))
example_end

Sent: didn 't you put one in the box ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|put-zero(pro:per|you,lambda $1_{e}.det:num|one($1),$0),prep|in(det:art|the($2,n|box($2)),$0)),$0),$0))
example_end

Sent: you 've got the blue one in there haven 't you ?
Sem: lambda $0_{ev}.Q(and(aux|~have(and(part|get-pastp(pro:per|you,det:art|the($1,att(det:num|one,lambda $2_{e}.n|blue($2),$1)),$0),prep|in(adv|there($0))),$0),not(aux|have(pro:per|you,$0),$0)))
example_end

Sent: that came from a coffee can it may cut you .
Sem: lambda $0_{ev}.and(and(v|come-past(pro:rel|that,$0),prep|from(det:art|a($1,and_comp(n|coffee($1),mod|can($1))),$0)),mod|may(v|cut-zero(pro:per|it,pro:per|you,$0),$0))
example_end

Sent: I don 't think you can get it back on there .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(aux|get(pro:per|you,pro:per|it,$1),prep|on(adv|back(adv|there($1)))),$1),$0),$0),$0)
example_end

Sent: what 's too small ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|too(adj|small($1,$0))
example_end

Sent: that 's too small ?
Sem: lambda $0_{ev}.Q(adv|too(adj|small(pro:dem|that,$0)))
example_end

Sent: where one what ?
Sem: lambda $0_{e}.$0(lambda $1_{e}.pro:indef|one(pro:int|what($1)))
example_end

Sent: put them in my lap as you count them .
Sem: lambda $0_{ev}.conj|as(v|count(pro:per|you,pro:obj|them,$0),and(v|put-zero(you,pro:obj|them,$0),prep|in(det:poss|my($1,n|lap($1)),$0)))
example_end

Sent: I saw more than three .
Sem: lambda $0_{ev}.v|see-past(pro:sub|i,lambda $1_{e}.qn|more($1),$0)
example_end

Sent: okay count again .
Sem: lambda $0_{ev}.and(and(n|count(you,$0),adv|again($0)),co|okay($0))
example_end

Sent: that 's one .
Sem: lambda $0_{ev}.pro:indef|one(pro:dem|that,$0)
example_end

Sent: four five .
Sem: lambda $0_{e}.det:num|four(det:num|five($0))
example_end

Sent: that 's all .
Sem: lambda $0_{ev}.pro:indef|all(pro:dem|that,$0)
example_end

Sent: one two three four five .
Sem: lambda $0_{e}.det:num|one(det:num|two(det:num|three(det:num|four(det:num|five($0)))))
example_end

Sent: just one .
Sem: adv|just(lambda $0_{e}.det:num|one($0))
example_end

Sent: what kind of franks ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|frank-pl($2))))
example_end

Sent: don 't shoot Mr Cowboy .
Sem: lambda $0_{ev}.not(mod|do(v|shoot(you,n:prop|cowboy_mr,$0),$0),$0)
example_end

Sent: oh Adam .
Sem: lambda $0_{ev}.and(n:prop|adam($0),co|oh($0))
example_end

Sent: hold it up not hang it up .
Sem: lambda $0_{ev}.and(and(v|hold(you,pro:per|it,$0),adv|up($0)),not(and(v|hang(you,pro:per|it,$0),adv|up($0)),$0))
example_end

Sent: one two three four .
Sem: lambda $0_{e}.det:num|one(det:num|two(det:num|three(det:num|four($0))))
example_end

Sent: it popped .
Sem: lambda $0_{ev}.v|pop-past(pro:per|it,$0)
example_end

Sent: you slipped ?
Sem: lambda $0_{ev}.Q(v|slip-past(pro:per|you,$0))
example_end

Sent: oh is that a game ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:rel|that,n|game(pro:rel|that,$0)),co|oh($0)))
example_end

Sent: what 's the name of that game ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,att(n|name($2),prep|of(pro:dem|that($3,n|game($3))))),$0)
example_end

Sent: yes what 's the name of that game ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|the($2,att(n|name($2),prep|of(pro:dem|that($3,n|game($3))))),$0),co|yes($0))
example_end

Sent: are you playing a game or are you playing games ?
Sem: lambda $0_{ev}.Q(coord|or(aux|be-pres(part|play-presp(pro:per|you,lambda $1_{e}.n|game-pl($1),$0),$0),cop|be-pres(part|play-presp(pro:per|you,det:art|a($2,n|game($2)),$0),$0)))
example_end

Sent: playing games ?
Sem: lambda $0_{ev}.Q(part|play-presp(you,lambda $1_{e}.n|game-pl($1),$0))
example_end

Sent: play games ?
Sem: lambda $0_{ev}.Q(n|play(you,lambda $1_{e}.v|game-3s($1),$0))
example_end

Sent: I don 't think that writes .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|write-3s(pro:rel|that,$1),$0),$0),$0)
example_end

Sent: dump them in there ?
Sem: lambda $0_{ev}.Q(and(v|dump(you,pro:obj|them,$0),prep|in(adv|there($0))))
example_end

Sent: you know what happened .
Sem: lambda $0_{ev}.v|know(pro:per|you,lambda $1_{ev}.v|happen-past(pro:int|what,$1),$0)
example_end

Sent: what 's so big ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|so(adj|big($1,$0))
example_end

Sent: I 'm so big ?
Sem: lambda $0_{ev}.Q(adv|so(adj|big(pro:sub|i,$0)))
example_end

Sent: yes I am so big .
Sem: lambda $0_{ev}.and(adv|so(adj|big(pro:sub|i,$0)),co|yes($0))
example_end

Sent: I can 't ride in your wagon .
Sem: lambda $0_{ev}.not(mod|can(and(v|ride(pro:sub|i,$0),prep|in(det:poss|your($1,n|wagon($1)),$0)),$0),$0)
example_end

Sent: oh was that coffee ?
Sem: lambda $0_{ev}.Q(and(n|coffee(pro:dem|that,$0),co|oh($0)))
example_end

Sent: wait I need that .
Sem: lambda $0_{ev}.and(v|need(pro:sub|i,pro:dem|that,$0),v|wait(you,$0))
example_end

Sent: well what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: Adam don 't kick anybody .
Sem: lambda $0_{ev}.not(mod|do(v|kick(you,lambda $1_{e}.pro:indef|anybody($1),$0),$0),$0)
example_end

Sent: do you want me to take your shoes off ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|take(pro:obj|me,det:poss|your($2,n|shoe-pl($2)),$1),adv|off($1)),$0),$0))
example_end

Sent: what did you throw ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|throw(pro:per|you,$1,$0),$0)
example_end

Sent: you 're not supposed to throw anything in the air .
Sem: lambda $0_{ev}.not(aux|~be(part|suppose-pastp(pro:per|you,lambda $1_{ev}.and(v|throw(pro:per|you,lambda $2_{e}.pro:indef|anything($2),$1),prep|in(det:art|the($3,n|air($3)),$1)),$0),$0),$0)
example_end

Sent: did you know that ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|know(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: you don 't know that ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|know(pro:per|you,pro:dem|that,$0),$0),$0))
example_end

Sent: well now you know it because I just told you .
Sem: lambda $0_{ev}.and(conj|because(and(v|tell-past(pro:sub|i,pro:per|you,$0),adv|just($0)),and(v|know(pro:per|you,pro:per|it,$0),adv|now($0))),n|well($0))
example_end

Sent: you have_to do them one at a time .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|do(pro:per|you,pro:obj|them,$0),det:art|a($1,pro:indef|one(n|time($1)),$0)),$0)
example_end

Sent: my size ?
Sem: lambda $0_{e}.Q(det:poss|my($1,n|size($1),$0))
example_end

Sent: no I 'll have_to put it up now Adam .
Sem: lambda $0_{ev}.and(mod:aux|have_to(mod|~will(and(and(v|put-zero(pro:sub|i,pro:per|it,$0),adv|up($0)),adv|now($0)),$0),$0),co|no($0))
example_end

Sent: you don 't want to play games ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,lambda $1_{ev}.n|play(pro:per|you,lambda $2_{e}.n|game-pl($2),$1),$0),$0),$0))
example_end

Sent: pull you for a ride ?
Sem: lambda $0_{ev}.Q(and(v|pull(you,pro:per|you,$0),prep|for(det:art|a($1,n|ride($1)),$0)))
example_end

Sent: push yourself .
Sem: lambda $0_{ev}.v|push(you,pro:refl|yourself,$0)
example_end

Sent: push with your feet .
Sem: lambda $0_{ev}.and(n|push(you,$0),prep|with(det:poss|your($1,n|foot-pl($1)),$0))
example_end

Sent: you can give yourself a ride .
Sem: lambda $0_{ev}.mod|can(v|give(pro:per|you,det:art|a($1,n|ride($1)),pro:refl|yourself,$0),$0)
example_end

Sent: yes you 're giving yourself a ride .
Sem: lambda $0_{ev}.and(aux|~be(part|give-presp(pro:per|you,det:art|a($1,n|ride($1)),pro:refl|yourself,$0),$0),co|yes($0))
example_end

Sent: your tricycle is there .
Sem: lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|tricycle($1)),$0),adv|there($0))
example_end

Sent: you have_to pull your wagon back .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|pull(pro:per|you,det:poss|your($1,n|wagon($1)),$0),adv|back($0)),$0)
example_end

Sent: I think it 's running into the television set isn 't it ?
Sem: lambda $0_{ev}.Q(and(v|think(pro:sub|i,lambda $1_{ev}.cop|~be(and(part|run-presp(pro:per|it,$1),prep|into(det:art|the($2,and_comp(n|television($2),part|set-pastp($2))),$1)),$1),$0),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: Adam don 't you think you may fall ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|may(v|fall(pro:per|you,$1),$1),$0),$0),$0))
example_end

Sent: a horse ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|horse($1),$0))
example_end

Sent: in a magazine ?
Sem: Q(prep|in(det:art|a($0,n|magazine($0))))
example_end

Sent: yes it is .
Sem: lambda $0_{ev}.and(cop|be-3s(pro:per|it,$0),co|yes($0))
example_end

Sent: what else do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: you see another horse ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,qn|another($1,n|horse($1)),$0))
example_end

Sent: some stamps .
Sem: qn|some($0,n|stamp-pl($0))
example_end

Sent: you have_to put them on envelopes to mail them .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|put-zero(pro:per|you,lambda $1_{ev}.v|mail(pro:obj|them,pro:obj|them,$1),$0),prep|on(lambda $2_{e}.n|envelope-pl($2),$0)),$0)
example_end

Sent: you one envelope 's on the floor by Urs  foot .
Sem: lambda $0_{ev}.and(aux|~be(lambda $1_{e}.det:num|one(n|envelope($1)),$0),adv|on(det:art|the($2,att(n|floor($2),prep|by(n:prop|ursula's($3,n|foot($3))))),$0))
example_end

Sent: take the pillow out_of the wagon .
Sem: lambda $0_{ev}.and(v|take(you,det:art|the($1,n|pillow($1)),$0),prep|out_of(det:art|the($2,n|wagon($2)),$0))
example_end

Sent: well it doesn 't belong up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|belong(pro:per|it,$0),adv|up(adv|there($0))),$0),$0),co|well($0))
example_end

Sent: oh you hung that up ?
Sem: lambda $0_{ev}.Q(and(and(v|hang-past(pro:per|you,pro:rel|that,$0),adv|up($0)),co|oh($0)))
example_end

Sent: you better put those back up on the desk .
Sem: lambda $0_{ev}.adj|good-cp(and(and(part|put-pastp(pro:per|you,det:dem|those,$0),adj|back(adv|up($0))),prep|on(det:art|the($1,n|desk($1)),$0)),$0)
example_end

Sent: those are Daddy 's glasses .
Sem: lambda $0_{ev}.n:prop|daddy's'(pro:dem|those,n|glass-pl(pro:dem|those,$0))
example_end

Sent: no don 't swing it .
Sem: lambda $0_{ev}.and(not(mod|do(v|swing(you,pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: you may break it dear .
Sem: lambda $0_{ev}.mod|may(v|break(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: that 's right only the other way .
Sem: lambda $0_{ev}.adv|right($0)
example_end

Sent: do you see anything ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,lambda $1_{e}.pro:indef|anything($1),$0),$0))
example_end

Sent: do you see Urs ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: yes he 's touching you .
Sem: lambda $0_{ev}.and(aux|~be(part|touch-presp(pro:sub|he,pro:per|you,$0),$0),co|yes($0))
example_end

Sent: you want to put that on the floor ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:dem|that,$1),prep|on(det:art|the($2,n|floor($2)),$1)),$0))
example_end

Sent: I didn 't bring my books today .
Sem: lambda $0_{ev}.not(mod|do(and(v|bring(pro:sub|i,det:poss|my($1,n|book-pl($1)),$0),adv:tem|today($0)),$0),$0)
example_end

Sent: that 's a new word .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|word(pro:dem|that,$0),adj|new(pro:dem|that,$0)))
example_end

Sent: we can 't figure it out .
Sem: lambda $0_{ev}.not(mod|can(and(v|figure(pro:sub|we,pro:per|it,$0),adv|out($0)),$0),$0)
example_end

Sent: fight him .
Sem: lambda $0_{ev}.v|fight(you,pro:obj|him,$0)
example_end

Sent: I think that 's a stick Adam .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|stick(pro:dem|that,$1)),$0)
example_end

Sent: what does he have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(v|have(pro:sub|he,$1,$0),$0)
example_end

Sent: is it a sword ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|sword(pro:per|it,$0)))
example_end

Sent: or a cane ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|cane($1),$0))
example_end

Sent: fishing rod ?
Sem: lambda $0_{e}.Q(and_comp(part|fish-presp($0),n|rod($0)))
example_end

Sent: why don 't you talk ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|talk(pro:per|you,$0),$1($0)),$0),$0)
example_end

Sent: okay no more sugar Adam .
Sem: lambda $0_{ev}.and(not(lambda $1_{e}.and(qn|more($1),n|sugar($1)),$0),co|okay($0))
example_end

Sent: you don 't need milk .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
example_end

Sent: are you going to put it on the table ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$1),prep|on(det:art|the($2,n|table($2)),$1)),$0),$0))
example_end

Sent: do you want to take the napkins for me ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,det:art|the($2,n|napkin-pl($2)),$1),prep|for(pro:obj|me,$1)),$0),$0))
example_end

Sent: no more sugar for you Adam .
Sem: qn|no($0,att(and(qn|more($0),n|sugar($0)),prep|for(pro:per|you)))
example_end

Sent: I thought I heard something on the tape .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.and(v|hear-past(pro:sub|i,lambda $2_{e}.pro:indef|something($2),$1),prep|on(det:art|the($3,n|tape($3)),$1)),$0)
example_end

Sent: I don 't think I 've heard that before .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(part|hear-pastp(pro:sub|i,pro:rel|that,$1),adv|before($1)),$1),$0),$0),$0)
example_end

Sent: the man on the radio .
Sem: det:art|the($0,att(n|man($0),prep|on(det:art|the($1,n|radio($1)))))
example_end

Sent: you want some more espresso ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,qn|some($1,and(qn|more($1),n|espresso($1))),$0))
example_end

Sent: some espresso .
Sem: qn|some($0,n|espresso($0))
example_end

Sent: no sugar .
Sem: qn|no($0,n|sugar($0))
example_end

Sent: just take the spoon out if you want it .
Sem: lambda $0_{ev}.conj|if(v|want(pro:per|you,pro:per|it,$0),and(and(v|take(you,det:art|the($1,v|spoon($1)),$0),adv|just($0)),adv|out($0)))
example_end

Sent: no you 've already put sugar in your espresso .
Sem: lambda $0_{ev}.and(aux|~have(and(and(v|put-zero(pro:per|you,lambda $1_{e}.n|sugar($1),$0),adv|already($0)),prep|in(det:poss|your($2,n|espresso($2)),$0)),$0),co|no($0))
example_end

Sent: put them on the chair .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:obj|them,$0),prep|on(det:art|the($1,n|chair($1)),$0))
example_end

Sent: you simply don 't want to put them in the chair ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),prep|in(det:art|the($2,n|chair($2)),$1)),$0),adv|simple-dadj($0)),$0),$0))
example_end

Sent: the tape recorder .
Sem: det:art|the($0,and_comp(n|tape($0),n|record-dv($0)))
example_end

Sent: no Adam you can 't turn his head .
Sem: lambda $0_{ev}.and(not(mod|can(v|turn(pro:per|you,det:poss|his($1,n|head($1)),$0),$0),$0),co|no($0))
example_end

Sent: that 's a nice big brother .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(and(n|brother(pro:dem|that,$0),adj|nice(pro:dem|that,$0)),adj|big(pro:dem|that,$0)))
example_end

Sent: baby 's not talking to you ?
Sem: lambda $0_{ev}.Q(not(aux|~be(and(part|talk-presp(lambda $1_{e}.n|baby($1),$0),prep|to(pro:per|you,$0)),$0),$0))
example_end

Sent: bring it over Adam .
Sem: lambda $0_{ev}.and(v|bring(you,pro:per|it,$0),adv|over($0))
example_end

Sent: like this .
Sem: prep|like(pro:dem|this)
example_end

Sent: you try .
Sem: lambda $0_{ev}.v|try(pro:per|you,$0)
example_end

Sent: you 're waving ?
Sem: lambda $0_{ev}.Q(aux|~be(part|wave-presp(pro:per|you,$0),$0))
example_end

Sent: where is that wheel ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(pro:dem|that($1,n|wheel($1)),$0),$2($0))
example_end

Sent: come with you ?
Sem: lambda $0_{ev}.Q(and(v|come(you,$0),prep|with(pro:per|you,$0)))
example_end

Sent: I thought I 'd sit out here so if Paul cries it won 't make so much noise on the microphone .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.adv|so(not(mod|will(conj|if(v|cry-3s(n:prop|paul,$1),v|make(pro:per|it,adv|so(qn|much($2,att(n|noise($2),prep|on(det:art|the($3,n|microphone($3)))))),$1)),$1),$1),mod|~genmod(and(v|sit(pro:sub|i,$1),adv|out(adv|here($1))),$1)),$0)
example_end

Sent: oh Adam there 's something new .
Sem: lambda $0_{ev}.and(cop|~be(att(pro:indef|something,lambda $1_{e}.adj|new($1)),$0),co|oh($0))
example_end

Sent: is that now ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(pro:rel|that,$0),adv|now($0)))
example_end

Sent: is that a garage ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|garage(pro:rel|that,$0)))
example_end

Sent: can the car go down the ramp ?
Sem: lambda $0_{ev}.Q(n|can(and(v|go(det:art|the($1,n|car($1)),$0),adv|down(det:art|the($2,n|ramp($2)),$0)),$0))
example_end

Sent: can it go down ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|go(pro:per|it,$0),adv|down($0)),$0))
example_end

Sent: the sun !
Sem: det:art|the($0,n|sun($0))
example_end

Sent: the sun isn 't shining in that window .
Sem: lambda $0_{ev}.not(cop|be(and(part|shine-presp(det:art|the($1,n|sun($1)),$0),prep|in(pro:dem|that($2,n|window($2)),$0)),$0),$0)
example_end

Sent: it 's on the other side of the house .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,$0),adv|on(det:art|the($1,att(and(qn|other($1),n|side($1)),prep|of(det:art|the($2,n|house($2))))),$0))
example_end

Sent: you be what Adam ?
Sem: lambda $0_{ev}.Q(pro:int|what(pro:per|you,$0))
example_end

Sent: no thank_you Adam .
Sem: qn|no($0,n|thank_you($0))
example_end

Sent: no she doesn 't want any more .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|she,qn|any($1,pro:indef|more($1)),$0),$0),$0),co|no($0))
example_end

Sent: did you try it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|try(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you like yours better .
Sem: lambda $0_{ev}.v|like(pro:per|you,lambda $1_{ev}.adj|good-cp(pro:poss|yours,$1),$0)
example_end

Sent: what 's broken ?
Sem: lambda $1_{e}.lambda $0_{ev}.part|break-pastp($1,$0)
example_end

Sent: I 'm broken !
Sem: lambda $0_{ev}.part|break-pastp(pro:sub|i,$0)
example_end

Sent: I 'm not hurt .
Sem: lambda $0_{ev}.not(v|hurt-zero(pro:sub|i,$0),$0)
example_end

Sent: I 've finished mine .
Sem: lambda $0_{ev}.aux|~have(part|finish-pastp(pro:sub|i,pro:poss|mine,$0),$0)
example_end

Sent: it 's very good .
Sem: lambda $0_{ev}.adv|very(adj|good(pro:per|it,$0))
example_end

Sent: is yours good ?
Sem: lambda $0_{ev}.Q(adj|good(pro:poss|yours,$0))
example_end

Sent: I 'm all finished .
Sem: lambda $0_{ev}.adv|all(part|finish-pastp(pro:sub|i,$0))
example_end

Sent: let me see the toy .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,det:art|the($2,n|toy($2)),$1),$0)
example_end

Sent: can you make it go ?
Sem: lambda $0_{ev}.Q(mod|can(v|make(pro:per|you,lambda $1_{ev}.v|go(pro:per|it,$1),$0),$0))
example_end

Sent: I don 't know the name for it .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,det:art|the($1,att(n|name($1),prep|for(pro:per|it))),$0),$0),$0)
example_end

Sent: don 't put your fingers on it .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,det:poss|your($1,n|finger-pl($1)),$0),prep|on(pro:per|it,$0)),$0),$0)
example_end

Sent: you might hurt your fingers .
Sem: lambda $0_{ev}.mod|might(v|hurt-zero(pro:per|you,det:poss|your($1,n|finger-pl($1)),$0),$0)
example_end

Sent: no you do it with this .
Sem: lambda $0_{ev}.and(and(v|do(pro:per|you,pro:per|it,$0),prep|with(pro:dem|this,$0)),co|no($0))
example_end

Sent: oh your telephone .
Sem: lambda $0_{ev}.and(det:poss|your($1,n|telephone($1),$0),co|oh($0))
example_end

Sent: you going to talk on the telephone ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|talk(pro:per|you,$1),prep|on(det:art|the($2,n|telephone($2)),$1)),$0))
example_end

Sent: Paul Douglas ?
Sem: lambda $0_{e}.Q(n:prop|douglas_paul($0))
example_end

Sent: what about him ?
Sem: att(pro:int|what,prep|about(pro:obj|him))
example_end

Sent: he 's a baby ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,n|baby(pro:sub|he,$0)))
example_end

Sent: yes he is a little baby .
Sem: lambda $0_{ev}.and(det:art|a(pro:sub|he,and(n|baby(pro:sub|he,$0),adj|little(pro:sub|he,$0))),co|yes($0))
example_end

Sent: no Adam you just shoot .
Sem: lambda $0_{ev}.and(and(co|shoot(pro:per|you,$0),adv|just($0)),co|no($0))
example_end

Sent: you don 't hit anybody with it .
Sem: lambda $0_{ev}.not(mod|do(and(v|hit-zero(pro:per|you,lambda $1_{e}.pro:indef|anybody($1),$0),prep|with(pro:per|it,$0)),$0),$0)
example_end

Sent: Adam do you want to see something else ?
Sem: lambda $0_{ev}.Q(v|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,post|else(lambda $2_{e}.pro:indef|something($2)),$1),$0),$0))
example_end

Sent: you 're not big enough !
Sem: lambda $0_{ev}.not(adv|enough(adj|big(pro:per|you,$0)),$0)
example_end

Sent: there 's one wheel you 're right .
Sem: lambda $0_{ev}.and(and(aux|~be(lambda $1_{e}.det:num|one(n|wheel($1)),$0),pro:exist|there($0)),n|right(pro:per|you,$0))
example_end

Sent: you can 't wear it tomorrow ?
Sem: lambda $0_{ev}.Q(not(mod|can(and(v|wear(pro:per|you,pro:per|it,$0),adv:tem|tomorrow($0)),$0),$0))
example_end

Sent: simply wear it ?
Sem: lambda $0_{ev}.Q(and(v|wear(you,pro:per|it,$0),adv|simple-dadj($0)))
example_end

Sent: you don 't drink cold coffee until summer time .
Sem: lambda $0_{ev}.not(mod|do(and(v|drink(pro:per|you,lambda $1_{e}.and(adj|cold($1),n|coffee($1)),$0),prep|until(lambda $2_{e}.and_comp(n|summer($2),n|time($2)),$0)),$0),$0)
example_end

Sent: throw it away now ?
Sem: lambda $0_{ev}.Q(and(and(v|throw(you,pro:per|it,$0),adv|away($0)),adv|now($0)))
example_end

Sent: put the coffee cups back .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,and_comp(n|coffee($1),v|cup-3s($1))),$0),adv|back($0))
example_end

Sent: I 'll hold them here .
Sem: lambda $0_{ev}.mod|~will(and(v|hold(pro:sub|i,pro:obj|them,$0),adv|here($0)),$0)
example_end

Sent: wait don 't you unscrew it first ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|screw(pro:per|you,pro:per|it,$0),adv|first($0)),$0),$0),co|wait(you,$0)))
example_end

Sent: the green one .
Sem: det:art|the($0,and_comp(n|green($0),pro:indef|one($0)))
example_end

Sent: no no !
Sem: lambda $0_{ev}.and(co|no($0),co|no($0))
example_end

Sent: that 's pink .
Sem: lambda $0_{ev}.adj|pink(pro:dem|that,$0)
example_end

Sent: oh what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|oh($0))
example_end

Sent: I wouldn 't put it on with blocks in it .
Sem: lambda $0_{ev}.not(mod|will(and(and(v|put-zero(pro:sub|i,pro:per|it,$0),adv|on($0)),prep|with(lambda $1_{e}.att(n|block-pl($1),prep|in(pro:per|it)),$0)),$0),$0)
example_end

Sent: don 't want what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|want(you,$1,$0),$0),$0)
example_end

Sent: you simply don 't want what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|want(pro:per|you,$1,$0),adv|simple-dadj($0)),$0),$0)
example_end

Sent: want beans in there ?
Sem: lambda $0_{ev}.Q(and(v|want(you,lambda $1_{e}.n|bean-pl($1),$0),prep|in(adv|there($0))))
example_end

Sent: how d you know there are beans in there ?
Sem: lambda $3_{e}.lambda $0_{ev}.v|do(and(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-pres(lambda $2_{e}.n|bean-pl($2),$1),prep|in(adv|there($1))),$0),$3($0)),$0)
example_end

Sent: no they don 't come out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|come(pro:sub|they,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: you can 't wear it ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|wear(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: you heard something ?
Sem: lambda $0_{ev}.Q(v|hear-past(pro:per|you,lambda $1_{e}.pro:indef|something($1),$0))
example_end

Sent: what do you see out the window ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),prep|out(det:art|the($2,n|window($2)),$0)),$0)
example_end

Sent: I had plenty .
Sem: lambda $0_{ev}.and(v|have-past(pro:sub|i,$0),n|plenty($0))
example_end

Sent: I 've had enough .
Sem: lambda $0_{ev}.aux|~have(and(part|have-pastp(pro:sub|i,$0),adv|enough($0)),$0)
example_end

Sent: a little one .
Sem: det:art|a($0,att(pro:indef|one,lambda $1_{e}.adj|little($1),$0))
example_end

Sent: it 's all_gone .
Sem: lambda $0_{ev}.adj|all_gone(pro:per|it,$0)
example_end

Sent: what about the tow truck ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|tow($0),n|truck($0)))))
example_end

Sent: maybe somebody had to stop suddenly .
Sem: lambda $0_{ev}.and(v|have-past(pro:indef|somebody,lambda $1_{ev}.and(n|stop(pro:indef|somebody,$1),adv|sudden-dadj($1)),$0),adv|maybe($0))
example_end

Sent: no you had juice in your espresso .
Sem: lambda $0_{ev}.and(and(v|have-past(pro:per|you,lambda $1_{e}.n|juice($1),$0),prep|in(det:poss|your($2,n|espresso($2)),$0)),co|no($0))
example_end

Sent: you 're making trains ?
Sem: lambda $0_{ev}.Q(aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.n|train-pl($1),$0),$0))
example_end

Sent: I 'm not going any place .
Sem: lambda $0_{ev}.not(cop|~be(part|go-presp(pro:sub|i,qn|any($1,n|place($1)),$0),$0),$0)
example_end

Sent: oh you 're going to do that puzzle ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,pro:dem|that($2,n|puzzle($2)),$1),$0),$0),co|oh($0)))
example_end

Sent: nobody wants to touch it .
Sem: lambda $0_{ev}.v|want-3s(lambda $1_{e}.pro:indef|nobody($1),lambda $2_{ev}.v|touch(lambda $3_{e}.pro:indef|nobody($3),pro:per|it,$2),$0)
example_end

Sent: did you say excuse me please ?
Sem: lambda $0_{ev}.Q(and(v|do-past(v|say(pro:per|you,lambda $1_{ev}.v|excuse(_,pro:obj|me,$1),$0),$0),co|please($0)))
example_end

Sent: you 're not funny ?
Sem: lambda $0_{ev}.Q(not(adj|fun-dn(pro:per|you,$0),$0))
example_end

Sent: those are carrots .
Sem: lambda $0_{ev}.n|carrot-pl(pro:dem|those,$0)
example_end

Sent: it goes there .
Sem: lambda $0_{ev}.and(v|go-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: that 's cats ?
Sem: lambda $0_{ev}.Q(n|cat-pl(pro:dem|that,$0))
example_end

Sent: Adam look up on the ceiling .
Sem: lambda $0_{ev}.and(and(co|look(you,$0),adv|up($0)),prep|on(det:art|the($1,n|ceiling($1)),$0))
example_end

Sent: I see something up on the ceiling .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,lambda $1_{e}.pro:indef|something($1),$0),adv|up(prep|on(det:art|the($2,n|ceiling($2)),$0)))
example_end

Sent: you like tree ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,lambda $1_{e}.n|tree($1),$0))
example_end

Sent: I don 't have paper ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(pro:sub|i,lambda $1_{e}.n|paper($1),$0),$0),$0))
example_end

Sent: I dropped it .
Sem: lambda $0_{ev}.v|drop-past(pro:sub|i,pro:per|it,$0)
example_end

Sent: where is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:dem|that,$0),$1($0))
example_end

Sent: it sounded like busy .
Sem: lambda $0_{ev}.and(v|sound-past(pro:per|it,$0),co|like(lambda $1_{e}.adj|busy($1),$0))
example_end

Sent: why are you doing that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: it 'll be ready soon .
Sem: lambda $0_{ev}.mod|~will(adj|soon(adj|ready(pro:per|it,$0)),$0)
example_end

Sent: I 'm folding diapers .
Sem: lambda $0_{ev}.aux|~be(part|fold-presp(pro:sub|i,lambda $1_{e}.n|diaper-pl($1),$0),$0)
example_end

Sent: a diaper .
Sem: det:art|a($0,n|diaper($0))
example_end

Sent: I hear you .
Sem: lambda $0_{ev}.v|hear(pro:sub|i,pro:per|you,$0)
example_end

Sent: I 'm looking for a pencil .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:sub|i,$0),prep|for(det:art|a($1,n|pencil($1)),$0)),$0)
example_end

Sent: what you doing Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.part|do-presp(pro:per|you,$1,$0)
example_end

Sent: you simply want that ?
Sem: lambda $0_{ev}.Q(and(v|want(pro:per|you,pro:dem|that,$0),adv|simple-dadj($0)))
example_end

Sent: here are some more .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some($1,pro:indef|more($1)),$0),adv|here($0))
example_end

Sent: who 's over in the meadow ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),adv|over(prep|in(det:art|the($2,n|meadow($2)),$0)))
example_end

Sent: what happened to her ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|her,$0))
example_end

Sent: what do you think ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|think(pro:per|you,$1,$0),$0)
example_end

Sent: what d you get from the cow ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|get(pro:per|you,$1,$0),prep|from(det:art|the($2,n|cow($2)),$0)),$0)
example_end

Sent: oh I thought it was milk .
Sem: lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.n|milk(pro:per|it,$1),$0),co|oh($0))
example_end

Sent: what d you think ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|think(pro:per|you,$1,$0),$0)
example_end

Sent: a pony .
Sem: det:art|a($0,n|pony($0))
example_end

Sent: what are these ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|these,$0)
example_end

Sent: do you have some chalk ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,qn|some($1,n|chalk($1)),$0),$0))
example_end

Sent: would you like some cookies ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|cookie-pl($1)),$0),$0))
example_end

Sent: what was that word honey ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,n|word($2)),$0)
example_end

Sent: was that like her ?
Sem: lambda $0_{ev}.Q(cop|be-past(v|like(pro:dem|that,pro:obj|her,$0),$0))
example_end

Sent: just move Bobo out_of your way .
Sem: lambda $0_{ev}.and(and(n|move(you,n:prop|bobo,$0),adj|just($0)),prep|out_of(det:poss|your($1,n|way($1)),$0))
example_end

Sent: is that money ?
Sem: lambda $0_{ev}.Q(n|money(pro:dem|that,$0))
example_end

Sent: what are you going to buy with that ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|buy(pro:per|you,$2,$1),prep|with(pro:dem|that,$1)),$0),$0)
example_end

Sent: fish swim in the water with you ?
Sem: lambda $0_{ev}.Q(and(and(n|swim(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|water($2)),$0)),prep|with(pro:per|you,$0)))
example_end

Sent: where are some fish ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-pres(qn|some($1,n|fish($1)),$0),$2($0))
example_end

Sent: red fish ?
Sem: lambda $0_{e}.Q(and(adj|red($0),n|fish($0)))
example_end

Sent: what other kind of fish ?
Sem: lambda $0_{e}.$0($1,att(and(qn|other($1),n|kind($1)),prep|of(lambda $2_{e}.n|fish($2))))
example_end

Sent: you 're swimming ?
Sem: lambda $0_{ev}.Q(aux|~be(part|swim-presp(pro:per|you,$0),$0))
example_end

Sent: you 're not swimming now ?
Sem: lambda $0_{ev}.Q(not(aux|~be(and(part|swim-presp(pro:per|you,$0),adv|now($0)),$0),$0))
example_end

Sent: that 's enough .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,$0),adv|enough($0))
example_end

Sent: no I 'll get you a spoon .
Sem: lambda $0_{ev}.and(mod|~will(aux|get(pro:sub|i,det:art|a($1,n|spoon($1)),pro:per|you,$0),$0),co|no($0))
example_end

Sent: just leave that there .
Sem: lambda $0_{ev}.and(and(n|leave(you,pro:rel|that,$0),adj|just($0)),adv|there($0))
example_end

Sent: don 't hurry ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|hurry(you,$0),$0),$0))
example_end

Sent: isn 't it Chippewa ?
Sem: lambda $0_{ev}.Q(not(n:prop|chippewa(pro:per|it,$0),$0))
example_end

Sent: what d you have in the fish house ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:art|the($2,and_comp(n|fish($2),n|house($2))),$0)),$0)
example_end

Sent: little fish house .
Sem: lambda $0_{e}.and_comp(n|fish($0),and(adj|little($0),n|house($0)))
example_end

Sent: no Adam you take one .
Sem: lambda $0_{ev}.and(v|take(pro:per|you,lambda $1_{e}.pro:indef|one($1),$0),co|no($0))
example_end

Sent: take two .
Sem: lambda $0_{ev}.v|take(you,lambda $1_{e}.det:num|two($1),$0)
example_end

Sent: oh poor little fellow .
Sem: lambda $0_{ev}.and(and(adj|little($0),and(adj|poor($0),n|fellow($0))),co|oh($0))
example_end

Sent: what do you want some more of ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,$1,$0),$0)
example_end

Sent: d you want some more cookies ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,qn|some($1,and(qn|more($1),n|cookie-pl($1))),$0),$0))
example_end

Sent: you 're too big ?
Sem: lambda $0_{ev}.Q(adv|too(adj|big(pro:per|you,$0)))
example_end

Sent: did he bite you ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|bite(pro:sub|he,pro:per|you,$0),$0))
example_end

Sent: look on the back of Bozo .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|on(det:art|the($1,att(n|back($1),prep|of(n:prop|bozo))),$0))
example_end

Sent: oh he 's looking happy .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:sub|he,lambda $1_{ev}.adj|happy(pro:sub|he,$1),$0),$0),co|oh($0))
example_end

Sent: because you 'll break it .
Sem: lambda $0_{ev}.mod|~will(v|break(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: where 's your cup ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|cup($1)),$0),$2($0))
example_end

Sent: I think he said here we go .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,lambda $2_{ev}.and(v|go(pro:sub|we,$2),adv|here($2)),$1),$0)
example_end

Sent: he 's sleeping .
Sem: lambda $0_{ev}.aux|~be(part|sleep-presp(pro:sub|he,$0),$0)
example_end

Sent: I been chug .
Sem: lambda $0_{ev}.aux|be-pastp(v|chug(pro:sub|i,$0),$0)
example_end

Sent: I 've been chugging I guess .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.aux|be-pastp(aux|~have(part|chug-presp(pro:sub|i,$1),$1),$1),$0)
example_end

Sent: you 're turned over ?
Sem: lambda $0_{ev}.Q(aux|~be(and(v|turn-past(pro:per|you,$0),adv|over($0)),$0))
example_end

Sent: is that a ring ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|ring(pro:rel|that,$0)))
example_end

Sent: would you ask him ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|ask(pro:per|you,pro:obj|him,$0),$0))
example_end

Sent: like some ones ?
Sem: Q(prep|like(pro:indef|one-pl_some))
example_end

Sent: he doesn 't want a cookie after you 've had your dirty fingers all over it .
Sem: lambda $0_{ev}.not(prep|after(aux|~have(and(part|have-pastp(pro:per|you,det:poss|your($1,and(v|dirty($1),n|finger-pl($1))),$0),adv|all(prep|over(pro:per|it,$0))),$0),mod|do(v|want(pro:sub|he,det:art|a($2,n|cookie($2)),$0),$0)),$0)
example_end

Sent: take it out_of your mouth and just pretend .
Sem: lambda $0_{ev}.coord|and(and(adj|pretend(you,$0),adv|just($0)),and(v|take(you,pro:per|it,$0),prep|out_of(det:poss|your($1,n|mouth($1)),$0)))
example_end

Sent: when you pretend you don 't put it in .
Sem: lambda $0_{ev}.not(mod|do(conj|when(v|pretend(pro:per|you,$0),and(v|put-zero(pro:per|you,pro:per|it,$0),adv|in($0))),$0),$0)
example_end

Sent: what about the little toys in the wagon ?
Sem: att(pro:int|what,adv|about(det:art|the($0,att(and(adj|little($0),n|toy-pl($0)),prep|in(det:art|the($1,n|wagon($1)))))))
example_end

Sent: see you have a bag over there .
Sem: lambda $0_{ev}.and(and(v|have(pro:per|you,det:art|a($1,v|bag($1)),$0),adv|over(adv|there($0))),v|see(you,$0))
example_end

Sent: what 's in your bag ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|your($2,n|bag($2)),$0))
example_end

Sent: three cats ?
Sem: lambda $0_{e}.Q(det:num|three(n|cat-pl($0)))
example_end

Sent: well don 't do it on that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|do(you,pro:per|it,$0),prep|on(pro:dem|that,$0)),$0),$0),co|well($0))
example_end

Sent: you write on paper Adam .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|paper($1),$0))
example_end

Sent: before me ?
Sem: Q(prep|before(pro:obj|me))
example_end

Sent: you woke up at fourteen o'clock .
Sem: lambda $0_{ev}.and(and(v|wake-past(pro:per|you,$0),adv|up($0)),prep|at(lambda $1_{e}.det:num|fourteen(n|o'clock($1)),$0))
example_end

Sent: my clock only goes to twelve .
Sem: lambda $0_{ev}.and(and(v|go-3s(det:poss|my($1,n|clock($1)),$0),adv|only($0)),prep|to(lambda $2_{e}.det:num|twelve($2),$0))
example_end

Sent: oh it goes to fourteen .
Sem: lambda $0_{ev}.and(and(v|go-3s(pro:per|it,$0),prep|to(lambda $1_{e}.det:num|fourteen($1),$0)),co|oh($0))
example_end

Sent: I didn 't bring mine today .
Sem: lambda $0_{ev}.not(mod|do(and(v|bring(pro:sub|i,n|mine,$0),adv:tem|today($0)),$0),$0)
example_end

Sent: I didn 't need it today .
Sem: lambda $0_{ev}.not(mod|do(and(v|need(pro:sub|i,pro:per|it,$0),adv:tem|today($0)),$0),$0)
example_end

Sent: Cromer has a watch .
Sem: lambda $0_{ev}.v|have-3s(n:prop|cromer,det:art|a($1,n|watch($1)),$0)
example_end

Sent: do you know what a watch is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no I don 't have one .
Sem: lambda $0_{ev}.and(not(mod|do(v|have(pro:sub|i,pro:indef|one,$0),$0),$0),co|no($0))
example_end

Sent: I don 't own one .
Sem: lambda $0_{ev}.not(mod|do(v|own(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: do you know what that 's called ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.aux|~be(part|call-pastp(pro:rel|that,pro:int|what,$1),$1),$0),$0))
example_end

Sent: can you see Cromer 's watch ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,n:prop|cromer's($1,n|watch($1)),$0),$0))
example_end

Sent: how do I know what ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:sub|i,$1,$0),$2($0)),$0)
example_end

Sent: I don 't think he knows that .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|know-3s(pro:sub|he,pro:dem|that,$1),$0),$0),$0)
example_end

Sent: how do you know that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: oh well I look at the watch .
Sem: lambda $0_{ev}.and(and(and(cop|look(pro:sub|i,$0),prep|at(det:art|the($1,n|watch($1)),$0)),co|oh($0)),n|well($0))
example_end

Sent: Adam how do you know ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you 're not spaghetti ?
Sem: lambda $0_{ev}.Q(not(n|spaghetti(pro:per|you,$0),$0))
example_end

Sent: what are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: spaghetti on your leg ?
Sem: lambda $0_{e}.Q(att(n|spaghetti($0),prep|on(det:poss|your($1,n|leg($1)))))
example_end

Sent: what was the rest of that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,att(n|rest($2),prep|of(det:dem|that))),$0)
example_end

Sent: don 't let it fall .
Sem: lambda $0_{ev}.not(mod|do(v|let-zero(you,lambda $1_{ev}.v|fall(pro:per|it,$1),$0),$0),$0)
example_end

Sent: because you 'll spill it .
Sem: lambda $0_{ev}.mod|~will(v|spill(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: here me comes ?
Sem: lambda $0_{ev}.Q(and(v|come-3s(pro:obj|me,$0),adv|here($0)))
example_end

Sent: what happened to I ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:sub|i,$0))
example_end

Sent: I think you 've had enough .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(part|have-pastp(pro:per|you,$1),adv|enough($1)),$1),$0)
example_end

Sent: no I 've had enough and I think you 've had enough too .
Sem: lambda $0_{ev}.and(coord|and(v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(and(part|have-pastp(pro:per|you,$1),adv|enough($1)),post|too($1)),$1),$0),aux|~have(and(part|have-pastp(pro:sub|i,$0),adv|enough($0)),$0)),co|no($0))
example_end

Sent: you may have some water .
Sem: lambda $0_{ev}.mod|may(v|have(pro:per|you,qn|some($1,n|water($1)),$0),$0)
example_end

Sent: you don 't want some water ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,qn|some($1,n|water($1)),$0),$0),$0))
example_end

Sent: you don 't want to like water ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,lambda $1_{ev}.co|like(pro:per|you,lambda $2_{e}.n|water($2),$1),$0),$0),$0))
example_end

Sent: oh you want another water ?
Sem: lambda $0_{ev}.Q(and(v|want(pro:per|you,qn|another($1,n|water($1)),$0),co|oh($0)))
example_end

Sent: it 's good for you .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|good($0,$1)
example_end

Sent: what about grandson ?
Sem: att(pro:int|what,adv|about(lambda $0_{e}.n|son($0)))
example_end

Sent: whose grandson are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,n|son(pro:per|you,$0))
example_end

Sent: you 're not grandson you 're Adam .
Sem: lambda $0_{ev}.not(and(n|son(pro:per|you,$0),n:prop|adam(pro:per|you,$0)),$0)
example_end

Sent: well you must be somebody 's grandson .
Sem: lambda $0_{ev}.and(mod|must(pro:indef|somebody's'(pro:per|you,n|son(pro:per|you,$0)),$0),co|well($0))
example_end

Sent: Adam don 't throw those .
Sem: lambda $0_{ev}.not(mod|do(v|throw(n:prop|adam,pro:dem|those,$0),$0),$0)
example_end

Sent: you don 't want to remember ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|remember(pro:per|you,$1),$0),$0),$0))
example_end

Sent: squeeze here .
Sem: lambda $0_{ev}.and(n|squeeze(you,$0),adv|here($0))
example_end

Sent: push hard .
Sem: lambda $0_{ev}.and(n|push(you,$0),adv|hard($0))
example_end

Sent: you stepped on your cowboy hat .
Sem: lambda $0_{ev}.and(part|step-pastp(pro:per|you,$0),prep|on(det:poss|your($1,and_comp(n|cow+boy($1),n|hat($1))),$0))
example_end

Sent: it is .
Sem: lambda $0_{ev}.cop|be-3s(pro:per|it,$0)
example_end

Sent: you hit who ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|hit-zero(pro:per|you,$1,$0)
example_end

Sent: it was over here somewhere .
Sem: lambda $0_{ev}.and(and(cop|be-past(pro:per|it,$0),adv|over(adv|here($0))),adv|somewhere($0))
example_end

Sent: yes thank_you .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|yes($0))
example_end

Sent: did you look under the couch ?
Sem: lambda $0_{ev}.Q(v|do-past(and(cop|look(pro:per|you,$0),prep|under(det:art|the($1,n|couch($1)),$0)),$0))
example_end

Sent: did you pinch your finger Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|pinch(pro:per|you,det:poss|your($1,n|finger($1)),$0),$0))
example_end

Sent: what do you do with the button ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|button($2)),$0)),$0)
example_end

Sent: write number ?
Sem: lambda $0_{ev}.Q(v|write(you,lambda $1_{e}.v|number($1),$0))
example_end

Sent: what number shall I write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|write(pro:sub|i,$1($2,n|number($2)),$0),$0)
example_end

Sent: cowboy rope .
Sem: lambda $0_{e}.and_comp(n|cow+boy($0),n|rope($0))
example_end

Sent: is it a big cowboy ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,and(n|cow+boy(pro:per|it,$0),adj|big(pro:per|it,$0))))
example_end

Sent: I have_to use that .
Sem: lambda $0_{ev}.mod:aux|have_to(v|use(pro:sub|i,pro:dem|that,$0),$0)
example_end

Sent: do you want to write a number Adam with this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|write(pro:per|you,det:art|a($2,n|number($2)),$1),prep|with(pro:dem|this,$1)),$0),$0))
example_end

Sent: not with pencil but with chalk .
Sem: not(prep|with(conj|but(lambda $0_{e}.n|pencil($0),lambda $1_{e}.n|chalk($1))))
example_end

Sent: write cowboy ?
Sem: lambda $0_{ev}.Q(v|write(you,lambda $1_{e}.n|cow+boy($1),$0))
example_end

Sent: don 't say kangaroo write ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|say(you,lambda $1_{ev}.v|write(lambda $2_{e}.n|kangaroo($2),$1),$0),$0),$0))
example_end

Sent: what does Captain_Kangaroo write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|write(n:prop|captain_kangaroo,$1,$0),$0)
example_end

Sent: oh he writes with a pencil ?
Sem: lambda $0_{ev}.Q(and(and(v|write-3s(pro:sub|he,$0),prep|with(det:art|a($1,n|pencil($1)),$0)),co|oh($0)))
example_end

Sent: that 's green ?
Sem: lambda $0_{ev}.Q(adj|green(pro:dem|that,$0))
example_end

Sent: why don 't you sit down there on the floor and write okay ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(not(mod|do(and(and(and(coord|and(v|sit(pro:per|you,$0),v|write(pro:per|you,$0)),$1($0)),adv|down(adv|there($0))),prep|on(det:art|the($2,n|floor($2)),$0)),$0),$0),adj|okay($0))
example_end

Sent: I won 't step on your candy .
Sem: lambda $0_{ev}.not(mod|will(and(v|step(pro:sub|i,$0),prep|on(det:poss|your($1,n|candy($1)),$0)),$0),$0)
example_end

Sent: wait Adam .
Sem: lambda $0_{ev}.v|wait(you,$0)
example_end

Sent: why don 't you bring your cup up ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|bring(pro:per|you,det:poss|your($1,n|cup($1)),$0),$2($0)),adv|up($0)),$0),$0)
example_end

Sent: okay that 's enough .
Sem: lambda $0_{ev}.and(adv|enough(pro:dem|that,$0),co|okay($0))
example_end

Sent: now you 've spilled a whole cup of sugar almost .
Sem: lambda $0_{ev}.aux|~have(and(and(part|spill-pastp(pro:per|you,det:art|a($1,att(and(adj|whole($1),n|cup($1)),prep|of(lambda $2_{e}.n|sugar($2)))),$0),adv|now($0)),adv|almost($0)),$0)
example_end

Sent: would you like one cookie Adam ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{e}.det:num|one(n|cookie($1)),$0),$0))
example_end

Sent: I don 't know what that word is .
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: do you see the post man ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|the($1,and_comp(n|post($1),n|man($1))),$0),$0))
example_end

Sent: horn coming up ?
Sem: lambda $0_{ev}.Q(and(part|come-presp(lambda $1_{e}.n|horn($1),$0),adv|up($0)))
example_end

Sent: what are you drinking Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|drink-presp(pro:per|you,$1,$0),$0)
example_end

Sent: I 'm drinking espresso .
Sem: lambda $0_{ev}.aux|~be(part|drink-presp(pro:sub|i,lambda $1_{e}.n|espresso($1),$0),$0)
example_end

Sent: now what 's the doggie doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(det:art|the($1,n|dog-dim($1)),$2,$0),adv|now($0)),$0)
example_end

Sent: he 's eating what all up ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|eat-presp(pro:sub|he,$1,$0),adv|all(adv|up($0))),$0)
example_end

Sent: you 're having spaghetti ?
Sem: lambda $0_{ev}.Q(aux|~be(part|have-presp(pro:per|you,lambda $1_{e}.n|spaghetti($1),$0),$0))
example_end

Sent: a telescope .
Sem: det:art|a($0,n|telescope($0))
example_end

Sent: can you look in it ?
Sem: lambda $0_{ev}.Q(mod|can(and(cop|look(pro:per|you,$0),prep|in(pro:per|it,$0)),$0))
example_end

Sent: see you ?
Sem: lambda $0_{ev}.Q(v|see(you,pro:per|you,$0))
example_end

Sent: you can look out_of the window .
Sem: lambda $0_{ev}.mod|can(and(cop|look(pro:per|you,$0),prep|out_of(det:art|the($1,n|window($1)),$0)),$0)
example_end

Sent: you see David ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,n:prop|david,$0))
example_end

Sent: where is David ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|david,$0),$1($0))
example_end

Sent: look all around .
Sem: lambda $0_{ev}.and(cop|look(you,$0),adv|all(adv|around($0)))
example_end

Sent: open it again .
Sem: lambda $0_{ev}.and(v|open(you,pro:per|it,$0),adv|again($0))
example_end

Sent: no close it and turn it over .
Sem: lambda $0_{ev}.and(coord|and(and(v|turn(you,pro:per|it,$0),adv|over($0)),v|close(you,pro:per|it,$0)),co|no($0))
example_end

Sent: with a beard !
Sem: prep|with(det:art|a($0,n|beard($0)))
example_end

Sent: and say the magic words .
Sem: lambda $0_{ev}.v|say(you,det:art|the($1,and(n|magic($1),n|word-pl($1))),$0)
example_end

Sent: what are the magic words .
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,and(n|word-pl($0,$1),n|magic($0,$1)))
example_end

Sent: you didn 't say the right magic words .
Sem: lambda $0_{ev}.not(mod|do(v|say(pro:per|you,det:art|the($1,and(n|magic($1),and(adj|right($1),n|word-pl($1)))),$0),$0),$0)
example_end

Sent: close it and try again .
Sem: lambda $0_{ev}.coord|and(and(v|try(you,$0),adv|again($0)),v|close(you,pro:per|it,$0))
example_end

Sent: now rub it .
Sem: lambda $0_{ev}.and(v|rub(you,pro:per|it,$0),adv|now($0))
example_end

Sent: I see your back .
Sem: lambda $0_{ev}.v|see(pro:sub|i,det:poss|your($1,n|back($1)),$0)
example_end

Sent: Adam where are you going with the cookies ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|go-presp(pro:per|you,$0),$1($0)),prep|with(det:art|the($2,n|cookie-pl($2)),$0)),$0)
example_end

Sent: oh I see it .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:per|it,$0),co|oh($0))
example_end

Sent: it 's under the chair .
Sem: lambda $0_{ev}.and(aux|~be(pro:per|it,$0),prep|under(det:art|the($1,n|chair($1)),$0))
example_end

Sent: under the chair with your telephone .
Sem: prep|under(det:art|the($0,att(n|chair($0),prep|with(det:poss|your($1,n|telephone($1))))))
example_end

Sent: careful Adam did you hit Urs ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|hit-zero(pro:per|you,n:prop|ursula,$0),$0),co|careful($0)))
example_end

Sent: no you didn 't hit me .
Sem: lambda $0_{ev}.and(not(mod|do(v|hit-zero(pro:per|you,pro:obj|me,$0),$0),$0),co|no($0))
example_end

Sent: that 's alright Adam .
Sem: lambda $0_{ev}.adj|alright(pro:dem|that,$0)
example_end

Sent: she 's funny ?
Sem: lambda $0_{ev}.Q(adj|fun-dn(pro:sub|she,$0))
example_end

Sent: your bunkhouse .
Sem: det:poss|your($0,n|bunkhouse($0))
example_end

Sent: where 's what ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),$2($0))
example_end

Sent: your washing machine .
Sem: det:poss|your($0,and_comp(part|wash-presp($0),n|machine($0)))
example_end

Sent: I think it 's behind the door .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(cop|~be(pro:per|it,$1),prep|behind(det:art|the($2,n|door($2)),$1)),$0)
example_end

Sent: behind the door ?
Sem: Q(prep|behind(det:art|the($0,n|door($0))))
example_end

Sent: in the box of toys behind you ?
Sem: Q(prep|in(det:art|the($0,att(att(n|box($0),prep|of(lambda $1_{e}.n|toy-pl($1))),prep|behind(pro:per|you)))))
example_end

Sent: is it in there ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),prep|in(adv|there($0))))
example_end

Sent: I thought you said it was in there .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.v|say-past(pro:per|you,lambda $2_{ev}.and(cop|be-past(pro:per|it,$2),prep|in(adv|there($2))),$1),$0)
example_end

Sent: you 're looking for it .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:per|you,$0),prep|for(pro:per|it,$0)),$0)
example_end

Sent: that wasn 't a dime .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|dime(pro:dem|that,$0)),$0)
example_end

Sent: that was a penny .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|penny(pro:dem|that,$0))
example_end

Sent: didn 't you see the penny ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|see(pro:per|you,det:art|the($1,n|penny($1)),$0),$0),$0))
example_end

Sent: turn it over and say the magic words .
Sem: lambda $0_{ev}.coord|and(v|say(you,det:art|the($1,and(n|magic($1),n|word-pl($1))),$0),and(v|turn(you,pro:per|it,$0),adv|over($0)))
example_end

Sent: did you turn it over ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|turn(pro:per|you,pro:per|it,$0),adv|over($0)),$0))
example_end

Sent: you have_to ask Urs .
Sem: lambda $0_{ev}.mod:aux|have_to(v|ask(pro:per|you,n:prop|ursula,$0),$0)
example_end

Sent: hold it like this .
Sem: lambda $0_{ev}.and(v|hold(you,pro:per|it,$0),v|like(pro:dem|this,$0))
example_end

Sent: open it up .
Sem: lambda $0_{ev}.and(v|open(you,pro:per|it,$0),adv|up($0))
example_end

Sent: you have some more .
Sem: lambda $0_{ev}.v|have(pro:per|you,qn|some($1,pro:indef|more($1)),$0)
example_end

Sent: what did you get Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|get(pro:per|you,$1,$0),$0)
example_end

Sent: the other door .
Sem: det:art|the($0,and(qn|other($0),n|door($0)))
example_end

Sent: magic words .
Sem: lambda $0_{e}.and(adj|magic($0),n|word-pl($0))
example_end

Sent: where 's the magic box ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,and(adj|magic($1),n|box($1))),$0),$2($0))
example_end

Sent: what does the big bad giant say ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|the($1,and(adj|bad($1),and(adj|big($1),n|giant($1)))),$2,$0),$0)
example_end

Sent: magic hand .
Sem: lambda $0_{e}.and(adj|magic($0),n|hand($0))
example_end

Sent: do you remember that story ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,pro:rel|that($1,n|story($1)),$0),$0))
example_end

Sent: mixit dirt !
Sem: lambda $0_{e}.and_comp(chi|mixit($0),n|dirt($0))
example_end

Sent: one piece of dirt ?
Sem: lambda $0_{e}.Q(att(det:num|one(n|piece($0)),prep|of(lambda $1_{e}.n|dirt($1))))
example_end

Sent: what does he mean ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(v|mean(pro:sub|he,$1,$0),$0)
example_end

Sent: I don 't think she 's still in here .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(aux|~be(pro:sub|she,$1),prep|in(adv|still(adv|here($1)))),$0),$0),$0)
example_end

Sent: a pen .
Sem: det:art|a($0,n|pen($0))
example_end

Sent: now you can draw another picture .
Sem: lambda $0_{ev}.mod|can(and(v|draw(pro:per|you,qn|another($1,n|picture($1)),$0),adv|now($0)),$0)
example_end

Sent: Chocks are vitamins .
Sem: lambda $0_{ev}.n|vitamin-pl(n:prop|chocks,$0)
example_end

Sent: she didn 't say Chocks .
Sem: lambda $0_{ev}.not(mod|do(v|say(pro:sub|she,n:prop|chocks,$0),$0),$0)
example_end

Sent: she said chalk .
Sem: lambda $0_{ev}.v|say-past(pro:sub|she,lambda $1_{e}.n|chalk($1),$0)
example_end

Sent: wipe it ?
Sem: lambda $0_{ev}.Q(v|wipe(you,pro:per|it,$0))
example_end

Sent: did you show Urs the puppet ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:art|the($1,n|puppet($1)),n:prop|ursula,$0),$0))
example_end

Sent: she wouldn 't frighten you .
Sem: lambda $0_{ev}.not(mod|will(v|frighten(pro:sub|she,pro:per|you,$0),$0),$0)
example_end

Sent: oh you have money ?
Sem: lambda $0_{ev}.Q(and(v|have(pro:per|you,lambda $1_{e}.n|money($1),$0),co|oh($0)))
example_end

Sent: you have it ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,pro:per|it,$0))
example_end

Sent: what else do you want to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|want(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,$2,$1),$0),$0)
example_end

Sent: you just shake it down .
Sem: lambda $0_{ev}.and(and(v|shake(pro:per|you,pro:per|it,$0),adv|just($0)),adv|down($0))
example_end

Sent: what is that called Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(v|call-past(pro:rel|that,$1,$0),$0)
example_end

Sent: d you know ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,$0),$0))
example_end

Sent: you open it .
Sem: lambda $0_{ev}.v|open(pro:per|you,pro:per|it,$0)
example_end

Sent: number eight ?
Sem: lambda $0_{e}.Q(det:num|eight(n|number($0)))
example_end

Sent: funny baseball I think he said .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,lambda $2_{e}.and(adj|fun-dn($2),n|baseball($2)),$1),$0)
example_end

Sent: that 's the other part of Urs  game isn 't it ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,att(and(n|part(pro:dem|that,$0),qn|other(pro:dem|that,$0)),prep|of(n:prop|ursula's($1,n|game($1))))),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: you have_to wash it !
Sem: lambda $0_{ev}.mod:aux|have_to(v|wash(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: how did it get dirty ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|it,lambda $1_{ev}.adj|dirt-dn(pro:per|it,$1),$0),$2($0)),$0)
example_end

Sent: did you ask Urs ?
Sem: lambda $0_{ev}.Q(v|do-past(v|ask(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: did you ask me ?
Sem: lambda $0_{ev}.Q(v|do-past(v|ask(pro:per|you,pro:obj|me,$0),$0))
example_end

Sent: bring them to Cromer .
Sem: lambda $0_{ev}.and(v|bring(you,pro:obj|them,$0),prep|to(n:prop|cromer,$0))
example_end

Sent: may be he can fix it .
Sem: lambda $0_{ev}.mod|can(and(v|fix(pro:sub|he,pro:per|it,$0),cop|be_may($0)),$0)
example_end

Sent: what is he making ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|make-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: be very gentle with it it will break .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|gentle($0,$1)
example_end

Sent: it can 't be fixed .
Sem: lambda $0_{ev}.not(aux|be(mod|can(part|fix-pastp(pro:per|it,$0),$0),$0),$0)
example_end

Sent: okay you go back out there and I 'll let you have it .
Sem: lambda $0_{ev}.and(and(and(v|go(pro:per|you,lambda $1_{ev}.mod|~will(v|let-zero(pro:sub|i,lambda $2_{ev}.v|have(pro:per|you,pro:per|it,$2),$1),$1),$0),adv|back($0)),adv|out(adv|there($0))),co|okay($0))
example_end

Sent: I know but it 's not all together .
Sem: lambda $0_{ev}.and(v|know(pro:sub|i,$0),not(and(cop|~be(pro:per|it,$0),adv|all(adv|together($0))),$0))
example_end

Sent: what d you have ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|have(pro:per|you,$1,$0),$0)
example_end

Sent: secret beans ?
Sem: lambda $0_{e}.Q(and(adj|secret($0),n|bean-pl($0)))
example_end

Sent: you put it back together .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|back($0)),adv|together($0))
example_end

Sent: when you take those it comes apart .
Sem: lambda $0_{ev}.conj|when(v|take(pro:per|you,pro:dem|those,$0),and(v|come-3s(pro:per|it,$0),adv|apart($0)))
example_end

Sent: you cracked it ?
Sem: lambda $0_{ev}.Q(v|crack-past(pro:per|you,pro:per|it,$0))
example_end

Sent: down the meat ?
Sem: Q(prep|down(det:art|the($0,n|meat($0))))
example_end

Sent: it turns like an airplane ?
Sem: lambda $0_{ev}.Q(and(v|turn-3s(pro:per|it,$0),prep|like(det:art|a($1,n|airplane($1)),$0)))
example_end

Sent: what 's going around ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|go-presp($1,$0),adv|around($0)),$0)
example_end

Sent: propellers are on airplanes aren 't they ?
Sem: lambda $0_{ev}.Q(and(and(cop|be-pres(lambda $1_{e}.n|propel-dv($1),$0),prep|on(lambda $2_{e}.n|airplane-pl($2),$0)),not(aux|be(pro:sub|they,$0),$0)))
example_end

Sent: when you see an airplane you see propellers .
Sem: lambda $0_{ev}.conj|when(v|see(pro:per|you,det:art|a($1,n|airplane($1)),$0),v|see(pro:per|you,lambda $2_{e}.n|propel-dv($2),$0))
example_end

Sent: it doesn 't look like it does .
Sem: lambda $0_{ev}.not(mod|do(co|look(pro:per|it,$0),$0),$0)
example_end

Sent: you can ride it ?
Sem: lambda $0_{ev}.Q(mod|can(v|ride(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you 're fixing the busy bulldozer ?
Sem: lambda $0_{ev}.Q(aux|~be(part|fix-presp(pro:per|you,det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),$0))
example_end

Sent: who 's a strawberry ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|a($0,n|strawberry($0,$1))
example_end

Sent: am I a strawberry ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|i,n|strawberry(pro:sub|i,$0)))
example_end

Sent: where is the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: there it is Adam .
Sem: lambda $0_{ev}.and(cop|be-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: behind the kitchen door .
Sem: prep|behind(det:art|the($0,and_comp(n|kitchen($0),n|door($0))))
example_end

Sent: let me see .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,$1),$0)
example_end

Sent: did it pop ?
Sem: lambda $0_{ev}.Q(v|do-past(n|pop(pro:per|it,$0),$0))
example_end

Sent: d you have the ball in there ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|the($1,n|ball($1)),$0),prep|in(adv|there($0))),$0))
example_end

Sent: why should I burn you ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|should(and(v|burn(pro:sub|i,pro:per|you,$0),$1($0)),$0)
example_end

Sent: did you say dance ?
Sem: lambda $0_{ev}.Q(v|do-past(v|say(pro:per|you,lambda $1_{e}.n|dance($1),$0),$0))
example_end

Sent: wait you come around here honey .
Sem: lambda $0_{ev}.and(and(v|come(pro:per|you,$0),prep|around(adv|here($0))),v|wait(you,$0))
example_end

Sent: this is yours .
Sem: lambda $0_{ev}.pro:poss|yours(pro:dem|this,$0)
example_end

Sent: no she said one .
Sem: lambda $0_{ev}.and(v|say-past(pro:sub|she,lambda $1_{e}.pro:indef|one($1),$0),co|no($0))
example_end

Sent: you 're Urs ?
Sem: lambda $0_{ev}.Q(n:prop|ursula(pro:per|you,$0))
example_end

Sent: you 're not Ursula .
Sem: lambda $0_{ev}.not(n:prop|ursula(pro:per|you,$0),$0)
example_end

Sent: where are you going with that cookie ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|go-presp(pro:per|you,$0),$1($0)),prep|with(pro:dem|that($2,n|cookie($2)),$0)),$0)
example_end

Sent: please don 't call you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|call(you,pro:per|you,$0),$0),$0),co|please($0)))
example_end

Sent: because Bobo 's crying .
Sem: lambda $0_{ev}.aux|~be(part|cry-presp(n:prop|bobo,$0),$0)
example_end

Sent: why is Bobo crying ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(and(part|cry-presp(n:prop|bobo,$0),$1($0)),$0)
example_end

Sent: oh he 's crying at fourteen o'clock ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|cry-presp(pro:sub|he,$0),prep|at(lambda $1_{e}.det:num|fourteen(n|o'clock($1)),$0)),$0),co|oh($0)))
example_end

Sent: you were upstairs ?
Sem: lambda $0_{ev}.Q(and(aux|be-past(pro:per|you,$0),adv|upstairs($0)))
example_end

Sent: and he was crying because you were upstairs ?
Sem: lambda $0_{ev}.Q(conj|because(and(aux|be-past(pro:per|you,$0),adv|upstairs($0)),aux|be-past(part|cry-presp(pro:sub|he,$0),$0)))
example_end

Sent: he wants you downstairs ?
Sem: lambda $0_{ev}.Q(v|want-3s(pro:sub|he,adv|downstairs(pro:per|you),$0))
example_end

Sent: he didn 't want you to take a nap .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|he,lambda $1_{ev}.v|take(pro:per|you,det:art|a($2,n|nap($2)),$1),$0),$0),$0)
example_end

Sent: you 're supposed to drink it honey .
Sem: lambda $0_{ev}.aux|~be(v|suppose-past(pro:per|you,lambda $1_{ev}.v|drink(pro:per|you,pro:per|it,$1),$0),$0)
example_end

Sent: you don 't eat it with a spoon .
Sem: lambda $0_{ev}.not(mod|do(and(v|eat(pro:per|you,pro:per|it,$0),prep|with(det:art|a($1,n|spoon($1)),$0)),$0),$0)
example_end

Sent: it 's good .
Sem: lambda $0_{ev}.adj|good(pro:per|it,$0)
example_end

Sent: cowboy 's sleeping .
Sem: lambda $0_{ev}.aux|~be(part|sleep-presp(lambda $1_{e}.n|cow+boy($1),$0),$0)
example_end

Sent: where 's the cowboy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|cow+boy($1)),$0),$2($0))
example_end

Sent: look on your shirt .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|on(det:poss|your($1,n|shirt($1)),$0))
example_end

Sent: cranberry juice on your shirt .
Sem: lambda $0_{e}.att(and_comp(n|cranberry($0),n|juice($0)),prep|on(det:poss|your($1,n|shirt($1))))
example_end

Sent: that 's why you should drink it .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.mod|should(and(v|drink(pro:per|you,pro:per|it,$1),adv:int|why($1)),$1),$0)
example_end

Sent: no you don 't need water on that dear .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|need(pro:per|you,lambda $1_{e}.n|water($1),$0),adv|on(pro:rel|that,$0)),$0),$0),co|no($0))
example_end

Sent: you want to smoke Camels ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|smoke(pro:per|you,n:prop|camels,$1),$0))
example_end

Sent: why do you want to smoke Camels ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.n|smoke(pro:per|you,n:prop|camels,$1),$0),$2($0)),$0)
example_end

Sent: yes Urs Paul !
Sem: lambda $0_{ev}.and(n:prop|paul_ursula($0),co|yes($0))
example_end

Sent: who 's Urs Paul ?
Sem: lambda $0_{e}.lambda $1_{ev}.n:prop|paul_ursula($0,$1)
example_end

Sent: what doesn 't want to go home ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(v|want(you,lambda $1_{ev}.and(v|go($2,$1),n|home($1)),$0),$0),$0)
example_end

Sent: where 's the mixer ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|mix-dv($1)),$0),$2($0))
example_end

Sent: you 're playing a new game ?
Sem: lambda $0_{ev}.Q(aux|~be(part|play-presp(pro:per|you,det:art|a($1,and(adj|new($1),n|game($1))),$0),$0))
example_end

Sent: who found it ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|find-past($1,pro:per|it,$0)
example_end

Sent: you found it ?
Sem: lambda $0_{ev}.Q(v|find-past(pro:per|you,pro:per|it,$0))
example_end

Sent: where did you find it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|find(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: oh did you say the right magic words ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|say(pro:per|you,det:art|the($1,and(n|magic($1),and(adj|right($1),n|word-pl($1)))),$0),$0),co|oh($0)))
example_end

Sent: now say the magic words .
Sem: lambda $0_{ev}.and(v|say(you,det:art|the($1,and(n|magic($1),n|word-pl($1))),$0),adv|now($0))
example_end

Sent: then what happens ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-3s($1,$0),adv:tem|then($0))
example_end

Sent: say the magic words .
Sem: lambda $0_{ev}.v|say(you,det:art|the($1,and(n|magic($1),n|word-pl($1))),$0)
example_end

Sent: you ask Ursula .
Sem: lambda $0_{ev}.v|ask(pro:per|you,n:prop|ursula,$0)
example_end

Sent: turn it over and say abra_cadabra .
Sem: lambda $0_{ev}.coord|and(v|say(you,lambda $1_{e}.co|abra_cadabra($1),$0),and(v|turn(you,pro:per|it,$0),adv|over($0)))
example_end

Sent: cowboy shale or cowboy Bill ?
Sem: lambda $0_{e}.Q(coord|or(lambda $1_{e}.and_comp(n|cow+boy($1),n|shale($1)),lambda $2_{e}.and_comp(n|cow+boy($2),n:prop|bill($2)),$0))
example_end

Sent: cowboy Bill ?
Sem: lambda $0_{e}.Q(and_comp(n|cow+boy($0),n:prop|bill($0)))
example_end

Sent: don 't put them in anyone 's face .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,pro:obj|them,$0),prep|in(pro:indef|anyone($1,n|face($1)),$0)),$0),$0)
example_end

Sent: can you tell Urs what that is ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,n:prop|ursula,$1)
example_end

Sent: no what 's that in your hand ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(att(pro:dem|that,prep|in(det:poss|your($2,n|hand($2)))),$0),co|no($0))
example_end

Sent: yes a baby carriage .
Sem: lambda $0_{ev}.and(det:art|a($1,and_comp(n|baby($1),n|carriage($1)),$0),co|yes($0))
example_end

Sent: are you finished ?
Sem: lambda $0_{ev}.Q(cop|be-pres(v|finish-past(pro:per|you,$0),$0))
example_end

Sent: do you want some more coffee ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,qn|some($1,and(qn|more($1),n|coffee($1))),$0),$0))
example_end

Sent: oh are you eating a cookie ?
Sem: lambda $0_{ev}.Q(and(aux|be-pres(part|eat-presp(pro:per|you,det:art|a($1,n|cookie($1)),$0),$0),co|oh($0)))
example_end

Sent: you like what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|like(pro:per|you,$1,$0)
example_end

Sent: your spoon .
Sem: det:poss|your($0,n|spoon($0))
example_end

Sent: you left it out on the table .
Sem: lambda $0_{ev}.and(and(adv|left(pro:per|you,pro:per|it,$0),adv|out($0)),prep|on(det:art|the($1,n|table($1)),$0))
example_end

Sent: fire truck ?
Sem: lambda $0_{e}.Q(and_comp(n|fire($0),n|truck($0)))
example_end

Sent: on gun ?
Sem: Q(prep|on(lambda $0_{e}.n|gun($0)))
example_end

Sent: is that where the fire truck has gone ?
Sem: lambda $0_{ev}.Q(cop|be-3s(pro:dem|that,lambda $1_{ev}.aux|have-3s(part|go-pastp(det:art|the($2,and_comp(n|fire($2),n|truck($2))),$1),$1),$0))
example_end

Sent: can you put the fire out on guns ?
Sem: lambda $0_{ev}.Q(mod|can(and(and(v|put-zero(pro:per|you,det:art|the($1,v|fire($1)),$0),adv|out($0)),prep|on(lambda $2_{e}.n|gun-pl($2),$0)),$0))
example_end

Sent: they wouldn 't need a big fire truck for that .
Sem: lambda $0_{ev}.not(mod|will(and(v|need(pro:sub|they,det:art|a($1,and_comp(n|fire($1),and(adj|big($1),n|truck($1)))),$0),prep|for(pro:dem|that,$0)),$0),$0)
example_end

Sent: some pie ?
Sem: lambda $0_{e}.Q(qn|some($1,n|pie($1),$0))
example_end

Sent: you can blow .
Sem: lambda $0_{ev}.mod|can(v|blow(pro:per|you,$0),$0)
example_end

Sent: what 's in it when you blow ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(v|blow(pro:per|you,$0),and(cop|~be($1,$0),prep|in(pro:per|it,$0)))
example_end

Sent: some sugar ?
Sem: lambda $0_{e}.Q(qn|some($1,n|sugar($1),$0))
example_end

Sent: let me hold it and help you .
Sem: lambda $0_{ev}.coord|and(v|help(you,pro:per|you,$0),v|let-zero(you,lambda $1_{ev}.v|hold(pro:obj|me,pro:per|it,$1),$0))
example_end

Sent: hold it at the top .
Sem: lambda $0_{ev}.and(v|hold(you,pro:per|it,$0),prep|at(det:art|the($1,n|top($1)),$0))
example_end

Sent: what are the colors ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|color-pl($2)),$0)
example_end

Sent: hold it now .
Sem: lambda $0_{ev}.and(v|hold(you,pro:per|it,$0),adv|now($0))
example_end

Sent: oh you managed to get it .
Sem: lambda $0_{ev}.and(v|manage-past(pro:per|you,lambda $1_{ev}.v|get(pro:per|you,pro:per|it,$1),$0),co|oh($0))
example_end

Sent: you managed .
Sem: lambda $0_{ev}.v|manage-past(pro:per|you,$0)
example_end

Sent: hopping to Missouri .
Sem: lambda $0_{ev}.and(part|hop-presp(you,$0),prep|to(n:prop|missouri,$0))
example_end

Sent: that 's a song .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|song(pro:dem|that,$0))
example_end

Sent: hopping to Missouri in the bag !
Sem: lambda $0_{ev}.and(and(part|hop-presp(you,$0),prep|to(n:prop|missouri,$0)),prep|in(det:art|the($1,n|bag($1)),$0))
example_end

Sent: who brought what ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.v|bring-past($1,$2,$0)
example_end

Sent: put it what ?
Sem: lambda $0_{ev}.v|put-zero(you,pro:per|it,$0)
example_end

Sent: he flew on the tree ?
Sem: lambda $0_{ev}.Q(and(v|fly-past(pro:sub|he,$0),prep|on(det:art|the($1,n|tree($1)),$0)))
example_end

Sent: how does he hop ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(and(v|hop(pro:sub|he,$0),$1($0)),$0)
example_end

Sent: airplane in your foot ?
Sem: lambda $0_{e}.Q(att(n|airplane($0),prep|in(det:poss|your($1,n|foot($1)))))
example_end

Sent: you have an airplane in your shoe ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,det:art|a($1,att(n|airplane($1),prep|in(det:poss|your($2,n|shoe($2))))),$0))
example_end

Sent: airplane walk .
Sem: lambda $0_{ev}.n|walk(lambda $1_{e}.n|airplane($1),$0)
example_end

Sent: does airplane walk ?
Sem: lambda $0_{ev}.Q(mod|do-3s(n|walk(lambda $1_{e}.n|airplane($1),$0),$0))
example_end

Sent: two of them ?
Sem: Q(prep|of(lambda $0_{e}.det:num|two(pro:obj|them($0))))
example_end

Sent: you go talk to Urs .
Sem: lambda $0_{ev}.v|go_talk(pro:per|you,$0)
example_end

Sent: cowboy 's going to shoot with you ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(lambda $1_{e}.n|cow+boy($1),lambda $2_{ev}.and(co|shoot(lambda $3_{e}.n|cow+boy($3),$2),prep|with(pro:per|you,$2)),$0),$0))
example_end

Sent: he didn 't say anything .
Sem: lambda $0_{ev}.not(mod|do(v|say(pro:sub|he,lambda $1_{e}.pro:indef|anything($1),$0),$0),$0)
example_end

Sent: soxy soccer ?
Sem: lambda $0_{e}.Q(and(chi|soxy($0),n|soccer($0)))
example_end

Sent: some what Adam ?
Sem: pro:indef|some($0,pro:int|what($0))
example_end

Sent: on my face ?
Sem: Q(prep|on(det:poss|my($0,n|face($0))))
example_end

Sent: he saw some clowns at the circus throw pies .
Sem: lambda $0_{ev}.v|see-past(pro:sub|he,lambda $1_{ev}.v|throw(qn|some($2,att(n|clown-pl($2),prep|at(det:art|the($3,n|circus($3))))),lambda $4_{e}.n|pie-pl($4),$1),$0)
example_end

Sent: you 're going to get out your game ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|get(pro:per|you,det:poss|your($2,n|game($2)),$1),adv|out($1)),$0),$0))
example_end

Sent: what 's a soxer ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|soxer($2)),$0)
example_end

Sent: no I say boxer .
Sem: lambda $0_{ev}.and(v|say(pro:sub|i,lambda $1_{e}.n|box-dv($1),$0),co|no($0))
example_end

Sent: come little fellow ?
Sem: lambda $0_{ev}.Q(and(v|come(you,$0),lambda $1_{e}.and(adj|little($1),n|fellow($1))))
example_end

Sent: you 're going to wait for something ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|wait(pro:per|you,$1),prep|for(pro:indef|something,$1)),$0),$0))
example_end

Sent: good word .
Sem: lambda $0_{e}.and(adj|good($0),n|word($0))
example_end

Sent: he doesn 't want pie .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|he,lambda $1_{e}.n|pie($1),$0),$0),$0)
example_end

Sent: can you get it off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|get(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: what 're you going to play .
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.n|play(pro:per|you,$2,$1),$0),$0)
example_end

Sent: the song was daisy daisy .
Sem: lambda $0_{ev}.and_comp(n|daisy(det:art|the($1,n|song($1)),$0),n|daisy(det:art|the($1,n|song($1)),$0))
example_end

Sent: did you break one of the wheels ?
Sem: lambda $0_{ev}.Q(v|do-past(v|break(pro:per|you,att(det:num|one,prep|of(det:art|the($1,n|wheel-pl($1)))),$0),$0))
example_end

Sent: because Shadow_Gay did what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(n:prop|shadow_gay,$1,$0)
example_end

Sent: hugged you ?
Sem: lambda $0_{ev}.Q(v|hug-past(you,pro:per|you,$0))
example_end

Sent: d you think she needs a helper ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|need-3s(pro:sub|she,det:art|a($2,n|help-dv($2)),$1),$0),$0))
example_end

Sent: I don 't see one .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: give me your cup .
Sem: lambda $0_{ev}.v|give(you,det:poss|your($1,n|cup($1)),pro:obj|me,$0)
example_end

Sent: don 't drop it please .
Sem: lambda $0_{ev}.and(not(mod|do(v|drop(you,pro:per|it,$0),$0),$0),co|please($0))
example_end

Sent: Jenny cup ?
Sem: lambda $0_{e}.Q(and_comp(n:prop|jenny($0),n|cup($0)))
example_end

Sent: what 's a Jenny cup ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,and_comp(n:prop|jenny($2),n|cup($2))),$0)
example_end

Sent: can you ride it ?
Sem: lambda $0_{ev}.Q(mod|can(v|ride(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: are you going to be little ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.adj|little(pro:per|you,$1),$0),$0))
example_end

Sent: so the baby can drink it .
Sem: lambda $0_{ev}.mod|can(v|drink(det:art|the($1,n|baby($1)),pro:per|it,$0),$0)
example_end

Sent: oh you 're Adam .
Sem: lambda $0_{ev}.and(n:prop|adam(pro:per|you,$0),co|oh($0))
example_end

Sent: okay just a minute you hold that .
Sem: lambda $0_{ev}.and(and(v|hold(pro:per|you,pro:dem|that,$0),adv|just(det:art|a($1,n|minute($1)))),co|okay($0))
example_end

Sent: see what happens when you put it in ?
Sem: lambda $0_{ev}.Q(v|see(you,lambda $1_{ev}.conj|when(and(v|put-zero(pro:per|you,pro:per|it,$1),adv|in($1)),v|happen-3s(pro:int|what,$1)),$0))
example_end

Sent: if you want to drink it .
Sem: lambda $0_{ev}.v|want(pro:per|you,lambda $1_{ev}.v|drink(pro:per|you,pro:per|it,$1),$0)
example_end

Sent: you 're going to swallow it ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|swallow(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: you were playing with it and you spilled it .
Sem: lambda $0_{ev}.coord|and(v|spill-past(pro:per|you,pro:per|it,$0),aux|be-past(and(part|play-presp(pro:per|you,$0),prep|with(pro:per|it,$0)),$0))
example_end

Sent: you spilled it again ?
Sem: lambda $0_{ev}.Q(and(v|spill-past(pro:per|you,pro:per|it,$0),adv|again($0)))
example_end

Sent: because it will burn you .
Sem: lambda $0_{ev}.mod|will(v|burn(pro:per|it,pro:per|you,$0),$0)
example_end

Sent: you broke another wheel .
Sem: lambda $0_{ev}.v|break-past(pro:per|you,qn|another($1,n|wheel($1)),$0)
example_end

Sent: because it doesn 't go if you break it .
Sem: lambda $0_{ev}.not(conj|if(v|break(pro:per|you,pro:per|it,$0),mod|do(v|go(pro:per|it,$0),$0)),$0)
example_end

Sent: no if you take those off the wheels will come off .
Sem: lambda $0_{ev}.and(mod|will(conj|if(and(v|take(pro:per|you,pro:dem|those,$0),prep|off($0)),and(v|come(det:art|the($1,n|wheel-pl($1)),$0),adv|off($0))),$0),co|no($0))
example_end

Sent: no then it doesn 't go if the wheels are off .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:per|it,lambda $1_{ev}.and(cop|be-pres(det:art|the($2,n|wheel-pl($2)),$1),prep|off($1)),$0),adv:tem|then($0)),$0),$0),co|no($0))
example_end

Sent: they are ?
Sem: lambda $0_{ev}.Q(cop|be-pres(pro:sub|they,$0))
example_end

Sent: I don 't see any propellers on that one .
Sem: lambda $0_{ev}.not(mod|do(and(v|see(pro:sub|i,qn|any($1,n|propel-dv($1)),$0),prep|on(pro:dem|that($2,pro:indef|one($2)),$0)),$0),$0)
example_end

Sent: are there any propellers ?
Sem: lambda $0_{ev}.Q(cop|be-pres(qn|any($1,n|propel-dv($1)),$0))
example_end

Sent: I guess I 'm not looking in the right place .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.not(cop|~be(and(part|look-presp(pro:sub|i,$1),prep|in(det:art|the($2,and(adj|right($2),n|place($2))),$1)),$1),$1),$0)
example_end

Sent: put your hand down and get it out .
Sem: lambda $0_{ev}.coord|and(and(v|get(you,pro:per|it,$0),adv|out($0)),and(v|put-zero(you,det:poss|your($1,n|hand($1)),$0),adv|down($0)))
example_end

Sent: oh Urs .
Sem: lambda $0_{ev}.and(n:prop|ursula($0),co|oh($0))
example_end

Sent: well put your cup on the table there .
Sem: lambda $0_{ev}.and(and(and(v|put-zero(you,det:poss|your($1,n|cup($1)),$0),prep|on(det:art|the($2,n|table($2)),$0)),adv|there($0)),co|well($0))
example_end

Sent: well pretend that that 's coffee okay ?
Sem: lambda $0_{ev}.Q(and(and(adj|pretend(you,lambda $1_{ev}.n|coffee(pro:rel|that,$1),$0),co|well($0)),adj|okay($0)))
example_end

Sent: your spoon got stuck ?
Sem: lambda $0_{ev}.Q(part|stick-pastp(_,det:poss|your($1,n|spoon($1)),$0))
example_end

Sent: down your throat ?
Sem: Q(prep|down(det:poss|your($0,n|throat($0))))
example_end

Sent: why don 't you take the things out_of your bag and you be Urs ?
Sem: lambda $2_{e}.lambda $0_{ev}.coord|and(n:prop|ursula(pro:per|you,$0),not(mod|do(and(and(v|take(pro:per|you,det:art|the($1,n|thing-pl($1)),$0),$2($0)),prep|out_of(det:poss|your($3,n|bag($3)),$0)),$0),$0))
example_end

Sent: you don 't have anything in your bag do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|have(pro:per|you,lambda $1_{e}.pro:indef|anything($1),$0),prep|in(det:poss|your($2,n|bag($2)),$0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: is that the name ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|name(pro:rel|that,$0)))
example_end

Sent: like that ?
Sem: Q(prep|like(pro:dem|that))
example_end

Sent: what name is it Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|name(pro:per|it,$0))
example_end

Sent: it says made in Japan .
Sem: lambda $0_{ev}.v|say-3s(pro:per|it,lambda $1_{ev}.and(part|make-pastp(you,$1),prep|in(n:prop|japan,$1)),$0)
example_end

Sent: d you want me to wind it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|wind(pro:obj|me,pro:per|it,$1),$0),$0))
example_end

Sent: what about it ?
Sem: att(pro:int|what,prep|about(pro:per|it))
example_end

Sent: you 're going to save it ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|save(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: until your birthday time .
Sem: det:poss|your($0,and_comp(n|birth+day($0),n|time($0)))
example_end

Sent: give it to me .
Sem: lambda $0_{ev}.and(v|give(you,pro:per|it,$0),prep|to(pro:obj|me,$0))
example_end

Sent: no put it on the table .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|table($1)),$0)),co|no($0))
example_end

Sent: you may break it there .
Sem: lambda $0_{ev}.mod|may(and(v|break(pro:per|you,pro:per|it,$0),adv|there($0)),$0)
example_end

Sent: d you want to have a birthday ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,det:art|a($2,n|birth+day($2)),$1),$0),$0))
example_end

Sent: is that your stove ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,n|stove(pro:rel|that,$0)))
example_end

Sent: take him out ?
Sem: lambda $0_{ev}.Q(and(v|take(you,pro:obj|him,$0),adv|out($0)))
example_end

Sent: pull him out .
Sem: lambda $0_{ev}.and(v|pull(you,pro:obj|him,$0),adv|out($0))
example_end

Sent: what about water ?
Sem: att(pro:int|what,adv|about(lambda $0_{e}.n|water($0)))
example_end

Sent: how does the water get in here ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(and(v|get(det:art|the($1,n|water($1)),$0),$2($0)),adv|in(adv|here($0))),$0)
example_end

Sent: I just put the driver in the back .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:sub|i,det:art|the($1,n|drive-dv($1)),$0),adv|just($0)),prep|in(det:art|the($2,n|back($2)),$0))
example_end

Sent: drive by Main Street ?
Sem: lambda $0_{ev}.Q(and(n|drive(you,$0),prep|by(lambda $1_{e}.and_comp(n:prop|main($1),n:prop|street($1)),$0)))
example_end

Sent: oh you 're so tired .
Sem: lambda $0_{ev}.and(adv|so(part|tire-pastp(pro:per|you,$0)),co|oh($0))
example_end

Sent: what about Urs and Cromer ?
Sem: att(pro:int|what,prep|about(coord|and(n:prop|ursula,n:prop|cromer)))
example_end

Sent: no she doesn 't want to wear that hat .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|she,lambda $1_{ev}.v|wear(pro:sub|she,pro:dem|that($2,n|hat($2)),$1),$0),$0),$0),co|no($0))
example_end

Sent: yes and you 're a little boy .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|little(pro:per|you,$0))),co|yes($0))
example_end

Sent: Adam boy ?
Sem: lambda $0_{e}.Q(n|boy($0))
example_end

Sent: oh it 's cool now ?
Sem: lambda $0_{ev}.Q(and(adv|now(adj|cool(pro:per|it,$0)),co|oh($0)))
example_end

Sent: it 's not cool ?
Sem: lambda $0_{ev}.Q(not(v|cool(pro:per|it,$0),$0))
example_end

Sent: let 's cool that time ?
Sem: lambda $0_{ev}.Q(v:obj|let(you,lambda $1_{ev}.and(v|cool(pro:obj|~us,$1),det:dem|that($2,n|time($2),$1)),$0))
example_end

Sent: you 're going to wash dishes ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.n|wash(pro:per|you,lambda $2_{e}.n|dish-pl($2),$1),$0),$0))
example_end

Sent: if you break it then I won 't have one .
Sem: lambda $0_{ev}.not(mod|will(conj|if(v|break(pro:per|you,pro:per|it,$0),and(v|have(pro:sub|i,pro:indef|one,$0),adv:tem|then($0))),$0),$0)
example_end

Sent: let 's go back in .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(and(v|go(pro:obj|~us,$1),adj|back($1)),adv|in($1)),$0)
example_end

Sent: you 're going to wait for me ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|wait(pro:per|you,$1),prep|for(pro:obj|me,$1)),$0),$0))
example_end

Sent: I 'll come in .
Sem: lambda $0_{ev}.mod|~will(and(v|come(pro:sub|i,$0),adv|in($0)),$0)
example_end

Sent: now I 'll wait for you to come in .
Sem: lambda $0_{ev}.mod|~will(and(and(v|wait(pro:sub|i,lambda $1_{ev}.and(v|come(pro:sub|i,$1),adv|in($1)),$0),adv|now($0)),prep|for(pro:per|you,$0)),$0)
example_end

Sent: because Urs is broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(n:prop|ursula,$0))
example_end

Sent: how did she get broken ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(aux|get(pro:sub|she,lambda $1_{ev}.part|break-pastp(pro:sub|she,$1),$0),$2($0)),$0)
example_end

Sent: how did Urs get broken ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(aux|get(n:prop|ursula,lambda $1_{ev}.part|break-pastp(n:prop|ursula,$1),$0),$2($0)),$0)
example_end

Sent: broken on Thursday ?
Sem: lambda $0_{e}.part|break-pastp($0)
example_end

Sent: are you coming in ?
Sem: lambda $0_{ev}.Q(aux|be-pres(and(part|come-presp(pro:per|you,$0),adv|in($0)),$0))
example_end

Sent: no don 't pull your rubbers like that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|pull(you,det:poss|your($1,n|rubber-pl($1)),$0),prep|like(pro:dem|that,$0)),$0),$0),co|no($0))
example_end

Sent: well that 's alright .
Sem: lambda $0_{ev}.and(adj|alright(pro:dem|that,$0),co|well($0))
example_end

Sent: you don 't have_to wear it .
Sem: lambda $0_{ev}.not(mod:aux|have_to(mod|do(v|wear(pro:per|you,pro:per|it,$0),$0),$0),$0)
example_end

Sent: just don 't pull your rubbers .
Sem: lambda $0_{ev}.not(mod|do(and(v|pull(you,det:poss|your($1,n|rubber-pl($1)),$0),adv|just($0)),$0),$0)
example_end

Sent: put what on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(you,$1,$0),adv|on($0))
example_end

Sent: I see why you didn 't want to come in .
Sem: lambda $0_{ev}.v|see(pro:sub|i,lambda $1_{ev}.not(mod|do(and(v|want(pro:per|you,lambda $2_{ev}.and(v|come(pro:per|you,$2),adv|in($2)),$1),adv:int|why($1)),$1),$1),$0)
example_end

Sent: some child outside .
Sem: adv|outside(qn|some($0,n|child($0)))
example_end

Sent: they 're playing .
Sem: lambda $0_{ev}.aux|~be(part|play-presp(pro:sub|they,$0),$0)
example_end

Sent: I don 't think they 're fighting I think they 're just playing .
Sem: lambda $0_{ev}.not(and(mod|do(v|think(pro:sub|i,lambda $1_{ev}.aux|~be(part|fight-presp(pro:sub|they,$1),$1),$0),$0),v|think(pro:sub|i,lambda $2_{ev}.aux|~be(and(part|play-presp(pro:sub|they,$2),adv|just($2)),$2),$0)),$0)
example_end

Sent: you 're going to do what ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,$2,$1),$0),$0)
example_end

Sent: a word ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|word($1),$0))
example_end

Sent: what does that word mean ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(adj|mean(pro:dem|that($1,n|word($1)),$2,$0),$0)
example_end

Sent: we don 't need lights on .
Sem: lambda $0_{ev}.not(mod|do(and(v|need(pro:sub|we,lambda $1_{e}.n|light-pl($1),$0),adv|on($0)),$0),$0)
example_end

Sent: it 's daytime Adam .
Sem: lambda $0_{ev}.n|day+time(pro:per|it,$0)
example_end

Sent: we only need the lights on at night .
Sem: lambda $0_{ev}.and(v|need(pro:sub|we,adv|on(lambda $1_{e}.att(det:art|the($2,n|light-pl($2),$1),prep|at(lambda $3_{e}.n|night($3)))),$0),adv|only($0))
example_end

Sent: because we have the sun .
Sem: lambda $0_{ev}.v|have(pro:sub|we,det:art|the($1,n|sun($1)),$0)
example_end

Sent: it 's light enough without the electric light .
Sem: lambda $0_{e}.lambda $1_{ev}.n|light($0,$1)
example_end

Sent: you 're a derrick ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,n|derrick(pro:per|you,$0)))
example_end

Sent: I don 't think they 're fighting .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.aux|~be(part|fight-presp(pro:sub|they,$1),$1),$0),$0),$0)
example_end

Sent: I think they 're just playing .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(and(part|play-presp(pro:sub|they,$1),adv|just($1)),$1),$0)
example_end

Sent: children outside .
Sem: adv|outside(lambda $0_{e}.n|child-pl($0))
example_end

Sent: no I don 't think you need any more chocolate .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,qn|any($2,and(qn|more($2),n|chocolate($2))),$1),$0),$0),$0),co|no($0))
example_end

Sent: well you still have your juice .
Sem: lambda $0_{ev}.and(and(v|have(pro:per|you,det:poss|your($1,n|juice($1)),$0),adv|still($0)),co|well($0))
example_end

Sent: alright talk about it .
Sem: lambda $0_{ev}.and(and(n|talk(you,$0),prep|about(pro:per|it,$0)),co|alright($0))
example_end

Sent: you 're talking about the word ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|talk-presp(pro:per|you,$0),prep|about(det:art|the($1,n|word($1)),$0)),$0))
example_end

Sent: it means dump you out ?
Sem: lambda $0_{ev}.Q(v|mean-3s(pro:per|it,lambda $1_{ev}.and(n|dump(_,pro:per|you,$1),adv|out($1)),$0))
example_end

Sent: I don 't know if it was pillow or Perro .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.coord|or(n|pillow(pro:per|it,$1),n:prop|perro(pro:per|it,$1)),$0),$0),$0)
example_end

Sent: what 'd I say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|~genmod(v|say(pro:sub|i,$1,$0),$0)
example_end

Sent: oh nothing of importance .
Sem: lambda $0_{ev}.and(att(pro:indef|nothing($0),prep|of(lambda $1_{e}.n|importance($1))),co|oh($0))
example_end

Sent: did you make that ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|make(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: did you show her your game Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:poss|your($1,n|game($1)),det:poss|her,$0),$0))
example_end

Sent: no that 's enough Adam .
Sem: lambda $0_{ev}.and(adj|enough(pro:dem|that,$0),co|no($0))
example_end

Sent: okay you 're going to play with Urs ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|go-presp(pro:per|you,lambda $1_{ev}.n|play(pro:per|you,$1),$0),prep|with(n:prop|ursula,$0)),$0),co|okay($0)))
example_end

Sent: is that a b ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n:let|b(pro:rel|that,$0)))
example_end

Sent: there 's one on the floor .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:indef|one,$0),pro:exist|there($0)),prep|on(det:art|the($1,n|floor($1)),$0))
example_end

Sent: the children ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|child-pl($1),$0))
example_end

Sent: Adam which one is like this ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s($1($2,pro:indef|one($2)),$0),co|like(pro:dem|this,$0))
example_end

Sent: I think you had more than two cookies .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|have-past(pro:per|you,lambda $2_{e}.det:num|two(n|cookie-pl($2)),$1),$0)
example_end

Sent: did he eat it ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|eat(pro:sub|he,pro:per|it,$0),$0))
example_end

Sent: you 're patting him ?
Sem: lambda $0_{ev}.Q(aux|~be(part|pat-presp(pro:per|you,pro:obj|him,$0),$0))
example_end

Sent: did he fly ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|fly(pro:sub|he,$0),$0))
example_end

Sent: are you ready ?
Sem: lambda $0_{ev}.Q(adj|ready(pro:per|you,$0))
example_end

Sent: go play the game with Urs .
Sem: lambda $0_{ev}.and(v|play(you,det:art|the($1,n|game($1)),$0),prep|with(n:prop|ursula,$0))
example_end

Sent: well I thought you were going to play the game .
Sem: lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|play(pro:per|you,det:art|the($3,n|game($3)),$2),$1),$1),$0),co|well($0))
example_end

Sent: well I can 't change your diaper right now .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|change(pro:sub|i,det:poss|your($1,n|diaper($1)),$0),adv|right(adv|now($0))),$0),$0),co|well($0))
example_end

Sent: well I don 't think you need to eat these .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,lambda $2_{ev}.v|eat(pro:per|you,pro:dem|these,$2),$1),$0),$0),$0),co|well($0))
example_end

Sent: snap you ?
Sem: lambda $0_{ev}.Q(v|snap(you,pro:per|you,$0))
example_end

Sent: eat it all up ?
Sem: lambda $0_{ev}.Q(and(v|eat(you,pro:per|it,$0),adv|all(adv|up($0))))
example_end

Sent: the cupcake ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|cupcake($1),$0))
example_end

Sent: take it out .
Sem: lambda $0_{ev}.and(v|take(you,pro:per|it,$0),adv|out($0))
example_end

Sent: no if he goes in there he can 't see where he 's going .
Sem: lambda $0_{ev}.and(not(mod|can(conj|if(and(v|go-3s(pro:sub|he,$0),adv|in(adv|there($0))),v|see(pro:sub|he,lambda $1_{ev}.aux|~be(and(part|go-presp(pro:sub|he,$1),pro:rel|where($1)),$1),$0)),$0),$0),co|no($0))
example_end

Sent: no don 't pull it .
Sem: lambda $0_{ev}.and(not(mod|do(v|pull(you,pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: his tail yes .
Sem: lambda $0_{ev}.and(det:poss|his($1,n|tail($1),$0),co|yes($0))
example_end

Sent: do you think he can hop to Missouri ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|can(and(v|hop(pro:sub|he,$1),prep|to(n:prop|missouri,$1)),$1),$0),$0))
example_end

Sent: oh I don 't think so .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|think(pro:sub|i,$0),co|so($0)),$0),$0),co|oh($0))
example_end

Sent: talk to his mouth ?
Sem: lambda $0_{ev}.Q(and(n|talk(you,$0),prep|to(det:poss|his($1,n|mouth($1)),$0)))
example_end

Sent: what is that in his mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(att(pro:dem|that,prep|in(det:poss|his($2,n|mouth($2)))),$0)
example_end

Sent: yes he has a tongue .
Sem: lambda $0_{ev}.and(v|have-3s(pro:sub|he,det:art|a($1,n|tongue($1)),$0),co|yes($0))
example_end

Sent: he has two green eyes .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|he,lambda $1_{e}.and(n|green($1),det:num|two(n|eye-pl($1))),$0)
example_end

Sent: she 's a lady .
Sem: lambda $0_{ev}.det:art|a(pro:sub|she,n|lady(pro:sub|she,$0))
example_end

Sent: yes she 's Urs .
Sem: lambda $0_{ev}.and(n:prop|ursula(pro:sub|she,$0),co|yes($0))
example_end

Sent: you need some what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|need(pro:per|you,$1,$0)
example_end

Sent: you need some paper ?
Sem: lambda $0_{ev}.Q(v|need(pro:per|you,qn|some($1,n|paper($1)),$0))
example_end

Sent: what kind of paper ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|paper($2))))
example_end

Sent: what 's your paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|your($2,n|paper($2)),$0)
example_end

Sent: thank_you for my drawing ?
Sem: lambda $0_{e}.Q(att(co|thank_you($0),prep|for(det:poss|my($1,n|drawing($1)))))
example_end

Sent: you 're drawing a shadow ?
Sem: lambda $0_{ev}.Q(aux|~be(part|draw-presp(pro:per|you,det:art|a($1,n|shadow($1)),$0),$0))
example_end

Sent: Adam you dropped one over here dear .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,pro:indef|one,$0),adv|over(adv|here($0)))
example_end

Sent: no careful .
Sem: lambda $0_{ev}.and(co|careful($0),co|no($0))
example_end

Sent: you write with those pencils .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|with(pro:dem|those($1,n|pencil-pl($1)),$0))
example_end

Sent: this is blue .
Sem: lambda $0_{ev}.adj|blue(pro:dem|this,$0)
example_end

Sent: that 's not red .
Sem: lambda $0_{ev}.not(adj|red(pro:dem|that,$0),$0)
example_end

Sent: that 's yellow .
Sem: lambda $0_{ev}.adj|yellow(pro:dem|that,$0)
example_end

Sent: this is black .
Sem: lambda $0_{ev}.n|black(pro:dem|this,$0)
example_end

Sent: that 's blue .
Sem: lambda $0_{ev}.adj|blue(pro:dem|that,$0)
example_end

Sent: I 've got something interesting on mine .
Sem: lambda $0_{ev}.aux|~have(and(part|get-pastp(pro:sub|i,lambda $1_{e}.and(part|interest-presp($1),pro:indef|something($1)),$0),prep|on(pro:poss|mine,$0)),$0)
example_end

Sent: that 's not Bozo .
Sem: lambda $0_{ev}.not(n:prop|bozo(pro:dem|that,$0),$0)
example_end

Sent: what 's on there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),prep|on(adv|there($0)))
example_end

Sent: star yes .
Sem: lambda $0_{ev}.and(n|star($0),co|yes($0))
example_end

Sent: does your pencil have numbers ?
Sem: lambda $0_{ev}.Q(mod|do-3s(aux|have(det:poss|your($1,n|pencil($1)),lambda $2_{e}.n|number-pl($2),$0),$0))
example_end

Sent: in the basement !
Sem: prep|in(det:art|the($0,n|basement($0)))
example_end

Sent: it 's for you ?
Sem: lambda $0_{ev}.Q(and(cop|~be(pro:per|it,$0),conj|for(pro:per|you,$0)))
example_end

Sent: well what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,$0),co|well($0))
example_end

Sent: that 's nice Adam .
Sem: lambda $0_{ev}.adj|nice(pro:dem|that,$0)
example_end

Sent: did you finish drawing ?
Sem: lambda $0_{ev}.Q(v|do-past(v|finish(pro:per|you,$0),$0))
example_end

Sent: it 's a new word from one of his books .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,att(and(n|word(pro:per|it,$0),adj|new(pro:per|it,$0)),prep|from(att(det:num|one,prep|of(det:poss|his($1,n|book-pl($1)))))))
example_end

Sent: a pail of good fresh milk skedaddle .
Sem: lambda $0_{ev}.and(det:art|a($1,att(n|pail($1),prep|of(lambda $2_{e}.and(adj|fresh($2),and(adj|good($2),n|milk($2)))))),v|skedaddle($0))
example_end

Sent: that was no penny .
Sem: lambda $0_{ev}.qn|no(pro:dem|that,n|penny(pro:dem|that,$0))
example_end

Sent: was it a penny ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|penny(pro:per|it,$0)))
example_end

Sent: where 's the elephant ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|elephant($1)),$0),$2($0))
example_end

Sent: show me .
Sem: lambda $0_{ev}.v|show(you,pro:obj|me,$0)
example_end

Sent: is that a fireman ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|fire+man(pro:rel|that,$0)))
example_end

Sent: why don 't you scoot out there and I 'll come out in a minute okay ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(not(and(mod|do(and(and(v|scoot(pro:per|you,$0),$1($0)),adv|out(adv|there($0))),$0),mod|~will(and(and(v|come(pro:sub|i,$0),adv|out($0)),prep|in(det:art|a($2,n|minute($2)),$0)),$0)),$0),adj|okay($0))
example_end

Sent: Adam would you like to draw on a paper cup ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(v|draw(pro:per|you,$1),prep|on(det:art|a($2,and_comp(n|paper($2),n|cup($2))),$1)),$0),$0))
example_end

Sent: no you can 't draw if you put water in the cup .
Sem: lambda $0_{ev}.and(not(conj|if(and(v|put-zero(pro:per|you,lambda $1_{e}.n|water($1),$0),prep|in(det:art|the($2,n|cup($2)),$0)),mod|can(v|draw(pro:per|you,$0),$0)),$0),co|no($0))
example_end

Sent: what kind of water ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|water($2))))
example_end

Sent: did you draw ?
Sem: lambda $0_{ev}.Q(v|do-past(v|draw(pro:per|you,$0),$0))
example_end

Sent: what did you draw on the cup ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|draw(pro:per|you,$1,$0),prep|on(det:art|the($2,n|cup($2)),$0)),$0)
example_end

Sent: what 's carby ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.chi|carby($2),$0)
example_end

Sent: it 's what ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: what do you need ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|need(pro:per|you,$1,$0),$0)
example_end

Sent: bring your cup and I 'll think about giving you some .
Sem: lambda $0_{ev}.coord|and(mod|~will(v|think(pro:sub|i,lambda $1_{ev}.and(part|give-presp(pro:sub|i,pro:per|you,$1),adv|about($1)),$0),$0),v|bring(you,det:poss|your($2,n|cup($2)),$0))
example_end

Sent: you stay out there .
Sem: lambda $0_{ev}.and(n|stay(pro:per|you,$0),adv|out(adv|there($0)))
example_end

Sent: it wasn 't dancing .
Sem: lambda $0_{ev}.not(aux|be(part|dance-presp(pro:per|it,$0),$0),$0)
example_end

Sent: your tail hurts .
Sem: lambda $0_{ev}.v|hurt-3s(det:poss|your($1,n|tail($1)),$0)
example_end

Sent: your tail ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n|tail($1),$0))
example_end

Sent: where 's your tail ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|tail($1)),$0),$2($0))
example_end

Sent: in your ear ?
Sem: Q(prep|in(det:poss|your($0,n|ear($0))))
example_end

Sent: where does it hurt ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|hurt-zero(pro:per|it,$0),$1($0)),$0)
example_end

Sent: that 's no tail .
Sem: lambda $0_{ev}.not(n|tail(pro:dem|that,$0),$0)
example_end

Sent: a piece of string in your .
Sem: det:art|a($0,att(n|piece($0),prep|of(lambda $1_{e}.att(n|string($1),prep|in(det:poss|your)))))
example_end

Sent: airplane shoot who ?
Sem: lambda $2_{e}.lambda $0_{ev}.n|shoot(lambda $1_{e}.n|airplane($1),$2,$0)
example_end

Sent: I see you did .
Sem: lambda $0_{ev}.v|see(pro:sub|i,lambda $1_{ev}.v|do-past(pro:per|you,$1),$0)
example_end

Sent: you spilled a lot didn 't you ?
Sem: lambda $0_{ev}.Q(and(v|spill-past(pro:per|you,det:art|a($1,n|lot($1)),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: I don 't think there are any .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: I have plenty .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,$0),adv|plenty($0))
example_end

Sent: you scoot .
Sem: lambda $0_{ev}.v|scoot(pro:per|you,$0)
example_end

Sent: you 're tasting it ?
Sem: lambda $0_{ev}.Q(aux|~be(part|taste-presp(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: d you like it ?
Sem: lambda $0_{ev}.Q(mod|do(v|like(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: I think you broke it .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|break-past(pro:per|you,pro:per|it,$1),$0)
example_end

Sent: I don 't know why you broke it .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|break-past(pro:per|you,pro:per|it,$1),adv:int|why($1)),$0),$0),$0)
example_end

Sent: what about the lion Adam ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|lion($0))))
example_end

Sent: and the lion went away ?
Sem: lambda $0_{ev}.Q(and(v|go-past(det:art|the($1,n|lion($1)),$0),adv|away($0)))
example_end

Sent: Adam I think you 're missing your mouth .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(part|miss-presp(pro:per|you,det:poss|your($2,n|mouth($2)),$1),$1),$0)
example_end

Sent: look at your shirt ?
Sem: lambda $0_{ev}.Q(and(cop|look(you,$0),prep|at(det:poss|your($1,n|shirt($1)),$0)))
example_end

Sent: does it tickle ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|tickle(pro:per|it,$0),$0))
example_end

Sent: what color was the lion ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|lion($2)),n|color(det:art|the($2,n|lion($2)),$0))
example_end

Sent: a blue lion .
Sem: det:art|a($0,and(adj|blue($0),n|lion($0)))
example_end

Sent: blue like this ?
Sem: lambda $0_{e}.adj|blue($0)
example_end

Sent: like this or like this ?
Sem: Q(prep|like(coord|or(pro:dem|this,pro:dem|this)))
example_end

Sent: where are you Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(pro:per|you,$0),$1($0))
example_end

Sent: what did we say about the light ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|say(pro:sub|we,$1,$0),prep|about(det:art|the($2,n|light($2)),$0)),$0)
example_end

Sent: I just took a nap before I came .
Sem: lambda $0_{ev}.conj|before(v|come-past(pro:sub|i,$0),and(v|take-past(pro:sub|i,det:art|a($1,n|nap($1)),$0),adv|just($0)))
example_end

Sent: took a nap just like Adam .
Sem: lambda $0_{ev}.and(v|take-past(you,det:art|a($1,n|nap($1)),$0),co|like(att(n:prop|adam,lambda $2_{e}.adj|just($2)),$0))
example_end

Sent: I don 't know that song Adam .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,pro:dem|that($1,n|song($1)),$0),$0),$0)
example_end

Sent: you sing it .
Sem: lambda $0_{ev}.v|sing(pro:per|you,pro:per|it,$0)
example_end

Sent: you sing it for her .
Sem: lambda $0_{ev}.and(v|sing(pro:per|you,pro:per|it,$0),prep|for(pro:obj|her,$0))
example_end

Sent: well they 're over there behind the door .
Sem: lambda $0_{ev}.and(and(and(aux|~be(pro:sub|they,$0),adv|over(adv|there($0))),prep|behind(det:art|the($1,n|door($1)),$0)),co|well($0))
example_end

Sent: it 's in your bed isn 't it ?
Sem: lambda $0_{ev}.Q(and(and(aux|~be(pro:per|it,$0),prep|in(det:poss|your($1,n|bed($1)),$0)),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: what that piggie ?
Sem: and(pro:int|what,pro:dem|that($0,n|pig-dim($0)))
example_end

Sent: are you very tired ?
Sem: lambda $0_{ev}.Q(adv|very(part|tire-pastp(pro:per|you,$0)))
example_end

Sent: when you went down to the Boston_Common ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(and(v|go-past(pro:per|you,$0),$1($0)),adv|down($0)),prep|to(det:art|the($2,n:prop|boston_common($2)),$0))
example_end

Sent: where did you see pigs ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,lambda $1_{e}.n|pig-pl($1),$0),$2($0)),$0)
example_end

Sent: look like moto scooter .
Sem: lambda $0_{ev}.and(cop|look(you,$0),conj|like(lambda $1_{e}.and_comp(n|motor($1),n|scooter($1)),$0))
example_end

Sent: a motor scooter ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|motor($1),n|scooter($1)),$0))
example_end

Sent: another squirrel and what else ?
Sem: lambda $0_{e}.Q(coord|and(qn|another($1,n|squirrel($1)),post|else(pro:int|what),$0))
example_end

Sent: oh and what else ?
Sem: post|else(pro:int|what)
example_end

Sent: what about the mirrors ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|mirror-pl($0))))
example_end

Sent: cows yes .
Sem: lambda $0_{ev}.and(n|cow-pl($0),co|yes($0))
example_end

Sent: well don 't put your knees down there on the bench .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|put-zero(you,det:poss|your($1,n|knee-pl($1)),$0),adv|down(adv|there($0))),prep|on(det:art|the($2,n|bench($2)),$0)),$0),$0),co|well($0))
example_end

Sent: well come here and let me see .
Sem: lambda $0_{ev}.and(coord|and(v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,$1),$0),and(v|come(you,$0),adv|here($0))),co|well($0))
example_end

Sent: you just rubbed on the bench .
Sem: lambda $0_{ev}.and(and(part|rub-pastp(pro:per|you,$0),adv|just($0)),prep|on(det:art|the($1,n|bench($1)),$0))
example_end

Sent: sometimes it hurts to do that .
Sem: lambda $0_{ev}.and(v|hurt-3s(pro:per|it,lambda $1_{ev}.v|do(pro:per|it,pro:dem|that,$1),$0),adv|sometimes($0))
example_end

Sent: sleep in the chair there .
Sem: lambda $0_{ev}.and(and(n|sleep(you,$0),prep|in(det:art|the($1,n|chair($1)),$0)),adv|there($0))
example_end

Sent: no I thought you were sleeping .
Sem: lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|sleep-presp(pro:per|you,$1),$1),$0),co|no($0))
example_end

Sent: aren 't you sleeping ?
Sem: lambda $0_{ev}.Q(not(aux|be(part|sleep-presp(pro:per|you,$0),$0),$0))
example_end

Sent: what happened to your shirt ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|shirt($2)),$0))
example_end

Sent: you got some chocolate on it didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|get-past(pro:per|you,qn|some($1,n|chocolate($1)),$0),prep|on(pro:per|it,$0)),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: because you spilled it .
Sem: lambda $0_{ev}.v|spill-past(pro:per|you,pro:per|it,$0)
example_end

Sent: because you weren 't careful .
Sem: lambda $0_{ev}.not(co|careful(pro:per|you,$0),$0)
example_end

Sent: because you were careless .
Sem: lambda $0_{ev}.adj|care-dn(pro:per|you,$0)
example_end

Sent: you were careless .
Sem: lambda $0_{ev}.adj|care-dn(pro:per|you,$0)
example_end

Sent: no I don 't want you to drink it .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|drink(pro:per|you,pro:per|it,$1),$0),$0),$0),co|no($0))
example_end

Sent: because I 'm going to drink it .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|i,lambda $1_{ev}.v|drink(pro:sub|i,pro:per|it,$1),$0),$0)
example_end

Sent: because it 's not good for little boys .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|good($0,$1)
example_end

Sent: yes ladies drink it .
Sem: lambda $0_{ev}.and(n|drink(lambda $1_{e}.n|lady-pl($1),pro:per|it,$0),co|yes($0))
example_end

Sent: no because you 're a little boy .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|little(pro:per|you,$0))),co|no($0))
example_end

Sent: what happened to your popcorn ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|pop+corn($2)),$0))
example_end

Sent: it fell ?
Sem: lambda $0_{ev}.Q(v|fall-past(pro:per|it,$0))
example_end

Sent: what did you do with your popcorn ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|with(det:poss|your($2,n|pop+corn($2)),$0)),$0)
example_end

Sent: did they like it ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|like(pro:sub|they,pro:per|it,$0),$0))
example_end

Sent: what about pineapple ?
Sem: att(pro:int|what,prep|about(lambda $0_{e}.n|pineapple($0)))
example_end

Sent: no Adam careful .
Sem: lambda $0_{ev}.and(co|no($0),co|careful($0))
example_end

Sent: I think it was a car .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,n|car(pro:per|it,$1)),$0)
example_end

Sent: some people like to drive like that .
Sem: lambda $0_{ev}.co|like(qn|some($1,n|person-pl($1)),lambda $2_{ev}.and(n|drive(qn|some($1,n|person-pl($1)),$2),prep|like(pro:dem|that,$2)),$0)
example_end

Sent: only hit Adam ?
Sem: lambda $0_{ev}.Q(and(n|hit(you,$0),adv|only($0)))
example_end

Sent: Mommy has_to be careful that she doesn 't get hit .
Sem: lambda $0_{ev}.pro:rel|that(not(mod|do(v|get(pro:sub|she,$0),$0),$0),mod:aux|has_to(co|careful(n:prop|mommy,$0),$0))
example_end

Sent: Adam has_to be careful that he doesn 't get hit either .
Sem: lambda $0_{ev}.pro:rel|that(not(mod|do(and(v|get(pro:sub|he,$0),adv|either($0)),$0),$0),mod:aux|has_to(co|careful(n:prop|adam,$0),$0))
example_end

Sent: because you don 't like to get hurt do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|like(pro:per|you,lambda $1_{ev}.v|get(pro:per|you,$1),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: you think you 'd like to get hurt ?
Sem: lambda $0_{ev}.Q(v|think(pro:per|you,lambda $1_{ev}.mod|~genmod(v|like(pro:per|you,lambda $2_{ev}.v|get(pro:per|you,$2),$1),$1),$0))
example_end

Sent: then perhaps you 'd have_to go to the hospital .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~genmod(and(and(and(v|go(pro:per|you,$0),adv:tem|then($0)),adv|perhaps($0)),prep|to(det:art|the($1,n|hospital($1)),$0)),$0),$0)
example_end

Sent: yes Mommy would have_to leave you there .
Sem: lambda $0_{ev}.and(mod:aux|have_to(mod|will-cond(and(v|leave(n:prop|mommy,pro:per|you,$0),adv|there($0)),$0),$0),co|yes($0))
example_end

Sent: don 't leave you ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|leave(you,pro:per|you,$0),$0),$0))
example_end

Sent: you have_to be careful when you play .
Sem: lambda $0_{ev}.conj|when(v|play(pro:per|you,$0),mod:aux|have_to(co|careful(pro:per|you,$0),$0))
example_end

Sent: well you should be careful .
Sem: lambda $0_{ev}.and(mod|should(adj|care-dn(pro:per|you,$0),$0),co|well($0))
example_end

Sent: oh yes I want you to be careful .
Sem: lambda $0_{ev}.and(and(v|want(pro:sub|i,lambda $1_{ev}.adj|care-dn(pro:per|you,$1),$0),co|oh($0)),co|yes($0))
example_end

Sent: do I want you to touch that ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|touch(pro:per|you,pro:dem|that,$1),$0),$0))
example_end

Sent: I 'm just sitting .
Sem: lambda $0_{ev}.aux|~be(and(part|sit-presp(pro:sub|i,$0),adv|just($0)),$0)
example_end

Sent: you 're rocking your baby ?
Sem: lambda $0_{ev}.Q(aux|~be(part|rock-presp(pro:per|you,det:poss|your($1,n|baby($1)),$0),$0))
example_end

Sent: Adam d you know why you like your blanket ?
Sem: lambda $0_{ev}.Q(v|do(v|know(pro:per|you,lambda $1_{ev}.and(v|like(pro:per|you,det:poss|your($2,n|blanket($2)),$1),adv:int|why($1)),$0),$0))
example_end

Sent: yes it 's blue .
Sem: lambda $0_{ev}.and(adj|blue(pro:per|it,$0),co|yes($0))
example_end

Sent: Mommy has a yellow one .
Sem: lambda $0_{ev}.v|have-3s(n:prop|mommy,det:art|a($1,att(pro:indef|one,lambda $2_{e}.n|yellow($2),$1)),$0)
example_end

Sent: she has a blue one too .
Sem: lambda $0_{ev}.and(v|have-3s(pro:sub|she,det:art|a($1,att(pro:indef|one,lambda $2_{e}.n|blue($2),$1)),$0),post|too($0))
example_end

Sent: what 's Urs doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(n:prop|ursula,$1,$0),$0)
example_end

Sent: she 's blue .
Sem: lambda $0_{ev}.adj|blue(pro:sub|she,$0)
example_end

Sent: she has a blue dress on .
Sem: lambda $0_{ev}.and(v|have-3s(pro:sub|she,det:art|a($1,and(adj|blue($1),n|dress($1))),$0),adv|on($0))
example_end

Sent: I have a green blanket at home .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,det:art|a($1,and(adj|green($1),n|blanket($1))),$0),prep|at(lambda $2_{e}.n|home($2),$0))
example_end

Sent: rock_a_bye Urs .
Sem: lambda $0_{ev}.co|rock_a_bye($0)
example_end

Sent: where 's the moon ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|moon($1)),$0),$2($0))
example_end

Sent: come on just a little more .
Sem: lambda $0_{ev}.and(and(v|come(you,$0),adv|on($0)),adv|just(det:art|a($1,and(adj|little($1),pro:indef|more($1)))))
example_end

Sent: I 'm just going to sit back .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:sub|i,lambda $1_{ev}.and(v|sit(pro:sub|i,$1),adv|back($1)),$0),adv|just($0)),$0)
example_end

Sent: a squirrel .
Sem: det:art|a($0,n|squirrel($0))
example_end

Sent: well you let her see .
Sem: lambda $0_{ev}.and(v|let-zero(pro:per|you,lambda $1_{ev}.v|see(pro:obj|her,$1),$0),co|well($0))
example_end

Sent: she 's going to show you something .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|she,lambda $1_{ev}.v|show(pro:sub|she,pro:indef|something,pro:per|you,$1),$0),$0)
example_end

Sent: would you like to have this letter ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,pro:dem|this($2,n|letter($2)),$1),$0),$0))
example_end

Sent: that wasn 't screaming .
Sem: lambda $0_{ev}.not(aux|be(part|scream-presp(pro:dem|that,$0),$0),$0)
example_end

Sent: he was just crying .
Sem: lambda $0_{ev}.cop|be-past(and(part|cry-presp(pro:sub|he,$0),adv|just($0)),$0)
example_end

Sent: one for you ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,prep|for(pro:per|you),$0))
example_end

Sent: you missed somebody .
Sem: lambda $0_{ev}.v|miss-past(pro:per|you,pro:indef|somebody,$0)
example_end

Sent: did Urs get one ?
Sem: lambda $0_{ev}.Q(v|do-past(v|get(n:prop|ursula,pro:indef|one,$0),$0))
example_end

Sent: le me see .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,$1),$0)
example_end

Sent: oh you shave just like a man .
Sem: lambda $0_{ev}.and(and(v|shave(pro:per|you,$0),adv|just(prep|like(det:art|a($1,n|man($1)),$0))),co|oh($0))
example_end

Sent: a sun .
Sem: det:art|a($0,n|sun($0))
example_end

Sent: no that 's not Stripey .
Sem: lambda $0_{ev}.and(not(n:prop|stripey(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: that 's Colgate .
Sem: lambda $0_{ev}.n:prop|colgate(pro:dem|that,$0)
example_end

Sent: does it have a picture inside ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|have(pro:per|it,det:art|a($1,n|picture($1)),$0),adv|inside($0)),$0))
example_end

Sent: open it up Adam and see what 's in it .
Sem: lambda $0_{ev}.coord|and(v|see(you,lambda $1_{ev}.and(cop|~be(pro:int|what,$1),prep|in(pro:per|it,$1)),$0),and(v|open(you,pro:per|it,$0),adv|up($0)))
example_end

Sent: did you tell me what this was ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: d you know what that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: who was that little boy ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,and(adj|little($2),n|boy($2))),$0)
example_end

Sent: his name .
Sem: det:poss|his($0,n|name($0))
example_end

Sent: I know his name .
Sem: lambda $0_{ev}.v|know(pro:sub|i,det:poss|his($1,n|name($1)),$0)
example_end

Sent: that 's mine .
Sem: lambda $0_{ev}.pro:poss|mine(pro:dem|that,$0)
example_end

Sent: I 'll hold it .
Sem: lambda $0_{ev}.mod|~will(v|hold(pro:sub|i,pro:per|it,$0),$0)
example_end

Sent: is that better for you Adam ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|good-cp($0,$1)
example_end

Sent: they are hangers .
Sem: lambda $0_{ev}.n|hang-dv(pro:sub|they,$0)
example_end

Sent: d you know where that goes ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(v|go-3s(pro:dem|that,$1),adv:int|where($1)),$0),$0))
example_end

Sent: what d you do with those ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(pro:dem|those,$0)),$0)
example_end

Sent: you 've finished with those ?
Sem: lambda $0_{ev}.Q(aux|~have(and(part|finish-pastp(pro:per|you,$0),prep|with(pro:dem|those,$0)),$0))
example_end

Sent: wait wait .
Sem: lambda $0_{ev}.and(co|wait($0),co|wait($0))
example_end

Sent: no I don 't think it opens does it ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|open-3s(pro:per|it,$1),$0),$0),$0),mod|do-3s(pro:per|it,$0)),co|no($0)))
example_end

Sent: show me please .
Sem: lambda $0_{ev}.and(v|show(you,pro:obj|me,$0),co|please($0))
example_end

Sent: you have_to stand up and do it .
Sem: lambda $0_{ev}.mod:aux|have_to(and(coord|and(v|do(pro:per|you,pro:per|it,$0),v|stand(pro:per|you,$0)),adv|up($0)),$0)
example_end

Sent: maybe you can fix it .
Sem: lambda $0_{ev}.mod|can(and(v|fix(pro:per|you,pro:per|it,$0),adv|maybe($0)),$0)
example_end

Sent: can you try ?
Sem: lambda $0_{ev}.Q(mod|can(v|try(pro:per|you,$0),$0))
example_end

Sent: who 's a cowboy ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|a($0,n|cow+boy($0,$1))
example_end

Sent: d you know what it is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: come on fellow .
Sem: lambda $0_{ev}.and(v|come(you,lambda $1_{e}.n|fellow($1),$0),prep|on($0))
example_end

Sent: pick what up ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|pick(you,$1,$0),adv|up($0))
example_end

Sent: now let go .
Sem: lambda $0_{ev}.and(v|let-zero_go(you,$0),adv|now($0))
example_end

Sent: don 't hold it with you ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|hold(you,pro:per|it,$0),prep|with(pro:per|you,$0)),$0),$0))
example_end

Sent: well hold your hand way way up .
Sem: lambda $0_{ev}.and(and(v|hold(you,det:poss|your($1,n|hand($1)),$0),n|way(n|way(adv|up($0)))),co|well($0))
example_end

Sent: drop it down .
Sem: lambda $0_{ev}.and(v|drop(you,pro:per|it,$0),adv|down($0))
example_end

Sent: now pull it back up .
Sem: lambda $0_{ev}.and(and(v|pull(you,pro:per|it,$0),adv|now($0)),adv|back(adv|up($0)))
example_end

Sent: you 're dumping he was dumping trash out .
Sem: lambda $0_{ev}.aux|be-past(and(n:gerund|dump-presp(pro:sub|he,lambda $1_{e}.n|trash($1),$0),adv|out($0)),$0)
example_end

Sent: that 's your tie ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:dem|that,n|tie(pro:dem|that,$0)))
example_end

Sent: can you tie your tie ?
Sem: lambda $0_{ev}.Q(mod|can(v|tie(pro:per|you,det:poss|your($1,n|tie($1)),$0),$0))
example_end

Sent: here 's the string .
Sem: lambda $0_{ev}.and(cop|~be(det:art|the($1,n|string($1)),$0),pro:exist|here($0))
example_end

Sent: yes it is turning around .
Sem: lambda $0_{ev}.and(aux|be-3s(and(part|turn-presp(pro:per|it,$0),adv|around($0)),$0),co|yes($0))
example_end

Sent: it stopped ?
Sem: lambda $0_{ev}.Q(v|stop-past(pro:per|it,$0))
example_end

Sent: it feels a little like rubber I guess .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.and(v|feel-3s(pro:per|it,$1),co|like(lambda $2_{e}.and(det:art|a($3,adj|little($3),$2),n|rubber($2)),$1)),$0)
example_end

Sent: I think it 's all wood .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.qn|all(pro:per|it,n|wood(pro:per|it,$1)),$0)
example_end

Sent: he comes ?
Sem: lambda $0_{ev}.Q(v|come-3s(pro:sub|he,$0))
example_end

Sent: hold your arm way up .
Sem: lambda $0_{ev}.and(v|hold(you,det:poss|your($1,n|arm($1)),$0),n|way(adv|up($0)))
example_end

Sent: throw it gently ?
Sem: lambda $0_{ev}.Q(and(v|throw(you,pro:per|it,$0),adv|gentle-dadj($0)))
example_end

Sent: what 's a cardy ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|cardy($2)),$0)
example_end

Sent: in your mouth ?
Sem: Q(prep|in(det:poss|your($0,n|mouth($0))))
example_end

Sent: what 's in your mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|your($2,n|mouth($2)),$0))
example_end

Sent: I didn 't understand the word .
Sem: lambda $0_{ev}.not(mod|do(v|understand(pro:sub|i,det:art|the($1,n|word($1)),$0),$0),$0)
example_end

Sent: okay let 's go .
Sem: lambda $0_{ev}.and(v:obj|let(you,lambda $1_{ev}.v|go(pro:obj|~us,$1),$0),co|okay($0))
example_end

Sent: drop it on you ?
Sem: lambda $0_{ev}.Q(and(v|drop(you,pro:per|it,$0),prep|on(pro:per|you,$0)))
example_end

Sent: why are you putting sugar in there ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|put-presp(pro:per|you,lambda $1_{e}.n|sugar($1),$0),$2($0)),prep|in(adv|there($0))),$0)
example_end

Sent: d you want more juice ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.and(qn|more($1),n|juice($1)),$0),$0))
example_end

Sent: please cry ?
Sem: lambda $0_{ev}.Q(and(v|cry(you,$0),co|please($0)))
example_end

Sent: how can a cracker cry ?
Sem: lambda $2_{e}.lambda $0_{ev}.n|can(and(v|cry(det:art|a($1,n|cracker($1)),$0),$2($0)),$0)
example_end

Sent: crackers can 't talk .
Sem: lambda $0_{ev}.not(mod|can(v|talk(lambda $1_{e}.n|cracker-pl($1),$0),$0),$0)
example_end

Sent: you eat crackers .
Sem: lambda $0_{ev}.v|eat(pro:per|you,lambda $1_{e}.n|cracker-pl($1),$0)
example_end

Sent: how can crackers talk ?
Sem: lambda $2_{e}.lambda $0_{ev}.n|can(and(n|talk(lambda $1_{e}.n|cracker-pl($1),$0),$2($0)),$0)
example_end

Sent: can bread talk ?
Sem: lambda $0_{ev}.Q(mod|can(n|talk(lambda $1_{e}.n|bread($1),$0),$0))
example_end

Sent: can bread cry ?
Sem: lambda $0_{ev}.Q(mod|can(v|cry(lambda $1_{e}.n|bread($1),$0),$0))
example_end

Sent: what kind of juice did you have before ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|have(pro:per|you,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|juice($3)))),$0),adv|before($0)),$0)
example_end

Sent: hold your hand way up .
Sem: lambda $0_{ev}.and(v|hold(you,det:poss|your($1,n|hand($1)),$0),n|way(adv|up($0)))
example_end

Sent: he watches Miss Jean .
Sem: lambda $0_{ev}.v|watch-3s(pro:sub|he,n:prop|jean_miss,$0)
example_end

Sent: romper bomper stomper boo .
Sem: lambda $0_{e}.wplay|boo($0)
example_end

Sent: oh wheelbarrow .
Sem: lambda $0_{ev}.and(n|wheel+barrow($0),co|oh($0))
example_end

Sent: roll it ?
Sem: lambda $0_{ev}.Q(v|roll(you,pro:per|it,$0))
example_end

Sent: I 'll show you how .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|~will(and(v|show(pro:sub|i,pro:per|you,$0),$1($0)),$0)
example_end

Sent: just go around .
Sem: lambda $0_{ev}.and(and(v|go(you,$0),adv|just($0)),adv|around($0))
example_end

Sent: you have some thing to show me ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,lambda $1_{ev}.v|show(n|thing_some,pro:obj|me,$1),$0))
example_end

Sent: Adam come back .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|back($0))
example_end

Sent: oh that was very nice of you .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|nice($0,$1)
example_end

Sent: careful it got caught around the chair .
Sem: lambda $0_{ev}.and(aux|get-past(and(part|catch-pastp(pro:per|it,$0),prep|around(det:art|the($1,n|chair($1)),$0)),$0),co|careful($0))
example_end

Sent: where 's Cromer ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be(n:prop|cromer,$0),$1($0))
example_end

Sent: where did he go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:sub|he,$0),$1($0)),$0)
example_end

Sent: he went to the mountains for the summer .
Sem: lambda $0_{ev}.and(and(v|go-past(pro:sub|he,$0),prep|to(det:art|the($1,n|mountain-pl($1)),$0)),prep|for(det:art|the($2,n|summer($2)),$0))
example_end

Sent: no Cromer .
Sem: lambda $0_{ev}.and(n:prop|cromer($0),co|no($0))
example_end

Sent: are you going ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,$0),$0))
example_end

Sent: what are you drawing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(n|drawing(pro:per|you,$1,$0),$0)
example_end

Sent: what kind of helmet ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|helmet($2))))
example_end

Sent: oh you 're drawing one for me ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n|drawing(pro:per|you,att(pro:indef|one,prep|for(pro:obj|me)),$0),$0),co|oh($0)))
example_end

Sent: pen comes out ?
Sem: lambda $0_{ev}.Q(and(v|come-3s(lambda $1_{e}.n|pen($1),$0),adv|out($0)))
example_end

Sent: I 'm looking for something .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:sub|i,$0),prep|for(pro:indef|something,$0)),$0)
example_end

Sent: what happens when you brush him ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(v|brush(pro:per|you,pro:obj|him,$0),v|happen-3s($1,$0))
example_end

Sent: he rocks when you brush him ?
Sem: lambda $0_{ev}.Q(conj|when(v|brush(pro:per|you,pro:obj|him,$0),v|rock-3s(pro:sub|he,$0)))
example_end

Sent: pens are to write on paper .
Sem: lambda $0_{ev}.cop|be-pres(lambda $1_{e}.n|pen-pl($1),lambda $2_{ev}.and(v|write(lambda $3_{e}.n|pen-pl($3),$2),prep|on(lambda $4_{e}.n|paper($4),$2)),$0)
example_end

Sent: why d you need help ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|need(pro:per|you,lambda $1_{e}.co|help($1),$0),$2($0)),$0)
example_end

Sent: can 't you do it Adam ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|do(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: you can do it even if you 're big .
Sem: lambda $0_{ev}.conj|if(v|even(adj|big(pro:per|you,$0)),mod|can(v|do(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you don 't mean big .
Sem: lambda $0_{ev}.not(mod|do(adj|mean(pro:per|you,lambda $1_{ev}.adj|big(pro:per|you,$1),$0),$0),$0)
example_end

Sent: you 're big just like Mommy ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|big($0,$1)
example_end

Sent: did I wake you up ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|wake(pro:sub|i,pro:per|you,$0),adv|up($0)),$0))
example_end

Sent: oh I 'm so sorry .
Sem: lambda $0_{ev}.and(adv|so(adj|sorry(pro:sub|i,$0)),co|oh($0))
example_end

Sent: were you having a dream ?
Sem: lambda $0_{ev}.Q(cop|be-past(part|have-presp(pro:per|you,det:art|a($1,n|dream($1)),$0),$0))
example_end

Sent: you were just sleeping ?
Sem: lambda $0_{ev}.Q(aux|be-past(and(part|sleep-presp(pro:per|you,$0),adv|just($0)),$0))
example_end

Sent: don 't wake you up again .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|wake(you,pro:per|you,$0),adv|up($0)),adv|again($0)),$0),$0)
example_end

Sent: did you have a dream ?
Sem: lambda $0_{ev}.Q(v|do-past(v|have(pro:per|you,det:art|a($1,n|dream($1)),$0),$0))
example_end

Sent: what was the last work ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,and(adj|last($2),n|work($2))),$0)
example_end

Sent: I missed lots_of that .
Sem: lambda $0_{ev}.v|miss-past(pro:sub|i,qn|lots_of($1,pro:dem|that($1)),$0)
example_end

Sent: that 's right just like that .
Sem: lambda $0_{e}.lambda $1_{ev}.adv|right($0,$1)
example_end

Sent: I 'm not waking you up because you 're not sleeping .
Sem: lambda $0_{ev}.not(conj|because(not(cop|~be(part|sleep-presp(pro:per|you,$0),$0),$0),cop|~be(and(part|wake-presp(pro:sub|i,pro:per|you,$0),adv|up($0)),$0)),$0)
example_end

Sent: wake you up ?
Sem: lambda $0_{ev}.Q(and(v|wake(you,pro:per|you,$0),adv|up($0)))
example_end

Sent: pull it up again .
Sem: lambda $0_{ev}.and(and(v|pull(you,pro:per|it,$0),adv|up($0)),adv|again($0))
example_end

Sent: it 's turning .
Sem: lambda $0_{ev}.aux|~be(part|turn-presp(pro:per|it,$0),$0)
example_end

Sent: tie the string ?
Sem: lambda $0_{ev}.Q(v|tie(you,det:art|the($1,n|string($1)),$0))
example_end

Sent: why are you sitting on it ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|sit-presp(pro:per|you,$0),$1($0)),prep|on(pro:per|it,$0)),$0)
example_end

Sent: because Shadow_Gay hugged you ?
Sem: lambda $0_{ev}.Q(v|hug-past(n:prop|shadow_gay,pro:per|you,$0))
example_end

Sent: don 't you think it would hurt if a horse hugged you ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.conj|if(v|hug-past(det:art|a($2,n|horse($2)),pro:per|you,$1),mod|will-cond(part|hurt-pastp(you,$1),$1)),$0),$0),$0))
example_end

Sent: d you know what pines are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: the yoyo ran away from you .
Sem: lambda $0_{ev}.and(and(v|run-past(det:art|the($1,n|yoyo($1)),$0),adv|away($0)),prep|from(pro:per|you,$0))
example_end

Sent: talk to Miss Jean .
Sem: lambda $0_{ev}.and(n|talk(you,$0),prep|to(n:prop|jean_miss,$0))
example_end

Sent: why did I put it there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|put-zero(pro:sub|i,pro:per|it,$0),$1($0)),adv|there($0)),$0)
example_end

Sent: because I thought you were sleeping .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|sleep-presp(pro:per|you,$1),$1),$0)
example_end

Sent: yes it goes up .
Sem: lambda $0_{ev}.and(and(v|go-3s(pro:per|it,$0),adv|up($0)),co|yes($0))
example_end

Sent: then what does it do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|do(pro:per|it,$1,$0),adv:tem|then($0)),$0)
example_end

Sent: no Paul Douglas didn 't fall he knocked over the pan .
Sem: lambda $0_{ev}.and(not(and(mod|do(v|fall(n:prop|douglas_paul,$0),$0),v|knock-past_over(pro:sub|he,det:art|the($1,n|pan($1)),$0)),$0),co|no($0))
example_end

Sent: what happened in the kitchen ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|in(det:art|the($2,n|kitchen($2)),$0))
example_end

Sent: in the holes ?
Sem: Q(prep|in(det:art|the($0,n|hole-pl($0))))
example_end

Sent: what kind of holes ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|hole-pl($2))))
example_end

Sent: your holes in the kitchen ?
Sem: lambda $0_{e}.Q(det:poss|your($1,att(n|hole-pl($1),prep|in(det:art|the($2,n|kitchen($2)))),$0))
example_end

Sent: I don 't think it 's hard enough .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.adv|enough(adj|hard(pro:per|it,$1)),$0),$0),$0)
example_end

Sent: if I had knocked you off you would have fallen on the floor .
Sem: lambda $0_{ev}.aux|have(mod|will-cond(conj|if(aux|have-past(and(part|knock-pastp(pro:sub|i,pro:per|you,$0),prep|off($0)),$0),and(part|fall-pastp(pro:per|you,$0),prep|on(det:art|the($1,n|floor($1)),$0))),$0),$0)
example_end

Sent: but you 're still there .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|you,$0),adv|still(adv|there($0)))
example_end

Sent: well are you ready to go to bed ?
Sem: lambda $0_{ev}.Q(and(adj|ready(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),prep|to(lambda $2_{e}.n|bed($2),$1)),$0),co|well($0)))
example_end

Sent: why are you resting like that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|rest-presp(pro:per|you,$0),$1($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: Adam do you know what this is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: try it .
Sem: lambda $0_{ev}.v|try(you,pro:per|it,$0)
example_end

Sent: because they 're uneven ?
Sem: lambda $0_{ev}.Q(adj|even(pro:sub|they,$0))
example_end

Sent: no it doesn 't push .
Sem: lambda $0_{ev}.and(not(mod|do(v|push(pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: you try it .
Sem: lambda $0_{ev}.v|try(pro:per|you,pro:per|it,$0)
example_end

Sent: Adam can you see with your nose ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|see(pro:per|you,$0),prep|with(det:poss|your($1,n|nose($1)),$0)),$0))
example_end

Sent: I see something on here .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:indef|something,$0),prep|on(adv|here($0)))
example_end

Sent: d you see any thing ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,n|thing_any,$0),$0))
example_end

Sent: yes what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|yes($0))
example_end

Sent: well that was an a .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n:let|a(pro:dem|that,$0)),co|well($0))
example_end

Sent: I am not waking you up because you are not sleeping .
Sem: lambda $0_{ev}.not(conj|because(not(cop|be-pres(part|sleep-presp(pro:per|you,$0),$0),$0),aux|be-1s(and(part|wake-presp(pro:sub|i,pro:per|you,$0),adv|up($0)),$0)),$0)
example_end

Sent: you feel better .
Sem: lambda $0_{ev}.v|feel(pro:per|you,lambda $1_{ev}.adj|good-cp(pro:per|you,$1),$0)
example_end

Sent: I 'll see what else is in here .
Sem: lambda $0_{ev}.mod|~will(v|see(pro:sub|i,lambda $1_{ev}.and(aux|be-3s(post|else(pro:int|what),$1),adv|in(adv|here($1))),$0),$0)
example_end

Sent: oh there 's something .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:indef|something,$0),pro:exist|there($0)),co|oh($0))
example_end

Sent: another one .
Sem: qn|another($0,pro:indef|one($0))
example_end

Sent: I don 't know if I have another one .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|have(pro:sub|i,qn|another($2,pro:indef|one($2)),$1),$0),$0),$0)
example_end

Sent: oh the other one .
Sem: lambda $0_{ev}.and(det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1),$0),co|oh($0))
example_end

Sent: you gave him one before .
Sem: lambda $0_{ev}.and(v|give-past(pro:per|you,pro:indef|one,pro:obj|him,$0),adv|before($0))
example_end

Sent: you find it .
Sem: lambda $0_{ev}.v|find(pro:per|you,pro:per|it,$0)
example_end

Sent: it 's a leaf ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|leaf(pro:per|it,$0)))
example_end

Sent: no that 's not a leaf .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|leaf(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: you look at it .
Sem: lambda $0_{ev}.and(cop|look(pro:per|you,$0),prep|at(pro:per|it,$0))
example_end

Sent: David 's feather .
Sem: n:prop|david's($0,n|feather($0))
example_end

Sent: d you want me to put this on you ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:obj|me,pro:dem|this,$1),prep|on(pro:per|you,$1)),$0),$0))
example_end

Sent: you fell and broke your head .
Sem: lambda $0_{ev}.coord|and(v|break-past(pro:per|you,det:poss|your($1,n|head($1)),$0),v|fall-past(pro:per|you,$0))
example_end

Sent: was it weeks ?
Sem: lambda $0_{ev}.Q(n|week-pl(pro:per|it,$0))
example_end

Sent: like a boy .
Sem: prep|like(det:art|a($0,n|boy($0)))
example_end

Sent: no you put it on .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|on($0)),co|no($0))
example_end

Sent: you 're going to show it to her ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|show(pro:per|you,pro:per|it,$1),prep|to(pro:obj|her,$1)),$0),$0))
example_end

Sent: you 're just thinking ?
Sem: lambda $0_{ev}.Q(cop|~be(and(part|think-presp(pro:per|you,$0),adv|just($0)),$0))
example_end

Sent: about the leaf ?
Sem: Q(prep|about(det:art|the($0,n|leaf($0))))
example_end

Sent: that 's not a leaf that 's a feather .
Sem: lambda $0_{ev}.not(and(det:art|a(pro:dem|that,n|leaf(pro:dem|that,$0)),det:art|a(pro:rel|that,n|feather(pro:rel|that,$0))),$0)
example_end

Sent: why would you put it on the door ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|on(det:art|the($2,n|door($2)),$0)),$0)
example_end

Sent: no she doesn 't want to blow a balloon .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|she,lambda $1_{ev}.v|blow(pro:sub|she,det:art|a($2,n|balloon($2)),$1),$0),$0),$0),co|no($0))
example_end

Sent: it has knots in it so it 's hard to blow it .
Sem: lambda $0_{ev}.adv|so(adj|hard(pro:per|it,lambda $1_{ev}.v|blow(pro:per|it,pro:per|it,$1),$0),and(aux|have-3s(pro:per|it,lambda $2_{e}.n|knot-pl($2),$0),prep|in(pro:per|it,$0)))
example_end

Sent: I 'll try .
Sem: lambda $0_{ev}.mod|~will(v|try(pro:sub|i,$0),$0)
example_end

Sent: well she 's trying .
Sem: lambda $0_{ev}.and(aux|~be(part|try-presp(pro:sub|she,$0),$0),co|well($0))
example_end

Sent: she can 't blow it .
Sem: lambda $0_{ev}.not(mod|can(v|blow(pro:sub|she,pro:per|it,$0),$0),$0)
example_end

Sent: there 's a little air in there see ?
Sem: lambda $0_{ev}.Q(and(and(cop|~be(det:art|a($1,and(adj|little($1),n|air($1))),$0),prep|in(adv|there($0))),v|see(you,$0)))
example_end

Sent: you cannot  blow it when there 's a knot see ?
Sem: lambda $0_{ev}.Q(and(not(conj|when(cop|~be(det:art|a($1,n|knot($1)),$0),mod|can(v|blow(pro:per|you,pro:per|it,$0),$0)),$0),v|see(you,$0)))
example_end

Sent: what d you think that says ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|say-3s(pro:rel|that,pro:int|what,$1),$0),$0))
example_end

Sent: that says puppy ?
Sem: lambda $0_{ev}.Q(v|say-3s(pro:rel|that,lambda $1_{e}.n|puppy($1),$0))
example_end

Sent: what d you think they 're having ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.aux|~be(part|have-presp(pro:sub|they,pro:int|what,$1),$1),$0),$0))
example_end

Sent: what kind of cake ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|cake($2))))
example_end

Sent: it 's a birthday cake .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and_comp(n|birth+day(pro:per|it,$0),n|cake(pro:per|it,$0)))
example_end

Sent: oh that is you ?
Sem: lambda $0_{ev}.Q(and(pro:per|you(pro:rel|that,$0),co|oh($0)))
example_end

Sent: Adam am I Ursula Cromer ?
Sem: lambda $0_{ev}.Q(n:prop|cromer_ursula(pro:sub|i,$0))
example_end

Sent: Robin made that .
Sem: lambda $0_{ev}.v|make-past(n:prop|robin,pro:dem|that,$0)
example_end

Sent: we asked and he said people .
Sem: lambda $0_{ev}.coord|and(v|say-past(pro:sub|he,lambda $1_{e}.n|person-pl($1),$0),v|ask-past(pro:sub|we,$0))
example_end

Sent: I didn 't think he knew flowers he said roses .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|know-past(pro:sub|he,lambda $2_{e}.n|flower-pl($2),$1),$0),$0),$0),v|say-past(pro:sub|he,lambda $3_{e}.n|rose-pl($3),$0))
example_end

Sent: we asked what are these ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|ask-past($1,$0,$2)
example_end

Sent: and he said flowers .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{e}.n|flower-pl($1),$0)
example_end

Sent: where did you go yesterday Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|go(pro:per|you,$0),$1($0)),adv:tem|yesterday($0)),$0)
example_end

Sent: and what about inside the church ?
Sem: att(pro:int|what_about,prep|inside(det:art|the($0,n|church($0))))
example_end

Sent: I don 't know why do you say that ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.mod|do(and(v|say(pro:per|you,pro:dem|that,$1),adv:int|why($1)),$1),$0),$0),$0))
example_end

Sent: what 're you looking ?
Sem: lambda $0_{ev}.part|look-presp(pro:per|you,$0)
example_end

Sent: that 's a better one ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|good-cp(pro:dem|that,$0))))
example_end

Sent: cat and the mouse .
Sem: coord|and(lambda $0_{e}.n|cat($0),det:art|the($1,n|mouse($1)))
example_end

Sent: yes scout .
Sem: lambda $0_{ev}.and(n|scout($0),co|yes($0))
example_end

Sent: close the zipper .
Sem: lambda $0_{ev}.v|close(you,det:art|the($1,n|zip-dv($1)),$0)
example_end

Sent: what d you think that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: no it 's not a bottle .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:per|it,n|bottle(pro:per|it,$0)),$0),co|no($0))
example_end

Sent: it 's lipstick .
Sem: lambda $0_{ev}.n|lipstick(pro:per|it,$0)
example_end

Sent: just look .
Sem: lambda $0_{ev}.and(cop|look(you,$0),adv|just($0))
example_end

Sent: no little boys don 't wear lipstick .
Sem: lambda $0_{ev}.and(not(mod|do(v|wear(lambda $1_{e}.and(adj|little($1),n|boy-pl($1)),lambda $2_{e}.n|lipstick($2),$0),$0),$0),qn|no($0))
example_end

Sent: only ladies .
Sem: adv|only(lambda $0_{e}.n|lady-pl($0))
example_end

Sent: well because I know .
Sem: lambda $0_{ev}.and(v|know(pro:sub|i,$0),co|well($0))
example_end

Sent: you know ?
Sem: lambda $0_{ev}.Q(v|know(pro:per|you,$0))
example_end

Sent: I cannot  get the knot out_of this balloon .
Sem: lambda $0_{ev}.not(mod|can(and(v|get(pro:sub|i,det:art|the($1,n|knot($1)),$0),prep|out_of(pro:dem|this($2,n|balloon($2)),$0)),$0),$0)
example_end

Sent: if you think you can .
Sem: lambda $0_{ev}.v|think(pro:per|you,$0)
example_end

Sent: you 're blowing the knot out ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|blow-presp(pro:per|you,det:art|the($1,v|knot($1)),$0),adv|out($0)),$0))
example_end

Sent: that 's a banjo ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|banjo(pro:dem|that,$0)))
example_end

Sent: it 's a feather .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|feather(pro:per|it,$0))
example_end

Sent: yes I see it .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:per|it,$0),co|yes($0))
example_end

Sent: what d you think that feather came from ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|come-past(pro:dem|that($2,n|feather($2)),$1),prep|from(pro:int|what,$1)),$0),$0))
example_end

Sent: good morning friend .
Sem: lambda $0_{e}.and(adj|good($0),n|morning($0))
example_end

Sent: for Paul ?
Sem: Q(conj|for(n:prop|paul))
example_end

Sent: I don 't think Paul can have any money .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(v|have(n:prop|paul,qn|any($2,n|money($2)),$1),$1),$0),$0),$0)
example_end

Sent: you were ?
Sem: lambda $0_{ev}.Q(cop|be-past(pro:per|you,$0))
example_end

Sent: why were you crying ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-past(and(part|cry-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: well move and let Urs sit down .
Sem: lambda $0_{ev}.and(coord|and(v|let-zero(you,lambda $1_{ev}.and(v|sit(n:prop|ursula,$1),adv|down($1)),$0),n|move(you,$0)),co|well($0))
example_end

Sent: I don 't think I have guns .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|have(pro:sub|i,lambda $2_{e}.n|gun-pl($2),$1),$0),$0),$0)
example_end

Sent: what shall we play ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|play(pro:sub|we,$1,$0),$0)
example_end

Sent: new game .
Sem: lambda $0_{e}.and(adj|new($0),n|game($0))
example_end

Sent: in my bag ?
Sem: Q(prep|in(det:poss|my($0,n|bag($0))))
example_end

Sent: don 't frighten you .
Sem: lambda $0_{ev}.not(mod|do(v|frighten(you,pro:per|you,$0),$0),$0)
example_end

Sent: does it have a driver ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(pro:per|it,det:art|a($1,n|drive-dv($1)),$0),$0))
example_end

Sent: show it to me .
Sem: lambda $0_{ev}.and(v|show(you,pro:per|it,$0),prep|to(pro:obj|me,$0))
example_end

Sent: don 't take it apart .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(you,pro:per|it,$0),adv|apart($0)),$0),$0)
example_end

Sent: is it a happy face or a sad face ?
Sem: lambda $0_{ev}.Q(coord|or(det:art|a(pro:per|it,and(n|face(pro:per|it,$0),adj|happy(pro:per|it,$0))),det:art|a(pro:per|it,and(n|face(pro:per|it,$0),adj|sad(pro:per|it,$0)))))
example_end

Sent: I think he said anything .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,pro:indef|anything,$1),$0)
example_end

Sent: it doesn 't look like anything .
Sem: lambda $0_{ev}.not(mod|do(and(cop|look(pro:per|it,$0),conj|like(pro:indef|anything,$0)),$0),$0)
example_end

Sent: I think it looks like something .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(cop|look-3s(pro:per|it,$1),conj|like(lambda $2_{e}.pro:indef|something($2),$1)),$0)
example_end

Sent: let 's see Adam .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|see(pro:obj|~us,$1),$0)
example_end

Sent: I don 't think I 've ever seen anything like that .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(and(part|see-pastp(pro:sub|i,pro:indef|anything,$1),adv|ever($1)),prep|like(pro:dem|that,$1)),$1),$0),$0),$0)
example_end

Sent: don 't you remember ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|remember(pro:per|you,$0),$0),$0))
example_end

Sent: nobody 's there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(pro:indef|nobody,$0),adv|there($0)))
example_end

Sent: what d you hear ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|hear(pro:per|you,$1,$0),$0)
example_end

Sent: oh what d you think that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: are you too big ?
Sem: lambda $0_{ev}.Q(adv|too(adj|big(pro:per|you,$0)))
example_end

Sent: who can wear it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(v|wear($1,pro:per|it,$0),$0)
example_end

Sent: just one minute now .
Sem: adv|now(adv|just(lambda $0_{e}.det:num|one(n|minute($0))))
example_end

Sent: well you turn it up here see ?
Sem: lambda $0_{ev}.Q(and(and(and(and(v|turn(pro:per|you,pro:per|it,$0),adv|up($0)),adv|here($0)),v|see(you,$0)),co|well($0)))
example_end

Sent: it needs another battery .
Sem: lambda $0_{ev}.v|need-3s(pro:per|it,qn|another($1,n|battery($1)),$0)
example_end

Sent: alright now look .
Sem: lambda $0_{ev}.and(and(cop|look(you,$0),adv|now($0)),co|alright($0))
example_end

Sent: leave it off .
Sem: lambda $0_{ev}.and(v|leave(you,pro:per|it,$0),adv|off($0))
example_end

Sent: and come and turn this one on .
Sem: lambda $0_{ev}.coord|and(and(v|turn(you,pro:dem|this($1,pro:indef|one($1)),$0),adv|on($0)),v|come(you,$0))
example_end

Sent: that 's fun .
Sem: lambda $0_{ev}.adj|fun(pro:dem|that,$0)
example_end

Sent: it 's pretty ?
Sem: lambda $0_{ev}.Q(adj|pretty(pro:per|it,$0))
example_end

Sent: you 're typing .
Sem: lambda $0_{ev}.aux|~be(part|type-presp(pro:per|you,$0),$0)
example_end

Sent: put your other battery in .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:poss|your($1,and(qn|other($1),n|battery($1))),$0),adv|in($0))
example_end

Sent: the other way Adam .
Sem: det:art|the($0,and(qn|other($0),n|way($0)))
example_end

Sent: one way ?
Sem: lambda $0_{e}.Q(det:num|one(n|way($0)))
example_end

Sent: wrong way .
Sem: lambda $0_{e}.and(adj|wrong($0),n|way($0))
example_end

Sent: which wheel ?
Sem: lambda $0_{e}.$0($1,n|wheel($1))
example_end

Sent: don 't turn it over there .
Sem: lambda $0_{ev}.not(mod|do(and(v|turn(you,pro:per|it,$0),adv|over(adv|there($0))),$0),$0)
example_end

Sent: okay try it now .
Sem: lambda $0_{ev}.and(and(v|try(you,pro:per|it,$0),adv|now($0)),co|okay($0))
example_end

Sent: what is this Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: moon on it ?
Sem: lambda $0_{e}.Q(att(n|moon($0),prep|on(pro:per|it)))
example_end

Sent: oh you want to keep those for you .
Sem: lambda $0_{ev}.and(v|want(pro:per|you,lambda $1_{ev}.and(v|keep(pro:per|you,pro:dem|those,$1),prep|for(pro:per|you,$1)),$0),co|oh($0))
example_end

Sent: what 're you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: doing nothing ?
Sem: lambda $0_{ev}.Q(part|do-presp(you,pro:indef|nothing,$0))
example_end

Sent: what 're you doing now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: you 're checking it ?
Sem: lambda $0_{ev}.Q(aux|~be(part|check-presp(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: no if you put it over too far the battery will fall out .
Sem: lambda $0_{ev}.and(mod|will(conj|if(and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|over($0)),adv|too(adv|far($0))),and(v|fall(det:art|the($1,n|battery($1)),$0),adv|out($0))),$0),co|no($0))
example_end

Sent: let me what ?
Sem: lambda $0_{ev}.v|let-zero(you,pro:obj|me,$0)
example_end

Sent: where are cowboys ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(aux|be-pres(lambda $1_{e}.n|cow+boy($1),$0),$2($0))
example_end

Sent: what are cowboys doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(lambda $1_{e}.n|cow+boy($1),$2,$0),$0)
example_end

Sent: they 're shooting ?
Sem: lambda $0_{ev}.Q(aux|~be(part|shoot-presp(pro:sub|they,$0),$0))
example_end

Sent: Shadow_Gay is gone ?
Sem: lambda $0_{ev}.Q(part|go-pastp(n:prop|shadow_gay,$0))
example_end

Sent: oh he climbed out .
Sem: lambda $0_{ev}.and(and(v|climb-past(pro:sub|he,$0),adv|out($0)),co|oh($0))
example_end

Sent: who 's making that noise ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|make-presp($1,pro:dem|that($2,n|noise($2)),$0),$0)
example_end

Sent: how are you doing that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: water for me ?
Sem: lambda $0_{e}.Q(att(n|water($0),prep|for(pro:obj|me)))
example_end

Sent: I 'll turn it on .
Sem: lambda $0_{ev}.mod|~will(and(v|turn(pro:sub|i,pro:per|it,$0),adv|on($0)),$0)
example_end

Sent: it 's too loud .
Sem: lambda $0_{ev}.adv|too(adj|loud(pro:per|it,$0))
example_end

Sent: let 's turn it on here now .
Sem: lambda $0_{ev}.and(v:obj|let(you,lambda $1_{ev}.and(and(v|turn(pro:obj|~us,pro:per|it,$1),prep|on($1)),adv|here($1)),$0),adv|now($0))
example_end

Sent: it 's just too noisy .
Sem: lambda $0_{ev}.adv|too(adj|just(adj|noise-dn(pro:per|it,$0)))
example_end

Sent: turn the battery on ?
Sem: lambda $0_{ev}.Q(and(v|turn(you,det:art|the($1,n|battery($1)),$0),adv|on($0)))
example_end

Sent: what sounds like music ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(n|sound-pl($1,$0),co|like(lambda $2_{e}.n|music($2),$0))
example_end

Sent: I do ?
Sem: lambda $0_{ev}.Q(v|do(pro:sub|i,$0))
example_end

Sent: baby Momma .
Sem: lambda $0_{e}.and_comp(n|baby($0),n:prop|momma($0))
example_end

Sent: a word who 's a baby ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|a($0,n|baby($0,$1))
example_end

Sent: did you see piggies ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,lambda $1_{e}.n|pig-dim($1),$0),$0))
example_end

Sent: did you see bears ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,lambda $1_{e}.n|bear-pl($1),$0),$0))
example_end

Sent: the zoo ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|zoo($1),$0))
example_end

Sent: something frightened you ?
Sem: lambda $0_{ev}.Q(v|frighten-past(pro:indef|something,pro:per|you,$0))
example_end

Sent: what d you think it was ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: you think a tiger ?
Sem: lambda $0_{ev}.Q(v|think(pro:per|you,det:art|a($1,n|tiger($1)),$0))
example_end

Sent: what else did you see at the zoo ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,$1,$0),prep|at(det:art|the($2,n|zoo($2)),$0)),$0)
example_end

Sent: can you tell her ?
Sem: lambda $0_{ev}.Q(mod|can(v|tell(pro:per|you,pro:obj|her,$0),$0))
example_end

Sent: yes elephants walking .
Sem: lambda $0_{ev}.and(part|walk-presp(lambda $1_{e}.n|elephant-pl($1),$0),co|yes($0))
example_end

Sent: because they like to walk .
Sem: lambda $0_{ev}.v|like(pro:sub|they,lambda $1_{ev}.v|walk(pro:sub|they,$1),$0)
example_end

Sent: well I didn 't see any monkeys .
Sem: lambda $0_{ev}.and(not(mod|do(v|see(pro:sub|i,qn|any($1,n|monkey-pl($1)),$0),$0),$0),co|well($0))
example_end

Sent: did you see the monkeys ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|monkey-pl($1)),$0),$0))
example_end

Sent: I didn 't think you did .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: the big one .
Sem: det:art|the($0,and(adj|big($0),pro:indef|one($0)))
example_end

Sent: just looking .
Sem: lambda $0_{ev}.and(part|look-presp(you,$0),adv|just($0))
example_end

Sent: they have a black leopard you can see spots under the black .
Sem: lambda $0_{ev}.and(v|have(pro:sub|they,det:art|a($1,and(n|black($1),n|leopard($1))),$0),mod|can(v|see(pro:per|you,lambda $2_{e}.att(n|spot-pl($2),prep|under(det:art|the($3,n|black($3)))),$0),$0))
example_end

Sent: or the other one ?
Sem: lambda $0_{e}.Q(det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1),$0))
example_end

Sent: I don 't think we saw any monkeys did we ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|see-past(pro:sub|we,qn|any($2,n|monkey-pl($2)),$1),$0),$0),$0),mod|do-past(pro:sub|we,$0)))
example_end

Sent: what are that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: those are monkeys .
Sem: lambda $0_{ev}.n|monkey-pl(pro:dem|those,$0)
example_end

Sent: you didn 't see the leopard .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:per|you,det:art|the($1,n|leopard($1)),$0),$0),$0)
example_end

Sent: d you remember ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,$0),$0))
example_end

Sent: why don 't you leave it on the table ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|leave(pro:per|you,pro:per|it,$0),$1($0)),prep|on(det:art|the($2,n|table($2)),$0)),$0),$0)
example_end

Sent: why are you crying ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|cry-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: because Mommy hugged you ?
Sem: lambda $0_{ev}.Q(v|hug-past(n:prop|mommy,pro:per|you,$0))
example_end

Sent: why d you think Mommy hugged you ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|think(pro:per|you,lambda $1_{ev}.v|hug-past(n:prop|mommy,pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: you 're waking up ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|wake-presp(pro:per|you,$0),adv|up($0)),$0))
example_end

Sent: was that flower ?
Sem: lambda $0_{ev}.Q(n|flower(pro:dem|that,$0))
example_end

Sent: you 're dropping it on your shirt .
Sem: lambda $0_{ev}.aux|~be(and(part|drop-presp(pro:per|you,pro:per|it,$0),prep|on(det:poss|your($1,n|shirt($1)),$0)),$0)
example_end

Sent: how do I know what Adam ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:sub|i,$1,$0),$2($0)),$0)
example_end

Sent: he can 't say Cecile .
Sem: lambda $0_{ev}.not(mod|can(v|say(pro:sub|he,n:prop|cecile,$0),$0),$0)
example_end

Sent: he says Pucile .
Sem: lambda $0_{ev}.v|say-3s(pro:sub|he,chi|pucile,$0)
example_end

Sent: does she have coffee ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(pro:sub|she,lambda $1_{e}.n|coffee($1),$0),$0))
example_end

Sent: we won 't go into that .
Sem: lambda $0_{ev}.not(mod|will(and(v|go(pro:sub|we,pro:dem|that,$0),prep|into($0)),$0),$0)
example_end

Sent: three minutes ?
Sem: lambda $0_{e}.Q(det:num|three(n|minute-pl($0)))
example_end

Sent: press the button and what ?
Sem: lambda $0_{ev}.v|press(you,det:art|the($1,n|button($1)),$0)
example_end

Sent: the light comes on ?
Sem: lambda $0_{ev}.Q(v|come-3s_on(det:art|the($1,n|light($1)),$0))
example_end

Sent: Winstons taste good like a cigarette should .
Sem: lambda $0_{ev}.n|taste(n:prop|winstons,lambda $1_{ev}.adj|good(n:prop|winstons,$1),$0)
example_end

Sent: wait let her show you .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.n|show(det:poss|her,pro:per|you,$1),$0),co|wait(you,$0))
example_end

Sent: his mouth ?
Sem: lambda $0_{e}.Q(det:poss|his($1,n|mouth($1),$0))
example_end

Sent: that 's where his tongue should be .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.mod|should(and(cop|be(det:poss|his($2,n|tongue($2)),$1),pro:rel|where($1)),$1),$0)
example_end

Sent: that 's where the tongue should be .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.mod|should(and(cop|be(det:art|the($2,n|tongue($2)),$1),adv:int|where($1)),$1),$0)
example_end

Sent: should be .
Sem: lambda $0_{ev}.mod|should(cop|be(you,$0),$0)
example_end

Sent: safety rules ?
Sem: lambda $0_{e}.Q(and_comp(n|safety($0),v|rule-3s($0)))
example_end

Sent: d you remember what the safety rules are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|remember($1,$0,$2)
example_end

Sent: what are the rules .
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|rule-pl($2)),$0)
example_end

Sent: d you know the rules ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,det:art|the($1,n|rule-pl($1)),$0),$0))
example_end

Sent: cry boys .
Sem: lambda $0_{ev}.and(v|cry(you,$0),lambda $1_{e}.n|boy-pl($1))
example_end

Sent: no I don 't think his mouth opens .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|open-3s(det:poss|his($2,n|mouth($2)),$1),$0),$0),$0),co|no($0))
example_end

Sent: I don 't think he can talk .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(v|talk(pro:sub|he,$1),$1),$0),$0),$0)
example_end

Sent: you talk for him .
Sem: lambda $0_{ev}.and(v|talk(pro:per|you,$0),prep|for(pro:obj|him,$0))
example_end

Sent: oh you 're talking to me ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|talk-presp(pro:per|you,$0),prep|to(pro:obj|me,$0)),$0),co|oh($0)))
example_end

Sent: his neck ?
Sem: lambda $0_{e}.Q(det:poss|his($1,n|neck($1),$0))
example_end

Sent: can you mail it in the mailbox ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|mail(pro:per|you,pro:per|it,$0),prep|in(det:art|the($1,n|mail+box($1)),$0)),$0))
example_end

Sent: turn it off ?
Sem: lambda $0_{ev}.Q(and(v|turn(you,pro:per|it,$0),adv|off($0)))
example_end

Sent: he uses the same construction for unlock .
Sem: lambda $0_{ev}.and(v|use-3s(pro:sub|he,det:art|the($1,and(adj|same($1),n|construction($1))),$0),prep|for(lambda $2_{e}.v|lock($2),$0))
example_end

Sent: he says lock it off .
Sem: lambda $0_{ev}.v|say-3s(pro:sub|he,lambda $1_{ev}.and(n|lock(pro:sub|he,pro:per|it,$1),adv|off($1)),$0)
example_end

Sent: hours of collection .
Sem: lambda $0_{e}.att(n|hour-pl($0),prep|of(lambda $1_{e}.n|collection($1)))
example_end

Sent: are you the mailman ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:per|you,n|mail+man(pro:per|you,$0)))
example_end

Sent: well you can 't go back there .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|go(pro:per|you,$0),adv|back(adv|there($0))),$0),$0),co|well($0))
example_end

Sent: well you did the other one .
Sem: lambda $0_{ev}.and(v|do-past(pro:per|you,det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0),co|well($0))
example_end

Sent: I was looking for the engine .
Sem: lambda $0_{ev}.aux|be-past(and(part|look-presp(pro:sub|i,$0),prep|for(det:art|the($1,n|engine($1)),$0)),$0)
example_end

Sent: oh where 's the caboose ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(cop|~be(det:art|the($1,n|caboose($1)),$0),$2($0)),co|oh($0))
example_end

Sent: I don 't think that 's the caboose is it .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.det:art|the(pro:dem|that,n|caboose(pro:dem|that,$1)),$0),$0),$0),aux|be-3s(pro:per|it,$0))
example_end

Sent: I see the caboose .
Sem: lambda $0_{ev}.v|see(pro:sub|i,det:art|the($1,n|caboose($1)),$0)
example_end

Sent: no you put your pennies through here .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:per|you,det:poss|your($1,n|penny-pl($1)),$0),adv|through(adv|here($0))),co|no($0))
example_end

Sent: the mail goes in up there yes .
Sem: lambda $0_{ev}.and(and(and(v|go-3s(det:art|the($1,n|mail($1)),$0),adv|in($0)),adv|up(adv|there($0))),co|yes($0))
example_end

Sent: maybe it 's there .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:per|it,$0),adv|maybe($0)),adv|there($0))
example_end

Sent: we 'll pretend that 's the caboose .
Sem: lambda $0_{ev}.mod|~will(v|pretend(pro:sub|we,lambda $1_{ev}.det:art|the(pro:dem|that,n|caboose(pro:dem|that,$1)),$0),$0)
example_end

Sent: you don 't know where the caboose is ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-3s(det:art|the($2,n|caboose($2)),$1),adv:int|where($1)),$0),$0),$0))
example_end

Sent: what did he use to make his mailbox ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(v|use(pro:sub|he,lambda $1_{ev}.v|make($2,det:poss|his($3,n|mail+box($3)),$1),$0),$0)
example_end

Sent: that spells a word ?
Sem: lambda $0_{ev}.Q(v|spell-3s(pro:rel|that,det:art|a($1,n|word($1)),$0))
example_end

Sent: d you want me to what ?
Sem: lambda $0_{ev}.mod|do(v|want(pro:per|you,pro:obj|me,$0),$0)
example_end

Sent: Adam if you bring me my purse I 'll see if I have one .
Sem: lambda $0_{ev}.mod|~will(conj|if(v|bring(pro:per|you,det:poss|my($1,n|purse($1)),pro:obj|me,$0),v|see(pro:sub|i,lambda $2_{ev}.v|have(pro:sub|i,pro:indef|one,$2),$0)),$0)
example_end

Sent: if you bring me my purse .
Sem: lambda $0_{ev}.v|bring(pro:per|you,det:poss|my($1,n|purse($1)),pro:obj|me,$0)
example_end

Sent: you 're going to come in in fourteen minutes ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(and(v|come(pro:per|you,$1),adv|in($1)),prep|in(lambda $2_{e}.det:num|fourteen(n|minute-pl($2)),$1)),$0),$0))
example_end

Sent: come in Adam .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|in($0))
example_end

Sent: Adam can you go down the steps ?
Sem: lambda $0_{ev}.Q(n|can(and(v|go(pro:per|you,$0),adv|down(det:art|the($1,n|step-pl($1)),$0)),$0))
example_end

Sent: d you have more parts ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.and(qn|more($1),n|part-pl($1)),$0),$0))
example_end

Sent: oh here you are .
Sem: lambda $0_{ev}.and(and(cop|be-pres(pro:per|you,$0),adv|here($0)),co|oh($0))
example_end

Sent: what 're you going to make ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|make(pro:per|you,$2,$1),$0),$0)
example_end

Sent: what did you make ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|make(pro:per|you,$1,$0),$0)
example_end

Sent: a road .
Sem: det:art|a($0,n|road($0))
example_end

Sent: thank_you yes .
Sem: lambda $0_{ev}.and(co|thank_you($0),co|yes($0))
example_end

Sent: he doesn 't have a ball .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|he,det:art|a($1,n|ball($1)),$0),$0),$0)
example_end

Sent: I think it came off .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(v|come-past(pro:per|it,$1),adv|off($1)),$0)
example_end

Sent: maybe it broke Adam .
Sem: lambda $0_{ev}.and(v|break-past(pro:per|it,$0),adv|maybe($0))
example_end

Sent: now you play the game with me .
Sem: lambda $0_{ev}.and(and(v|play(pro:per|you,det:art|the($1,n|game($1)),$0),adv|now($0)),prep|with(pro:obj|me,$0))
example_end

Sent: you ask me .
Sem: lambda $0_{ev}.v|ask(pro:per|you,pro:obj|me,$0)
example_end

Sent: oh I didn 't bring raisins .
Sem: lambda $0_{ev}.and(not(mod|do(v|bring(pro:sub|i,lambda $1_{e}.n|raisin-pl($1),$0),$0),$0),co|oh($0))
example_end

Sent: alright now you ask me .
Sem: lambda $0_{ev}.and(and(v|ask(pro:per|you,pro:obj|me,$0),adv|now($0)),co|alright($0))
example_end

Sent: what shall I give you ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|give(pro:sub|i,$1,pro:per|you,$0),$0)
example_end

Sent: what did you ask me ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|ask(pro:per|you,$1,pro:obj|me,$0),$0)
example_end

Sent: he throws it up in the air .
Sem: lambda $0_{ev}.and(and(v|throw-3s(pro:sub|he,pro:per|it,$0),adv|up($0)),prep|in(det:art|the($1,n|air($1)),$0))
example_end

Sent: your house ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n|house($1),$0))
example_end

Sent: what do I have in my hand ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:sub|i,$1,$0),prep|in(det:poss|my($2,n|hand($2)),$0)),$0)
example_end

Sent: two raisins !
Sem: lambda $0_{e}.det:num|two(n|raisin-pl($0))
example_end

Sent: she has two raisins .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|she,lambda $1_{e}.det:num|two(n|raisin-pl($1)),$0)
example_end

Sent: would you like some juice ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|juice($1)),$0),$0))
example_end

Sent: it 's not broken .
Sem: lambda $0_{ev}.not(part|break-pastp(pro:per|it,$0),$0)
example_end

Sent: give it to Ursula .
Sem: lambda $0_{ev}.and(v|give(you,pro:per|it,$0),prep|to(n:prop|ursula,$0))
example_end

Sent: what d you have Adam .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|have(pro:per|you,$1,$0),$0)
example_end

Sent: d you have a saucer ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|saucer($1)),$0),$0))
example_end

Sent: don 't let it spill .
Sem: lambda $0_{ev}.not(mod|do(v|let-zero(you,lambda $1_{ev}.v|spill(pro:per|it,$1),$0),$0),$0)
example_end

Sent: this is a cucumber honey .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|cucumber(pro:dem|this,$0))
example_end

Sent: what 're you going to show her ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|show(pro:per|you,$2,pro:obj|her,$1),$0),$0)
example_end

Sent: your Jiminy_Cricket ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n:prop|jiminy_cricket($1),$0))
example_end

Sent: oh honey be careful .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|care-dn($0,$1)
example_end

Sent: you come show her .
Sem: lambda $0_{ev}.v|come(pro:per|you,$0)
example_end

Sent: your blanket ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n|blanket($1),$0))
example_end

Sent: may I see how he walks Adam ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,lambda $1_{ev}.and(v|walk-3s(pro:sub|he,$1),adv:int|how($1)),$0),$0))
example_end

Sent: he fell over .
Sem: lambda $0_{ev}.and(v|fall-past(pro:sub|he,$0),adv|over($0))
example_end

Sent: stop kicking me .
Sem: lambda $0_{ev}.n|stop(you,$0)
example_end

Sent: what does Jiminy_Cricket have on his back ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|have(n:prop|jiminy_cricket,$1,$0),prep|on(det:poss|his($2,n|back($2)),$0)),$0)
example_end

Sent: oh is that like a wheelbarrow ?
Sem: lambda $0_{ev}.Q(and(and(cop|be-3s(pro:dem|that,$0),prep|like(det:art|a($1,n|wheel+barrow($1)),$0)),co|oh($0)))
example_end

Sent: he fell .
Sem: lambda $0_{ev}.v|fall-past(pro:sub|he,$0)
example_end

Sent: that 's fresh .
Sem: lambda $0_{ev}.adj|fresh(pro:dem|that,$0)
example_end

Sent: yes catch him please .
Sem: lambda $0_{ev}.and(and(v|catch(you,pro:obj|him,$0),co|yes($0)),co|please($0))
example_end

Sent: it must be in Daddy 's car isn 't it ?
Sem: lambda $0_{ev}.Q(and(mod|must(and(cop|be(pro:per|it,$0),prep|in(n:prop|daddy's($1,n|car($1)),$0)),$0),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: your pail .
Sem: det:poss|your($0,n|pail($0))
example_end

Sent: well Daddy has the car .
Sem: lambda $0_{ev}.and(v|have-3s(n:prop|daddy,det:art|the($1,n|car($1)),$0),co|well($0))
example_end

Sent: he took the car to work .
Sem: lambda $0_{ev}.and(v|take-past(pro:sub|he,det:art|the($1,n|car($1)),$0),prep|to(lambda $2_{e}.n|work($2),$0))
example_end

Sent: we 'll look at it tonight .
Sem: lambda $0_{ev}.mod|~will(and(and(cop|look(pro:sub|we,$0),prep|at(pro:per|it,$0)),adv:tem|tonight($0)),$0)
example_end

Sent: you may be excused .
Sem: lambda $0_{ev}.cop|be(mod|may(part|excuse-pastp(pro:per|you,$0),$0),$0)
example_end

Sent: didn 't you burp ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|burp(pro:per|you,$0),$0),$0))
example_end

Sent: who wrote that ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|write-past($1,pro:dem|that,$0)
example_end

Sent: he 's going to wear that to the wedding .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.and(v|wear(pro:sub|he,pro:dem|that,$1),prep|to(det:art|the($2,n|wedding($2)),$1)),$0),$0)
example_end

Sent: he 's going to a wedding .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:sub|he,$0),prep|to(det:art|a($1,n|wedding($1)),$0)),$0)
example_end

Sent: what 's a wedding Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|wedding($2)),$0)
example_end

Sent: Catherine 's wedding .
Sem: n:prop|catherine's($0,n|wedding($0))
example_end

Sent: well because she wanted to .
Sem: lambda $0_{ev}.and(v|want-past(pro:sub|she,$0),co|well($0))
example_end

Sent: but don 't write on the chair .
Sem: lambda $0_{ev}.not(mod|do(and(v|write(you,$0),prep|on(det:art|the($1,n|chair($1)),$0)),$0),$0)
example_end

Sent: poor Urs what will she do for a pencil if you break it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(conj|if(v|break(pro:per|you,pro:per|it,$0),mod|will(and(v|do(pro:sub|she,$1,$0),prep|for(det:art|a($2,n|pencil($2)),$0)),$0)),att(n:prop|ursula,lambda $3_{e}.adj|poor($3)))
example_end

Sent: yes but suppose something happens to that one .
Sem: lambda $0_{ev}.and(v|suppose(you,lambda $1_{ev}.and(v|happen-3s(pro:indef|something,$1),prep|to(pro:dem|that($2,pro:indef|one($2)),$1)),$0),co|yes($0))
example_end

Sent: she 'll need another one .
Sem: lambda $0_{ev}.mod|~will(v|need(pro:sub|she,qn|another($1,pro:indef|one($1)),$0),$0)
example_end

Sent: yes you can look in there .
Sem: lambda $0_{ev}.and(mod|can(and(cop|look(pro:per|you,$0),prep|in(adv|there($0))),$0),co|yes($0))
example_end

Sent: no not another pencil Adam .
Sem: lambda $0_{ev}.and(not(qn|another($1,n|pencil($1)),$0),co|no($0))
example_end

Sent: yes write your name .
Sem: lambda $0_{ev}.and(v|write(you,det:poss|your($1,n|name($1)),$0),co|yes($0))
example_end

Sent: no you 're already broken one .
Sem: lambda $0_{ev}.and(aux|~be(and(part|break-pastp(pro:per|you,pro:indef|one,$0),adv|already($0)),$0),co|no($0))
example_end

Sent: why d you break one ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|break(pro:per|you,pro:indef|one,$0),$1($0)),$0)
example_end

Sent: can you write on the box ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|write(pro:per|you,$0),prep|on(det:art|the($1,n|box($1)),$0)),$0))
example_end

Sent: we didn 't show what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|show(pro:sub|we,$1,$0),$0),$0)
example_end

Sent: what did happen Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|happen($1,$0),$0)
example_end

Sent: you spilled it yes .
Sem: lambda $0_{ev}.and(v|spill-past(pro:per|you,pro:per|it,$0),co|yes($0))
example_end

Sent: we don 't sit on books dear .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(pro:sub|we,$0),prep|on(lambda $1_{e}.n|book-pl($1),$0)),$0),$0)
example_end

Sent: because books are for reading .
Sem: lambda $0_{ev}.and(cop|be-pres(lambda $1_{e}.n|book-pl($1),$0),prep|for(lambda $2_{e}.n:gerund|read-presp($2),$0))
example_end

Sent: no I don 't want you to Adam .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|i,pro:per|you,$0),$0),$0),co|no($0))
example_end

Sent: what d you see Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: where did your what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|go($1,$0),$2($0)),$0)
example_end

Sent: tonight we 'll get it out_of the car .
Sem: lambda $0_{ev}.mod|~will(and(and(aux|get(pro:sub|we,pro:per|it,$0),adv:tem|tonight($0)),prep|out_of(det:art|the($1,n|car($1)),$0)),$0)
example_end

Sent: Adam I 'll have_to take the pencil from you if you don 't be more careful .
Sem: lambda $0_{ev}.conj|if(mod|do(adv|more(co|careful(pro:per|you,$0)),$0),mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|pencil($1)),$0),prep|from(pro:per|you,$0)),$0),$0))
example_end

Sent: little soda water ?
Sem: lambda $0_{e}.Q(and_comp(n|soda($0),and(adj|little($0),n|water($0))))
example_end

Sent: m e spells me .
Sem: lambda $0_{ev}.v|spell-3s(lambda $1_{e}.n:let|e($1),pro:obj|me,$0)
example_end

Sent: did you go fishing with it ?
Sem: lambda $0_{ev}.Q(v|do-past(and(part|fish-presp(pro:per|you,$0),prep|with(pro:per|it,$0)),$0))
example_end

Sent: you 're going to turn the water off tomorrow .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|turn(pro:per|you,det:art|the($2,n|water($2)),$1),adv|off($1)),$0),adv:tem|tomorrow($0)),$0)
example_end

Sent: did you learn to swim ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|learn(pro:per|you,lambda $1_{ev}.v|swim(pro:per|you,$1),$0),$0))
example_end

Sent: Adam don 't do that dear .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: no I don 't think you know how to put a hole back together .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|know(pro:per|you,lambda $2_{ev}.and(and(v|put-zero(pro:per|you,det:art|a($3,n|hole($3)),$2),adv:int|how($2)),adv|back(adv|together($2))),$1),$0),$0),$0),co|no($0))
example_end

Sent: it 's a card holder .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and_comp(n|card(pro:per|it,$0),n|hold-dv(pro:per|it,$0)))
example_end

Sent: David made it .
Sem: lambda $0_{ev}.v|make-past(n:prop|david,pro:per|it,$0)
example_end

Sent: he didn 't make it for you .
Sem: lambda $0_{ev}.not(mod|do(and(v|make(pro:sub|he,pro:per|it,$0),prep|for(pro:per|you,$0)),$0),$0)
example_end

Sent: he made it for his Mother .
Sem: lambda $0_{ev}.and(v|make-past(pro:sub|he,pro:per|it,$0),prep|for(det:poss|his($1,n:prop|mother($1)),$0))
example_end

Sent: are you his Mother ?
Sem: lambda $0_{ev}.Q(det:poss|his(pro:per|you,n:prop|mother(pro:per|you,$0)))
example_end

Sent: no she didn 't say Robin she said David didn 't she ?
Sem: lambda $0_{ev}.Q(and(not(and(mod|do(v|say(pro:sub|she,n:prop|robin,$0),$0),and(v|say-past(pro:sub|she,n:prop|david,$0),not(mod|do(pro:sub|she,$0),$0))),$0),co|no($0)))
example_end

Sent: is there something else in there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(post|else(pro:indef|something),$0),adv|in(adv|there($0))))
example_end

Sent: oh one piece broke .
Sem: lambda $0_{ev}.and(adj|broke(lambda $1_{e}.det:num|one(n|piece($1)),$0),co|oh($0))
example_end

Sent: maybe something bumped it .
Sem: lambda $0_{ev}.and(v|bump-past(pro:indef|something,pro:per|it,$0),adv|maybe($0))
example_end

Sent: I don 't know what bumped it Adam .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|bump-past(pro:int|what,pro:per|it,$1),$0),$0),$0)
example_end

Sent: I don 't know either .
Sem: lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,$0),adv|either($0)),$0),$0)
example_end

Sent: it was an accident .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|accident(pro:per|it,$0))
example_end

Sent: no you can 't put crayon back together once it 's broken .
Sem: lambda $0_{ev}.and(not(conj|once(part|break-pastp(pro:per|it,$0),mod|can(and(v|put-zero(pro:per|you,lambda $1_{e}.n|crayon($1),$0),adv|back(adv|together($0))),$0)),$0),co|no($0))
example_end

Sent: maybe Robin broke that one .
Sem: lambda $0_{ev}.and(v|break-past(n:prop|robin,pro:dem|that($1,pro:indef|one($1)),$0),adv|maybe($0))
example_end

Sent: maybe a fire truck .
Sem: adv|maybe(det:art|a($0,and_comp(n|fire($0),n|truck($0))))
example_end

Sent: from our fire station up the street .
Sem: prep|from(det:poss|our($0,att(and_comp(n|fire($0),v|station($0)),adv|up(det:art|the($1,n|street($1))))))
example_end

Sent: I think it 's resting now .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.cop|~be(and(part|rest-presp(pro:per|it,$1),adv|now($1)),$1),$0)
example_end

Sent: so when the fire alarm rings it will be ready to go to the fire .
Sem: lambda $0_{ev}.and(mod|will(conj|when(v|ring-3s(det:art|the($1,and_comp(n|fire($1),n|alarm($1))),$0),adj|ready(pro:per|it,lambda $2_{ev}.and(v|go(pro:per|it,$2),prep|to(det:art|the($3,n|fire($3)),$2)),$0)),$0),co|so($0))
example_end

Sent: no that 's not the one ?
Sem: lambda $0_{ev}.Q(and(not(det:art|the(pro:dem|that,pro:indef|one(pro:dem|that,$0)),$0),co|no($0)))
example_end

Sent: look in the bag Adam .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|in(det:art|the($1,n|bag($1)),$0))
example_end

Sent: it 's an indian .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|indian(pro:per|it,$0))
example_end

Sent: well he doesn 't have anything .
Sem: lambda $0_{ev}.and(not(mod|do(v|have(pro:sub|he,pro:indef|anything,$0),$0),$0),co|well($0))
example_end

Sent: looks as_if he had a spear in his hand .
Sem: lambda $0_{ev}.cop|look-3s(you,lambda $1_{ev}.and(v|have-past(pro:sub|he,det:art|a($2,n|spear($2)),$1),prep|in(det:poss|his($3,n|hand($3)),$1)),$0)
example_end

Sent: is that the one ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,pro:indef|one(pro:rel|that,$0)))
example_end

Sent: I don 't know if you can .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: that 's cake ?
Sem: lambda $0_{ev}.Q(n|cake(pro:dem|that,$0))
example_end

Sent: yes he 's keeping that one .
Sem: lambda $0_{ev}.and(aux|~be(part|keep-presp(pro:sub|he,pro:dem|that($1,pro:indef|one($1)),$0),$0),co|yes($0))
example_end

Sent: it was very good .
Sem: lambda $0_{ev}.adv|very(adj|good(pro:per|it,$0))
example_end

Sent: I don 't want to eat his head .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|eat(pro:sub|i,det:poss|his($2,n|head($2)),$1),$0),$0),$0)
example_end

Sent: that 's band around his head .
Sem: lambda $0_{ev}.att(n|band(pro:dem|that,$0),prep|around(det:poss|his($1,n|head($1))))
example_end

Sent: and let the birds eat it ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|eat(det:art|the($2,n|bird-pl($2)),pro:per|it,$1),$0))
example_end

Sent: remember when you fed the pigeons you didn 't have_to put it in a dish .
Sem: lambda $0_{ev}.and(not(mod:aux|have_to(mod|do(conj|when(v|feed-past(pro:per|you,det:art|the($1,n|pigeon-pl($1)),$0),and(v|put-zero(pro:per|you,pro:per|it,$0),prep|in(det:art|a($2,n|dish($2)),$0))),$0),$0),$0),v|remember(you,$0))
example_end

Sent: to the fish ?
Sem: Q(prep|to(det:art|the($0,n|fish($0))))
example_end

Sent: where can you find some fish ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(v|find(pro:per|you,qn|some($1,n|fish($1)),$0),$2($0)),$0)
example_end

Sent: okay Adam .
Sem: lambda $0_{ev}.and(n:prop|adam($0),co|okay($0))
example_end

Sent: now pick the things up .
Sem: lambda $0_{ev}.and(and(v|pick(you,det:art|the($1,n|thing-pl($1)),$0),adv|now($0)),adv|up($0))
example_end

Sent: don 't throw Adam .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,$0),$0),$0)
example_end

Sent: it is red .
Sem: lambda $0_{ev}.adj|red(pro:per|it,$0)
example_end

Sent: there 's a grey crayon .
Sem: lambda $0_{ev}.cop|~be(det:art|a($1,and(adj|grey($1),n|crayon($1))),$0)
example_end

Sent: don 't take them out Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(you,pro:obj|them,$0),adv|out($0)),$0),$0)
example_end

Sent: because little boys don 't smoke cigarettes .
Sem: lambda $0_{ev}.not(mod|do(v|smoke(lambda $1_{e}.and(adj|little($1),n|boy-pl($1)),lambda $2_{e}.n|cigarette-pl($2),$0),$0),$0)
example_end

Sent: I have a good black pen .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,and(adj|black($1),and(adj|good($1),n|pen($1)))),$0)
example_end

Sent: you 're making what ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|make-presp(pro:per|you,$1,$0),$0)
example_end

Sent: yes it does look like spaghetti .
Sem: lambda $0_{ev}.and(mod|do-3s(and(co|look(pro:per|it,$0),co|like(lambda $1_{e}.n|spaghetti($1),$0)),$0),co|yes($0))
example_end

Sent: what kind of spaghetti is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|spaghetti($2))))
example_end

Sent: Perro 's spaghetti ?
Sem: lambda $0_{e}.Q(n:prop|perro's($1,n|spaghetti($1),$0))
example_end

Sent: he talking ?
Sem: lambda $0_{ev}.Q(part|talk-presp(pro:sub|he,$0))
example_end

Sent: he is a pony ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,n|pony(pro:sub|he,$0)))
example_end

Sent: he 's a little boy .
Sem: lambda $0_{ev}.det:art|a(pro:sub|he,and(n|boy(pro:sub|he,$0),adj|little(pro:sub|he,$0)))
example_end

Sent: no you don 't open it by pulling it .
Sem: lambda $0_{ev}.and(not(adv|by(part|pull-presp(you,pro:per|it,$0),mod|do(v|open(pro:per|you,pro:per|it,$0),$0)),$0),co|no($0))
example_end

Sent: you turn the knob .
Sem: lambda $0_{ev}.v|turn(pro:per|you,det:art|the($1,n|knob($1)),$0)
example_end

Sent: turn the knob .
Sem: lambda $0_{ev}.v|turn(you,det:art|the($1,n|knob($1)),$0)
example_end

Sent: looks like a gun ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|gun($1)),$0)))
example_end

Sent: you threw them away .
Sem: lambda $0_{ev}.and(v|throw-past(pro:per|you,pro:obj|them,$0),adv|away($0))
example_end

Sent: poor cowboys .
Sem: lambda $0_{e}.and(adj|poor($0),n|cow+boy($0))
example_end

Sent: yes why did you throw the cowboys away ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(mod|do-past(and(and(v|throw(pro:per|you,det:art|the($1,n|cow+boy($1)),$0),$2($0)),adv|away($0)),$0),co|yes($0))
example_end

Sent: bring them back tomorrow ?
Sem: lambda $0_{ev}.Q(and(and(v|bring(you,pro:obj|them,$0),adv|back($0)),adv:tem|tomorrow($0)))
example_end

Sent: why don 't you use a pencil too ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|use(pro:per|you,det:art|a($1,n|pencil($1)),$0),$2($0)),post|too($0)),$0),$0)
example_end

Sent: you 've broken that one ?
Sem: lambda $0_{ev}.Q(aux|~have(part|break-pastp(pro:per|you,pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: you see what happens ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,lambda $1_{ev}.v|happen-3s(pro:int|what,$1),$0))
example_end

Sent: there 's your pen .
Sem: lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|pen($1)),$0),pro:exist|there($0))
example_end

Sent: I don 't need one .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: you must be need one ?
Sem: lambda $0_{ev}.cop|be(you,$0)
example_end

Sent: Adam use them only on the pad .
Sem: lambda $0_{ev}.and(v|use(you,pro:obj|them,$0),adv|only(prep|on(det:art|the($1,n|pad($1)),$0)))
example_end

Sent: because it would hurt Paul .
Sem: lambda $0_{ev}.mod|will-cond(part|hurt-pastp(pro:per|it,n:prop|paul,$0),$0)
example_end

Sent: because he 's one of your toys .
Sem: lambda $0_{ev}.att(pro:indef|one(pro:sub|he,$0),prep|of(det:poss|your($1,n|toy-pl($1))))
example_end

Sent: that 's not Perro who ?
Sem: lambda $0_{ev}.not(n:prop|perro(pro:dem|that,$0),$0)
example_end

Sent: what 's in here ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(adv|here($0)))
example_end

Sent: Perro 's what ?
Sem: n:prop|perro's($0,pro:int|what($0))
example_end

Sent: he said with those horse .
Sem: lambda $0_{ev}.and(v|say-past(pro:sub|he,$0),prep|with(pro:dem|those($1,n|horse($1)),$0))
example_end

Sent: your skin hurts ?
Sem: lambda $0_{ev}.Q(v|hurt-3s(det:poss|your($1,n|skin($1)),$0))
example_end

Sent: where is your skin ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|skin($1)),$0),$2($0))
example_end

Sent: why don 't you pick the other things up too ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(and(v|pick(pro:per|you,det:art|the($1,and(qn|other($1),n|thing-pl($1))),$0),$2($0)),adv|up($0)),post|too($0)),$0),$0)
example_end

Sent: save them .
Sem: lambda $0_{ev}.v|save(you,pro:obj|them,$0)
example_end

Sent: I see a seal .
Sem: lambda $0_{ev}.v|see(pro:sub|i,det:art|a($1,n|seal($1)),$0)
example_end

Sent: you have broken that ?
Sem: lambda $0_{ev}.Q(v|have(part|break-pastp(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: where is the top to that ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,att(adj|top($1),prep|to(pro:dem|that))),$0),$2($0))
example_end

Sent: yes I 'll be the baker .
Sem: lambda $0_{ev}.and(mod|~will(det:art|the(pro:sub|i,n|bake-dv(pro:sub|i,$0)),$0),co|yes($0))
example_end

Sent: yes I 'll be a baker .
Sem: lambda $0_{ev}.and(mod|~will(det:art|a(pro:sub|i,n|bake-dv(pro:sub|i,$0)),$0),co|yes($0))
example_end

Sent: who 's a baker ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|a($0,n|bake-dv($0,$1))
example_end

Sent: oh Adam d you know what these are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no I 'm no meat .
Sem: lambda $0_{ev}.and(not(n|meat(pro:sub|i,$0),$0),co|no($0))
example_end

Sent: because I 'm Cecile .
Sem: lambda $0_{ev}.n:prop|cecile(pro:sub|i,$0)
example_end

Sent: are those strong men ?
Sem: lambda $0_{ev}.Q(and(n|man-pl(pro:dem|those,$0),adj|strong(pro:dem|those,$0)))
example_end

Sent: one pitch .
Sem: lambda $0_{e}.det:num|one(n|pitch($0))
example_end

Sent: why don 't you go over there by yourself with that stick ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(and(and(v|go(pro:per|you,$0),$1($0)),adv|over(adv|there($0))),prep|by(pro:refl|yourself,$0)),prep|with(pro:dem|that($2,n|stick($2)),$0)),$0),$0)
example_end

Sent: don 't hit the baby .
Sem: lambda $0_{ev}.not(mod|do(v|hit-zero(you,det:art|the($1,n|baby($1)),$0),$0),$0)
example_end

Sent: you 'll hurt the little baby .
Sem: lambda $0_{ev}.mod|~will(v|hurt-zero(pro:per|you,det:art|the($1,and(adj|little($1),n|baby($1))),$0),$0)
example_end

Sent: he 'll cry .
Sem: lambda $0_{ev}.mod|~will(v|cry(pro:sub|he,$0),$0)
example_end

Sent: no don 't hit anybody with the stick .
Sem: lambda $0_{ev}.and(not(mod|do(and(n|hit(you,pro:indef|anybody,$0),prep|with(det:art|the($1,n|stick($1)),$0)),$0),$0),co|no($0))
example_end

Sent: no I wouldn 't hit the babies .
Sem: lambda $0_{ev}.and(not(mod|will(v|hit-zero(pro:sub|i,det:art|the($1,n|baby-pl($1)),$0),$0),$0),co|no($0))
example_end

Sent: give me the strong man .
Sem: lambda $0_{ev}.v|give(you,det:art|the($1,and(adj|strong($1),n|man($1))),pro:obj|me,$0)
example_end

Sent: they 're very heavy .
Sem: lambda $0_{ev}.adv|very(adj|heavy(pro:sub|they,$0))
example_end

Sent: he could probably lift you up with one hand .
Sem: lambda $0_{ev}.mod|could(and(and(and(v|lift(pro:sub|he,pro:per|you,$0),adv|probable-dadj($0)),adv|up($0)),prep|with(lambda $1_{e}.det:num|one(n|hand($1)),$0)),$0)
example_end

Sent: you can 't lift him up .
Sem: lambda $0_{ev}.not(mod|can(and(v|lift(pro:per|you,pro:obj|him,$0),adv|up($0)),$0),$0)
example_end

Sent: I 'll have_to take the stick away .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|stick($1)),$0),adv|away($0)),$0),$0)
example_end

Sent: no give me the lion .
Sem: lambda $0_{ev}.and(v|give(you,det:art|the($1,n|lion($1)),pro:obj|me,$0),co|no($0))
example_end

Sent: what d you think the lion is doing ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.aux|be-3s(part|do-presp(det:art|the($2,n|lion($2)),pro:int|what,$1),$1),$0),$0))
example_end

Sent: what do you think is happening there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.aux|be-3s(and(part|happen-presp(pro:int|what,$1),adv|there($1)),$1),$0),$0))
example_end

Sent: I think you 've had enough tea .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(part|have-pastp(pro:per|you,lambda $2_{e}.n|tea($2),$1),adj|enough($1)),$1),$0)
example_end

Sent: I think he 's growling .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(part|growl-presp(pro:sub|he,$1),$1),$0)
example_end

Sent: Adam did you hear a lion roar ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|hear(pro:per|you,lambda $1_{ev}.n|roar(det:art|a($2,n|lion($2)),$1),$0),$0))
example_end

Sent: when you were at the zoo ?
Sem: lambda $0_{ev}.Q(and(cop|be-past(pro:per|you,$0),prep|at(det:art|the($1,n|zoo($1)),$0)))
example_end

Sent: we are ?
Sem: lambda $0_{ev}.Q(cop|be-pres(pro:sub|we,$0))
example_end

Sent: alright I think I have one .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.v|have(pro:sub|i,pro:indef|one,$1),$0),adj|alright($0))
example_end

Sent: no I won 't let you smoke .
Sem: lambda $0_{ev}.and(not(mod|will(v|let-zero(pro:sub|i,lambda $1_{ev}.v|smoke(pro:per|you,$1),$0),$0),$0),co|no($0))
example_end

Sent: here 's a pen for you .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|pen($1)),$0),pro:exist|here($0)),prep|for(pro:per|you,$0))
example_end

Sent: that 's my pen .
Sem: lambda $0_{ev}.det:poss|my(pro:dem|that,n|pen(pro:dem|that,$0))
example_end

Sent: it came from my purse .
Sem: lambda $0_{ev}.and(v|come-past(pro:per|it,$0),prep|from(det:poss|my($1,n|purse($1)),$0))
example_end

Sent: whose would it be ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond($1(pro:per|it,$0),$0)
example_end

Sent: whose d you think it is in my purse ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: that 's my comb .
Sem: lambda $0_{ev}.det:poss|my(pro:dem|that,n|comb(pro:dem|that,$0))
example_end

Sent: it 's black .
Sem: lambda $0_{ev}.adj|black(pro:per|it,$0)
example_end

Sent: is my hair blue ?
Sem: lambda $0_{ev}.Q(n|blue(det:poss|my($1,n|hair($1)),$0))
example_end

Sent: fifty dollars .
Sem: lambda $0_{e}.det:num|fifty(n|dollar-pl($0))
example_end

Sent: you going give me fifty dollars ?
Sem: lambda $0_{ev}.Q(v|give(pro:per|you,lambda $1_{e}.det:num|fifty(n|dollar-pl($1)),pro:obj|me,$0))
example_end

Sent: you 're very kind .
Sem: lambda $0_{ev}.adv|very(adj|kind(pro:per|you,$0))
example_end

Sent: he doesn 't want any money ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:sub|he,qn|any($1,n|money($1)),$0),$0),$0))
example_end

Sent: I have a constant battle to keep him out_of a sweater .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,rel(and(n|constant($1),n|battle($1)),lambda $2_{ev}.and(v|keep(_,pro:obj|him,$2),prep|out_of(det:art|a($3,n|sweater($3)),$2)))),$0)
example_end

Sent: to the bank ?
Sem: Q(prep|to(det:art|the($0,n|bank($0))))
example_end

Sent: let you do what on the sidewalk ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),adv|on(det:art|the($3,n|sidewalk($3)),$1)),$0)
example_end

Sent: this afternoon yes .
Sem: lambda $0_{ev}.and(pro:dem|this($1,n|afternoon($1),$0),co|yes($0))
example_end

Sent: this afternoon .
Sem: pro:dem|this($0,n|afternoon($0))
example_end

Sent: that 's a doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|dog-dim(pro:dem|that,$0))
example_end

Sent: well let me see that doggie .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,pro:rel|that($2,n|dog-dim($2)),$1),$0),co|well($0))
example_end

Sent: what kind of dog is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|dog($2))))
example_end

Sent: he 'll come down backwards .
Sem: lambda $0_{ev}.mod|~will(and(and(v|come(pro:sub|he,$0),adv|down($0)),adv|backwards($0)),$0)
example_end

Sent: looks like Twinkles doesn 't it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(you,$0),conj|like(n:prop|twinkles,$0)),not(mod|do(pro:per|it,$0),$0)))
example_end

Sent: he can 't go ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|go(pro:sub|he,$0),$0),$0))
example_end

Sent: I don 't think you can open it .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(v|open(pro:per|you,pro:per|it,$1),$1),$0),$0),$0)
example_end

Sent: guess what it is .
Sem: lambda $0_{e}.lambda $1_{ev}.v|guess(you,$0,$1)
example_end

Sent: oh no it doesn 't open .
Sem: lambda $0_{ev}.and(not(mod|do(v|open(pro:per|it,$0),$0),$0),and(co|no($0),co|oh($0)))
example_end

Sent: what kind of bag is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|bag($2))))
example_end

Sent: those are palm trees from Hawaii .
Sem: lambda $0_{ev}.att(and_comp(n|palm(pro:dem|those,$0),n|tree-pl(pro:dem|those,$0)),prep|from(n:prop|hawaii))
example_end

Sent: two men ?
Sem: lambda $0_{e}.Q(det:num|two(n|man-pl($0)))
example_end

Sent: what kind of men ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|man-pl($2))))
example_end

Sent: what did Bengy see the seals doing when he went to the zoo ?
Sem: lambda $4_{e}.lambda $0_{ev}.conj|when(and(v|go-past(pro:sub|he,$0),prep|to(det:art|the($1,n|zoo($1)),$0)),mod|do-past(v|see(n:prop|bengy,lambda $2_{ev}.part|do-presp(det:art|the($3,n|seal-pl($3)),$4,$2),$0),$0))
example_end

Sent: what were they doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-past(part|do-presp(pro:sub|they,$1,$0),$0)
example_end

Sent: yes they went to sleep didn 't they ?
Sem: lambda $0_{ev}.Q(and(and(v|go-past(pro:sub|they,lambda $1_{ev}.n|sleep(pro:sub|they,$1),$0),not(mod|do(pro:sub|they,$0),$0)),co|yes($0)))
example_end

Sent: had a horn yes .
Sem: lambda $0_{ev}.and(v|have-past(you,det:art|a($1,n|horn($1)),$0),co|yes($0))
example_end

Sent: he was playing a little tune .
Sem: lambda $0_{ev}.aux|be-past(part|play-presp(pro:sub|he,det:art|a($1,and(adj|little($1),n|tune($1))),$0),$0)
example_end

Sent: these are holding balls on their noses .
Sem: lambda $0_{ev}.aux|be-pres(and(part|hold-presp(det:dem|these,lambda $1_{e}.n|ball-pl($1),$0),prep|on(det:poss|their($2,n|nose-pl($2)),$0)),$0)
example_end

Sent: he lost his ball .
Sem: lambda $0_{ev}.v|lose-past(pro:sub|he,det:poss|his($1,n|ball($1)),$0)
example_end

Sent: look at the clown .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|at(det:art|the($1,n|clown($1)),$0))
example_end

Sent: he 's being funny isn 't he ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|be-presp(pro:sub|he,lambda $1_{ev}.adj|fun-dn(pro:sub|he,$1),$0),$0),not(cop|be(pro:sub|he,$0),$0)))
example_end

Sent: that 's his head .
Sem: lambda $0_{ev}.det:poss|his(pro:dem|that,n|head(pro:dem|that,$0))
example_end

Sent: he doesn 't have much hair does he ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|have(pro:sub|he,adv|much($1,n|hair($1)),$0),$0),$0),mod|do-3s(pro:sub|he,$0)))
example_end

Sent: what d you think she does in the circus ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|do-3s(pro:sub|she,pro:int|what,$1),prep|in(det:art|the($2,n|circus($2)),$1)),$0),$0))
example_end

Sent: you took it off .
Sem: lambda $0_{ev}.and(v|take-past(pro:per|you,pro:per|it,$0),adv|off($0))
example_end

Sent: those are horses .
Sem: lambda $0_{ev}.n|horse-pl(pro:dem|those,$0)
example_end

Sent: d you think they look like Perro ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(cop|look(pro:sub|they,$1),conj|like(n:prop|perro,$1)),$0),$0))
example_end

Sent: your tummy made a noise ?
Sem: lambda $0_{ev}.Q(v|make-past(det:poss|your($1,n|tummy($1)),det:art|a($2,n|noise($2)),$0))
example_end

Sent: perhaps that was your tummy saying that it has enough chocolate .
Sem: lambda $0_{ev}.and(part|say-presp(you,lambda $1_{ev}.aux|have-3s(pro:per|it,adv|enough(lambda $2_{e}.n|chocolate($2)),$1),$0),adv|perhaps($0))
example_end

Sent: it 's a bag .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|bag(pro:per|it,$0))
example_end

Sent: you don 't remember ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|remember(pro:per|you,$0),$0),$0))
example_end

Sent: what d you think is in there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(aux|be-3s(pro:int|what,$1),adv|in(adv|there($1))),$0),$0))
example_end

Sent: they 're dried beans .
Sem: lambda $0_{ev}.and(n|bean-pl(pro:sub|they,$0),v|dry-past(pro:sub|they,$0))
example_end

Sent: dried beans .
Sem: lambda $0_{e}.and(v|dry-past($0),n|bean-pl($0))
example_end

Sent: pumpkin seeds ?
Sem: lambda $0_{e}.Q(and_comp(n|pumpkin($0),v|seed-3s($0)))
example_end

Sent: well nobody .
Sem: lambda $0_{ev}.and(pro:indef|nobody($0),co|well($0))
example_end

Sent: they 're put in here so_that you may play with the bag .
Sem: lambda $0_{ev}.conj|so_that(mod|may(and(v|play(pro:per|you,$0),prep|with(det:art|the($1,n|bag($1)),$0)),$0),aux|~be(and(part|put-pastp(pro:sub|they,$0),prep|in(adv|here($0))),$0))
example_end

Sent: bean bag .
Sem: lambda $0_{e}.and_comp(n|bean($0),n|bag($0))
example_end

Sent: well you go over there and throw it up .
Sem: lambda $0_{ev}.and(and(and(v|throw(pro:per|you,pro:per|it,$0),adv|over(adv|there($0))),adv|up($0)),co|well($0))
example_end

Sent: no I think we 'd better not throw it up like that .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.not(mod|~genmod(and(and(and(v|throw(pro:sub|we,pro:per|it,$1),adj|good-cp($1)),adv|up($1)),prep|like(pro:dem|that,$1)),$1),$1),$0),co|no($0))
example_end

Sent: you just throw it to me .
Sem: lambda $0_{ev}.and(and(v|throw(pro:per|you,pro:per|it,$0),adv|just($0)),prep|to(pro:obj|me,$0))
example_end

Sent: why are you knocking them over ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|knock-presp(pro:per|you,pro:obj|them,$0),$1($0)),adv|over($0)),$0)
example_end

Sent: are you going to eat it ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|eat(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: okay honey .
Sem: lambda $0_{ev}.and(n|honey($0),co|okay($0))
example_end

Sent: why aren 't you eating it ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(aux|be(and(part|eat-presp(pro:per|you,pro:per|it,$0),$1($0)),$0),$0)
example_end

Sent: what are you putting on your head ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,$1,$0),prep|on(det:poss|your($2,n|head($2)),$0)),$0)
example_end

Sent: look up at the light .
Sem: lambda $0_{ev}.and(and(co|look(you,$0),adv|up($0)),prep|at(det:art|the($1,n|light($1)),$0))
example_end

Sent: is that you talking ?
Sem: lambda $0_{ev}.Q(part|talk-presp(you,$0))
example_end

Sent: who is honey ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n|honey,$0)
example_end

Sent: Adam d you want to write on your money ?
Sem: lambda $0_{ev}.Q(v|do(v|want(pro:per|you,lambda $1_{ev}.and(v|write(pro:per|you,$1),prep|on(det:poss|your($2,n|money($2)),$1)),$0),$0))
example_end

Sent: I don 't see it .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: Adam you 'd better put the cover on first .
Sem: lambda $0_{ev}.mod|~genmod_good-cp(and(and(v|put-zero(pro:per|you,det:art|the($1,n|cover($1)),$0),adv|on($0)),adv|first($0)),$0)
example_end

Sent: yes you 'd better put the top on .
Sem: lambda $0_{ev}.and(mod|~genmod_good-cp(and(v|put-zero(pro:per|you,det:art|the($1,n|top($1)),$0),adv|on($0)),$0),co|yes($0))
example_end

Sent: did you make this toy ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|make(pro:per|you,pro:dem|this($1,n|toy($1)),$0),$0))
example_end

Sent: does this horse have a saddle ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(pro:dem|this($1,n|horse($1)),det:art|a($2,n|saddle($2)),$0),$0))
example_end

Sent: it doesn 't have a saddle ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(pro:per|it,det:art|a($1,n|saddle($1)),$0),$0),$0))
example_end

Sent: the diaper man .
Sem: det:art|the($0,and_comp(n|diaper($0),n|man($0)))
example_end

Sent: what kind of game d you have Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|game($3)))),$0),$0)
example_end

Sent: you match them ?
Sem: lambda $0_{ev}.Q(v|match(pro:per|you,pro:obj|them,$0))
example_end

Sent: well let 's put them all together first .
Sem: lambda $0_{ev}.and(v:obj|let(you,lambda $1_{ev}.and(and(v|put-zero(pro:obj|~us,post|all(pro:obj|them),$1),adv|together($1)),adv|first($1)),$0),co|well($0))
example_end

Sent: well how do you know ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|know(pro:per|you,$0),$1($0)),$0),co|well($0))
example_end

Sent: she 's the copilot .
Sem: lambda $0_{ev}.det:art|the(pro:sub|she,n|pilot(pro:sub|she,$0))
example_end

Sent: she helps drive the rocket .
Sem: lambda $0_{ev}.v|help-3s(pro:sub|she,$0)
example_end

Sent: yes you do .
Sem: lambda $0_{ev}.and(v|do(pro:per|you,$0),co|yes($0))
example_end

Sent: that 's the landing tower .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and_comp(part|land-presp(pro:dem|that,$0),n|tower(pro:dem|that,$0)))
example_end

Sent: those two are just alike .
Sem: lambda $0_{ev}.adv|just(adv|alike(pro:dem|those($1,det:num|two($1)),$0))
example_end

Sent: these are control panels .
Sem: lambda $0_{ev}.and_comp(n|control(pro:dem|these,$0),n|panel-pl(pro:dem|these,$0))
example_end

Sent: space scanners .
Sem: lambda $0_{e}.and_comp(n|space($0),n|scan-dv($0))
example_end

Sent: yes it is round like a circle .
Sem: lambda $0_{e}.lambda $1_{ev}.adv|round($0,$1)
example_end

Sent: I 'll help you take one .
Sem: lambda $0_{ev}.mod|~will(v|help(pro:sub|i,lambda $1_{ev}.v|take(pro:per|you,pro:indef|one,$1),$0),$0)
example_end

Sent: no I want you to sit up .
Sem: lambda $0_{ev}.and(v|want(pro:sub|i,lambda $1_{ev}.and(v|sit(pro:per|you,$1),adv|up($1)),$0),co|no($0))
example_end

Sent: you 're sitting on the others dear .
Sem: lambda $0_{ev}.aux|~be(and(part|sit-presp(pro:per|you,$0),prep|on(det:art|the($1,n:pt|others($1)),$0)),$0)
example_end

Sent: sit up so you may have another card .
Sem: lambda $0_{ev}.conj|so(mod|may(v|have(pro:per|you,qn|another($1,n|card($1)),$0),$0),and(v|sit(you,$0),adv|up($0)))
example_end

Sent: take one .
Sem: lambda $0_{ev}.v|take(you,pro:indef|one,$0)
example_end

Sent: oh look there 's another one .
Sem: lambda $0_{ev}.and(and(and(cop|~be(qn|another($1,pro:indef|one($1)),$0),pro:exist|there($0)),co|look(you,$0)),co|oh($0))
example_end

Sent: you may take another turn .
Sem: lambda $0_{ev}.mod|may(v|take(pro:per|you,qn|another($1,n|turn($1)),$0),$0)
example_end

Sent: yes you have .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,$0),co|yes($0))
example_end

Sent: oh you didn 't finish yet .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|finish(pro:per|you,$0),adv|yet($0)),$0),$0),co|oh($0))
example_end

Sent: yes that 's right .
Sem: lambda $0_{ev}.and(n|right(pro:dem|that,$0),co|yes($0))
example_end

Sent: is there another one like that ?
Sem: lambda $0_{ev}.Q(cop|be-3s(qn|another($1,att(pro:indef|one,prep|like(pro:dem|that),$1)),$0))
example_end

Sent: no don 't spread them over the floor like that .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|spread-zero(you,pro:obj|them,$0),prep|over(det:art|the($1,n|floor($1)),$0)),prep|like(pro:dem|that,$0)),$0),$0),co|no($0))
example_end

Sent: do you know what that one is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: that 's a space scanner .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|space(pro:dem|that,$0),n|scan-dv(pro:dem|that,$0)))
example_end

Sent: you use it to look into space with .
Sem: lambda $0_{ev}.v|use(pro:per|you,lambda $1_{ev}.and(cop|look(pro:per|it,$1),prep|into(lambda $2_{e}.n|space($2),$1)),$0)
example_end

Sent: and this is blast .
Sem: lambda $0_{ev}.n|blast+off(pro:dem|this,$0)
example_end

Sent: five four three two one zero blast .
Sem: lambda $0_{e}.det:num|five($0)
example_end

Sent: that 's a space chart .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|space(pro:dem|that,$0),n|chart(pro:dem|that,$0)))
example_end

Sent: you match all of them together that you can .
Sem: lambda $0_{ev}.pro:rel|that(mod|can(pro:per|you,$0),and(and(v|match(pro:per|you,$0),prep|of(qn|all($1,pro:obj|them($1)),$0)),adv|together($0)))
example_end

Sent: and here 's the pilot .
Sem: lambda $0_{ev}.and(cop|~be(det:art|the($1,n|pilot($1)),$0),pro:exist|here($0))
example_end

Sent: the pilot drives the spaceship see ?
Sem: lambda $0_{ev}.Q(and(v|drive-3s(det:art|the($1,n|pilot($1)),det:art|the($2,n|space+ship($2)),$0),v|see(you,$0)))
example_end

Sent: let 's put them all together first .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(and(v|put-zero(pro:obj|~us,post|all($2,pro:obj|them($2)),$1),adv|together($1)),adv|first($1)),$0)
example_end

Sent: this is the landing tower .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and_comp(part|land-presp(pro:dem|this,$0),n|tower(pro:dem|this,$0)))
example_end

Sent: so_that they 're go where they want to go .
Sem: lambda $0_{ev}.cop|~be(v|go(pro:sub|they,lambda $1_{ev}.and(v|want(pro:sub|they,lambda $2_{ev}.v|go(pro:sub|they,$2),$1),adv:int|where($1)),$0),$0)
example_end

Sent: it 's for the pilot to get out .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,lambda $1_{ev}.and(v|get(pro:per|it,$1),adv|out($1)),$0),conj|for(det:art|the($2,n|pilot($2)),$0))
example_end

Sent: no but what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,$0),co|no($0))
example_end

Sent: that 's five four three two one zero .
Sem: lambda $0_{e}.det:num|five($0)
example_end

Sent: and what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: what comes first ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|come-3s($1,$0),adv|first($0))
example_end

Sent: you 'll bend them .
Sem: lambda $0_{ev}.mod|~will(v|bend(pro:per|you,pro:obj|them,$0),$0)
example_end

Sent: that 's the copilot .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|pilot(pro:dem|that,$0))
example_end

Sent: that 's the seat I guess and some of the controls of the spaceship .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.det:art|the(pro:dem|that,n|seat(pro:dem|that,$1)),$0)
example_end

Sent: no you don 't throw that away .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|throw(pro:per|you,pro:rel|that,$0),adv|away($0)),$0),$0),co|no($0))
example_end

Sent: why d you have_to throw that away ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(and(and(v|throw(pro:per|you,pro:dem|that,$0),$1($0)),adv|away($0)),$0),$0)
example_end

Sent: no don 't throw it away .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|throw(you,pro:per|it,$0),adv|away($0)),$0),$0),co|no($0))
example_end

Sent: you know what those are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: they 're more than numbers .
Sem: lambda $0_{ev}.n|number-pl(pro:sub|they,$0)
example_end

Sent: they 're directions .
Sem: lambda $0_{ev}.n|direction-pl(pro:sub|they,$0)
example_end

Sent: yes they are .
Sem: lambda $0_{ev}.and(cop|be-pres(pro:sub|they,$0),co|yes($0))
example_end

Sent: it 's going to pop ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|it,lambda $1_{ev}.n|pop(pro:per|it,$1),$0),$0))
example_end

Sent: look what he has on his head .
Sem: lambda $0_{ev}.co|look(you,lambda $1_{ev}.and(aux|have-3s(pro:sub|he,pro:int|what,$1),adv|on(det:poss|his($2,n|head($2)),$1)),$0)
example_end

Sent: yes he is the pilot but what is this on his head ?
Sem: lambda $0_{ev}.and(det:art|the(pro:sub|he,n|pilot(pro:sub|he,$0)),co|yes($0))
example_end

Sent: what 're you going to do with it ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),prep|with(pro:per|it,$1)),$0),$0)
example_end

Sent: put them in the box ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:obj|them,$0),prep|in(det:art|the($1,n|box($1)),$0)))
example_end

Sent: like a Jack_a_weasel .
Sem: prep|like(det:art|a($0,n:prop|jack_a_weasel($0)))
example_end

Sent: spread them .
Sem: lambda $0_{ev}.v|spread-zero(you,pro:obj|them,$0)
example_end

Sent: what is a Jack_a_weasel ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n:prop|jack_a_weasel($2)),$0)
example_end

Sent: d you know what ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|know(pro:per|you,$1,$0),$0)
example_end

Sent: yes you can sit on me .
Sem: lambda $0_{ev}.and(mod|can(and(v|sit(pro:per|you,$0),prep|on(pro:obj|me,$0)),$0),co|yes($0))
example_end

Sent: you bent that game didn 't you ?
Sem: lambda $0_{ev}.Q(and(v|bend-past(pro:per|you,det:dem|that($1,n|game($1)),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: I don 't know why .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,$0),$1($0)),$0),$0)
example_end

Sent: because you had it in your pocket .
Sem: lambda $0_{ev}.and(v|have-past(pro:per|you,pro:per|it,$0),prep|in(det:poss|your($1,n|pocket($1)),$0))
example_end

Sent: what d you have in your pocket today ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(and(v|have(pro:per|you,$1,$0),prep|in(det:poss|your($2,n|pocket($2)),$0)),adv:tem|today($0)),$0)
example_end

Sent: how did you get zeros in your pocket ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(and(v|get(pro:per|you,lambda $1_{e}.det:num|zero-pl($1),$0),$2($0)),prep|in(det:poss|your($3,n|pocket($3)),$0)),$0)
example_end

Sent: he 's a happy fellow ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,and(n|fellow(pro:sub|he,$0),adj|happy(pro:sub|he,$0))))
example_end

Sent: why is he so happy ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|so($1(adj|happy(pro:sub|he,$0)))
example_end

Sent: been sleep .
Sem: lambda $0_{ev}.aux|be-pastp(n|sleep(you,$0),$0)
example_end

Sent: they are going to sleep ?
Sem: lambda $0_{ev}.Q(aux|be-pres(part|go-presp(pro:sub|they,lambda $1_{ev}.v|sleep(pro:sub|they,$1),$0),$0))
example_end

Sent: what shall we call the babies ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|shall(v|call(pro:sub|we,det:art|the($1,n|baby-pl($1)),$2,$0),$0)
example_end

Sent: baby Bozos .
Sem: att(n:prop|bozos,lambda $0_{e}.n|baby($0))
example_end

Sent: here 's one more baby .
Sem: lambda $0_{ev}.and(cop|~be(lambda $1_{e}.and(qn|more($1),pro:indef|one(n|baby($1))),$0),pro:exist|here($0))
example_end

Sent: oh my_goodness .
Sem: lambda $0_{ev}.and(co|my_goodness($0),co|oh($0))
example_end

Sent: what happened to one two three ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|one($2),$0))
example_end

Sent: yes what happened to one two three ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|one($2),$0)),co|yes($0))
example_end

Sent: where does this baby have his hands ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do-3s(and(v|have(pro:dem|this($1,n|baby($1)),det:poss|his($2,n|hand-pl($2)),$0),$3($0)),$0)
example_end

Sent: why d you think he has his hands on his tummy ?
Sem: lambda $4_{e}.lambda $0_{ev}.mod|do(and(v|think(pro:per|you,lambda $1_{ev}.and(v|have-3s(pro:sub|he,det:poss|his($2,n|hand-pl($2)),$1),prep|on(det:poss|his($3,n|tummy($3)),$1)),$0),$4($0)),$0)
example_end

Sent: he 's dressing up ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|dress-presp(pro:sub|he,$0),adv|up($0)),$0))
example_end

Sent: what are you putting around his neck ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,$1,$0),prep|around(det:poss|his($2,n|neck($2)),$0)),$0)
example_end

Sent: oh bandana oh this must be a cowboy .
Sem: lambda $0_{ev}.and(and(and(mod|must(det:art|a(pro:dem|this,n|cow+boy(pro:dem|this,$0)),$0),lambda $1_{e}.n|bandana($1)),co|oh($0)),co|oh($0))
example_end

Sent: did he take a bath Adam ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|take(pro:sub|he,det:art|a($1,n|bath($1)),$0),$0))
example_end

Sent: they 're going to sleep in the Wintertime .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|they,lambda $1_{ev}.and(n|sleep(pro:sub|they,$1),prep|in(det:art|the($2,n:prop|wintertime($2)),$1)),$0),$0)
example_end

Sent: do they all fit in there Adam ?
Sem: lambda $0_{ev}.Q(mod|do(and(part|fit-pastp(post|all($1,pro:sub|they($1)),$0),prep|in(adv|there($0))),$0))
example_end

Sent: they almost fit ?
Sem: lambda $0_{ev}.Q(and(v|fit-zero(pro:sub|they,$0),adv|almost($0)))
example_end

Sent: they are taking baths .
Sem: lambda $0_{ev}.aux|be-pres(part|take-presp(pro:sub|they,lambda $1_{e}.n|bath-pl($1),$0),$0)
example_end

Sent: sleeping in the bath .
Sem: lambda $0_{ev}.and(part|sleep-presp(you,$0),prep|in(det:art|the($1,n|bath($1)),$0))
example_end

Sent: did you ever do that ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|do(pro:per|you,pro:dem|that,$0),adv|ever($0)),$0))
example_end

Sent: ride on that ?
Sem: lambda $0_{ev}.Q(and(n|ride(you,$0),prep|on(pro:dem|that,$0)))
example_end

Sent: can you ride on that ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|ride(pro:per|you,$0),prep|on(pro:dem|that,$0)),$0))
example_end

Sent: you are too big .
Sem: lambda $0_{ev}.adv|too(adj|big(pro:per|you,$0))
example_end

Sent: I think so too .
Sem: lambda $0_{ev}.and(and(v|think(pro:sub|i,$0),conj|so($0)),post|too($0))
example_end

Sent: he 's hanging out_of your pocket .
Sem: lambda $0_{ev}.aux|~be(and(part|hang-presp(pro:sub|he,$0),prep|out_of(det:poss|your($1,n|pocket($1)),$0)),$0)
example_end

Sent: that doesn 't come off dear .
Sem: lambda $0_{ev}.not(mod|do(and(v|come(pro:dem|that,$0),prep|off($0)),$0),$0)
example_end

Sent: don 't throw them .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,pro:obj|them,$0),$0),$0)
example_end

Sent: no I 'll be glad if you will hand it to me .
Sem: lambda $0_{ev}.and(conj|if(mod|will(and(v|hand(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),$0),mod|~will(adj|glad(pro:sub|i,$0),$0)),co|no($0))
example_end

Sent: what happened to your babies ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|baby-pl($2)),$0))
example_end

Sent: do they have their blankets ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:sub|they,det:poss|their($1,n|blanket-pl($1)),$0),$0))
example_end

Sent: about to wake up .
Sem: lambda $0_{ev}.and(and(v|wake(you,$0),adv|about($0)),adv|up($0))
example_end

Sent: I almost dressed you ?
Sem: lambda $0_{ev}.Q(and(v|dress-past(pro:sub|i,pro:per|you,$0),adv|almost($0)))
example_end

Sent: I dressed you up like a baby elephant !
Sem: lambda $0_{ev}.and(and(v|dress-past(pro:sub|i,pro:per|you,$0),adv|up($0)),prep|like(det:art|a($1,and(n|baby($1),n|elephant($1))),$0))
example_end

Sent: there are some seals .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some($1,n|seal-pl($1)),$0),adv|there($0))
example_end

Sent: birthday time .
Sem: lambda $0_{e}.and_comp(n|birth+day($0),n|time($0))
example_end

Sent: eat my lunch ?
Sem: lambda $0_{ev}.Q(v|eat(you,det:poss|my($1,n|lunch($1)),$0))
example_end

Sent: and then may I look ?
Sem: lambda $0_{ev}.Q(mod|may(and(cop|look(pro:sub|i,$0),adv:tem|then($0)),$0))
example_end

Sent: may I look now ?
Sem: lambda $0_{ev}.Q(mod|may(and(cop|look(pro:sub|i,$0),adv|now($0)),$0))
example_end

Sent: I 've finished my lunch .
Sem: lambda $0_{ev}.aux|~have(part|finish-pastp(pro:sub|i,det:poss|my($1,n|lunch($1)),$0),$0)
example_end

Sent: three dollies .
Sem: lambda $0_{e}.det:num|three(n|doll-dim($0))
example_end

Sent: two seals one strong man .
Sem: and(lambda $0_{e}.det:num|two(n|seal-pl($0)),lambda $1_{e}.and(adj|strong($1),pro:indef|one(n|man($1))))
example_end

Sent: one bareback rider .
Sem: lambda $0_{e}.and(adv|bareback($0),det:num|one(n|ride-dv($0)))
example_end

Sent: and a train .
Sem: det:art|a($0,n|train($0))
example_end

Sent: a circus train .
Sem: det:art|a($0,and_comp(n|circus($0),n|train($0)))
example_end

Sent: that 's not a circus train those are circus men ?
Sem: lambda $0_{ev}.Q(not(and(det:art|a(pro:dem|that,and_comp(n|circus(pro:dem|that,$0),v|train(pro:dem|that,$0))),and_comp(n|circus(pro:dem|those,$0),n|man-pl(pro:dem|those,$0))),$0))
example_end

Sent: they are standing ?
Sem: lambda $0_{ev}.Q(aux|be-pres(part|stand-presp(pro:sub|they,$0),$0))
example_end

Sent: so you can put it in a notebook if you like .
Sem: lambda $0_{ev}.conj|if(co|like(pro:per|you,$0),mod|can(and(and(v|put-zero(pro:per|you,pro:per|it,$0),co|so($0)),prep|in(det:art|a($1,n|notebook($1)),$0)),$0))
example_end

Sent: shall we look at these first ?
Sem: lambda $0_{ev}.Q(mod|shall(and(and(cop|look(pro:sub|we,$0),prep|at(pro:dem|these,$0)),adj|first($0)),$0))
example_end

Sent: it 's a watch ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|watch(pro:per|it,$0)))
example_end

Sent: you could use the paper .
Sem: lambda $0_{ev}.mod|could(v|use(pro:per|you,det:art|the($1,n|paper($1)),$0),$0)
example_end

Sent: no he can 't have one .
Sem: lambda $0_{ev}.and(not(mod|can(v|have(pro:sub|he,pro:indef|one,$0),$0),$0),co|no($0))
example_end

Sent: he 's too little .
Sem: lambda $0_{ev}.adv|too(adj|little(pro:sub|he,$0))
example_end

Sent: you going to tell her a story ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.v|tell(pro:per|you,det:art|a($2,n|story($2)),pro:obj|her,$1),$0))
example_end

Sent: no that 's alright Adam .
Sem: lambda $0_{ev}.and(adj|alright(pro:dem|that,$0),co|no($0))
example_end

Sent: she doesn 't have any games in that one Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:sub|she,qn|any($1,n|game-pl($1)),$0),prep|in(pro:dem|that($2,pro:indef|one($2)),$0)),$0),$0)
example_end

Sent: it 's a mirror ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|mirror(pro:per|it,$0)))
example_end

Sent: what do you see in the mirror ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),prep|in(det:art|the($2,n|mirror($2)),$0)),$0)
example_end

Sent: what kind of watch ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|watch($2))))
example_end

Sent: does it look like Daddy 's watch ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(cop|look(pro:per|it,$0),conj|like(n:prop|daddy's($1,n|watch($1)),$0)),$0))
example_end

Sent: it looks like Daddy 's watch ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,$0),prep|like(n:prop|daddy's($1,n|watch($1)),$0)))
example_end

Sent: it doesn 't have a band .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|it,det:art|a($1,n|band($1)),$0),$0),$0)
example_end

Sent: maybe it 's in here .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:per|it,$0),adv|maybe($0)),adv|in(adv|here($0)))
example_end

Sent: oh what 're you going to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,$2,$1),$0),$0),co|oh($0))
example_end

Sent: okay I 'll hold it .
Sem: lambda $0_{ev}.and(mod|~will(v|hold(pro:sub|i,pro:per|it,$0),$0),co|okay($0))
example_end

Sent: it won 't stay there .
Sem: lambda $0_{ev}.not(mod|will(and(cop|stay(pro:per|it,$0),adv|there($0)),$0),$0)
example_end

Sent: you 'd better take it back to Urs .
Sem: lambda $0_{ev}.mod|~genmod_good-cp(and(and(v|take(pro:per|you,pro:per|it,$0),adv|back($0)),prep|to(n:prop|ursula,$0)),$0)
example_end

Sent: you 've never seen a watch ?
Sem: lambda $0_{ev}.Q(aux|~have(and(part|see-pastp(pro:per|you,det:art|a($1,n|watch($1)),$0),adv|never($0)),$0))
example_end

Sent: oh that 's not a chair .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|chair(pro:dem|that,$0)),$0),co|oh($0))
example_end

Sent: I think you 'd better take the watch back to Urs .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod_good-cp(and(and(v|take(pro:per|you,det:art|the($2,n|watch($2)),$1),adv|back($1)),prep|to(n:prop|ursula,$1)),$1),$0)
example_end

Sent: Adam let me see .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,$1),$0)
example_end

Sent: how did you attach that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|attach(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: we could put this in the box .
Sem: lambda $0_{ev}.mod|could(and(v|put-zero(pro:sub|we,pro:dem|this,$0),prep|in(det:art|the($1,n|box($1)),$0)),$0)
example_end

Sent: I know what you can do .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.mod|can(v|do(pro:per|you,pro:int|what,$1),$1),$0)
example_end

Sent: why don 't you use some of this ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|use(pro:per|you,qn|some(pro:dem|this),$0),$1($0)),$0),$0)
example_end

Sent: not cut it off .
Sem: lambda $0_{ev}.not(and(v|cut-zero(you,pro:per|it,$0),adv|off($0)),$0)
example_end

Sent: no look .
Sem: lambda $0_{ev}.and(co|look(you,$0),co|no($0))
example_end

Sent: cut it off on there .
Sem: lambda $0_{ev}.and(and(v|cut-zero(you,pro:per|it,$0),adv|off($0)),prep|on(adv|there($0)))
example_end

Sent: well cut it off .
Sem: lambda $0_{ev}.and(and(v|cut-zero(you,pro:per|it,$0),adv|off($0)),co|well($0))
example_end

Sent: I 'm helping you cut it .
Sem: lambda $0_{ev}.aux|~be(part|help-presp(pro:sub|i,lambda $1_{ev}.v|cut-zero(pro:per|you,pro:per|it,$1),$0),$0)
example_end

Sent: see there where your finger is ?
Sem: lambda $0_{ev}.Q(and(v|see(you,lambda $1_{ev}.and(cop|be-3s(det:poss|your($2,n|finger($2)),$1),adv:int|where($1)),$0),adv|there($0)))
example_end

Sent: oh another one .
Sem: lambda $0_{ev}.and(qn|another($1,pro:indef|one($1),$0),co|oh($0))
example_end

Sent: Adam shall I help you cut it off ?
Sem: lambda $0_{ev}.Q(mod|shall(v|help(pro:sub|i,lambda $1_{ev}.and(v|cut-zero(pro:per|you,pro:per|it,$1),adv|off($1)),$0),$0))
example_end

Sent: that 's enough Adam .
Sem: lambda $0_{ev}.adj|enough(pro:dem|that,$0)
example_end

Sent: d you want to stand up there ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|stand(pro:per|you,$1),adv|up(adv|there($1))),$0),$0))
example_end

Sent: what 's my name ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:poss|my($0,n|name($0,$1))
example_end

Sent: d you know that ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: oh I 'm sorry .
Sem: lambda $0_{ev}.and(adj|sorry(pro:sub|i,$0),co|oh($0))
example_end

Sent: I was crossing the street .
Sem: lambda $0_{ev}.aux|be-past(part|cross-presp(pro:sub|i,det:art|the($1,n|street($1)),$0),$0)
example_end

Sent: how will I get to the other side ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(and(v|get(pro:sub|i,$0),$1($0)),prep|to(det:art|the($2,and(qn|other($2),n|side($2))),$0)),$0)
example_end

Sent: what d you have_to do when you cross the street ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|cross(pro:per|you,det:art|the($1,n|street($1)),$0),mod:aux|have_to(mod|do(v|do(pro:per|you,$2,$0),$0),$0))
example_end

Sent: that 's right you look both ways .
Sem: lambda $0_{ev}.and(adj|right(pro:dem|that,$0),cop|look(pro:per|you,qn|both($1,n|way-pl($1)),$0))
example_end

Sent: no you don 't kick cars do you ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|kick(pro:per|you,lambda $1_{e}.n|car-pl($1),$0),$0),$0),v|do(pro:per|you,$0)),co|no($0)))
example_end

Sent: tell you a story ?
Sem: lambda $0_{ev}.Q(v|tell(you,det:art|a($1,n|story($1)),pro:per|you,$0))
example_end

Sent: why don 't you tell us a story ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|tell(pro:per|you,det:art|a($1,n|story($1)),pro:obj|us,$0),$2($0)),$0),$0)
example_end

Sent: where did you see boats ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,lambda $1_{e}.n|boat-pl($1),$0),$2($0)),$0)
example_end

Sent: some kind of bug .
Sem: qn|some($0,att(n|kind($0),prep|of(lambda $1_{e}.n|bug($1))))
example_end

Sent: you won 't have anymore tape .
Sem: lambda $0_{ev}.not(mod|will(aux|have(pro:per|you,lambda $1_{e}.and(adv|anymore($1),n|tape($1)),$0),$0),$0)
example_end

Sent: Adam where did you see the boats ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|boat-pl($1)),$0),$2($0)),$0)
example_end

Sent: where were you Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-past(pro:per|you,$0),$1($0))
example_end

Sent: were you lost ?
Sem: lambda $0_{ev}.Q(v|lose-past(pro:per|you,$0))
example_end

Sent: see if it can fly .
Sem: lambda $0_{ev}.v|see(you,lambda $1_{ev}.mod|can(v|fly(pro:per|it,$1),$1),$0)
example_end

Sent: that 's a duck ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|duck(pro:dem|that,$0)))
example_end

Sent: what about the tail ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|tail($0))))
example_end

Sent: what does the duck do in the water ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|do(det:art|the($1,n|duck($1)),$2,$0),prep|in(det:art|the($3,n|water($3)),$0)),$0)
example_end

Sent: he 's swimming .
Sem: lambda $0_{ev}.aux|~be(part|swim-presp(pro:sub|he,$0),$0)
example_end

Sent: it might frighten Paul .
Sem: lambda $0_{ev}.mod|might(v|frighten(pro:per|it,n:prop|paul,$0),$0)
example_end

Sent: no we already have a road .
Sem: lambda $0_{ev}.and(and(v|have(pro:sub|we,det:art|a($1,n|road($1)),$0),adv|already($0)),co|no($0))
example_end

Sent: a street light .
Sem: det:art|a($0,and_comp(n|street($0),n|light($0)))
example_end

Sent: with that .
Sem: prep|with(pro:dem|that)
example_end

Sent: how can I make a street light ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(v|make(pro:sub|i,det:art|a($1,and_comp(n|street($1),n|light($1))),$0),$2($0)),$0)
example_end

Sent: you show me how .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|show(pro:per|you,pro:obj|me,$0),$1($0))
example_end

Sent: a steam shovel !
Sem: det:art|a($0,and_comp(n|steam($0),n|shovel($0)))
example_end

Sent: I 'm making a street light .
Sem: lambda $0_{ev}.aux|~be(part|make-presp(pro:sub|i,det:art|a($1,and_comp(n|street($1),n|light($1))),$0),$0)
example_end

Sent: I don 't think we need another one do we ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:sub|we,qn|another($2,pro:indef|one($2)),$1),$0),$0),$0),mod|do(pro:sub|we,$0)))
example_end

Sent: don 't you think Robin has_to look both ways when he crosses the street ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.conj|when(v|cross-3s(pro:sub|he,det:art|the($2,n|street($2)),$1),mod:aux|has_to(cop|look(n:prop|robin,qn|both($3,n|way-pl($3)),$1),$1)),$0),$0),$0))
example_end

Sent: do I want you to do what ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|do(pro:per|you,$2,$1),$0),$0)
example_end

Sent: no that 's not nice to do .
Sem: lambda $0_{ev}.and(not(adj|nice(pro:dem|that,lambda $1_{ev}.v|do(pro:dem|that,$1),$0),$0),co|no($0))
example_end

Sent: that 's a convertible .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|convertible(pro:dem|that,$0))
example_end

Sent: well it doesn 't seem to have a top .
Sem: lambda $0_{ev}.and(not(mod|do(cop|seem(pro:per|it,lambda $1_{ev}.v|have(pro:per|it,det:art|a($2,n|top($2)),$1),$0),$0),$0),co|well($0))
example_end

Sent: you just said you saw ducks .
Sem: lambda $0_{ev}.and(v|say-past(pro:per|you,lambda $1_{ev}.v|saw(pro:per|you,lambda $2_{e}.n|duck-pl($2),$1),$0),adv|just($0))
example_end

Sent: where did you see the ducks ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|duck-pl($1)),$0),$2($0)),$0)
example_end

Sent: at the river ?
Sem: Q(prep|at(det:art|the($0,n|river($0))))
example_end

Sent: was that a river ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|river(pro:rel|that,$0)))
example_end

Sent: where was the water ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-past(det:art|the($1,n|water($1)),$0),$2($0))
example_end

Sent: I know where you went .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.and(v|go-past(pro:per|you,$1),pro:rel|where($1)),$0)
example_end

Sent: did you see a boat with a swan in back of it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,att(n|boat($1),adv|back(prep|with(det:art|a($2,n|swan($2)))))),$0),$0))
example_end

Sent: did you answer Urs ?
Sem: lambda $0_{ev}.Q(v|do-past(v|answer(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: did you tell Urs ?
Sem: lambda $0_{ev}.Q(v|do-past(v|tell(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: did you go on the boat ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|go(pro:per|you,$0),prep|on(det:art|the($1,n|boat($1)),$0)),$0))
example_end

Sent: where was the swan boat Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-past(det:art|the($1,and_comp(n|swan($1),n|boat($1))),$0),$2($0))
example_end

Sent: do you know where the swan boat was ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-past(det:art|the($2,and_comp(n|swan($2),n|boat($2))),$1),adv:int|where($1)),$0),$0))
example_end

Sent: you broke another one ?
Sem: lambda $0_{ev}.Q(v|break-past(pro:per|you,qn|another($1,pro:indef|one($1)),$0))
example_end

Sent: you go put it up .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|up($0))
example_end

Sent: you put this part on the floor .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:dem|this($1,n|part($1)),$0),prep|on(det:art|the($2,n|floor($2)),$0))
example_end

Sent: you 've used up all of the tape .
Sem: lambda $0_{ev}.aux|~have(and(part|use-pastp(pro:per|you,pro:indef|all(det:art|the($1,n|tape($1))),$0),adv|up($0)),$0)
example_end

Sent: open the alligator ?
Sem: lambda $0_{ev}.Q(v|open(you,det:art|the($1,n|alligator($1)),$0))
example_end

Sent: what 's an alligator ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|alligator($2)),$0)
example_end

Sent: well what 's an elevator ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|a($2,n|elevator($2)),$0),co|well($0))
example_end

Sent: put what up ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(you,$1,$0),adv|up($0))
example_end

Sent: why don 't you tell me that story ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|tell(pro:per|you,pro:dem|that($1,n|story($1)),pro:obj|me,$0),$2($0)),$0),$0)
example_end

Sent: you read it to me okay ?
Sem: lambda $0_{ev}.Q(and(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),adj|okay($0)))
example_end

Sent: you read it to me .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0))
example_end

Sent: what kind of doggie was he ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|he,att(n|kind(pro:sub|he,$0),prep|of(lambda $2_{e}.n|dog-dim($2))))
example_end

Sent: what kind of house did he live in ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(adj|live(pro:sub|he,$0),adv|in($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|house($3)))),$0)),$0)
example_end

Sent: oh a barn .
Sem: lambda $0_{ev}.and(det:art|a($1,n|barn($1),$0),co|oh($0))
example_end

Sent: did he have something pretty to wear ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|have(pro:sub|he,lambda $1_{ev}.v|wear(lambda $2_{e}.and(adj|pretty($2),pro:indef|something($2)),$1),$0),$0))
example_end

Sent: what did he have ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|have(pro:sub|he,$1,$0),$0)
example_end

Sent: what kind of bed did he sleep on ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|sleep(pro:sub|he,$0),adv|on($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|bed($3)))),$0)),$0)
example_end

Sent: what kind of yard did he have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(v|have(pro:sub|he,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|yard($3)))),$0),$0)
example_end

Sent: why was Peppy lonely ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(adv|lone-dadj(n:prop|peppy,$0))
example_end

Sent: a big moving truck .
Sem: det:art|a($0,and(n:gerund|move-presp($0),and(adj|big($0),n|truck($0))))
example_end

Sent: you read that story to me .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,pro:dem|that($1,n|story($1)),$0),prep|to(pro:obj|me,$0))
example_end

Sent: is that a pony ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pony(pro:rel|that,$0)))
example_end

Sent: is that a zebra ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|zebra(pro:rel|that,$0)))
example_end

Sent: or a donkey .
Sem: det:art|a($0,n|donkey($0))
example_end

Sent: those are the wise men .
Sem: lambda $0_{ev}.det:art|the(pro:dem|those,and(n|man-pl(pro:dem|those,$0),adj|wise(pro:dem|those,$0)))
example_end

Sent: I don 't think you need a rifle .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,det:art|a($2,n|rifle($2)),$1),$0),$0),$0)
example_end

Sent: what would you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0)
example_end

Sent: can you blow it ?
Sem: lambda $0_{ev}.Q(mod|can(v|blow(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: can you make the windmill go ?
Sem: lambda $0_{ev}.Q(mod|can(v|make(pro:per|you,lambda $1_{ev}.v|go(det:art|the($2,n|windmill($2)),$1),$0),$0))
example_end

Sent: blow it sideways .
Sem: lambda $0_{ev}.and(v|blow(you,pro:per|it,$0),adv|sideways($0))
example_end

Sent: the pin is broken .
Sem: lambda $0_{ev}.part|break-pastp(det:art|the($1,n|pin($1)),$0)
example_end

Sent: I 'll have_to get a better pin .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(v|get(pro:sub|i,det:art|a($1,and(adj|good-cp($1),n|pin($1))),$0),$0),$0)
example_end

Sent: blow it on the side .
Sem: lambda $0_{ev}.and(v|blow(you,pro:per|it,$0),prep|on(det:art|the($1,n|side($1)),$0))
example_end

Sent: blow into here .
Sem: lambda $0_{ev}.and(n|blow(you,$0),prep|into(adv|here($0)))
example_end

Sent: there it goes .
Sem: lambda $0_{ev}.and(v|go-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: Adam how does your Daddy shave ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(and(v|shave(det:poss|your($1,n:prop|daddy($1)),$0),$2($0)),$0)
example_end

Sent: he does .
Sem: lambda $0_{ev}.v|do-3s(pro:sub|he,$0)
example_end

Sent: what d you find Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|find(pro:per|you,$1,$0),$0)
example_end

Sent: I can take the top off .
Sem: lambda $0_{ev}.mod|can(and(v|take(pro:sub|i,det:art|the($1,n|top($1)),$0),adv|off($0)),$0)
example_end

Sent: you going to show it to Urs ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|show(pro:per|you,pro:per|it,$1),prep|to(n:prop|ursula,$1)),$0))
example_end

Sent: d you know where they go ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(v|go(pro:sub|they,$1),adv:int|where($1)),$0),$0))
example_end

Sent: where do they go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|go(pro:sub|they,$0),$1($0)),$0)
example_end

Sent: d you wan me squeeze it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|squeeze(pro:obj|me,pro:per|it,$1),$0),$0))
example_end

Sent: are you going to going to shave ?
Sem: lambda $0_{ev}.Q(cop|be-pres(n:gerund|go-presp(pro:per|you,lambda $1_{ev}.v|shave(pro:per|you,$1),$0),$0))
example_end

Sent: if you 're going to shave I think you 'd better put your blade in first .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(conj|if(aux|~be(part|go-presp(pro:per|you,lambda $2_{ev}.v|shave(pro:per|you,$2),$1),$1),and(and(and(v|put-zero(pro:per|you,det:poss|your($3,n|blade($3)),$1),adj|good-cp($1)),adv|in($1)),adv|first($1))),$1),$0)
example_end

Sent: here 's a mirror .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|mirror($1)),$0),pro:exist|here($0))
example_end

Sent: on your face .
Sem: prep|on(det:poss|your($0,n|face($0)))
example_end

Sent: see that little boy ?
Sem: lambda $0_{ev}.Q(v|see(you,pro:rel|that($1,and(adj|little($1),n|boy($1))),$0))
example_end

Sent: what 're you doing Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: don 't you think he 's too young ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.adv|too(adj|young(pro:sub|he,$1)),$0),$0),$0))
example_end

Sent: d you think I should shave ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|should(v|shave(pro:sub|i,$1),$1),$0),$0))
example_end

Sent: well you get it .
Sem: lambda $0_{ev}.and(v|get(pro:per|you,pro:per|it,$0),co|well($0))
example_end

Sent: they 're in your box there .
Sem: lambda $0_{ev}.adv|there(prep|in(det:poss|your($1,n|box($1)),pro:sub|they,$0))
example_end

Sent: don 't you look in the mirror when you shave ?
Sem: lambda $0_{ev}.Q(not(conj|when(v|shave(pro:per|you,$0),mod|do(and(cop|look(pro:per|you,$0),prep|in(det:art|the($1,n|mirror($1)),$0)),$0)),$0))
example_end

Sent: you 'll have_to take it off .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0),$0)
example_end

Sent: now go look in the mirror .
Sem: lambda $0_{ev}.and(and(co|look(you,$0),adv|now($0)),prep|in(det:art|the($1,n|mirror($1)),$0))
example_end

Sent: go out and get a paper towel .
Sem: lambda $0_{ev}.and(v|get(you,det:art|a($1,and_comp(n|paper($1),n|towel($1))),$0),adv|out($0))
example_end

Sent: where did you see ant ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,lambda $1_{e}.n|ant($1),$0),$2($0)),$0)
example_end

Sent: I guess from the open window out there in the hall .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,$0),adv|there(prep|from(det:art|the($1,and(adj|open($1),n|window($1))),$0)))
example_end

Sent: oh yes I see it .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:per|it,$0),and(co|yes($0),co|oh($0)))
example_end

Sent: want a little water ?
Sem: lambda $0_{ev}.Q(v|want(you,det:art|a($1,and(adj|little($1),n|water($1))),$0))
example_end

Sent: if you 're careful you may have some water .
Sem: lambda $0_{ev}.mod|may(conj|if(co|careful(pro:per|you,$0),v|have(pro:per|you,qn|some($1,n|water($1)),$0)),$0)
example_end

Sent: he scratched himself .
Sem: lambda $0_{ev}.v|scratch-past(pro:sub|he,pro:refl|himself,$0)
example_end

Sent: you fell down on something .
Sem: lambda $0_{ev}.and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|on(pro:indef|something,$0))
example_end

Sent: you 're not too big .
Sem: lambda $0_{ev}.not(adv|too(adj|big(pro:per|you,$0)),$0)
example_end

Sent: when did you shave just like Daddy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|shave(pro:per|you,$0),$1($0)),adj|just(co|like(n:prop|daddy,$0))),$0)
example_end

Sent: not down your neck .
Sem: not(v|down(det:poss|your($0,n|neck($0))))
example_end

Sent: did you take the water out ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,det:art|the($1,n|water($1)),$0),adv|out($0)),$0))
example_end

Sent: now you may put it in .
Sem: lambda $0_{ev}.mod|may(and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|now($0)),adv|in($0)),$0)
example_end

Sent: whoops you had an accident .
Sem: lambda $0_{ev}.and(v|have-past(pro:per|you,det:art|a($1,n|accident($1)),$0),co|whoops($0))
example_end

Sent: don 't have an accident ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(you,det:art|a($1,n|accident($1)),$0),$0),$0))
example_end

Sent: shall I close the box ?
Sem: lambda $0_{ev}.Q(mod|shall(v|close(pro:sub|i,det:art|the($1,n|box($1)),$0),$0))
example_end

Sent: aren 't you going to drink your juice first ?
Sem: lambda $0_{ev}.Q(not(aux|be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|drink(pro:per|you,det:poss|your($2,n|juice($2)),$1),adv|first($1)),$0),$0),$0))
example_end

Sent: what 're you drinking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|drink-presp(pro:per|you,$1,$0),$0)
example_end

Sent: is your juice chewy ?
Sem: lambda $0_{ev}.Q(n|chewy(det:poss|your($1,n|juice($1)),$0))
example_end

Sent: your glass is chewy ?
Sem: lambda $0_{ev}.Q(n|chewy(det:poss|your($1,n|glass($1)),$0))
example_end

Sent: he did .
Sem: lambda $0_{ev}.v|do-past(pro:sub|he,$0)
example_end

Sent: what about this ?
Sem: att(pro:int|what,prep|about(pro:dem|this))
example_end

Sent: is that a new shirt ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,and(n|shirt(pro:rel|that,$0),adj|new(pro:rel|that,$0))))
example_end

Sent: where 's the baby stuck ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|~be(and(v|stick-past(det:art|the($1,n|baby($1)),$0),$2($0)),$0)
example_end

Sent: baby duck .
Sem: lambda $0_{e}.and(n|baby($0),n|duck($0))
example_end

Sent: it 's a baby duck ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,and(n|duck(pro:per|it,$0),n|baby(pro:per|it,$0))))
example_end

Sent: you saw boats ?
Sem: lambda $0_{ev}.Q(v|saw(pro:per|you,lambda $1_{e}.n|boat-pl($1),$0))
example_end

Sent: did you see a birdhouse ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,n|birdhouse($1)),$0),$0))
example_end

Sent: did you see a castle for birds ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,att(n|castle($1),prep|for(lambda $2_{e}.n|bird-pl($2)))),$0),$0))
example_end

Sent: did you see a swan ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,n|swan($1)),$0),$0))
example_end

Sent: and trees ?
Sem: lambda $0_{e}.Q(n|tree-pl($0))
example_end

Sent: they 're made like trees .
Sem: lambda $0_{ev}.aux|~be(and(v|make-past(pro:sub|they,$0),prep|like(lambda $1_{e}.n|tree-pl($1),$0)),$0)
example_end

Sent: one minute .
Sem: lambda $0_{e}.det:num|one(n|minute($0))
example_end

Sent: don 't look .
Sem: lambda $0_{ev}.not(mod|do(co|look(you,$0),$0),$0)
example_end

Sent: d you know what this is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: that 's a ring .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|ring(pro:dem|that,$0))
example_end

Sent: you hold the ring in your hand .
Sem: lambda $0_{ev}.and(v|hold(pro:per|you,det:art|the($1,n|ring($1)),$0),prep|in(det:poss|your($2,n|hand($2)),$0))
example_end

Sent: what does the horse do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|horse($1)),$2,$0),$0)
example_end

Sent: let 's do some tricks .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|do(pro:obj|~us,qn|some($2,n|trick-pl($2)),$1),$0)
example_end

Sent: d you want him to run ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|run(pro:obj|him,$1),$0),$0))
example_end

Sent: where 's a bird ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|bird($1)),$0),$2($0))
example_end

Sent: a house_bird .
Sem: det:art|a($0,chi|house_bird($0))
example_end

Sent: what kind of bird is a house_bird Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|house_bird($2)),att(n|kind(det:art|a($2,chi|house_bird($2)),$0),prep|of(lambda $3_{e}.n|bird($3))))
example_end

Sent: what 's a house_bird ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|house_bird($2)),$0)
example_end

Sent: yes what a house_bird is .
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|a($2,chi|house_bird($2)),$0),co|yes($0))
example_end

Sent: they are what Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|they,$0)
example_end

Sent: Smith 's barn .
Sem: n:prop|smith's($0,n|barn($0))
example_end

Sent: who are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: not in this one no .
Sem: pro:dem|this($0,pro:indef|one($0))
example_end

Sent: it 's my purse .
Sem: lambda $0_{ev}.det:poss|my(pro:per|it,n|purse(pro:per|it,$0))
example_end

Sent: nothing happened to it .
Sem: lambda $0_{ev}.and(v|happen-past(pro:indef|nothing,$0),prep|to(pro:per|it,$0))
example_end

Sent: oh we can make the toys stand up .
Sem: lambda $0_{ev}.and(mod|can(v|make(pro:sub|we,lambda $1_{ev}.and(v|stand(det:art|the($2,n|toy-pl($2)),$1),adv|up($1)),$0),$0),co|oh($0))
example_end

Sent: now he stands up .
Sem: lambda $0_{ev}.and(and(v|stand-3s(pro:sub|he,$0),adv|now($0)),adv|up($0))
example_end

Sent: make a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make(you,$1,$0)
example_end

Sent: Adam what 's a house_bird ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|house_bird($2)),$0)
example_end

Sent: I said what is a house_bird ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say-past($1,$0,$2)
example_end

Sent: no that won 't fit around there .
Sem: lambda $0_{ev}.and(not(mod|will(and(v|fit-zero(pro:rel|that,$0),prep|around(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: d you know where the little stick is Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-3s(det:art|the($2,and(adj|little($2),n|stick($2))),$1),adv:int|where($1)),$0),$0))
example_end

Sent: he 's dancing look at this .
Sem: lambda $0_{ev}.and(aux|~be(part|dance-presp(pro:sub|he,$0),$0),and(cop|look(you,$0),prep|at(pro:dem|this,$0)))
example_end

Sent: we finished our game .
Sem: lambda $0_{ev}.v|finish-past(pro:sub|we,det:poss|our($1,n|game($1)),$0)
example_end

Sent: you want to do it again ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,pro:per|it,$1),adv|again($1)),$0))
example_end

Sent: you want to show it to your Mother ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|show(pro:per|you,pro:per|it,$1),prep|to(det:poss|your($2,n:prop|mother($2)),$1)),$0))
example_end

Sent: new one .
Sem: att(pro:indef|one,lambda $0_{e}.adj|new($0))
example_end

Sent: isn 't it open already ?
Sem: lambda $0_{ev}.Q(not(cop|be(and(v|open(pro:per|it,$0),adv|already($0)),$0),$0))
example_end

Sent: it 's going to break .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|it,lambda $1_{ev}.v|break(pro:per|it,$1),$0),$0)
example_end

Sent: not if you 're careful .
Sem: lambda $0_{ev}.co|careful(pro:per|you,$0)
example_end

Sent: you 're doing some work ?
Sem: lambda $0_{ev}.Q(aux|~be(part|do-presp(pro:per|you,qn|some($1,n|work($1)),$0),$0))
example_end

Sent: it seems to me that you tire of your games very easily .
Sem: lambda $0_{ev}.and(cop|seem-3s(pro:per|it,lambda $1_{ev}.and(and(v|tire(pro:per|you,$1),prep|of(det:poss|your($2,n|game-pl($2)),$1)),adv|very(adv|ease-dadj($1))),$0),prep|to(pro:obj|me,$0))
example_end

Sent: train tracks ?
Sem: lambda $0_{e}.Q(and_comp(n|train($0),v|track-3s($0)))
example_end

Sent: you broken the trains .
Sem: lambda $0_{ev}.part|break-pastp(pro:per|you,det:art|the($1,n|train-pl($1)),$0)
example_end

Sent: you lost your cars .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:poss|your($1,n|car-pl($1)),$0)
example_end

Sent: you left the others behind .
Sem: lambda $0_{ev}.and(v|leave-past(pro:per|you,det:art|the($1,n:pt|others($1)),$0),adv|behind($0))
example_end

Sent: oh you 're telling a story .
Sem: lambda $0_{ev}.and(aux|~be(part|tell-presp(pro:per|you,det:art|a($1,n|story($1)),$0),$0),co|oh($0))
example_end

Sent: telling the same story .
Sem: lambda $0_{ev}.part|tell-presp(you,det:art|the($1,and(adj|same($1),n|story($1))),$0)
example_end

Sent: you lost your caboozle .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:poss|your($1,wplay|caboozle($1)),$0)
example_end

Sent: sit down here .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),adv|down($0)),adv|here($0))
example_end

Sent: dry you off ?
Sem: lambda $0_{ev}.Q(and(v|dry(you,pro:per|you,$0),adv|off($0)))
example_end

Sent: there are your Soakies .
Sem: lambda $0_{ev}.and(cop|be-pres(det:poss|your($1,n:prop|soakies($1)),$0),adv|there($0))
example_end

Sent: why don 't you wash them off ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|wash(pro:per|you,pro:obj|them,$0),$1($0)),adv|off($0)),$0),$0)
example_end

Sent: sit down .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: no sit down .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),adv|down($0)),co|no($0))
example_end

Sent: what did you play over at the park ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|play(pro:per|you,$1,$0),adv|over(prep|at(det:art|the($2,n|park($2)),$0))),$0)
example_end

Sent: you played with your truck ?
Sem: lambda $0_{ev}.Q(and(v|play-past(pro:per|you,$0),prep|with(det:poss|your($1,n|truck($1)),$0)))
example_end

Sent: did you cover it with the sand ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|cover(pro:per|you,pro:per|it,$0),prep|with(det:art|the($1,n|sand($1)),$0)),$0))
example_end

Sent: did you share it with anybody ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|share(pro:per|you,pro:per|it,$0),prep|with(pro:indef|anybody,$0)),$0))
example_end

Sent: what happened to Tom ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|tom,$0))
example_end

Sent: well I guess he did .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,lambda $1_{ev}.v|do-past(pro:sub|he,$1),$0),co|well($0))
example_end

Sent: sit down dear .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: you 're a boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,n|boy(pro:per|you,$0))
example_end

Sent: sit down boy .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: yes Adam Smith .
Sem: lambda $0_{ev}.and(n:prop|smith_adam($0),co|yes($0))
example_end

Sent: that 's the boy .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|boy(pro:dem|that,$0))
example_end

Sent: well sit down if you want to .
Sem: lambda $0_{ev}.and(conj|if(v|want(pro:per|you,$0),and(v|sit(you,$0),adv|down($0))),co|well($0))
example_end

Sent: your Soakie put them up in the bag .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|them,$0),adv|up($0)),prep|in(det:art|the($1,n|bag($1)),$0))
example_end

Sent: you missed .
Sem: lambda $0_{ev}.v|miss-past(pro:per|you,$0)
example_end

Sent: don 't you have_to hold the bag with your hand ?
Sem: lambda $0_{ev}.Q(not(mod:aux|have_to(mod|do(and(v|hold(pro:per|you,det:art|the($1,n|bag($1)),$0),prep|with(det:poss|your($2,n|hand($2)),$0)),$0),$0),$0))
example_end

Sent: Adam you don 't need water dear .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,lambda $1_{e}.n|water($1),$0),$0),$0)
example_end

Sent: are your fingernails clean ?
Sem: lambda $0_{ev}.Q(adj|clean(det:poss|your($1,n|finger+nail($1)),$0))
example_end

Sent: nope they 're still dirty .
Sem: lambda $0_{ev}.and(adv|still(adj|dirt-dn(pro:sub|they,$0)),co|nope($0))
example_end

Sent: no they 're still dirty .
Sem: lambda $0_{ev}.and(adv|still(adj|dirt-dn(pro:sub|they,$0)),co|no($0))
example_end

Sent: here 's some soap dear .
Sem: lambda $0_{ev}.and(cop|~be(qn|some($1,n|soap($1)),$0),pro:exist|here($0))
example_end

Sent: a monkey train backing up .
Sem: lambda $0_{ev}.part|back-presp_up(det:art|a($1,and_comp(n|monkey($1),n|train($1))),$0)
example_end

Sent: don 't play there either .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|play(you,$0),adv|there($0)),adv|either($0)),$0),$0)
example_end

Sent: you said it first .
Sem: lambda $0_{ev}.and(v|say-past(pro:per|you,pro:per|it,$0),adv|first($0))
example_end

Sent: what about the treasure house ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|treasure($0),n|house($0)))))
example_end

Sent: that mirror ?
Sem: lambda $0_{e}.Q(pro:dem|that($1,n|mirror($1),$0))
example_end

Sent: so you can see .
Sem: lambda $0_{ev}.mod|can(and(v|see(pro:per|you,$0),co|so($0)),$0)
example_end

Sent: hop to the shower ?
Sem: lambda $0_{ev}.Q(and(n|hop(you,$0),prep|to(det:art|the($1,n|shower($1)),$0)))
example_end

Sent: who bakes pies ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|bake-3s($1,lambda $2_{e}.n|pie-pl($2),$0)
example_end

Sent: what kind of pies do I bake ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|bake(pro:sub|i,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|pie-pl($3)))),$0),$0)
example_end

Sent: where is the tape recorder ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,and_comp(n|tape($1),n|record-dv($1))),$0),$2($0))
example_end

Sent: a treasure chest .
Sem: det:art|a($0,and_comp(n|treasure($0),n|chest($0)))
example_end

Sent: I think you may knock it off Adam .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|may(and(v|knock(pro:per|you,pro:per|it,$1),prep|off($1)),$1),$0)
example_end

Sent: I don 't think you would intend to .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|will-cond(v|intend(pro:per|you,$1),$1),$0),$0),$0)
example_end

Sent: it would be a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(det:art|a(pro:per|it,$1(pro:per|it,$0)),$0)
example_end

Sent: is that a rope ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|rope(pro:rel|that,$0)))
example_end

Sent: it 's not a rope .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|rope(pro:per|it,$0)),$0)
example_end

Sent: it 's like a rope .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,$0),conj|like(det:art|a($1,n|rope($1)),$0))
example_end

Sent: it 's a cord .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|cord(pro:per|it,$0))
example_end

Sent: it 's like a rope yes .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:per|it,$0),conj|like(det:art|a($1,n|rope($1)),$0)),co|yes($0))
example_end

Sent: I want you to steal ?
Sem: lambda $0_{ev}.Q(v|want(pro:sub|i,lambda $1_{ev}.v|steal(pro:per|you,$1),$0))
example_end

Sent: how does that feel ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|feel(det:dem|that,$0),$1($0)),$0)
example_end

Sent: is that the trailer home ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and_comp(n|trailer(pro:rel|that,$0),adv|home(pro:rel|that,$0))))
example_end

Sent: no I 'm not a Bobo .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:sub|i,n:prop|bobo(pro:sub|i,$0)),$0),co|no($0))
example_end

Sent: I won 't bounce back .
Sem: lambda $0_{ev}.not(mod|will(and(v|bounce(pro:sub|i,$0),adv|back($0)),$0),$0)
example_end

Sent: oh did that hurt ?
Sem: lambda $0_{ev}.Q(and(v|do-past(v|hurt-zero(pro:dem|that,$0),$0),co|oh($0)))
example_end

Sent: you are a silly boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|silly(pro:per|you,$0)))
example_end

Sent: you 're a nut .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,n|nut(pro:per|you,$0))
example_end

Sent: oh yes you are .
Sem: lambda $0_{ev}.and(and(cop|be-pres(pro:per|you,$0),co|oh($0)),co|yes($0))
example_end

Sent: a squirrel might catch you so he 'd have something to eat .
Sem: lambda $0_{ev}.and(mod|might(v|catch(det:art|a($1,n|squirrel($1)),pro:per|you,$0),$0),mod|~genmod(v|have_so(pro:sub|he,lambda $2_{e}.rel(pro:indef|something($2),lambda $3_{ev}.v|eat(you,$3)),$0),$0))
example_end

Sent: what happens at light time ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-3s($1,$0),prep|at(lambda $2_{e}.and(adj|light($2),n|time($2)),$0))
example_end

Sent: yes dear .
Sem: lambda $0_{ev}.and(co|dear($0),co|yes($0))
example_end

Sent: you have a hanger ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,det:art|a($1,n|hang-dv($1)),$0))
example_end

Sent: park it over there near your garage dear .
Sem: lambda $0_{ev}.and(and(v|park(you,pro:per|it,$0),adv|over(adv|there($0))),prep|near(det:poss|your($1,n|garage($1)),$0))
example_end

Sent: why don 't you park it over here ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|park(pro:per|you,pro:per|it,$0),$1($0)),adv|over(adv|here($0))),$0),$0)
example_end

Sent: what story do you want to night ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(and(v|want(pro:per|you,$1($2,n|story($2)),$0),n|night_to($0)),$0)
example_end

Sent: where is Lassie ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|lassie,$0),$1($0))
example_end

Sent: is it up there ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),adv|up(adv|there($0))))
example_end

Sent: here 's a clean one .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,att(pro:indef|one,lambda $2_{e}.adj|clean($2),$1)),$0),pro:exist|here($0))
example_end

Sent: okay you read it to me tonight .
Sem: lambda $0_{ev}.and(and(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),adv:tem|tonight($0)),co|okay($0))
example_end

Sent: hello said the bunny .
Sem: lambda $0_{ev}.and(co|hello($0),v|say-past(you,det:art|the($1,n|bunny($1)),$0))
example_end

Sent: no I looked .
Sem: lambda $0_{ev}.and(cop|look-past(pro:sub|i,$0),co|no($0))
example_end

Sent: I looked .
Sem: lambda $0_{ev}.cop|look-past(pro:sub|i,$0)
example_end

Sent: yes somebody 's in that car .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:indef|somebody,$0),prep|in(pro:dem|that($1,n|car($1)),$0)),co|yes($0))
example_end

Sent: one house flying up in the air .
Sem: lambda $0_{ev}.and(and(part|fly-presp(lambda $1_{e}.det:num|one(n|house($1)),$0),adv|up($0)),prep|in(det:art|the($2,n|air($2)),$0))
example_end

Sent: colonial I guess .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,$0),adj|colonial($0))
example_end

Sent: that 's the water .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|water(pro:dem|that,$0))
example_end

Sent: the waves of the water .
Sem: det:art|the($0,att(n|wave-pl($0),prep|of(det:art|the($1,n|water($1)))))
example_end

Sent: I said to myself .
Sem: lambda $0_{ev}.and(v|say-past(pro:sub|i,$0),prep|to(pro:refl|myself,$0))
example_end

Sent: oh it 's floating .
Sem: lambda $0_{ev}.and(cop|~be(part|float-presp(pro:per|it,$0),$0),co|oh($0))
example_end

Sent: he 's crying .
Sem: lambda $0_{ev}.aux|~be(part|cry-presp(pro:sub|he,$0),$0)
example_end

Sent: he 's sad .
Sem: lambda $0_{ev}.adj|sad(pro:sub|he,$0)
example_end

Sent: he 's happy now ?
Sem: lambda $0_{ev}.Q(adv|now(adj|happy(pro:sub|he,$0)))
example_end

Sent: oh you 're making mud pies .
Sem: lambda $0_{ev}.and(aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.and_comp(n|mud($1),n|pie-pl($1)),$0),$0),co|oh($0))
example_end

Sent: did you make mud pies over at the park ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(v|make(pro:per|you,lambda $1_{e}.and_comp(n|mud($1),n|pie-pl($1)),$0),adv|over($0)),prep|at(det:art|the($2,n|park($2)),$0)),$0))
example_end

Sent: he went for a walk with his mother .
Sem: lambda $0_{ev}.and(v|go-past(pro:sub|he,$0),prep|for(det:art|a($1,att(n|walk($1),prep|with(det:poss|his($2,n|mother($2))))),$0))
example_end

Sent: and he had lots_of friends .
Sem: lambda $0_{ev}.v|have-past(pro:sub|he,qn|lots_of($1,n|friend-pl($1)),$0)
example_end

Sent: okay hop over in your bed .
Sem: lambda $0_{ev}.and(and(and(v|hop(you,$0),adv|over($0)),prep|in(det:poss|your($1,n|bed($1)),$0)),co|okay($0))
example_end

Sent: you have sand on the floor .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,lambda $1_{e}.n|sand($1),$0),prep|on(det:art|the($2,n|floor($2)),$0))
example_end

Sent: well you get up in the bed first .
Sem: lambda $0_{ev}.and(and(and(and(v|get(pro:per|you,$0),adv|up($0)),prep|in(det:art|the($1,n|bed($1)),$0)),adv|first($0)),co|well($0))
example_end

Sent: did you have fun today ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|have(pro:per|you,lambda $1_{e}.n|fun($1),$0),adv:tem|today($0)),$0))
example_end

Sent: what did you play ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|play(pro:per|you,$1,$0),$0)
example_end

Sent: did you play with your truck today ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(v|play(pro:per|you,$0),prep|with(det:poss|your($1,n|truck($1)),$0)),adv:tem|today($0)),$0))
example_end

Sent: and you played games with Urs didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|play-past(pro:per|you,lambda $1_{e}.n|game-pl($1),$0),prep|with(n:prop|ursula,$0)),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: and then went to the park .
Sem: lambda $0_{ev}.and(and(v|go-past(you,$0),adv:tem|then($0)),prep|to(det:art|the($1,n|park($1)),$0))
example_end

Sent: so I may put your cup up .
Sem: lambda $0_{ev}.and(mod|may(and(v|put-zero(pro:sub|i,det:poss|your($1,n|cup($1)),$0),adv|up($0)),$0),conj|so($0))
example_end

Sent: how do I know to put your cup up ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.and(v|put-zero(pro:sub|i,det:poss|your($2,n|cup($2)),$1),adv|up($1)),$0),$3($0)),$0)
example_end

Sent: because it has_to be put up .
Sem: lambda $0_{ev}.cop|be(mod:aux|has_to(and(part|put-pastp(pro:per|it,$0),adv|up($0)),$0),$0)
example_end

Sent: you don 't knock water down ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|knock(pro:per|you,lambda $1_{e}.n|water($1),$0),adv|down($0)),$0),$0))
example_end

Sent: no please .
Sem: lambda $0_{ev}.and(co|please($0),co|no($0))
example_end

Sent: it has some water in it ?
Sem: lambda $0_{ev}.Q(aux|have-3s(pro:per|it,qn|some($1,att(n|water($1),prep|in(pro:per|it))),$0))
example_end

Sent: you drank it all .
Sem: lambda $0_{ev}.v|drink-past(pro:per|you,adv|all($1,pro:per|it($1)),$0)
example_end

Sent: tell you a song ?
Sem: lambda $0_{ev}.Q(v|tell(you,det:art|a($1,n|song($1)),pro:per|you,$0))
example_end

Sent: you tell me a story .
Sem: lambda $0_{ev}.v|tell(pro:per|you,det:art|a($1,n|story($1)),pro:obj|me,$0)
example_end

Sent: you sing me a song .
Sem: lambda $0_{ev}.v|sing(pro:per|you,det:art|a($1,n|song($1)),pro:obj|me,$0)
example_end

Sent: yes good night .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|night($0)),co|yes($0))
example_end

Sent: because I don 't sing very well .
Sem: lambda $0_{ev}.not(mod|do(and(v|sing(pro:sub|i,$0),adv|very(adv|well($0))),$0),$0)
example_end

Sent: don 't do what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|do(you,$1,$0),$0),$0)
example_end

Sent: don 't waste the tape ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|waste(you,det:art|the($1,n|tape($1)),$0),$0),$0))
example_end

Sent: good night dear .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|night($0)),co|dear($0))
example_end

Sent: don 't go in there yet .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|go(you,$0),prep|in(adv|there($0))),adv|yet($0)),$0),$0)
example_end

Sent: remember how we play the surprise game ?
Sem: lambda $0_{ev}.Q(v|remember(you,lambda $1_{ev}.and(v|play(pro:sub|we,det:art|the($2,and(adj|surprise($2),n|game($2))),$1),adv:int|how($1)),$0))
example_end

Sent: what do we do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|do(pro:sub|we,$1,$0),$0)
example_end

Sent: surprise we wait .
Sem: lambda $0_{ev}.and(v|wait(pro:sub|we,$0),n|surprise(you,$0))
example_end

Sent: let 's leave the tape recorder .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|leave(pro:obj|~us,det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$1),$0)
example_end

Sent: let 's play a game .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|play(pro:obj|~us,det:art|a($2,n|game($2)),$1),$0)
example_end

Sent: what did you do to the tape recorder Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|to(det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$0)),$0)
example_end

Sent: so the microphone can 't fall ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|fall(det:art|the($1,n|microphone($1)),$0),$0),$0))
example_end

Sent: wait a minute .
Sem: lambda $0_{ev}.v|wait(you,det:art|a($1,n|minute($1)),$0)
example_end

Sent: would you like a glass of ginger ale ?
Sem: lambda $0_{ev}.Q(mod|will-cond(conj|like(pro:per|you,det:art|a($1,att(n|glass($1),prep|of(lambda $2_{e}.and_comp(n|ginger($2),n|ale($2))))),$0),$0))
example_end

Sent: can you wind it ?
Sem: lambda $0_{ev}.Q(mod|can(v|wind(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you wind it .
Sem: lambda $0_{ev}.v|wind(pro:per|you,pro:per|it,$0)
example_end

Sent: look you wind it right here .
Sem: lambda $0_{ev}.and(and(v|wind(pro:per|you,pro:per|it,$0),adv|right(adv|here($0))),co|look(you,$0))
example_end

Sent: I have a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|have(pro:sub|i,$1,$0)
example_end

Sent: something 's in there .
Sem: lambda $0_{ev}.and(aux|~be(pro:indef|something,$0),adv|in(adv|there($0)))
example_end

Sent: I 'm writing .
Sem: lambda $0_{ev}.aux|~be(part|write-presp(pro:sub|i,$0),$0)
example_end

Sent: I always write when I come don 't I ?
Sem: lambda $0_{ev}.Q(and(conj|when(v|come(pro:sub|i,$0),and(v|write(pro:sub|i,$0),adv|always($0))),not(mod|do(pro:sub|i,$0),$0)))
example_end

Sent: can you hear it tick ?
Sem: lambda $0_{ev}.Q(mod|can(v|hear(pro:per|you,lambda $1_{ev}.v|tick(pro:per|it,$1),$0),$0))
example_end

Sent: put it on your ear .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|on(det:poss|your($1,n|ear($1)),$0))
example_end

Sent: I can 't turn it off .
Sem: lambda $0_{ev}.not(mod|can(and(v|turn(pro:sub|i,pro:per|it,$0),adv|off($0)),$0),$0)
example_end

Sent: it doesn 't turn off .
Sem: lambda $0_{ev}.not(mod|do(and(v|turn(pro:per|it,$0),adv|off($0)),$0),$0)
example_end

Sent: because the springs are all wound up .
Sem: lambda $0_{ev}.cop|be-pres(and(and(v|wound(det:art|the($1,n|spring-pl($1)),$0),adv|all($0)),adv|up($0)),$0)
example_end

Sent: alright my friend .
Sem: lambda $0_{ev}.and(det:poss|my($1,n|friend($1),$0),co|alright($0))
example_end

Sent: what goes up ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go-3s($1,$0),adv|up($0))
example_end

Sent: take the hat .
Sem: lambda $0_{ev}.v|take(you,det:art|the($1,n|hat($1)),$0)
example_end

Sent: what d you mean heavy ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(adj|mean(pro:per|you,lambda $1_{ev}.adj|heavy($2,$1),$0),$0)
example_end

Sent: what 're you going to put in it ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,$2,$1),prep|in(pro:per|it,$1)),$0),$0)
example_end

Sent: are they just like the bus ?
Sem: lambda $0_{ev}.Q(and(cop|be-pres(pro:sub|they,$0),adv|just(prep|like(det:art|the($1,n|bus($1)),$0))))
example_end

Sent: where 's the bus ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|bus($1)),$0),$2($0))
example_end

Sent: give me the button .
Sem: lambda $0_{ev}.v|give(you,det:art|the($1,n|button($1)),pro:obj|me,$0)
example_end

Sent: that 's the button .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|button(pro:dem|that,$0))
example_end

Sent: no no switches .
Sem: lambda $0_{ev}.and(not(n|switch-pl(you,$0),$0),qn|no($0))
example_end

Sent: let 's put the buttons back first .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(and(v|put-zero(pro:obj|~us,det:art|the($2,n|button-pl($2)),$1),adv|back($1)),adv|first($1)),$0)
example_end

Sent: where 's the container ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|contain-dv($1)),$0),$2($0))
example_end

Sent: you don 't have it in the container ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|have(pro:per|you,pro:per|it,$0),prep|in(det:art|the($1,n|contain-dv($1)),$0)),$0),$0))
example_end

Sent: aren 't they in there ?
Sem: lambda $0_{ev}.Q(not(and(aux|be(pro:sub|they,$0),adv|in(adv|there($0))),$0))
example_end

Sent: oh I don 't know .
Sem: lambda $0_{ev}.and(not(mod|do(v|know(pro:sub|i,$0),$0),$0),co|oh($0))
example_end

Sent: who are those people in that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|those($2,att(n|person-pl($2),prep|in(pro:dem|that))),$0)
example_end

Sent: what d you have in your truck ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:poss|your($2,n|truck($2)),$0)),$0)
example_end

Sent: a doll in ?
Sem: lambda $0_{e}.Q(adv|in(det:art|a($1,n|doll($1)),$0))
example_end

Sent: then it 's going ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|go-presp(pro:per|it,$0),adv:tem|then($0)),$0))
example_end

Sent: where is it going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(and(part|go-presp(pro:per|it,$0),$1($0)),$0)
example_end

Sent: where will it be going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be(mod|will(and(part|go-presp(pro:per|it,$0),$1($0)),$0),$0)
example_end

Sent: you fix the mail box ?
Sem: lambda $0_{ev}.Q(v|fix(pro:per|you,det:art|the($1,and_comp(n|mail($1),n|box($1))),$0))
example_end

Sent: you take a picture of Ursula .
Sem: lambda $0_{ev}.v|take(pro:per|you,det:art|a($1,att(n|picture($1),prep|of(n:prop|ursula))),$0)
example_end

Sent: and snap it .
Sem: lambda $0_{ev}.v|snap(you,pro:per|it,$0)
example_end

Sent: no don 't turn it on .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|turn(you,pro:per|it,$0),adv|on($0)),$0),$0),co|no($0))
example_end

Sent: no what migh happen if you knocked it down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(conj|if(and(v|knock-past(pro:per|you,pro:per|it,$0),adv|down($0)),mod|might(v|happen($1,$0),$0)),co|no($0))
example_end

Sent: with your elbow .
Sem: prep|with(det:poss|your($0,n|elbow($0)))
example_end

Sent: you 'll still hurt yourself .
Sem: lambda $0_{ev}.mod|~will(and(part|hurt-pastp(pro:per|you,pro:refl|yourself,$0),adv|still($0)),$0)
example_end

Sent: how does a gentleman roll ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(n|roll(det:art|a($1,n|gentleman($1)),$0),$2($0)),$0)
example_end

Sent: no you might hurt it .
Sem: lambda $0_{ev}.and(mod|might(v|hurt-zero(pro:per|you,pro:per|it,$0),$0),co|no($0))
example_end

Sent: because you hit it .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,pro:per|it,$0)
example_end

Sent: the top of the truck .
Sem: det:art|the($0,att(n|top($0),prep|of(det:art|the($1,n|truck($1)))))
example_end

Sent: but that 's not a trash truck .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,and_comp(n|trash(pro:dem|that,$0),n|truck(pro:dem|that,$0))),$0)
example_end

Sent: that 's an armored car truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|truck(pro:dem|that,$0),part|armor-pastp(pro:dem|that,$0)))
example_end

Sent: it carries money .
Sem: lambda $0_{ev}.v|carry-3s(pro:per|it,lambda $1_{e}.n|money($1),$0)
example_end

Sent: they carry money from one building to another building .
Sem: lambda $0_{ev}.and(and(v|carry(pro:sub|they,lambda $1_{e}.n|money($1),$0),prep|from(lambda $2_{e}.det:num|one(n|building($2)),$0)),prep|to(qn|another($3,n|building($3)),$0))
example_end

Sent: he 's driving the truck .
Sem: lambda $0_{ev}.aux|~be(part|drive-presp(pro:sub|he,det:art|the($1,n|truck($1)),$0),$0)
example_end

Sent: because somebody has_to drive it .
Sem: lambda $0_{ev}.mod:aux|has_to(v|drive(pro:indef|somebody,pro:per|it,$0),$0)
example_end

Sent: no I don 't think the door opens does it ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|open-3s(det:art|the($2,n|door($2)),$1),$0),$0),$0),mod|do-3s(pro:per|it,$0)),co|no($0)))
example_end

Sent: why are those men driving ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|drive-presp(pro:dem|those($1,n|man-pl($1)),$0),$2($0)),$0)
example_end

Sent: because they have_to take the money to someplace else .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|take(pro:sub|they,det:art|the($1,n|money($1)),$0),post|else(prep|to(n|someplace,$0))),$0)
example_end

Sent: no that 's where you put your money .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,n|money($2)),$1),pro:rel|where($1)),$0),co|no($0))
example_end

Sent: you put what in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,$1,$0),adv|in(adv|there($0)))
example_end

Sent: so the toys can get down .
Sem: lambda $0_{ev}.and(mod|can(and(v|get(det:art|the($1,n|toy-pl($1)),$0),adv|down($0)),$0),co|so($0))
example_end

Sent: with Paul ?
Sem: Q(prep|with(n:prop|paul))
example_end

Sent: how d you mark something ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|mark(pro:per|you,pro:indef|something,$0),$1($0)),$0)
example_end

Sent: oh go get the carriage Adam for the baby .
Sem: lambda $0_{ev}.and(and(v|get(you,det:art|the($1,n|carriage($1)),$0),prep|for(det:art|the($2,n|baby($2)),$0)),co|oh($0))
example_end

Sent: oh Adam you 've had a horse in the armored car truck .
Sem: lambda $0_{ev}.and(aux|~have(and(part|have-pastp(pro:per|you,det:art|a($1,n|horse($1)),$0),prep|in(det:art|the($2,and_comp(n|car($2),and(part|armor-pastp($2),n|truck($2)))),$0)),$0),co|oh($0))
example_end

Sent: why did you tip it over ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|tip(pro:per|you,pro:per|it,$0),$1($0)),adv|over($0)),$0)
example_end

Sent: that 's a street light .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|street(pro:dem|that,$0),n|light(pro:dem|that,$0)))
example_end

Sent: you always had pennies .
Sem: lambda $0_{ev}.and(v|have-past(pro:per|you,lambda $1_{e}.n|penny-pl($1),$0),adv|always($0))
example_end

Sent: yes take a picture of me .
Sem: lambda $0_{ev}.and(v|take(you,det:art|a($1,att(n|picture($1),prep|of(pro:obj|me))),$0),co|yes($0))
example_end

Sent: I see you .
Sem: lambda $0_{ev}.v|see(pro:sub|i,pro:per|you,$0)
example_end

Sent: step on your toys ?
Sem: lambda $0_{ev}.Q(and(v|step(you,$0),prep|on(det:poss|your($1,n|toy-pl($1)),$0)))
example_end

Sent: on your train ?
Sem: Q(prep|on(det:poss|your($0,n|train($0))))
example_end

Sent: Urs did .
Sem: lambda $0_{ev}.v|do-past(n:prop|ursula,$0)
example_end

Sent: is that a red one ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),n|red(pro:rel|that,$0))))
example_end

Sent: poor dollie .
Sem: lambda $0_{e}.and(adj|poor($0),n|doll-dim($0))
example_end

Sent: it 's a boy I guess .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,n|boy(pro:per|it,$0)),v|guess(pro:sub|i,$0))
example_end

Sent: well yes .
Sem: lambda $0_{ev}.and(co|yes($0),co|well($0))
example_end

Sent: it 's a baby boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and(n|boy(pro:per|it,$0),n|baby(pro:per|it,$0)))
example_end

Sent: where is he going ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(and(part|go-presp(pro:sub|he,$0),$1($0)),$0)
example_end

Sent: yes it has wheels .
Sem: lambda $0_{ev}.and(aux|have-3s(pro:per|it,lambda $1_{e}.n|wheel-pl($1),$0),co|yes($0))
example_end

Sent: you need to wash your bus off .
Sem: lambda $0_{ev}.v|need(pro:per|you,lambda $1_{ev}.and(v|wash(pro:per|you,det:poss|your($2,n|bus($2)),$1),adv|off($1)),$0)
example_end

Sent: you don 't put nails in like that .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,lambda $1_{e}.n|nail-pl($1),$0),prep|in($0)),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: when you 're building things you use nails .
Sem: lambda $0_{ev}.conj|when(cop|~be(n|building(pro:per|you,lambda $1_{e}.n|thing-pl($1),$0),$0),n|use(pro:per|you,lambda $2_{e}.n|nail-pl($2),$0))
example_end

Sent: what 's happening ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|happen-presp($1,$0),$0)
example_end

Sent: no did you break something ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|break(pro:per|you,pro:indef|something,$0),$0),co|no($0)))
example_end

Sent: what did you break ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|break(pro:per|you,$1,$0),$0)
example_end

Sent: Adam where are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(pro:per|you,$0),$1($0))
example_end

Sent: what 're you doing do with the Howard Johnson ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(pro:per|you,$1,$0),prep|with(det:art|the($2,n:prop|johnson_howard($2)),$0)),$0)
example_end

Sent: I 'm going to get some big moving van .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|i,lambda $1_{ev}.v|get(pro:sub|i,qn|some($2,and(n:gerund|move-presp($2),and(adj|big($2),n|van($2)))),$1),$0),$0)
example_end

Sent: hello how are you .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|you($0,$1)
example_end

Sent: that 's nice .
Sem: lambda $0_{ev}.adj|nice(pro:dem|that,$0)
example_end

Sent: that 's a big camera .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|camera(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: where did you get this ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|you,pro:dem|this,$0),$1($0)),$0)
example_end

Sent: from the park ?
Sem: Q(prep|from(det:art|the($0,n|park($0))))
example_end

Sent: he didn 't get that at the park .
Sem: lambda $0_{ev}.not(mod|do(and(v|get(pro:sub|he,pro:dem|that,$0),prep|at(det:art|the($1,n|park($1)),$0)),$0),$0)
example_end

Sent: no put them back in or we won 't play with them again .
Sem: lambda $0_{ev}.and(coord|or(not(mod|will(and(and(v|play(pro:sub|we,$0),prep|with(pro:obj|them,$0)),adv|again($0)),$0),$0),and(v|put-zero(you,pro:obj|them,$0),adj|back(adv|in($0)))),co|no($0))
example_end

Sent: that 's some turquoise .
Sem: lambda $0_{ev}.qn|some(pro:dem|that,n|turquoise(pro:dem|that,$0))
example_end

Sent: that 's a key chain .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|key(pro:dem|that,$0),n|chain(pro:dem|that,$0)))
example_end

Sent: you want to play that game with Urs ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|play(pro:per|you,pro:dem|that($2,n|game($2)),$1),prep|with(n:prop|ursula,$1)),$0))
example_end

Sent: well you can count well can 't you ?
Sem: lambda $0_{ev}.Q(and(and(mod|can(and(v|count(pro:per|you,$0),adv|well($0)),$0),not(mod|can(pro:per|you,$0),$0)),co|well($0)))
example_end

Sent: a telephone .
Sem: det:art|a($0,n|telephone($0))
example_end

Sent: you found a number .
Sem: lambda $0_{ev}.v|find-past(pro:per|you,det:art|a($1,v|number($1)),$0)
example_end

Sent: one hat .
Sem: lambda $0_{e}.det:num|one(n|hat($0))
example_end

Sent: a queen .
Sem: det:art|a($0,n|queen($0))
example_end

Sent: no that 's a queen .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|queen(pro:dem|that,$0)),co|no($0))
example_end

Sent: show me another one .
Sem: lambda $0_{ev}.v|show(you,qn|another($1,pro:indef|one($1)),pro:obj|me,$0)
example_end

Sent: don 't step on them you may tear them .
Sem: lambda $0_{ev}.not(and(mod|do(and(v|step(you,$0),prep|on(pro:obj|them,$0)),$0),mod|may(v|tear(pro:per|you,pro:obj|them,$0),$0)),$0)
example_end

Sent: Adam Smith we 'll have put them up .
Sem: lambda $0_{ev}.aux|have(mod|~will(and(v|put-zero(pro:sub|we,pro:obj|them,$0),adv|up($0)),$0),$0)
example_end

Sent: you tell me what they are .
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: well pick the rest of them up .
Sem: lambda $0_{ev}.and(and(v|pick(you,det:art|the($1,att(n|rest($1),prep|of(pro:obj|them))),$0),adv|up($0)),co|well($0))
example_end

Sent: give me the jug .
Sem: lambda $0_{ev}.v|give(you,det:art|the($1,n|jug($1)),pro:obj|me,$0)
example_end

Sent: Adam can you find the violin ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,det:art|the($1,n|violin($1)),$0),$0))
example_end

Sent: shall we pick up the cards first Adam ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|pick_up(pro:sub|we,det:art|the($1,n|card-pl($1)),$0),adj|first($0)),$0))
example_end

Sent: you made a queen ?
Sem: lambda $0_{ev}.Q(v|make-past(pro:per|you,det:art|a($1,n|queen($1)),$0))
example_end

Sent: would you pick the blocks up under Urs ?
Sem: lambda $0_{ev}.Q(mod|will-cond(and(v|pick(pro:per|you,det:art|the($1,att(n|block-pl($1),adv|under(n:prop|ursula))),$0),adv|up($0)),$0))
example_end

Sent: for Celia .
Sem: conj|for(n:prop|celia)
example_end

Sent: Celia wears sneakers .
Sem: lambda $0_{ev}.v|wear-3s(n:prop|celia,lambda $1_{e}.n|sneaker-pl($1),$0)
example_end

Sent: a house can 't dance .
Sem: lambda $0_{ev}.not(mod|can(v|dance(det:art|a($1,n|house($1)),$0),$0),$0)
example_end

Sent: I don 't think I can .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: it doesn 't really open .
Sem: lambda $0_{ev}.not(mod|do(and(adj|open(pro:per|it,$0),adv|real-dadj($0)),$0),$0)
example_end

Sent: I think it can be turned .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|be(mod|can(part|turn-pastp(pro:per|it,$1),$1),$1),$0)
example_end

Sent: chimney house .
Sem: lambda $0_{e}.and_comp(n|chimney($0),n|house($0))
example_end

Sent: let 's do it on the table .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|do(pro:obj|~us,pro:per|it,$1),prep|on(det:art|the($2,n|table($2)),$1)),$0)
example_end

Sent: you have enough ?
Sem: lambda $0_{ev}.Q(and(v|have(pro:per|you,$0),adv|enough($0)))
example_end

Sent: see you can build it high .
Sem: lambda $0_{ev}.and(mod|can(v|build(pro:per|you,lambda $1_{ev}.n|high(pro:per|it,$1),$0),$0),v|see(you,$0))
example_end

Sent: it won 't stand up very well .
Sem: lambda $0_{ev}.not(mod|will(and(and(v|stand(pro:per|it,$0),adv|up($0)),adv|very(adv|well($0))),$0),$0)
example_end

Sent: how am I going to find enough games in the store ?
Sem: lambda $4_{e}.lambda $0_{ev}.aux|be-1s(and(part|go-presp(pro:sub|i,lambda $1_{ev}.and(v|find(pro:sub|i,lambda $2_{e}.and(qn|enough($2),n|game-pl($2)),$1),prep|in(det:art|the($3,n|store($3)),$1)),$0),$4($0)),$0)
example_end

Sent: you have_to blow very hard and you 'll be surprised .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|blow(pro:per|you,lambda $1_{ev}.aux|be(mod|~will(part|surprise-pastp(pro:per|you,$1),$1),$1),$0),adv|very(adv|hard($0))),$0)
example_end

Sent: blow your own balloons .
Sem: lambda $0_{ev}.v|blow(you,det:poss|your($1,and(adj|own($1),n|balloon-pl($1))),$0)
example_end

Sent: isn 't that a surprise ?
Sem: lambda $0_{ev}.Q(not(det:art|a(det:dem|that,n|surprise(det:dem|that,$0)),$0))
example_end

Sent: you can blow it way up in the air .
Sem: lambda $0_{ev}.mod|can(and(and(v|blow(pro:per|you,pro:per|it,$0),n|way(adv|up($0))),prep|in(det:art|the($1,n|air($1)),$0)),$0)
example_end

Sent: shall we blow another one ?
Sem: lambda $0_{ev}.Q(mod|shall(v|blow(pro:sub|we,qn|another($1,pro:indef|one($1)),$0),$0))
example_end

Sent: that looks like fun Adam .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:dem|that,$0),co|like(lambda $1_{e}.adj|fun($1),$0))
example_end

Sent: when did it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: what 's it doing in Pembroke ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(pro:per|it,$1,$0),prep|in(n:prop|pembroke,$0)),$0)
example_end

Sent: shall we blow it bigger ?
Sem: lambda $0_{ev}.Q(mod|shall(v|blow(pro:sub|we,lambda $1_{ev}.adj|big-cp(pro:per|it,$1),$0),$0))
example_end

Sent: very gentle with it .
Sem: lambda $0_{e}.adj|gentle($0)
example_end

Sent: it 's behind you .
Sem: lambda $0_{ev}.adv|behind(pro:per|you,pro:per|it,$0)
example_end

Sent: look it 's staying on the wall .
Sem: lambda $0_{ev}.and(aux|~be(and(part|stay-presp(pro:per|it,$0),prep|on(det:art|the($1,n|wall($1)),$0)),$0),co|look(you,$0))
example_end

Sent: it 's very sticky .
Sem: lambda $0_{ev}.adv|very(n|sticky(pro:per|it,$0))
example_end

Sent: no it 's more fun when it 's bigger .
Sem: lambda $0_{ev}.n|fun(pro:per|it,$0)
example_end

Sent: like a punch .
Sem: prep|like(det:art|a($0,n|punch+ball($0)))
example_end

Sent: I think he said I don 't like that stuff on me .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,lambda $2_{ev}.not(mod|do(co|like(pro:sub|i,pro:dem|that($3,att(n|stuff($3),prep|on(pro:obj|me))),$2),$2),$2),$1),$0)
example_end

Sent: well that 's enough now .
Sem: lambda $0_{ev}.and(adv|now(adv|enough(pro:dem|that,$0)),co|well($0))
example_end

Sent: well no you blow it bigger .
Sem: lambda $0_{ev}.and(and(v|blow(pro:per|you,lambda $1_{ev}.adj|big-cp(pro:per|it,$1),$0),co|well($0)),co|no($0))
example_end

Sent: look see what happens ?
Sem: lambda $0_{ev}.Q(and(v|see(you,lambda $1_{ev}.v|happen-3s(pro:int|what,$1),$0),co|look(you,$0)))
example_end

Sent: blow again .
Sem: lambda $0_{ev}.and(n|blow(you,$0),adv|again($0))
example_end

Sent: that won 't hurt you .
Sem: lambda $0_{ev}.not(mod|will(v|hurt-zero(pro:rel|that,pro:per|you,$0),$0),$0)
example_end

Sent: blow it again .
Sem: lambda $0_{ev}.and(v|blow(you,pro:per|it,$0),adv|again($0))
example_end

Sent: very gently .
Sem: lambda $0_{e}.adv|very(adv|gentle-dadj($0))
example_end

Sent: rolling_steam is steam roller .
Sem: lambda $0_{ev}.and_comp(n|steam(lambda $1_{e}.chi|rolling_steam($1),$0),n|roll-dv(lambda $2_{e}.chi|rolling_steam($2),$0))
example_end

Sent: jump to the nurse .
Sem: lambda $0_{ev}.and(n|jump(you,$0),prep|to(det:art|the($1,n|nurse($1)),$0))
example_end

Sent: what is the nurse ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|nurse($2)),$0)
example_end

Sent: wait until you finish .
Sem: lambda $0_{ev}.prep|until(v|finish(pro:per|you,$0),v|wait(you,$0))
example_end

Sent: blow hard .
Sem: lambda $0_{ev}.and(n|blow(you,$0),adv|hard($0))
example_end

Sent: come on blow again .
Sem: lambda $0_{ev}.and(and(v|come(you,$0),prep|on($0)),and(n|blow(you,$0),adv|again($0)))
example_end

Sent: what kind of egg dances around ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|dance-3s($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|egg($3)))),$0),adv|around($0))
example_end

Sent: what kind of egg does that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|egg($3)))),pro:dem|that,$0)
example_end

Sent: what kind of egg does tricks ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|egg($3)))),lambda $4_{e}.n|trick-pl($4),$0)
example_end

Sent: you 're about to sit in my chair like a boy .
Sem: lambda $0_{ev}.adv|about(pro:per|you,lambda $1_{ev}.and(and(v|sit(pro:per|you,$1),prep|in(det:poss|my($2,n|chair($2)),$1)),prep|like(det:art|a($3,n|boy($3)),$1)),$0)
example_end

Sent: you take it .
Sem: lambda $0_{ev}.v|take(pro:per|you,pro:per|it,$0)
example_end

Sent: that 's a big boy .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|boy(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: you 're big enough .
Sem: lambda $0_{ev}.adv|enough(adj|big(pro:per|you,$0))
example_end

Sent: oh that 's a big one Adam .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|big(pro:dem|that,$0))),co|oh($0))
example_end

Sent: I don 't know whether you need another one .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,qn|another($2,pro:indef|one($2)),$1),$0),$0),$0)
example_end

Sent: squeeze it like a turtle .
Sem: lambda $0_{ev}.and(v|squeeze(you,pro:per|it,$0),conj|like(det:art|a($1,n|turtle($1)),$0))
example_end

Sent: why would you squeeze a turtle like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|squeeze(pro:per|you,det:art|a($1,n|turtle($1)),$0),$2($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: I think that 's from a book .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.prep|from(det:art|a($2,n|book($2)),pro:rel|that,$1),$0)
example_end

Sent: well put it on the table .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|table($1)),$0)),co|well($0))
example_end

Sent: a frog let 's see .
Sem: lambda $0_{ev}.v:obj|let(det:art|a($1,n|frog($1)),lambda $2_{ev}.v|see(pro:obj|~us,$2),$0)
example_end

Sent: who is that little boy ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,and(adj|little($2),n|boy($2))),$0)
example_end

Sent: can I help you Adam ?
Sem: lambda $0_{ev}.Q(mod|can(v|help(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: now let 's make a little one for a head .
Sem: lambda $0_{ev}.and(v:obj|let(you,lambda $1_{ev}.and(v|make(pro:obj|~us,det:art|a($2,att(pro:indef|one,lambda $3_{e}.adj|little($3),$2)),$1),prep|for(det:art|a($4,n|head($4)),$1)),$0),adv|now($0))
example_end

Sent: it 's so sticky .
Sem: lambda $0_{ev}.adv|so(n|sticky(pro:per|it,$0))
example_end

Sent: it 's finished .
Sem: lambda $0_{ev}.aux|~be(part|finish-pastp(pro:per|it,$0),$0)
example_end

Sent: you name it .
Sem: lambda $0_{ev}.v|name(pro:per|you,pro:per|it,$0)
example_end

Sent: you 're not an eye ?
Sem: lambda $0_{ev}.Q(not(det:art|a(pro:per|you,n|eye(pro:per|you,$0)),$0))
example_end

Sent: an arm ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|arm($1),$0))
example_end

Sent: it 's very hard .
Sem: lambda $0_{ev}.adv|very(adv|hard(pro:per|it,$0))
example_end

Sent: I can 't do it .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: it will break .
Sem: lambda $0_{ev}.mod|will(v|break(pro:per|it,$0),$0)
example_end

Sent: was that Do_Bee ?
Sem: lambda $0_{ev}.Q(n:prop|do_bee(pro:rel|that,$0))
example_end

Sent: shall I take it apart for you ?
Sem: lambda $0_{ev}.Q(mod|shall(and(and(v|take(pro:sub|i,pro:per|it,$0),adv|apart($0)),prep|for(pro:per|you,$0)),$0))
example_end

Sent: a cord ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|cord($1),$0))
example_end

Sent: that 's not a cord .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|cord(pro:dem|that,$0)),$0)
example_end

Sent: d you have a cord ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|cord($1)),$0),$0))
example_end

Sent: that 's a fuse .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fuse(pro:dem|that,$0))
example_end

Sent: it screws into the toy .
Sem: lambda $0_{ev}.and(v|screw-3s(pro:per|it,$0),prep|into(det:art|the($1,n|toy($1)),$0))
example_end

Sent: a ride ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|ride($1),$0))
example_end

Sent: look Adam you can screw it in there see ?
Sem: lambda $0_{ev}.Q(and(and(mod|can(and(v|screw(pro:per|you,pro:per|it,$0),prep|in(adv|there($0))),$0),co|look(you,$0)),v|see(you,$0)))
example_end

Sent: that one 's missing .
Sem: lambda $0_{ev}.cop|~be(part|miss-presp(pro:dem|that($1,pro:indef|one($1)),$0),$0)
example_end

Sent: you do that .
Sem: lambda $0_{ev}.v|do(pro:per|you,pro:dem|that,$0)
example_end

Sent: turn the light on ?
Sem: lambda $0_{ev}.Q(and(v|turn(you,det:art|the($1,n|light($1)),$0),adv|on($0)))
example_end

Sent: you can turn this one on .
Sem: lambda $0_{ev}.mod|can(and(v|turn(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0),adv|on($0)),$0)
example_end

Sent: like a dog ?
Sem: Q(prep|like(det:art|a($0,n|dog($0))))
example_end

Sent: oh that 's the light ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,n|light(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: where 're you going to put the light ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|put-zero(pro:per|you,det:art|the($2,n|light($2)),$1),$0),$3($0)),$0)
example_end

Sent: where did the light go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,n|light($1)),$0),$2($0)),$0)
example_end

Sent: to blast off with ?
Sem: lambda $0_{ev}.Q(and(v|blast(you,$0),adv|off($0)))
example_end

Sent: I 'll hold it while you screw .
Sem: lambda $0_{ev}.conj|while(v|screw(pro:per|you,$0),mod|~will(v|hold(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: a funny rocket ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|fun-dn($1),n|rocket($1)),$0))
example_end

Sent: oh that .
Sem: lambda $0_{ev}.and(pro:dem|that($0),co|oh($0))
example_end

Sent: if you want it to go there .
Sem: lambda $0_{ev}.v|want(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|it,$1),adv|there($1)),$0)
example_end

Sent: no this is a toy .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|this,n|toy(pro:dem|this,$0)),qn|no($0))
example_end

Sent: why d you need another piece ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|need(pro:per|you,qn|another($1,n|piece($1)),$0),$2($0)),$0)
example_end

Sent: it 's for printing .
Sem: lambda $0_{ev}.aux|~be(pro:per|it,lambda $1_{ev}.n:gerund|print-presp(you,$1),$0)
example_end

Sent: let me show you Adam .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|show(pro:obj|me,pro:per|you,$1),$0)
example_end

Sent: press it down like that .
Sem: lambda $0_{ev}.and(and(v|press(you,pro:per|it,$0),adv|down($0)),prep|like(pro:dem|that,$0))
example_end

Sent: you don 't see another one ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|see(pro:per|you,qn|another($1,pro:indef|one($1)),$0),$0),$0))
example_end

Sent: you got your fingers in it didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|get-past(pro:per|you,det:poss|your($1,n|finger-pl($1)),$0),prep|in(pro:per|it,$0)),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: it matches .
Sem: lambda $0_{ev}.v|match-3s(pro:per|it,$0)
example_end

Sent: it 's not an x is it ?
Sem: lambda $0_{ev}.Q(and(not(det:art|a(pro:per|it,n:let|x(pro:per|it,$0)),$0),aux|be-3s(pro:per|it,$0)))
example_end

Sent: well keep your fingers out .
Sem: lambda $0_{ev}.and(and(v|keep(you,det:poss|your($1,n|finger-pl($1)),$0),adv|out($0)),co|well($0))
example_end

Sent: you 're a funny one Adam .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(det:num|one(pro:per|you,$0),adj|fun-dn(pro:per|you,$0)))
example_end

Sent: don 't put it on the floor Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0)
example_end

Sent: let 's put them on the paper .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,pro:obj|them,$1),prep|on(det:art|the($2,n|paper($2)),$1)),$0)
example_end

Sent: I do enough tricks .
Sem: lambda $0_{ev}.v|do(pro:sub|i,qn|enough($1,n|trick-pl($1)),$0)
example_end

Sent: you fold them .
Sem: lambda $0_{ev}.v|fold(pro:per|you,pro:obj|them,$0)
example_end

Sent: make a refrigerator ?
Sem: lambda $0_{ev}.Q(v|make(you,det:art|a($1,n|refrigerator($1)),$0))
example_end

Sent: your hands are dry .
Sem: lambda $0_{ev}.adj|dry(det:poss|your($1,n|hand-pl($1)),$0)
example_end

Sent: no ink .
Sem: qn|no($0,n|ink($0))
example_end

Sent: d you want to tell Urs about your accident ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,n:prop|ursula,$1),prep|about(det:poss|your($2,n|accident($2)),$1)),$0),$0))
example_end

Sent: what happened to the carriage ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,n|carriage($2)),$0))
example_end

Sent: no I 'm talking about your accident .
Sem: lambda $0_{ev}.and(aux|~be(and(part|talk-presp(pro:sub|i,$0),prep|about(det:poss|your($1,n|accident($1)),$0)),$0),co|no($0))
example_end

Sent: what happened to your finger ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|finger($2)),$0))
example_end

Sent: that 's clay .
Sem: lambda $0_{ev}.n|clay(pro:dem|that,$0)
example_end

Sent: a nest .
Sem: det:art|a($0,n|nest($0))
example_end

Sent: yes you can play with that one .
Sem: lambda $0_{ev}.and(mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|that($1,pro:indef|one($1)),$0)),$0),co|yes($0))
example_end

Sent: these turn .
Sem: lambda $0_{ev}.n|turn(pro:dem|these,$0)
example_end

Sent: don 't throw the ball .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,det:art|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: why don 't you play with something else ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|play(pro:per|you,$0),$1($0)),post|else(prep|with(pro:indef|something,$0))),$0),$0)
example_end

Sent: I don 't see anybody sitting there .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,lambda $1_{ev}.and(part|sit-presp(pro:indef|anybody,$1),adv|there($1)),$0),$0),$0)
example_end

Sent: does that have a driver ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(det:dem|that,det:art|a($1,n|drive-dv($1)),$0),$0))
example_end

Sent: that 's a big hat on his head .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(and(n|hat(pro:dem|that,$0),adj|big(pro:dem|that,$0)),prep|on(det:poss|his($1,n|head($1)))))
example_end

Sent: can he see ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:sub|he,$0),$0))
example_end

Sent: no it looks like it 's down over his eyes .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:per|it,lambda $1_{ev}.adv|down(prep|over(det:poss|his($2,n|eye-pl($2)),pro:per|it,$1)),$0),co|no($0))
example_end

Sent: that one turned over .
Sem: lambda $0_{ev}.and(v|turn-past(pro:dem|that($1,pro:indef|one($1)),$0),adv|over($0))
example_end

Sent: no don 't throw over here .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|throw(you,$0),adv|over(adv|here($0))),$0),$0),co|no($0))
example_end

Sent: and do what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(you,$1,$0)
example_end

Sent: you can play with these .
Sem: lambda $0_{ev}.mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|these,$0)),$0)
example_end

Sent: it 's for zipping Adam .
Sem: lambda $0_{ev}.aux|~be(pro:per|it,lambda $1_{ev}.n:gerund|zip-presp(you,$1),$0)
example_end

Sent: that 's not an x that 's a v .
Sem: lambda $0_{ev}.not(and(det:art|a(pro:dem|that,n:let|x(pro:dem|that,$0)),det:art|a(pro:dem|that,n:let|v(pro:dem|that,$0))),$0)
example_end

Sent: oh aren 't they pretty pictures .
Sem: lambda $0_{ev}.and(not(and(v|picture-3s(pro:sub|they,$0),adv|pretty(pro:sub|they,$0)),$0),co|oh($0))
example_end

Sent: what are they all about ?
Sem: lambda $0_{ev}.post|all(adv|about(det:int|what,pro:sub|they,$0))
example_end

Sent: d you want to tell me about it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,pro:obj|me,$1),prep|about(pro:per|it,$1)),$0),$0))
example_end

Sent: x e June ?
Sem: lambda $0_{e}.Q(n:let|x($0))
example_end

Sent: look Adam what I have .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|have(pro:sub|i,$1,$0),co|look(you,$0))
example_end

Sent: where 's your drawing board ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,and_comp(n|drawing($1),n|board($1))),$0),$2($0))
example_end

Sent: the drawing board ?
Sem: lambda $0_{e}.Q(det:art|the($1,and_comp(n|drawing($1),n|board($1)),$0))
example_end

Sent: you broke it didn 't you ?
Sem: lambda $0_{ev}.Q(and(v|break-past(pro:per|you,pro:per|it,$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: I 'm not going anyplace .
Sem: lambda $0_{ev}.not(cop|~be(and(part|go-presp(pro:sub|i,$0),adv|anyplace($0)),$0),$0)
example_end

Sent: no I was just getting some diapers for Paul .
Sem: lambda $0_{ev}.and(cop|be-past(and(and(part|get-presp(pro:sub|i,qn|some($1,n|diaper-pl($1)),$0),adv|just($0)),prep|for(n:prop|paul,$0)),$0),co|no($0))
example_end

Sent: well I started it .
Sem: lambda $0_{ev}.and(v|start-past(pro:sub|i,pro:per|it,$0),co|well($0))
example_end

Sent: next week .
Sem: adv|next(lambda $0_{e}.n|week($0))
example_end

Sent: no you hit him didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|hit-zero(pro:per|you,pro:obj|him,$0),not(mod|do(pro:per|you,$0),$0)),co|no($0)))
example_end

Sent: leave you alone ?
Sem: lambda $0_{ev}.Q(v|leave(you,lambda $1_{ev}.adv|alone(pro:per|you,$1),$0))
example_end

Sent: Adam here are some peanuts .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some($1,n|peanut-pl($1)),$0),adv|here($0))
example_end

Sent: you have_to take the shell off .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|take(pro:per|you,det:art|the($1,n|shell($1)),$0),adv|off($0)),$0)
example_end

Sent: you cut it in a bowl ?
Sem: lambda $0_{ev}.Q(and(v|cut-zero(pro:per|you,pro:per|it,$0),prep|in(det:art|a($1,n|bowl($1)),$0)))
example_end

Sent: you have_to chew it hard .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|chew(pro:per|you,pro:per|it,$0),adv|hard($0)),$0)
example_end

Sent: pick up the paper behind you Adam .
Sem: lambda $0_{ev}.and(v|pick(you,det:art|the($1,att(n|paper($1),adv|behind(pro:per|you))),$0),prep|up($0))
example_end

Sent: d you wan to shell another one ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|shell(pro:per|you,qn|another($2,pro:indef|one($2)),$1),$0),$0))
example_end

Sent: you don 't have_to eat them .
Sem: lambda $0_{ev}.not(mod:aux|have_to(mod|do(v|eat(pro:per|you,pro:obj|them,$0),$0),$0),$0)
example_end

Sent: you could just shell them .
Sem: lambda $0_{ev}.mod|could(and(n|shell(pro:per|you,pro:obj|them,$0),adv|just($0)),$0)
example_end

Sent: take a shell out_of a shoe ?
Sem: lambda $0_{ev}.Q(and(v|take(you,det:art|a($1,n|shell($1)),$0),prep|out_of(det:art|a($2,n|shoe($2)),$0)))
example_end

Sent: here 's another one .
Sem: lambda $0_{ev}.and(cop|~be(qn|another($1,pro:indef|one($1)),$0),pro:exist|here($0))
example_end

Sent: that 's alright .
Sem: lambda $0_{ev}.adj|alright(pro:dem|that,$0)
example_end

Sent: did you chew it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|chew(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: see what 's inside .
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(poss|~s($1,$0),adv|inside($0)),co|see(you,$0))
example_end

Sent: yes I want you to go the way .
Sem: lambda $0_{ev}.and(v|want(pro:sub|i,lambda $1_{ev}.v|go(pro:per|you,det:art|the($2,n|way($2)),$1),$0),co|yes($0))
example_end

Sent: can 't you open them yet ?
Sem: lambda $0_{ev}.Q(not(mod|can(and(v|open(pro:per|you,pro:obj|them,$0),adv|yet($0)),$0),$0))
example_end

Sent: remember we did the peas yesterday ?
Sem: lambda $0_{ev}.Q(and(and(v|do-past(pro:sub|we,det:art|the($1,n|pea-pl($1)),$0),adv:tem|yesterday($0)),v|remember(you,$0)))
example_end

Sent: did you help ?
Sem: lambda $0_{ev}.Q(v|do-past(co|help(pro:per|you,$0),$0))
example_end

Sent: did you find some tiny ones ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,qn|some($1,att(pro:indef|one-pl,lambda $2_{e}.adj|tiny($2),$1)),$0),$0))
example_end

Sent: no because they weren 't cooked .
Sem: lambda $0_{ev}.and(not(aux|be(part|cook-pastp(pro:sub|they,$0),$0),$0),co|no($0))
example_end

Sent: they are to cook but they 're not cooked yet .
Sem: lambda $0_{ev}.conj|but(not(cop|~be(and(part|cook-pastp(pro:sub|they,$0),adv|yet($0)),$0),$0),cop|be-pres(pro:sub|they,lambda $1_{ev}.n|cook(pro:sub|they,$1),$0))
example_end

Sent: you have_to boil them on the stove .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|boil(pro:per|you,pro:obj|them,$0),prep|on(det:art|the($1,n|stove($1)),$0)),$0)
example_end

Sent: are you going to cook peas on it ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|cook(pro:per|you,lambda $2_{e}.n|pea-pl($2),$1),prep|on(pro:per|it,$1)),$0),$0))
example_end

Sent: are you going to take the shell off ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,det:art|the($2,n|shell($2)),$1),adv|off($1)),$0),$0))
example_end

Sent: one step ?
Sem: lambda $0_{e}.Q(det:num|one(n|step($0)))
example_end

Sent: did you get here in one step ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(and(v|get(pro:per|you,$0),adv|here($0)),prep|in(lambda $1_{e}.pro:indef|one(n|step($1)),$0)),$0))
example_end

Sent: another step ?
Sem: lambda $0_{e}.Q(pro:indef|another($1,n|step($1),$0))
example_end

Sent: does that mean you take two steps ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|mean(pro:dem|that,lambda $1_{ev}.v|take(pro:per|you,lambda $2_{e}.det:num|two(n|step-pl($2)),$1),$0),$0))
example_end

Sent: hello shell .
Sem: lambda $0_{ev}.and(n|shell($0),co|hello($0))
example_end

Sent: that would hurt .
Sem: lambda $0_{ev}.mod|will-cond(v|hurt-zero(pro:dem|that,$0),$0)
example_end

Sent: I 'm just trying to get the string off .
Sem: lambda $0_{ev}.aux|~be(and(part|try-presp(pro:sub|i,lambda $1_{ev}.and(v|get(pro:sub|i,det:art|the($2,n|string($2)),$1),adv|off($1)),$0),adv|just($0)),$0)
example_end

Sent: it doesn 't belong on here .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:per|it,$0),prep|on(adv|here($0))),$0),$0)
example_end

Sent: what happened to the other part of it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,att(and(qn|other($2),n|part($2)),prep|of(pro:per|it))),$0))
example_end

Sent: you 're rolling a barrel ?
Sem: lambda $0_{ev}.Q(aux|~be(part|roll-presp(pro:per|you,det:art|a($1,n|barrel($1)),$0),$0))
example_end

Sent: did you show Urs your monkey train ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:poss|your($1,and_comp(n|monkey($1),n|train($1))),n:prop|ursula,$0),$0))
example_end

Sent: you 're going to feed the pigeons .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|feed(pro:per|you,det:art|the($2,n|pigeon-pl($2)),$1),$0),$0)
example_end

Sent: well I don 't think they 'd like the shell .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(prep|like(pro:sub|they,det:art|the($2,n|shell($2)),$1),$1),$0),$0),$0),co|well($0))
example_end

Sent: hello Mr Shell .
Sem: lambda $0_{ev}.and(n:prop|shell_mr($0),co|hello($0))
example_end

Sent: how are you today ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(aux|be-pres(pro:per|you,$0),$1($0)),adv:tem|today($0))
example_end

Sent: he threw some pie ?
Sem: lambda $0_{ev}.Q(v|throw-past(pro:sub|he,qn|some($1,n|pie($1)),$0))
example_end

Sent: what are you going to do to that one ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),prep|to(pro:dem|that($3,pro:indef|one($3)),$1)),$0),$0)
example_end

Sent: I think you 'd better ask your Mother .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(and(v|ask(pro:per|you,det:poss|your($2,n:prop|mother($2)),$1),adj|good-cp($1)),$1),$0)
example_end

Sent: open it .
Sem: lambda $0_{ev}.v|open(you,pro:per|it,$0)
example_end

Sent: here it comes .
Sem: lambda $0_{ev}.and(v|come-3s(pro:per|it,$0),adv|here($0))
example_end

Sent: let 's put the outside shells in there .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,det:art|the($2,and(adj|outside($2),n|shell-pl($2))),$1),prep|in(adv|there($1))),$0)
example_end

Sent: where is a broken one .
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|a($1,att(pro:indef|one,lambda $2_{e}.part|break-pastp($2),$1)),$0),$3($0))
example_end

Sent: you can peel it now .
Sem: lambda $0_{ev}.mod|can(and(v|peel(pro:per|you,pro:per|it,$0),adv|now($0)),$0)
example_end

Sent: a top on his king hat ?
Sem: lambda $0_{e}.Q(det:art|a($1,att(n|top($1),prep|on(det:poss|his($2,and_comp(n|king($2),n|hat($2))))),$0))
example_end

Sent: we 're going play a game .
Sem: lambda $0_{ev}.aux|~be(n|play(pro:sub|we,det:art|a($1,n|game($1)),$0),$0)
example_end

Sent: to keep it closed .
Sem: lambda $0_{ev}.v|keep(you,lambda $1_{ev}.v|close-past(pro:per|it,$1),$0)
example_end

Sent: it is very sharp .
Sem: lambda $0_{ev}.adv|very(adj|sharp(pro:per|it,$0))
example_end

Sent: no it 's too sharp Adam .
Sem: lambda $0_{ev}.and(adv|too(adj|sharp(pro:per|it,$0)),co|no($0))
example_end

Sent: no that doesn 't go on .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:dem|that,$0),adv|on($0)),$0),$0),qn|no($0))
example_end

Sent: oh look it tipped over of course .
Sem: lambda $0_{ev}.and(and(and(v|tip-past_over(pro:per|it,$0),n|course_of($0)),co|look(you,$0)),co|oh($0))
example_end

Sent: to make a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make(you,$1,$0)
example_end

Sent: I 'm not mocking you .
Sem: lambda $0_{ev}.not(cop|~be(part|mock-presp(pro:sub|i,pro:per|you,$0),$0),$0)
example_end

Sent: Celia said that ?
Sem: lambda $0_{ev}.Q(v|say-past(n:prop|celia,pro:dem|that,$0))
example_end

Sent: is he ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:sub|he($0,$1)
example_end

Sent: is that funny ?
Sem: lambda $0_{ev}.Q(adj|fun-dn(pro:dem|that,$0))
example_end

Sent: where did they go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:sub|they,$0),$1($0)),$0)
example_end

Sent: they went where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go-past(pro:sub|they,$0),$1($0))
example_end

Sent: where did the circus people go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,and_comp(n|circus($1),n|person-pl($1))),$0),$2($0)),$0)
example_end

Sent: that 's part of Daddy 's barbell set .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(n:prop|daddy's($1,and_comp(n|barbell($1),part|set-pastp($1)))))
example_end

Sent: that 's not a bat .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|bat(pro:dem|that,$0)),$0)
example_end

Sent: don 't scream .
Sem: lambda $0_{ev}.not(mod|do(v|scream(you,$0),$0),$0)
example_end

Sent: are you crowded ?
Sem: lambda $0_{ev}.Q(cop|be-pres(v|crowd-past(pro:per|you,$0),$0))
example_end

Sent: she 's seen cars parking there .
Sem: lambda $0_{ev}.aux|~be(part|see-pastp(pro:sub|she,lambda $1_{ev}.and(part|park-presp(lambda $2_{e}.n|car-pl($2),$1),adv|there($1)),$0),$0)
example_end

Sent: oh that one 's no good .
Sem: lambda $0_{ev}.and(not(adj|good(pro:dem|that($1,pro:indef|one($1)),$0),$0),co|oh($0))
example_end

Sent: we 'll be at thirty two Williams Street in Roxbury .
Sem: lambda $0_{ev}.mod|~will(prep|at(att(lambda $1_{e}.det:num|thirty(det:num|two(n:prop|street_williams($1))),prep|in(n:prop|roxbury)),pro:sub|we,$0),$0)
example_end

Sent: yes there is a little door but leads up to the roof .
Sem: lambda $0_{ev}.and(conj|but(and(and(n|lead-pl(you,$0),adv|up($0)),prep|to(det:art|the($1,n|roof($1)),$0)),and(cop|be-3s(det:art|a($2,and(adj|little($2),n|door($2))),$0),adv|there($0))),co|yes($0))
example_end

Sent: careful now .
Sem: lambda $0_{e}.adv|now(co|careful($0))
example_end

Sent: you got what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|get-past(pro:per|you,$1,$0)
example_end

Sent: you got clutched !
Sem: lambda $0_{ev}.part|clutch-pastp(pro:per|you,$0)
example_end

Sent: Adam did you try the cheese ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|try(pro:per|you,det:art|the($1,n|cheese($1)),$0),$0))
example_end

Sent: did you try the cheese ?
Sem: lambda $0_{ev}.Q(v|do-past(v|try(pro:per|you,det:art|the($1,n|cheese($1)),$0),$0))
example_end

Sent: did you taste the cheese ?
Sem: lambda $0_{ev}.Q(v|do-past(v|taste(pro:per|you,det:art|the($1,n|cheese($1)),$0),$0))
example_end

Sent: please don 't knock me down little cowboy .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|knock(you,pro:obj|me,$0),adv|down($0)),$0),$0),co|please($0))
example_end

Sent: because I had enough .
Sem: lambda $0_{ev}.and(v|have-past(pro:sub|i,$0),adv|enough($0))
example_end

Sent: who 's Happy the Bowl ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n:prop|bowl_happy_the,$0)
example_end

Sent: a rifle .
Sem: det:art|a($0,n|rifle($0))
example_end

Sent: that 's to help keep the cheese fresh .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.v|help(pro:dem|that,$1),$0)
example_end

Sent: yes it 's like a shell .
Sem: lambda $0_{ev}.and(conj|like(det:art|a($1,n|shell($1)),pro:per|it,$0),co|yes($0))
example_end

Sent: careful you 'll drop all your food out .
Sem: lambda $0_{ev}.and(mod|~will(and(v|drop(pro:per|you,det:poss|your($1,qn|all($2,n|food($2),$1)),$0),adv|out($0)),$0),adj|care-dn($0))
example_end

Sent: like a duck ?
Sem: Q(prep|like(det:art|a($0,n|duck($0))))
example_end

Sent: does a duck drop his food out like that ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(and(n|drop(det:art|a($1,n|duck($1)),det:poss|his($2,n|food($2)),$0),adv|out($0)),prep|like(pro:dem|that,$0)),$0))
example_end

Sent: why does he do that ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(and(v|do(pro:sub|he,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: not today .
Sem: not(lambda $0_{e}.adv:tem|today($0))
example_end

Sent: alright well you drink some milk now .
Sem: lambda $0_{ev}.and(and(and(v|drink(pro:per|you,qn|some($1,n|milk($1)),$0),adv|now($0)),co|alright($0)),n|well($0))
example_end

Sent: who 's there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),adv|there($0))
example_end

Sent: knocking on the nail .
Sem: lambda $0_{ev}.and(part|knock-presp(you,$0),prep|on(det:art|the($1,n|nail($1)),$0))
example_end

Sent: do the one about pop .
Sem: lambda $0_{ev}.v|do(you,det:art|the($1,att(pro:indef|one($1),adv|about(lambda $2_{e}.n|pop($2)))),$0)
example_end

Sent: in the circus you can see a lion ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|see(pro:per|you,det:art|a($1,n|lion($1)),$0),prep|in(det:art|the($2,n|circus($2)),$0)),$0))
example_end

Sent: a lion .
Sem: det:art|a($0,n|lion($0))
example_end

Sent: and what will the lion say ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will(v|say(det:art|the($1,n|lion($1)),$2,$0),$0)
example_end

Sent: you 're a little lion .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(n|lion(pro:per|you,$0),adj|little(pro:per|you,$0)))
example_end

Sent: careful don 't hit your head on the mantle .
Sem: lambda $0_{ev}.and(not(mod|do(and(part|hit-pastp(you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|mantle($2)),$0)),$0),$0),adj|care-dn($0))
example_end

Sent: oh do another one .
Sem: lambda $0_{ev}.and(v|do(you,qn|another($1,pro:indef|one($1)),$0),co|oh($0))
example_end

Sent: how can Shadow_Gay ride on a pony .
Sem: lambda $1_{e}.lambda $0_{ev}.n|can(and(and(and(n|ride(you,$0),$1($0)),n:prop|shadow_gay($0)),prep|on(det:art|a($2,n|pony($2)),$0)),$0)
example_end

Sent: isn 't Shadow_Gay a horse ?
Sem: lambda $0_{ev}.Q(not(det:art|a(n:prop|shadow_gay,n|horse(n:prop|shadow_gay,$0)),$0))
example_end

Sent: who is Shadow_Gay ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n:prop|shadow_gay,$0)
example_end

Sent: is he a little boy ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,and(n|boy(pro:sub|he,$0),adj|little(pro:sub|he,$0))))
example_end

Sent: what kind of a dog ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(det:art|a($2,n|dog($2)))))
example_end

Sent: a dog riding on a pony .
Sem: lambda $0_{ev}.and(part|ride-presp(det:art|a($1,n|dog($1)),$0),prep|on(det:art|a($2,n|pony($2)),$0))
example_end

Sent: what kind of dog are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,att(n|kind(pro:per|you,$0),prep|of(lambda $2_{e}.n|dog($2))))
example_end

Sent: you 're going back under there .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,$0),adv|under(adv|back(adv|there($0)))),$0)
example_end

Sent: he put his bread in his house .
Sem: lambda $0_{ev}.and(v|put-zero(pro:sub|he,det:poss|his($1,n|bread($1)),$0),prep|in(det:poss|his($2,n|house($2)),$0))
example_end

Sent: some bread ?
Sem: lambda $0_{e}.Q(qn|some($1,n|bread($1),$0))
example_end

Sent: the doggie says that ?
Sem: lambda $0_{ev}.Q(v|say-3s(det:art|the($1,n|dog-dim($1)),pro:dem|that,$0))
example_end

Sent: he 's crawling around .
Sem: lambda $0_{ev}.aux|~be(and(part|crawl-presp(pro:sub|he,$0),adv|around($0)),$0)
example_end

Sent: I guess he just likes to crawl .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.and(v|like-3s(pro:sub|he,lambda $2_{ev}.n|crawl(pro:sub|he,$2),$1),adv|just($1)),$0)
example_end

Sent: did you see that many things ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|see(pro:per|you,pro:rel|that($1,and(qn|many($1),n|thing-pl($1))),$0),$0))
example_end

Sent: that 's not the bag you go in is it ?
Sem: lambda $0_{ev}.Q(and(not(det:art|the(pro:dem|that,n|bag(pro:dem|that,$0)),$0),aux|be-3s(pro:per|it,$0)))
example_end

Sent: d you want to blow it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|blow(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: no it has_to be opened .
Sem: lambda $0_{ev}.and(part|open-pastp(_,pro:per|it,$0),co|no($0))
example_end

Sent: you have_to make a hole with something .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|make(pro:per|you,det:art|a($1,n|hole($1)),$0),prep|with(pro:indef|something,$0)),$0)
example_end

Sent: I have a nail file .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,and_comp(n|nail($1),n|file($1))),$0)
example_end

Sent: did he bring you something ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|bring(pro:sub|he,pro:indef|something,pro:per|you,$0),$0))
example_end

Sent: I didn 't take anything out .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(pro:sub|i,pro:indef|anything,$0),adv|out($0)),$0),$0)
example_end

Sent: Urs took something out .
Sem: lambda $0_{ev}.and(v|take-past(n:prop|ursula,pro:indef|something,$0),adv|out($0))
example_end

Sent: I don 't know what you said .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|say-past(pro:per|you,pro:int|what,$1),$0),$0),$0)
example_end

Sent: shall I start it for you ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|start(pro:sub|i,pro:per|it,$0),prep|for(pro:per|you,$0)),$0))
example_end

Sent: it 's getting big .
Sem: lambda $0_{ev}.aux|~be(part|get-presp(pro:per|it,lambda $1_{ev}.adj|big(pro:per|it,$1),$0),$0)
example_end

Sent: can you pick up that squeezed balloon ?
Sem: lambda $0_{ev}.Q(mod|can(v|pick_up(pro:per|you,pro:rel|that($1,and(v|squeeze-past($1),n|balloon($1))),$0),$0))
example_end

Sent: we can 't ?
Sem: lambda $0_{ev}.Q(not(mod|can(pro:sub|we,$0),$0))
example_end

Sent: a fire ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|fire($1),$0))
example_end

Sent: don 't get it on the rug Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|get(you,pro:per|it,$0),prep|on(det:art|the($1,n|rug($1)),$0)),$0),$0)
example_end

Sent: no not a blueberry .
Sem: lambda $0_{ev}.and(not(det:art|a($1,n|blueberry($1)),$0),co|no($0))
example_end

Sent: it 's not a blueberry .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|blueberry(pro:per|it,$0)),$0)
example_end

Sent: watch it do what ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|watch(you,lambda $1_{ev}.v|do(pro:per|it,$2,$1),$0)
example_end

Sent: watch it ski ?
Sem: lambda $0_{ev}.Q(v|watch(you,lambda $1_{ev}.n|ski(pro:per|it,$1),$0))
example_end

Sent: how does it ski ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(n|ski(pro:per|it,$0),$1($0)),$0)
example_end

Sent: d you want to make another one ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|make(pro:per|you,qn|another($2,pro:indef|one($2)),$1),$0),$0))
example_end

Sent: shall I make it bigger ?
Sem: lambda $0_{ev}.Q(mod|shall(v|make(pro:sub|i,lambda $1_{ev}.adj|big-cp(pro:per|it,$1),$0),$0))
example_end

Sent: oh that was a big hit .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,and(n|hit(pro:rel|that,$0),adj|big(pro:rel|that,$0))),co|oh($0))
example_end

Sent: you 're going to put a bag in it ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:art|a($2,n|bag($2)),$1),prep|in(pro:per|it,$1)),$0),$0))
example_end

Sent: shame on you .
Sem: lambda $0_{e}.att(n|shame($0),prep|on(pro:per|you))
example_end

Sent: let 's do some watches .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|do(pro:obj|~us,qn|some($2,n|watch-pl($2)),$1),$0)
example_end

Sent: this one is for you .
Sem: lambda $0_{ev}.prep|for(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0)
example_end

Sent: this is your watch .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|this,n|watch(pro:dem|this,$0))
example_end

Sent: can you tell the time ?
Sem: lambda $0_{ev}.Q(mod|can(v|tell(pro:per|you,det:art|the($1,n|time($1)),$0),$0))
example_end

Sent: fourteen o'clock ?
Sem: lambda $0_{e}.Q(det:num|fourteen(n|o'clock($0)))
example_end

Sent: Daddy has a watch ?
Sem: lambda $0_{ev}.Q(v|have-3s(n:prop|daddy,det:art|a($1,n|watch($1)),$0))
example_end

Sent: is it like that one ?
Sem: lambda $0_{ev}.Q(co|like(pro:dem|that($1,pro:indef|one($1)),pro:per|it,$0))
example_end

Sent: oh what kind of watch is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|watch($2)))),co|oh($0))
example_end

Sent: it turns .
Sem: lambda $0_{ev}.v|turn-3s(pro:per|it,$0)
example_end

Sent: well what d you do at twelve o'clock ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|do(pro:per|you,$1,$0),prep|at(lambda $2_{e}.det:num|twelve(n|o'clock($2)),$0)),$0),co|well($0))
example_end

Sent: you wake up at twelve o'clock ?
Sem: lambda $0_{ev}.Q(and(and(v|wake(pro:per|you,$0),adv|up($0)),prep|at(lambda $1_{e}.det:num|twelve(n|o'clock($1)),$0)))
example_end

Sent: what d you do at seven o'clock ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|at(lambda $2_{e}.det:num|seven(n|o'clock($2)),$0)),$0)
example_end

Sent: you play .
Sem: lambda $0_{ev}.v|play(pro:per|you,$0)
example_end

Sent: well Adam .
Sem: lambda $0_{ev}.and(n:prop|adam($0),co|well($0))
example_end

Sent: what else is in the bag ?
Sem: lambda $2_{e}.lambda $0_{ev}.prep|in(det:art|the($1,n|bag($1)),$2,$0)
example_end

Sent: you take those out .
Sem: lambda $0_{ev}.and(v|take(pro:per|you,pro:dem|those,$0),adv|out($0))
example_end

Sent: oh no it will be fun for you to do .
Sem: lambda $0_{e}.lambda $1_{ev}.n|fun($0,$1)
example_end

Sent: what d you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: it must be the top to the sugar dish .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|top($0,$1)
example_end

Sent: is that the sugar dish ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and_comp(n|sugar(pro:rel|that,$0),n|dish(pro:rel|that,$0))))
example_end

Sent: well just pretend that this is a plate .
Sem: lambda $0_{ev}.and(and(adj|pretend(you,lambda $1_{ev}.det:art|a(pro:dem|this,n|plate(pro:dem|this,$1)),$0),adv|just($0)),co|well($0))
example_end

Sent: what are you eating ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|eat-presp(pro:per|you,$1,$0),$0)
example_end

Sent: some spaghetti ?
Sem: lambda $0_{e}.Q(qn|some($1,n|spaghetti($1),$0))
example_end

Sent: just pretend that you have coffee in there .
Sem: lambda $0_{ev}.and(adj|pretend(you,lambda $1_{ev}.and(v|have(pro:per|you,lambda $2_{e}.n|coffee($2),$1),prep|in(adv|there($1))),$0),adv|just($0))
example_end

Sent: tea rather .
Sem: adv|rather(lambda $0_{e}.n|tea($0))
example_end

Sent: in the drawer ?
Sem: Q(prep|in(det:art|the($0,n|drawer($0))))
example_end

Sent: pretend you have water .
Sem: lambda $0_{ev}.v|pretend(you,lambda $1_{ev}.v|have(pro:per|you,lambda $2_{e}.n|water($2),$1),$0)
example_end

Sent: would you serve Urs some coffee ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|serve(pro:per|you,qn|some($1,n|coffee($1)),n:prop|ursula,$0),$0))
example_end

Sent: they 're not hot now ?
Sem: lambda $0_{ev}.Q(not(adv|now(adj|hot(pro:sub|they,$0)),$0))
example_end

Sent: you turn the water on for you ?
Sem: lambda $0_{ev}.Q(and(and(v|turn(pro:per|you,det:art|the($1,n|water($1)),$0),adv|on($0)),prep|for(pro:per|you,$0)))
example_end

Sent: my_goodness Adam you tire very easily .
Sem: lambda $0_{ev}.and(and(v|tire(pro:per|you,$0),adv|very(adv|ease-dadj($0))),co|my_goodness($0))
example_end

Sent: what kind of ice ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|ice+cream($2))))
example_end

Sent: what do I want ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|want(pro:sub|i,$1,$0),$0)
example_end

Sent: d you have some ketchup for it ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,qn|some($1,n|ketchup($1)),$0),prep|for(pro:per|it,$0)),$0))
example_end

Sent: what will I use for ketchup tomorrow if you throw it away ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(and(v|throw(pro:per|you,pro:per|it,$0),adv|away($0)),mod|will(and(and(v|use(pro:sub|i,$1,$0),prep|for(lambda $2_{e}.n|ketchup($2),$0)),adv:tem|tomorrow($0)),$0))
example_end

Sent: I have enough tea ?
Sem: lambda $0_{ev}.Q(v|have(pro:sub|i,lambda $1_{e}.and(adj|enough($1),n|tea($1)),$0))
example_end

Sent: do I want coffee or tea ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:sub|i,lambda $1_{e}.n|coffee($1),$0),$0))
example_end

Sent: yes I 'd like some tea .
Sem: lambda $0_{ev}.and(mod|~genmod(v|like(pro:sub|i,qn|some($1,n|tea($1)),$0),$0),co|yes($0))
example_end

Sent: some rice ?
Sem: lambda $0_{e}.Q(qn|some($1,n|rice($1),$0))
example_end

Sent: I have some tea thank_you .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,qn|some($1,n|tea($1)),$0),n|thank_you($0))
example_end

Sent: are you cutting it for me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|cut-presp(pro:per|you,pro:per|it,$0),prep|for(pro:obj|me,$0)),$0))
example_end

Sent: why 're you watching me ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|watch-presp(pro:per|you,pro:obj|me,$0),$1($0)),$0)
example_end

Sent: you took them out there .
Sem: lambda $0_{ev}.and(v|take-past(pro:per|you,pro:obj|them,$0),adv|out(adv|there($0)))
example_end

Sent: are they on the table ?
Sem: lambda $0_{ev}.Q(adv|on(det:art|the($1,n|table($1)),pro:sub|they,$0))
example_end

Sent: do I want you to serve me another meat ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|serve(pro:per|you,qn|another($2,n|meat($2)),pro:obj|me,$1),$0),$0))
example_end

Sent: yes please .
Sem: lambda $0_{ev}.and(co|please($0),co|yes($0))
example_end

Sent: you cut it for me ?
Sem: lambda $0_{ev}.Q(and(v|cut-zero(pro:per|you,pro:per|it,$0),prep|for(pro:obj|me,$0)))
example_end

Sent: what kind of meat is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,att(n|kind(pro:dem|this,$0),prep|of(lambda $2_{e}.n|meat($2))))
example_end

Sent: I like hamburger .
Sem: lambda $0_{ev}.v|like(pro:sub|i,lambda $1_{e}.n|hamburger($1),$0)
example_end

Sent: do I have any vegetables ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:sub|i,qn|any($1,n|vegetable-pl($1)),$0),$0))
example_end

Sent: oh I have some meat .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,qn|some($1,n|meat($1)),$0),co|oh($0))
example_end

Sent: I 'd like some vegetables .
Sem: lambda $0_{ev}.mod|~genmod(v|like(pro:sub|i,qn|some($1,n|vegetable-pl($1)),$0),$0)
example_end

Sent: did you drop the vegetables ?
Sem: lambda $0_{ev}.Q(v|do-past(v|drop(pro:per|you,det:art|the($1,n|vegetable-pl($1)),$0),$0))
example_end

Sent: d you want to tell Urs about the trees ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,n:prop|ursula,$1),prep|about(det:art|the($2,n|tree-pl($2)),$1)),$0),$0))
example_end

Sent: the tree was shaped like that .
Sem: lambda $0_{ev}.and(part|shape-pastp(_,det:art|the($1,n|tree($1)),$0),co|like(pro:dem|that,$0))
example_end

Sent: don 't you give Urs anything ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|give(pro:per|you,pro:indef|anything,n:prop|ursula,$0),$0),$0))
example_end

Sent: I 'd like a hamburger .
Sem: lambda $0_{ev}.mod|~genmod(prep|like(pro:sub|i,det:art|a($1,n|hamburger($1)),$0),$0)
example_end

Sent: you 're coming back ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|come-presp(pro:per|you,$0),adv|back($0)),$0))
example_end

Sent: what did you give us ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|give(pro:per|you,$1,pro:obj|us,$0),$0)
example_end

Sent: she 's downstairs .
Sem: lambda $0_{ev}.and(cop|~be(pro:sub|she,$0),adv|downstairs($0))
example_end

Sent: you mean your saucer ?
Sem: lambda $0_{ev}.Q(v|mean(pro:per|you,det:poss|your($1,n|saucer($1)),$0))
example_end

Sent: I think you can find it .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|can(v|find(pro:per|you,pro:per|it,$1),$1),$0)
example_end

Sent: d you have a cream pitcher too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,and_comp(n|cream($1),n|pitcher($1))),$0),post|too($0)),$0))
example_end

Sent: I like lobsters .
Sem: lambda $0_{ev}.v|like(pro:sub|i,lambda $1_{e}.n|lobster-pl($1),$0)
example_end

Sent: in a store ?
Sem: Q(prep|in(det:art|a($0,n|store($0))))
example_end

Sent: was it moving ?
Sem: lambda $0_{ev}.Q(cop|be-past(part|move-presp(pro:per|it,$0),$0))
example_end

Sent: did you see it in the store ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|see(pro:per|you,pro:per|it,$0),prep|in(det:art|the($1,n|store($1)),$0)),$0))
example_end

Sent: where did you see it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: at Barney 's house .
Sem: prep|at(n:prop|barney's($0,n|house($0)))
example_end

Sent: what was it like ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-past(co|like(pro:per|it,$1,$0),$0)
example_end

Sent: put the handle down .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|handle($1)),$0),adv|down($0))
example_end

Sent: no the handle .
Sem: lambda $0_{ev}.and(det:art|the($1,n|handle($1),$0),qn|no($0))
example_end

Sent: d you know what the handle is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: the handle of the knife .
Sem: det:art|the($0,att(n|handle($0),prep|of(det:art|the($1,n|knife($1)))))
example_end

Sent: what 'd you put in this ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|~genmod(and(v|put-zero(pro:per|you,$1,$0),prep|in(pro:dem|this,$0)),$0)
example_end

Sent: what would you put in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(v|put-zero(pro:per|you,$1,$0),adv|in(adv|there($0))),$0)
example_end

Sent: some water juice ?
Sem: lambda $0_{e}.Q(qn|some($1,n|juice($1),$0))
example_end

Sent: what would you put in here ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(v|put-zero(pro:per|you,$1,$0),adv|in(adv|here($0))),$0)
example_end

Sent: where would you put that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(v|put-zero(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: I thought you said you knew .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.v|say-past(pro:per|you,lambda $2_{ev}.v|know-past(pro:per|you,$2),$1),$0)
example_end

Sent: yes it is a kind of plate .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $1_{e}.n|plate($1)))),co|yes($0))
example_end

Sent: it 's a saucer .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|saucer(pro:per|it,$0))
example_end

Sent: I think it goes in there .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(v|go-3s(pro:per|it,$1),adv|in(adv|there($1))),$0)
example_end

Sent: d you know what you put in that ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:int|what,$1),prep|in(pro:dem|that,$1)),$0),$0))
example_end

Sent: they 're no different ?
Sem: lambda $0_{ev}.Q(not(adj|different(pro:sub|they,$0),$0))
example_end

Sent: how are they different ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(adj|different(pro:sub|they,$0))
example_end

Sent: thirty times what ?
Sem: lambda $2_{e}.lambda $0_{ev}.n|time-pl(lambda $1_{e}.det:num|thirty($1),$2,$0)
example_end

Sent: a jingle pole ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(v|jingle($1),n|pole($1)),$0))
example_end

Sent: from singing a song ?
Sem: lambda $0_{ev}.Q(n:gerund|sing-presp(you,det:art|a($1,n|song($1)),$0))
example_end

Sent: I don 't remember a song like that .
Sem: lambda $0_{ev}.not(mod|do(v|remember(pro:sub|i,det:art|a($1,att(n|song($1),prep|like(pro:dem|that))),$0),$0),$0)
example_end

Sent: Adam where did you see the lobster ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|lobster($1)),$0),$2($0)),$0)
example_end

Sent: it might hurt .
Sem: lambda $0_{ev}.mod|might(v|hurt-zero(pro:per|it,$0),$0)
example_end

Sent: do lobsters have teeth ?
Sem: lambda $0_{ev}.Q(v|do(v|have(lambda $1_{e}.n|lobster-pl($1),lambda $2_{e}.n|tooth-pl($2),$0),$0))
example_end

Sent: they don 't need teeth .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:sub|they,lambda $1_{e}.n|tooth-pl($1),$0),$0),$0)
example_end

Sent: they don 't talk like we talk .
Sem: lambda $0_{ev}.not(mod|do(v|talk(pro:sub|they,lambda $1_{ev}.v|talk(pro:sub|we,$1),$0),$0),$0)
example_end

Sent: I think they talk to each_other .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(v|talk(pro:sub|they,$1),prep|to(pro:refl|each_other,$1)),$0)
example_end

Sent: what kind of fish will they catch ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(v|catch(pro:sub|they,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|fish($3)))),$0),$0)
example_end

Sent: catch a lion ?
Sem: lambda $0_{ev}.Q(v|catch(you,det:art|a($1,n|lion($1)),$0))
example_end

Sent: a lion_fish ?
Sem: lambda $0_{e}.Q(det:art|a($1,chi|lion_fish($1),$0))
example_end

Sent: they 're taking the whales out ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|take-presp(pro:sub|they,det:art|the($1,n|whale-pl($1)),$0),adv|out($0)),$0))
example_end

Sent: what other kind of fish will they get ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(v|get(pro:sub|they,$1($2,att(and(qn|other($2),n|kind($2)),prep|of(lambda $3_{e}.n|fish($3)))),$0),$0)
example_end

Sent: they get what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|get(pro:sub|they,$1,$0)
example_end

Sent: they 'll get ninety fish .
Sem: lambda $0_{ev}.mod|~will(v|get(pro:sub|they,lambda $1_{e}.det:num|ninety(n|fish($1)),$0),$0)
example_end

Sent: and some Adams !
Sem: qn|some($0,n:prop|adams($0))
example_end

Sent: you saw one down there named Adam ?
Sem: lambda $0_{ev}.Q(and(v|saw(pro:per|you,lambda $1_{ev}.part|name-pastp(_,n:prop|adam,$1),$0),adv|down(adv|there($0))))
example_end

Sent: she 's down there .
Sem: lambda $0_{ev}.and(cop|~be(pro:sub|she,$0),adv|down(adv|there($0)))
example_end

Sent: she 'll be up in a little while .
Sem: lambda $0_{ev}.mod|~will(and(and(cop|be(pro:sub|she,$0),adv|up($0)),prep|in(det:art|a($1,and(adj|little($1),n|while($1))),$0)),$0)
example_end

Sent: she didn 't go any place .
Sem: lambda $0_{ev}.not(mod|do(and(v|go(pro:sub|she,$0),n|place_any($0)),$0),$0)
example_end

Sent: she 's doing something .
Sem: lambda $0_{ev}.aux|~be(part|do-presp(pro:sub|she,pro:indef|something,$0),$0)
example_end

Sent: I don 't know what she 's doing .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.aux|~be(part|do-presp(pro:sub|she,pro:int|what,$1),$1),$0),$0),$0)
example_end

Sent: well let her look .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.co|look(pro:obj|her,$1),$0),co|well($0))
example_end

Sent: look in here .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|in(adv|here($0)))
example_end

Sent: try again .
Sem: lambda $0_{ev}.and(v|try(you,$0),adv|again($0))
example_end

Sent: well no it doesn 't want to ski .
Sem: lambda $0_{ev}.and(and(not(mod|do(v|want(pro:per|it,lambda $1_{ev}.adj|ski(pro:per|it,$1),$0),$0),$0),co|well($0)),co|no($0))
example_end

Sent: what kind of skiing ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n:gerund|ski-presp($2))))
example_end

Sent: Adam that 's very sticky .
Sem: lambda $0_{ev}.adv|very(n|sticky(pro:rel|that,$0))
example_end

Sent: which one d you want ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,$1($2,pro:indef|one($2)),$0),$0)
example_end

Sent: alright then look .
Sem: lambda $0_{ev}.and(cop|look(you,$0),co|alright_then($0))
example_end

Sent: a line ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|line($1),$0))
example_end

Sent: some soap .
Sem: qn|some($0,n|soap($0))
example_end

Sent: I 'd like a can opener .
Sem: lambda $0_{ev}.mod|~genmod(prep|like(pro:sub|i,det:art|a($1,and_comp(n|can($1),adj|open-cp($1))),$0),$0)
example_end

Sent: and some Jello .
Sem: qn|some($0,n:prop|jello($0))
example_end

Sent: baby food .
Sem: lambda $0_{e}.and_comp(n|baby($0),n|food($0))
example_end

Sent: some cereal .
Sem: qn|some($0,n|cereal($0))
example_end

Sent: d you like bacon ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.n|bacon($1),$0),$0))
example_end

Sent: I need some peach jam .
Sem: lambda $0_{ev}.v|need(pro:sub|i,qn|some($1,and_comp(n|peach($1),n|jam($1))),$0)
example_end

Sent: some macaroni ?
Sem: lambda $0_{e}.Q(qn|some($1,n|macaroni($1),$0))
example_end

Sent: and two gallons of milk .
Sem: lambda $0_{e}.att(det:num|two(n|gallon-pl($0)),prep|of(lambda $1_{e}.n|milk($1)))
example_end

Sent: and toothpaste .
Sem: lambda $0_{e}.n|tooth+paste($0)
example_end

Sent: yes alright .
Sem: lambda $0_{ev}.and(co|alright($0),co|yes($0))
example_end

Sent: some twine for clothes line .
Sem: pro:indef|some($0,att(v|twine($0),prep|for(lambda $1_{e}.and_comp(n:pt|clothes($1),n|line($1)))))
example_end

Sent: some bibs for Paul .
Sem: qn|some($0,att(n|bib-pl($0),prep|for(n:prop|paul)))
example_end

Sent: some shoe polish for Adam .
Sem: qn|some($0,att(and_comp(n|shoe($0),n|polish($0)),prep|for(n:prop|adam)))
example_end

Sent: some hooks for my curtain rod .
Sem: qn|some($0,att(n|hook-pl($0),prep|for(det:poss|my($1,and_comp(n|curtain($1),n|rod($1))))))
example_end

Sent: what else d you want Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|want(pro:per|you,$1,$0),$0)
example_end

Sent: what else d you need from the store ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(and(v|need(pro:per|you,$1,$0),prep|from(det:art|the($2,n|store($2)),$0)),$0)
example_end

Sent: I don 't think I need anything else thank_you .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:sub|i,post|else(pro:indef|anything),$1),$0),$0),$0),n|thank_you($0))
example_end

Sent: some of Paul 's food for you ?
Sem: Q(prep|of(n:prop|paul's($0,qn|some($1,att(n|food($1),prep|for(pro:per|you)),$0))))
example_end

Sent: some polish for you ?
Sem: lambda $0_{e}.Q(qn|some($1,att(n|polish($1),prep|for(pro:per|you)),$0))
example_end

Sent: I 'd like to be a bunny today .
Sem: lambda $0_{ev}.mod|~genmod(and(v|like(pro:sub|i,lambda $1_{ev}.det:art|a(pro:sub|i,n|bunny(pro:sub|i,$1)),$0),adv:tem|today($0)),$0)
example_end

Sent: he had another one but I don 't remember it .
Sem: lambda $0_{ev}.conj|but(not(mod|do(v|remember(pro:sub|i,pro:per|it,$0),$0),$0),v|have-past(pro:sub|he,qn|another($1,pro:indef|one($1)),$0))
example_end

Sent: which one did you choose Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|choose(pro:per|you,$1($2,pro:indef|one($2)),$0),$0)
example_end

Sent: some polish .
Sem: qn|some($0,n|polish($0))
example_end

Sent: what else do you need ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|need(pro:per|you,$1,$0),$0)
example_end

Sent: some groceries .
Sem: qn|some($0,n|grocery-pl($0))
example_end

Sent: push the green one ?
Sem: lambda $0_{ev}.Q(v|push(you,det:art|the($1,att(pro:indef|one,lambda $2_{e}.n|green($2),$1)),$0))
example_end

Sent: push this up .
Sem: lambda $0_{ev}.and(v|push(you,pro:dem|this,$0),adv|up($0))
example_end

Sent: put your finger on top of mine .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:poss|your($1,n|finger($1)),$0),prep|on(lambda $2_{e}.att(n|top($2),prep|of(pro:poss|mine)),$0))
example_end

Sent: it disappeared .
Sem: lambda $0_{ev}.part|appear-pastp(pro:per|it,$0)
example_end

Sent: push it down with me ?
Sem: lambda $0_{ev}.Q(and(and(v|push(you,pro:per|it,$0),adv|down($0)),prep|with(pro:obj|me,$0)))
example_end

Sent: hear a little click ?
Sem: lambda $0_{ev}.Q(v|hear(you,det:art|a($1,and(adj|little($1),n|click($1))),$0))
example_end

Sent: don 't write on your arm .
Sem: lambda $0_{ev}.not(mod|do(and(v|write(you,$0),prep|on(det:poss|your($1,n|arm($1)),$0)),$0),$0)
example_end

Sent: have you ever seen anybody with a picture on their arm ?
Sem: lambda $0_{ev}.Q(aux|have(and(part|see-pastp(pro:per|you,att(pro:indef|anybody,prep|with(det:art|a($1,att(n|picture($1),prep|on(det:poss|their($2,n|arm($2))))))),$0),adv|ever($0)),$0))
example_end

Sent: with two shovels ?
Sem: Q(prep|with(lambda $0_{e}.det:num|two(n|shovel-pl($0))))
example_end

Sent: can you draw a circle ?
Sem: lambda $0_{ev}.Q(mod|can(v|draw(pro:per|you,det:art|a($1,n|circle($1)),$0),$0))
example_end

Sent: you used to have a book about a tattooed man Adam .
Sem: lambda $0_{ev}.v|use-past(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,det:art|a($2,att(n|book($2),prep|about(det:art|a($3,and(part|tattoo-pastp($3),n|man($3)))))),$1),$0)
example_end

Sent: remember the circus parade and the tattooed man ?
Sem: lambda $0_{ev}.Q(v|remember(you,det:art|the($1,and_comp(n|circus($1),n|parade($1))),$0))
example_end

Sent: can you draw a square ?
Sem: lambda $0_{ev}.Q(mod|can(v|draw(pro:per|you,det:art|a($1,n|square($1)),$0),$0))
example_end

Sent: is that a square ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|square(pro:rel|that,$0)))
example_end

Sent: did I scratch you with your arm ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|scratch(pro:sub|i,pro:per|you,$0),prep|with(det:poss|your($1,n|arm($1)),$0)),$0))
example_end

Sent: what does this look like ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(co|look(det:dem|this,$1,$0),$0)
example_end

Sent: open it please .
Sem: lambda $0_{ev}.and(v|open(you,pro:per|it,$0),co|please($0))
example_end

Sent: that 's an address book .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|address(pro:dem|that,$0),n|book(pro:dem|that,$0)))
example_end

Sent: how to get to your new house .
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|get(you,$0),$1($0)),prep|to(det:poss|your($2,and(adj|new($2),n|house($2))),$0))
example_end

Sent: have_to cut it ?
Sem: lambda $0_{ev}.Q(v|cut-zero(pro:per|it,$0))
example_end

Sent: why d you have_to cut it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(v|do(and(v|cut-zero(pro:per|you,pro:per|it,$0),$1($0)),$0),$0)
example_end

Sent: no why do you have_to cut it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod:aux|have_to(v|do(and(v|cut-zero(pro:per|you,pro:per|it,$0),$1($0)),$0),$0),co|no($0))
example_end

Sent: a picture of me ?
Sem: lambda $0_{e}.Q(det:art|a($1,att(n|picture($1),prep|of(pro:obj|me)),$0))
example_end

Sent: that 's a nice picture of me .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(and(n|picture(pro:dem|that,$0),adj|nice(pro:dem|that,$0)),prep|of(pro:obj|me)))
example_end

Sent: you have_to hold it .
Sem: lambda $0_{ev}.mod:aux|have_to(v|hold(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: you better cut this off ?
Sem: lambda $0_{ev}.Q(and(and(v|cut-zero(pro:per|you,pro:dem|this,$0),adv|good-cp($0)),prep|off($0)))
example_end

Sent: that 's enough now .
Sem: lambda $0_{ev}.adv|now(adv|enough(pro:dem|that,$0))
example_end

Sent: don 't you think you have enough ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,$1),$0),$0),$0))
example_end

Sent: you 're going to use a blue one ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|use(pro:per|you,det:art|a($2,att(pro:indef|one,lambda $3_{e}.n|blue($3),$2)),$1),$0),$0))
example_end

Sent: to write on ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),adv|on($0)))
example_end

Sent: d you draw groceries ?
Sem: lambda $0_{ev}.Q(mod|do(v|draw(pro:per|you,lambda $1_{e}.n|grocery-pl($1),$0),$0))
example_end

Sent: they 're behind you ?
Sem: lambda $0_{ev}.Q(adv|behind(pro:per|you,pro:sub|they,$0))
example_end

Sent: would you hand them to me ?
Sem: lambda $0_{ev}.Q(mod|will-cond(and(v|hand(pro:per|you,pro:obj|them,$0),prep|to(pro:obj|me,$0)),$0))
example_end

Sent: she 's waiting for her coffee .
Sem: lambda $0_{ev}.aux|~be(and(part|wait-presp(pro:sub|she,$0),prep|for(pro:obj|her($1,n|coffee($1)),$0)),$0)
example_end

Sent: of a what ?
Sem: det:art|a($0,pro:int|what($0))
example_end

Sent: the sign says Adam Smith .
Sem: lambda $0_{ev}.v|say-3s(det:art|the($1,n|sign($1)),n:prop|smith_adam,$0)
example_end

Sent: oh here 's a little table .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,and(adj|little($1),n|table($1))),$0),pro:exist|here($0)),co|oh($0))
example_end

Sent: not on your leg on the paper .
Sem: not(prep|on(det:poss|your($0,att(n|leg($0),prep|on(det:art|the($1,n|paper($1)))))))
example_end

Sent: can you draw a picture of a triangle ?
Sem: lambda $0_{ev}.Q(mod|can(v|draw(pro:per|you,det:art|a($1,att(n|picture($1),prep|of(det:art|a($2,n|triangle($2))))),$0),$0))
example_end

Sent: you do have three lines don 't you ?
Sem: lambda $0_{ev}.Q(and(v|do(v|have(pro:per|you,lambda $1_{e}.det:num|three(n|line-pl($1)),$0),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: oh you had too much coffee ?
Sem: lambda $0_{ev}.Q(and(v|have-past(pro:per|you,adv|too(lambda $1_{e}.and(qn|much($1),n|coffee($1))),$0),co|oh($0)))
example_end

Sent: careful don 't drink too fast Adam .
Sem: lambda $0_{ev}.and(not(mod|do(and(n|drink(you,$0),adv|too(adj|fast($0))),$0),$0),co|careful($0))
example_end

Sent: was that too much that time ?
Sem: qn|much(pro:dem|that($0,n|time($0)))
example_end

Sent: don 't write on the couch dear .
Sem: lambda $0_{ev}.not(mod|do(and(v|write(you,$0),prep|on(det:art|the($1,n|couch($1)),$0)),$0),$0)
example_end

Sent: d you push it like that ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|push(pro:per|you,pro:per|it,$0),co|like(pro:dem|that,$0)),$0))
example_end

Sent: for skiing ?
Sem: lambda $0_{ev}.Q(part|ski-presp(you,$0))
example_end

Sent: did you show Cecelia the watch ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:art|the($1,n|watch($1)),n:prop|cecelia,$0),$0))
example_end

Sent: is that late ?
Sem: lambda $0_{ev}.Q(adj|late(pro:dem|that,$0))
example_end

Sent: oh it 's supper .
Sem: lambda $0_{ev}.and(n|supper(pro:per|it,$0),co|oh($0))
example_end

Sent: you don 't need to pull it anymore .
Sem: lambda $0_{ev}.not(mod|do(and(v|need(pro:per|you,lambda $1_{ev}.v|pull(pro:per|you,pro:per|it,$1),$0),adv|anymore($0)),$0),$0)
example_end

Sent: where 's the other part of it ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,att(and(qn|other($1),n|part($1)),prep|of(pro:per|it))),$0),$2($0))
example_end

Sent: it said what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|say-past(pro:per|it,$1,$0)
example_end

Sent: shall I take it out for you Adam ?
Sem: lambda $0_{ev}.Q(mod|shall(and(and(v|take(pro:sub|i,pro:per|it,$0),adv|out($0)),prep|for(pro:per|you,$0)),$0))
example_end

Sent: you 're going to make a what ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|make(pro:per|you,$2,$1),$0),$0)
example_end

Sent: a green arm ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|green($1),n|arm($1)),$0))
example_end

Sent: what 's a green arm ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,and(adj|green($2),n|arm($2))),$0)
example_end

Sent: that was a big pop ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,and(n|pop(pro:dem|that,$0),adj|big(pro:dem|that,$0))))
example_end

Sent: yes I 'm upstairs .
Sem: lambda $0_{ev}.and(and(aux|~be(pro:sub|i,$0),adv|upstairs($0)),co|yes($0))
example_end

Sent: I won 't fall down on you .
Sem: lambda $0_{ev}.not(mod|will(and(and(v|fall(pro:sub|i,$0),adv|down($0)),prep|on(pro:per|you,$0)),$0),$0)
example_end

Sent: what 're you going to draw ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|draw(pro:per|you,$2,$1),$0),$0)
example_end

Sent: it looks like a house .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|house($1)),$0))
example_end

Sent: a fish next_to the house ?
Sem: lambda $0_{e}.Q(det:art|a($1,att(n|fish($1),prep|next_to(det:art|the($2,n|house($2)))),$0))
example_end

Sent: oh you 're going to make a magic drawing board ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|make(pro:per|you,det:art|a($2,and_comp(n|drawing($2),and(n|magic($2),n|board($2)))),$1),$0),$0),co|oh($0)))
example_end

Sent: don 't touch the fish ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|touch(you,det:art|the($1,n|fish($1)),$0),$0),$0))
example_end

Sent: Bob fish ?
Sem: lambda $0_{e}.Q(and_comp(n:prop|bob($0),n|fish($0)))
example_end

Sent: oh an iron fish .
Sem: lambda $0_{ev}.and(det:art|a($1,and(adj|iron($1),n|fish($1)),$0),co|oh($0))
example_end

Sent: oh they 're talking ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|talk-presp(pro:sub|they,$0),$0),co|oh($0)))
example_end

Sent: they 're talking to each_other ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|talk-presp(pro:sub|they,$0),prep|to(pro:refl|each_other,$0)),$0))
example_end

Sent: what 're they saying ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|say-presp(pro:sub|they,$1,$0),$0)
example_end

Sent: I 'd like to have one .
Sem: lambda $0_{ev}.mod|~genmod(v|like(pro:sub|i,lambda $1_{ev}.v|have(pro:sub|i,pro:indef|one,$1),$0),$0)
example_end

Sent: they don 't stick very well .
Sem: lambda $0_{ev}.not(mod|do(and(v|stick(pro:sub|they,$0),adv|very(adv|well($0))),$0),$0)
example_end

Sent: you 've got too much water on it maybe .
Sem: lambda $0_{ev}.aux|~have(and(and(part|get-pastp(pro:per|you,lambda $1_{e}.and(adv|too(qn|much($1)),n|water($1)),$0),prep|on(pro:per|it,$0)),adv|maybe($0)),$0)
example_end

Sent: that bus went away ?
Sem: lambda $0_{ev}.Q(and(v|go-past(pro:dem|that($1,n|bus($1)),$0),adv|away($0)))
example_end

Sent: yes another bus .
Sem: lambda $0_{ev}.and(qn|another($1,n|bus($1),$0),co|yes($0))
example_end

Sent: yes Harvard_Square bus .
Sem: lambda $0_{ev}.and(and_comp(n:prop|harvard_square($0),n|bus($0)),co|yes($0))
example_end

Sent: because I can read .
Sem: lambda $0_{ev}.mod|can(v|read-zero(pro:sub|i,$0),$0)
example_end

Sent: what kind o game ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|game($2))))
example_end

Sent: can I play ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:sub|i,$0),$0))
example_end

Sent: I think you have_to try another one Adam .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod:aux|have_to(v|try(pro:per|you,qn|another($2,pro:indef|one($2)),$1),$1),$0)
example_end

Sent: is that a picture of anything special ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,att(n|picture(pro:rel|that,$0),prep|of(att(pro:indef|anything,lambda $1_{e}.adj|special($1))))))
example_end

Sent: that looks like you 're making a salad Adam .
Sem: lambda $0_{ev}.cop|look-3s(pro:dem|that,lambda $1_{ev}.aux|~be(part|make-presp(pro:per|you,det:art|a($2,n|salad($2)),$1),$1),$0)
example_end

Sent: yes when she goes home she 'll catch the Harvard_Square bus .
Sem: lambda $3_{e}.lambda $0_{ev}.and(mod|~will(and(v|catch(pro:sub|she,det:art|the($1,and_comp(n:prop|harvard_square($1),n|bus($1))),$0),and(v|go-3s(pro:sub|she,lambda $2_{e}.n|home($2),$0),$3($0))),$0),co|yes($0))
example_end

Sent: not today one day .
Sem: and(not(lambda $0_{e}.adv:tem|today($0)),lambda $1_{e}.det:num|one(n|day($1)))
example_end

Sent: no it 's not dirty .
Sem: lambda $0_{ev}.and(not(adj|dirt-dn(pro:per|it,$0),$0),co|no($0))
example_end

Sent: no busses are usually pretty clean .
Sem: lambda $0_{ev}.and(adv|pretty(adv|usual-dadj(adj|clean(lambda $1_{e}.n|buss-pl($1),$0))),qn|no($0))
example_end

Sent: they 're matches ?
Sem: lambda $0_{ev}.Q(n|match-pl(pro:sub|they,$0))
example_end

Sent: you 're ready for your lunch ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|ready($0,$1)
example_end

Sent: what would you like for your lunch ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(co|like(pro:per|you,$1,$0),prep|for(det:poss|your($2,n|lunch($2)),$0)),$0)
example_end

Sent: play with this ?
Sem: lambda $0_{ev}.Q(and(n|play(you,$0),prep|with(pro:dem|this,$0)))
example_end

Sent: here 's some macaroni .
Sem: lambda $0_{ev}.and(cop|~be(qn|some($1,n|macaroni($1)),$0),pro:exist|here($0))
example_end

Sent: here 's some milk .
Sem: lambda $0_{ev}.and(cop|~be(qn|some($1,n|milk($1)),$0),pro:exist|here($0))
example_end

Sent: and macaroni .
Sem: lambda $0_{e}.n|macaroni($0)
example_end

Sent: into your macaroni ?
Sem: Q(prep|into(det:poss|your($0,n|macaroni($0))))
example_end

Sent: I don 't think you 'd like that .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(prep|like(pro:per|you,pro:dem|that,$1),$1),$0),$0),$0)
example_end

Sent: you have macaroni and cheese .
Sem: lambda $0_{ev}.v|have(pro:per|you,lambda $1_{e}.n|macaroni($1),$0)
example_end

Sent: it makes you eat ?
Sem: lambda $0_{ev}.Q(v|make-3s(pro:per|it,lambda $1_{ev}.v|eat(pro:per|you,$1),$0))
example_end

Sent: this sometimes makes you cry ?
Sem: lambda $0_{ev}.Q(and(v|make-3s(pro:dem|this,lambda $1_{ev}.v|cry(pro:per|you,$1),$0),adv|sometimes($0)))
example_end

Sent: because Shadow_Gay drinks his milk .
Sem: lambda $0_{ev}.v|drink-3s(n:prop|shadow_gay,det:poss|his($1,n|milk($1)),$0)
example_end

Sent: put you to bed ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|you,$0),prep|to(lambda $1_{e}.n|bed($1),$0)))
example_end

Sent: here 's a bed right here .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|bed($1)),$0),pro:exist|here($0)),adv|right(adv|here($0)))
example_end

Sent: night_night have a nice nap .
Sem: lambda $0_{ev}.and(v|have(you,det:art|a($1,and(adj|nice($1),n|nap($1))),$0),co|night_night($0))
example_end

Sent: it 's a sign .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|sign(pro:per|it,$0))
example_end

Sent: it moves ?
Sem: lambda $0_{ev}.Q(v|move-3s(pro:per|it,$0))
example_end

Sent: what does it do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|do(pro:per|it,$1,$0),$0)
example_end

Sent: it has someone 's name on it .
Sem: lambda $0_{ev}.and(aux|have-3s(pro:per|it,pro:indef|someone($1,n|name($1)),$0),prep|on(pro:per|it,$0))
example_end

Sent: no not your name .
Sem: lambda $0_{ev}.and(not(det:poss|your($1,n|name($1)),$0),co|no($0))
example_end

Sent: not Robin .
Sem: not(n:prop|robin)
example_end

Sent: yes that 's David .
Sem: lambda $0_{ev}.and(n:prop|david(pro:dem|that,$0),co|yes($0))
example_end

Sent: no that 's Bellugi .
Sem: lambda $0_{ev}.and(n:prop|bellugi(pro:dem|that,$0),co|no($0))
example_end

Sent: that 's David 's last name like your last name is Smith .
Sem: lambda $0_{ev}.prep|like(n:prop|smith(det:poss|your($1,and(adj|last($1),n|name($1))),$0),n:prop|david's'(pro:dem|that,and(n|name(pro:dem|that,$0),adj|last(pro:dem|that,$0))))
example_end

Sent: you want some macaroni .
Sem: lambda $0_{ev}.v|want(pro:per|you,qn|some($1,n|macaroni($1)),$0)
example_end

Sent: oh you didn 't want very much macaroni did you ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|want(pro:per|you,lambda $1_{e}.and(adv|very(qn|much($1)),n|macaroni($1)),$0),$0),$0),v|do-past(pro:per|you,$0)),co|oh($0)))
example_end

Sent: please don 't spill your macaroni .
Sem: lambda $0_{ev}.and(not(mod|do(v|spill(you,det:poss|your($1,n|macaroni($1)),$0),$0),$0),co|please($0))
example_end

Sent: did you eat all of that ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|eat(pro:per|you,lambda $1_{e}.att(pro:indef|all($1),prep|of(pro:dem|that)),$0),$0))
example_end

Sent: here 's some salt .
Sem: lambda $0_{ev}.and(cop|~be(qn|some($1,n|salt($1)),$0),pro:exist|here($0))
example_end

Sent: your fork ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n|fork($1),$0))
example_end

Sent: like a barrel of fun ?
Sem: Q(prep|like(det:art|a($0,att(n|barrel($0),prep|of(lambda $1_{e}.n|fun($1))))))
example_end

Sent: in the dining room ?
Sem: Q(prep|in(det:art|the($0,and_comp(part|dine-presp($0),n|room($0)))))
example_end

Sent: you didn 't pick everything up .
Sem: lambda $0_{ev}.not(mod|do(and(v|pick(pro:per|you,pro:indef|everything,$0),adv|up($0)),$0),$0)
example_end

Sent: look behind you .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|behind(pro:per|you,$0))
example_end

Sent: okay pick up the knife .
Sem: lambda $0_{ev}.and(and(v|pick(you,det:art|the($1,n|knife($1)),$0),prep|up($0)),co|okay($0))
example_end

Sent: what about the book ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|book($0))))
example_end

Sent: children playing .
Sem: lambda $0_{ev}.part|play-presp(lambda $1_{e}.n|child-pl($1),$0)
example_end

Sent: get up here .
Sem: lambda $0_{ev}.and(v|get(you,$0),adv|up(adv|here($0)))
example_end

Sent: pickle man .
Sem: lambda $0_{e}.and_comp(n|pickle($0),n|man($0))
example_end

Sent: jumping for joy aren 't you ?
Sem: lambda $0_{ev}.Q(and(and(part|jump-presp(you,$0),prep|for(lambda $1_{e}.n|joy($1),$0)),not(aux|be(pro:per|you,$0),$0)))
example_end

Sent: he 's happy .
Sem: lambda $0_{ev}.adj|happy(pro:sub|he,$0)
example_end

Sent: where 's the merry ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|merry+go+round($1)),$0),$2($0))
example_end

Sent: can I cut you a slice ?
Sem: lambda $0_{ev}.Q(mod|can(v|cut-zero(pro:sub|i,det:art|a($1,n|slice($1)),pro:per|you,$0),$0))
example_end

Sent: d you want the cover on it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|the($1,att(n|cover($1),prep|on(pro:per|it))),$0),$0))
example_end

Sent: say thank_you .
Sem: lambda $0_{ev}.v|say(you,lambda $1_{e}.n|thank_you($1),$0)
example_end

Sent: did you sing a song for Urs ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|sing(pro:per|you,det:art|a($1,n|song($1)),$0),prep|for(n:prop|ursula,$0)),$0))
example_end

Sent: did you sing Yankee_Doodle ?
Sem: lambda $0_{ev}.Q(v|do-past(v|sing(pro:per|you,n:prop|yankee_doodle,$0),$0))
example_end

Sent: what 'd he do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|~genmod(v|do(pro:sub|he,$1,$0),$0)
example_end

Sent: put them in front of you .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:obj|them,$0),prep|in(lambda $1_{e}.att(n|front($1),prep|of(pro:per|you)),$0))
example_end

Sent: he 's talking to you about something .
Sem: lambda $0_{ev}.aux|~be(and(and(part|talk-presp(pro:sub|he,$0),prep|to(pro:per|you,$0)),prep|about(pro:indef|something,$0)),$0)
example_end

Sent: d you like cheese Adam ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.n|cheese($1),$0),$0))
example_end

Sent: what d you have on your cracker ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|on(det:poss|your($2,n|cracker($2)),$0)),$0)
example_end

Sent: is that your favorite kind ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,and(n|kind(pro:rel|that,$0),n|favorite(pro:rel|that,$0))))
example_end

Sent: why is that Mr Pickle ?
Sem: lambda $0_{ev}.n:prop|pickle_mr(pro:rel|that,$0)
example_end

Sent: from the tv set ?
Sem: Q(prep|from(det:art|the($0,and_comp(n|tv($0),part|set-pastp($0)))))
example_end

Sent: does she let you watch it ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|let-zero(pro:sub|she,lambda $1_{ev}.v|watch(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: I 've never seen Mr Pickle .
Sem: lambda $0_{ev}.aux|~have(and(part|see-pastp(pro:sub|i,n:prop|pickle_mr,$0),adv|never($0)),$0)
example_end

Sent: what 's on your glass Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.prep|on(det:poss|your($1,n|glass($1)),$2,$0)
example_end

Sent: oh Flintstones .
Sem: lambda $0_{ev}.and(n:prop|flintstones($0),co|oh($0))
example_end

Sent: is Rocky somebody on tv ?
Sem: lambda $0_{ev}.Q(att(pro:indef|somebody(n:prop|rocky,$0),prep|on(lambda $1_{e}.n|tv($1))))
example_end

Sent: how d you watch Cocoamarsh ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|watch(pro:per|you,n:prop|cocoamarsh,$0),$1($0)),$0)
example_end

Sent: is that on tv too ?
Sem: lambda $0_{ev}.Q(post|too(prep|on(lambda $1_{e}.n|tv($1),pro:dem|that,$0)))
example_end

Sent: Mommy let you watch what ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|let-zero(n:prop|mommy,lambda $1_{ev}.v|watch(pro:per|you,$2,$1),$0)
example_end

Sent: I just put water in it .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:sub|i,lambda $1_{e}.n|water($1),$0),adv|just($0)),prep|in(pro:per|it,$0))
example_end

Sent: you saw some friends ?
Sem: lambda $0_{ev}.Q(v|saw(pro:per|you,qn|some($1,n|friend-pl($1)),$0))
example_end

Sent: where was that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-past(pro:dem|that,$0),$1($0))
example_end

Sent: did you meet some friends there ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|meet(pro:per|you,qn|some($1,n|friend-pl($1)),$0),adv|there($0)),$0))
example_end

Sent: oh you did ?
Sem: lambda $0_{ev}.Q(and(v|do-past(pro:per|you,$0),co|oh($0)))
example_end

Sent: what was his name ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|his($2,n|name($2)),$0)
example_end

Sent: oh you don 't know his name ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|know(pro:per|you,det:poss|his($1,n|name($1)),$0),$0),$0),co|oh($0)))
example_end

Sent: do you remember their names ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,det:poss|their($1,n|name-pl($1)),$0),$0))
example_end

Sent: what were their names ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|their($2,n|name-pl($2)),$0)
example_end

Sent: I don 't have a pencil in there .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:sub|i,det:art|a($1,n|pencil($1)),$0),prep|in(adv|there($0))),$0),$0)
example_end

Sent: you want a pencil too ?
Sem: lambda $0_{ev}.Q(and(v|want(pro:per|you,det:art|a($1,n|pencil($1)),$0),post|too($0)))
example_end

Sent: bring my purse .
Sem: lambda $0_{ev}.v|bring(you,det:poss|my($1,n|purse($1)),$0)
example_end

Sent: let 's have something to read .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|have(pro:obj|~us,lambda $2_{e}.rel(pro:indef|something($2),lambda $3_{ev}.v|read-zero(you,$3)),$1),$0)
example_end

Sent: I have something to read .
Sem: lambda $0_{ev}.v|have(pro:sub|i,lambda $1_{e}.rel(pro:indef|something($1),lambda $2_{ev}.v|read-zero(you,$2)),$0)
example_end

Sent: shall we look at this ?
Sem: lambda $0_{ev}.Q(mod|shall(and(cop|look(pro:sub|we,$0),prep|at(pro:dem|this,$0)),$0))
example_end

Sent: because you didn 't eat your breakfast .
Sem: lambda $0_{ev}.not(mod|do(v|eat(pro:per|you,det:poss|your($1,n|breakfast($1)),$0),$0),$0)
example_end

Sent: you don 't have_to go to bed again .
Sem: lambda $0_{ev}.not(mod:aux|have_to(mod|do(and(and(v|go(pro:per|you,$0),prep|to(lambda $1_{e}.n|bed($1),$0)),adv|again($0)),$0),$0),$0)
example_end

Sent: I think that 's enough .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.adv|enough(pro:dem|that,$1),$0)
example_end

Sent: d you have some things to hang up ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,qn|some($1,rel(n|thing-pl($1),lambda $2_{ev}.and(v|hang(you,$2),adv|up($2)))),$0),$0))
example_end

Sent: are you all finished with that .
Sem: lambda $0_{ev}.cop|be-pres(and(and(part|finish-pastp(pro:per|you,$0),adv|all($0)),prep|with(pro:dem|that,$0)),$0)
example_end

Sent: you haven 't even tried it yet .
Sem: lambda $0_{ev}.not(aux|have(and(and(part|try-pastp(pro:per|you,pro:per|it,$0),adv|even($0)),adv|yet($0)),$0),$0)
example_end

Sent: d you have something to hang up ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.rel(pro:indef|something($1),lambda $2_{ev}.and(v|hang(you,$2),adv|up($2))),$0),$0))
example_end

Sent: oh that 's a clothes ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|clothes+line(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: do I want to be Urs ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:sub|i,lambda $1_{ev}.n:prop|ursula(pro:sub|i,$1),$0),$0))
example_end

Sent: what 're you opening now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|open-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: what about cheek ?
Sem: att(pro:int|what,prep|about(lambda $0_{e}.n|cheek($0)))
example_end

Sent: I think perhaps I can find some handkerchiefs .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|find(pro:sub|i,qn|some($2,n|handkerchief-pl($2)),$1),adv|perhaps($1)),$1),$0)
example_end

Sent: don 't step on Paul 's blanket .
Sem: lambda $0_{ev}.not(mod|do(and(v|step(you,$0),prep|on(n:prop|paul's($1,n|blanket($1)),$0)),$0),$0)
example_end

Sent: careful of Paul .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: you didn 't hang the socks up .
Sem: lambda $0_{ev}.not(mod|do(and(v|hang(pro:per|you,det:art|the($1,n|sock-pl($1)),$0),adv|up($0)),$0),$0)
example_end

Sent: oh I think it can .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,$0),co|oh($0))
example_end

Sent: why don 't you hang it up by the heel .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(and(v|hang(pro:per|you,pro:per|it,$0),$1($0)),adv|up($0)),prep|by(det:art|the($2,n|heel($2)),$0)),$0),$0)
example_end

Sent: well hang it by the toe .
Sem: lambda $0_{ev}.and(and(v|hang(you,pro:per|it,$0),prep|by(det:art|the($1,n|toe($1)),$0)),co|well($0))
example_end

Sent: this is the toe .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,n|toe(pro:dem|this,$0))
example_end

Sent: are you putting all those away already ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(and(part|put-presp(pro:per|you,qn|all($1,pro:dem|those($1)),$0),adv|away($0)),adv|already($0)),$0))
example_end

Sent: you didn 't cook anything .
Sem: lambda $0_{ev}.not(mod|do(v|cook(pro:per|you,pro:indef|anything,$0),$0),$0)
example_end

Sent: make some breakfast .
Sem: lambda $0_{ev}.v|make(you,qn|some($1,n|breakfast($1)),$0)
example_end

Sent: that 's for a baby doll .
Sem: lambda $0_{ev}.conj|for(det:art|a($1,and_comp(n|baby($1),n|doll($1))),pro:dem|that,$0)
example_end

Sent: yes when she cries .
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|cry-3s(pro:sub|she,$0),$1($0)),co|yes($0))
example_end

Sent: d you have a doll ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|doll($1)),$0),$0))
example_end

Sent: maybe it 's in this bag Adam .
Sem: lambda $0_{ev}.adv|maybe(prep|in(pro:dem|this($1,n|bag($1)),pro:per|it,$0))
example_end

Sent: what did you take ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|take(pro:per|you,$1,$0),$0)
example_end

Sent: what hurt you ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|hurt-zero($1,pro:per|you,$0)
example_end

Sent: don 't pull on it .
Sem: lambda $0_{ev}.not(mod|do(and(v|pull(you,$0),prep|on(pro:per|it,$0)),$0),$0)
example_end

Sent: the iron might fall .
Sem: lambda $0_{ev}.mod|might(v|fall(det:art|the($1,n|iron($1)),$0),$0)
example_end

Sent: then where will we tie it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(and(v|tie(pro:sub|we,pro:per|it,$0),adv:tem|then($0)),$1($0)),$0)
example_end

Sent: no don 't pull like this .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|pull(you,$0),prep|like(pro:dem|this,$0)),$0),$0),co|no($0))
example_end

Sent: where will we put it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|put-zero(pro:sub|we,pro:per|it,$0),$1($0)),$0)
example_end

Sent: then you can 't hang anything .
Sem: lambda $0_{ev}.not(mod|can(and(v|hang(pro:per|you,pro:indef|anything,$0),adv:tem|then($0)),$0),$0)
example_end

Sent: oh what would you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|will-cond(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0),co|oh($0))
example_end

Sent: shake it ?
Sem: lambda $0_{ev}.Q(v|shake(you,pro:per|it,$0))
example_end

Sent: oh maybe I 've got a sifter .
Sem: lambda $0_{ev}.and(aux|~have(and(part|get-pastp(pro:sub|i,det:art|a($1,n|sift-dv($1)),$0),adv|maybe($0)),$0),co|oh($0))
example_end

Sent: I just put something in it .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:sub|i,pro:indef|something,$0),adv|just($0)),prep|in(pro:per|it,$0))
example_end

Sent: does that one have a top ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(pro:dem|that($1,pro:indef|one($1)),det:art|a($2,n|top($2)),$0),$0))
example_end

Sent: what d you think you cook in here ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|cook(pro:per|you,pro:int|what,$1),adv|in(adv|here($1))),$0),$0))
example_end

Sent: strong master .
Sem: lambda $0_{e}.and(adj|strong($0),n|master($0))
example_end

Sent: d you mean strong man ?
Sem: lambda $0_{ev}.Q(mod|do(adj|mean(pro:per|you,lambda $1_{e}.and(adj|strong($1),n|man($1)),$0),$0))
example_end

Sent: is that the circus strong man ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and(and_comp(n|circus(pro:rel|that,$0),n|man(pro:rel|that,$0)),adj|strong(pro:rel|that,$0))))
example_end

Sent: no don 't break him apart .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|break(you,pro:obj|him,$0),adv|apart($0)),$0),$0),co|no($0))
example_end

Sent: you broke that thing off ?
Sem: lambda $0_{ev}.Q(and(v|break-past(pro:per|you,pro:dem|that($1,n|thing($1)),$0),adv|off($0)))
example_end

Sent: what d you call that thing ?
Sem: lambda $0_{ev}.mod|do(v|call(pro:per|you,pro:dem|that($1,n|thing($1)),$0),$0)
example_end

Sent: strong man .
Sem: lambda $0_{e}.and(adj|strong($0),n|man($0))
example_end

Sent: oh what would hurt him ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|will-cond(v|hurt-zero($1,pro:obj|him,$0),$0),co|oh($0))
example_end

Sent: don 't sit on him .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(you,$0),prep|on(pro:obj|him,$0)),$0),$0)
example_end

Sent: he 's the ring master .
Sem: lambda $0_{ev}.det:art|the(pro:sub|he,and_comp(n|ring(pro:sub|he,$0),n|master(pro:sub|he,$0)))
example_end

Sent: he 's going to hit the lion .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.v|hit-zero(pro:sub|he,det:art|the($2,n|lion($2)),$1),$0),$0)
example_end

Sent: does he have skates on ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|have(pro:sub|he,lambda $1_{e}.n|skate-pl($1),$0),adv|on($0)),$0))
example_end

Sent: no that 's not a sword that 's a knife .
Sem: lambda $0_{ev}.and(not(and(det:art|a(pro:dem|that,n|sword(pro:dem|that,$0)),det:art|a(pro:rel|that,n|knife(pro:rel|that,$0))),$0),co|no($0))
example_end

Sent: Joshua had a sword .
Sem: lambda $0_{ev}.v|have-past(n:prop|joshua,det:art|a($1,n|sword($1)),$0)
example_end

Sent: she doesn 't have a sword .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|she,det:art|a($1,n|sword($1)),$0),$0),$0)
example_end

Sent: you can 't fight with her .
Sem: lambda $0_{ev}.not(mod|can(and(v|fight(pro:per|you,$0),prep|with(pro:obj|her,$0)),$0),$0)
example_end

Sent: you 're folding your sword ?
Sem: lambda $0_{ev}.Q(aux|~be(on|folding(pro:per|you,det:poss|your($1,n|sword($1)),$0),$0))
example_end

Sent: it 's suppertime ?
Sem: lambda $0_{ev}.Q(n|supper+time(pro:per|it,$0))
example_end

Sent: what did you cook ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|cook(pro:per|you,$1,$0),$0)
example_end

Sent: you could set the table .
Sem: lambda $0_{ev}.mod|could(v|set-zero(pro:per|you,det:art|the($1,n|table($1)),$0),$0)
example_end

Sent: you 're going to warm it up ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|warm(pro:per|you,pro:per|it,$1),adv|up($1)),$0),$0))
example_end

Sent: that 's a spoon ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|spoon(pro:dem|that,$0)))
example_end

Sent: oh this is a spoon .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|this,n|spoon(pro:dem|this,$0)),co|oh($0))
example_end

Sent: and I have_to eat from the pan ?
Sem: lambda $0_{ev}.Q(mod:aux|have_to(and(v|eat(pro:sub|i,$0),prep|from(det:art|the($1,n|pan($1)),$0)),$0))
example_end

Sent: what do I have_to eat Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(v|eat(pro:sub|i,$1,$0),$0),$0)
example_end

Sent: just sugar ?
Sem: lambda $0_{e}.Q(adv|just(lambda $1_{e}.n|sugar($1),$0))
example_end

Sent: you put some tea in my sugar ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,qn|some($1,n|tea($1)),$0),prep|in(det:poss|my($2,n|sugar($2)),$0)))
example_end

Sent: Adam what do I have_to eat ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(v|eat(pro:sub|i,$1,$0),$0),$0)
example_end

Sent: Adam 's eating chicken ?
Sem: lambda $0_{ev}.Q(aux|~be(part|eat-presp(n:prop|adam,lambda $1_{e}.n|chicken($1),$0),$0))
example_end

Sent: what is Urs having ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|have-presp(n:prop|ursula,$1,$0),$0)
example_end

Sent: oh you don 't like yours ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|like(pro:per|you,pro:poss|yours,$0),$0),$0),co|oh($0)))
example_end

Sent: maybe it needs some more sugar .
Sem: lambda $0_{ev}.and(v|need-3s(pro:per|it,qn|some($1,and(qn|more($1),n|sugar($1))),$0),adv|maybe($0))
example_end

Sent: would you like to go ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|go(pro:per|you,$1),$0),$0))
example_end

Sent: what color is that one ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,pro:indef|one($2)),n|color(pro:dem|that($2,pro:indef|one($2)),$0))
example_end

Sent: what color is this one ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this($2,pro:indef|one($2)),n|color(pro:dem|this($2,pro:indef|one($2)),$0))
example_end

Sent: you will put what in it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|put-zero(pro:per|you,$1,$0),prep|in(pro:per|it,$0)),$0)
example_end

Sent: this is ice ?
Sem: lambda $0_{ev}.Q(n|ice+cream(pro:dem|this,$0))
example_end

Sent: sugar ice ?
Sem: lambda $0_{e}.Q(and_comp(n|sugar($0),n|ice+cream($0)))
example_end

Sent: that 's too sweet .
Sem: lambda $0_{ev}.adv|too(co|sweet(pro:dem|that,$0))
example_end

Sent: a pipe ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|pipe($1),$0))
example_end

Sent: a cigarette ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|cigarette($1),$0))
example_end

Sent: you 're going where ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: hang the line up ?
Sem: lambda $0_{ev}.Q(and(v|hang(you,det:art|the($1,v|line($1)),$0),adv|up($0)))
example_end

Sent: where shell I tie it ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|shell(and(v|tie(pro:sub|i,pro:per|it,$0),$1($0)),$0)
example_end

Sent: that 's too bad .
Sem: lambda $0_{ev}.adv|too(adj|bad(pro:dem|that,$0))
example_end

Sent: you 'll have_to pay Urs for that .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|pay(pro:per|you,n:prop|ursula,$0),prep|for(pro:dem|that,$0)),$0),$0)
example_end

Sent: don 't you have some money ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(pro:per|you,qn|some($1,n|money($1)),$0),$0),$0))
example_end

Sent: someone threw your money away ?
Sem: lambda $0_{ev}.Q(and(v|throw-past(pro:indef|someone,det:poss|your($1,n|money($1)),$0),adv|away($0)))
example_end

Sent: Adam I 'll go downstairs with you .
Sem: lambda $0_{ev}.mod|~will(and(and(v|go(pro:sub|i,$0),adv|downstairs($0)),prep|with(pro:per|you,$0)),$0)
example_end

Sent: I 'll fix your clothes while you 're gone .
Sem: lambda $0_{ev}.conj|while(cop|~be(part|go-pastp(pro:per|you,$0),$0),mod|~will(v|fix(pro:sub|i,det:poss|your($1,n|clothes+line($1)),$0),$0))
example_end

Sent: ask her to excuse us please .
Sem: lambda $0_{ev}.and(v|ask(you,lambda $1_{ev}.v|excuse(pro:obj|her,pro:obj|us,$1),$0),co|please($0))
example_end

Sent: how d you fix that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|fix(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: oh d you want me to hang some clothes ?
Sem: lambda $0_{ev}.Q(and(v|do(v|want(pro:per|you,lambda $1_{ev}.v|hang(pro:obj|me,qn|some($2,n:pt|clothes($2)),$1),$0),$0),co|oh($0)))
example_end

Sent: could I hang a sock ?
Sem: lambda $0_{ev}.Q(mod|could(v|hang(pro:sub|i,det:art|a($1,n|sock($1)),$0),$0))
example_end

Sent: I need a clothes .
Sem: lambda $0_{ev}.v|need(pro:sub|i,det:art|a($1,n|clothes+pin($1)),$0)
example_end

Sent: d you want that one ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: is it dry ?
Sem: lambda $0_{ev}.Q(v|dry(pro:per|it,$0))
example_end

Sent: you must leave it there till it 's dry .
Sem: lambda $0_{ev}.v|till(adj|dry(pro:per|it,$0),mod|must(and(v|leave(pro:per|you,pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: you took all the laundry down ?
Sem: lambda $0_{ev}.Q(and(v|take-past(pro:per|you,qn|all(det:art|the($1,n|laundry($1))),$0),adv|down($0)))
example_end

Sent: the little golden a b c you read it to me .
Sem: lambda $0_{ev}.and(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),det:art|the($1,and_comp(and_comp(n:let|a($1),n:let|b($1)),and(adj|golden($1),and(adj|little($1),n:let|c($1))))))
example_end

Sent: boat mhm .
Sem: lambda $0_{ev}.and(n|boat($0),co|yes($0))
example_end

Sent: that 's a boy isn 't it ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|boy(pro:dem|that,$0)),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: that is a butterfly .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|butter+fly(pro:dem|that,$0))
example_end

Sent: not s .
Sem: not(lambda $0_{e}.n:let|s($0))
example_end

Sent: that is a c .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n:let|c(pro:dem|that,$0))
example_end

Sent: a clown .
Sem: det:art|a($0,n|clown($0))
example_end

Sent: a cat .
Sem: det:art|a($0,n|cat($0))
example_end

Sent: yes a boot .
Sem: lambda $0_{ev}.and(det:art|a($1,n|boot($1),$0),co|yes($0))
example_end

Sent: where 's a seal ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|seal($1)),$0),$2($0))
example_end

Sent: Celia from North Carolina .
Sem: att(n:prop|celia,prep|from(lambda $0_{e}.and_comp(n:prop|north($0),n:prop|carolina($0))))
example_end

Sent: a little dog .
Sem: det:art|a($0,and(adj|little($0),n|dog($0)))
example_end

Sent: they 're not dry ?
Sem: lambda $0_{ev}.Q(not(v|dry(pro:sub|they,$0),$0))
example_end

Sent: this is a g .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n:let|g(pro:dem|this,$0))
example_end

Sent: d you know this letter ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|this($1,n|letter($1)),$0),$0))
example_end

Sent: I don 't think the f can get in there .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|get(det:art|the($2,n:let|f($2)),$1),adv|in(adv|there($1))),$1),$0),$0),$0)
example_end

Sent: up a ladder ?
Sem: Q(prep|up(det:art|a($0,n|ladder($0))))
example_end

Sent: and water ?
Sem: lambda $0_{e}.Q(n|water($0))
example_end

Sent: I really don 't know why the farmer 's running .
Sem: lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.poss|~s(and(part|run-presp(det:art|the($2,n|farm($2)),$1),adv:int|why($1)),$1),$0),adv|real-dadj($0)),$0),$0)
example_end

Sent: perhaps to get the hay in before it rains .
Sem: lambda $0_{ev}.and(and(and(v|get(you,det:art|the($1,n|hay($1)),$0),adv|perhaps($0)),adv|in($0)),and(v|rain-3s(you,$0),prep|before($0)))
example_end

Sent: what kind of flower is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|flower($2))))
example_end

Sent: I guess it 's a daisy .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,n|daisy(pro:per|it,$1)),$0)
example_end

Sent: you kept moving .
Sem: lambda $0_{ev}.v|keep-past(pro:per|you,$0)
example_end

Sent: I only tied one shoe .
Sem: lambda $0_{ev}.and(v|tie-past(pro:sub|i,lambda $1_{e}.det:num|one(n|shoe($1)),$0),adv|only($0))
example_end

Sent: what about this Adam ?
Sem: att(pro:int|what,prep|about(pro:dem|this))
example_end

Sent: we made one .
Sem: lambda $0_{ev}.v|make-past(pro:sub|we,pro:indef|one,$0)
example_end

Sent: what did we call it ?
Sem: lambda $0_{ev}.mod|do-past(v|call(pro:sub|we,pro:per|it,$0),$0)
example_end

Sent: a giraffe .
Sem: det:art|a($0,n|giraffe($0))
example_end

Sent: a tall giraffe .
Sem: det:art|a($0,and(adj|tall($0),n|giraffe($0)))
example_end

Sent: no that 's not Chicken_Little .
Sem: lambda $0_{ev}.and(not(n:prop|chicken_little(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: these don 't say quack .
Sem: lambda $0_{ev}.not(mod|do(v|say(pro:dem|these,lambda $1_{e}.n|quack($1),$0),$0),$0)
example_end

Sent: you don 't have anything to pour it in .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,lambda $1_{e}.rel(pro:indef|anything($1),lambda $2_{ev}.and(v|pour(_,pro:per|it,$2),adv|in($2))),$0),$0),$0)
example_end

Sent: what are you putting in my coffee ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,$1,$0),prep|in(det:poss|my($2,n|coffee($2)),$0)),$0)
example_end

Sent: I don 't want meat in my coffee !
Sem: lambda $0_{ev}.not(mod|do(and(v|want(pro:sub|i,lambda $1_{e}.n|meat($1),$0),prep|in(det:poss|my($2,n|coffee($2)),$0)),$0),$0)
example_end

Sent: that 's a horse .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|horse(pro:dem|that,$0))
example_end

Sent: ice cone .
Sem: lambda $0_{e}.and_comp(n|ice+cream($0),n|cone($0))
example_end

Sent: an iceberg .
Sem: det:art|a($0,n|iceberg($0))
example_end

Sent: a hatso a fatso .
Sem: and(det:art|a($0,wplay|hatso($0)),det:art|a($1,n|fatso($1)))
example_end

Sent: this is j .
Sem: lambda $0_{ev}.n:let|j(pro:dem|this,$0)
example_end

Sent: a pumpkin bird ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|pumpkin($1),n|bird($1)),$0))
example_end

Sent: thank_you for the coffee .
Sem: lambda $0_{e}.att(co|thank_you($0),prep|for(det:art|the($1,n|coffee($1))))
example_end

Sent: an owl .
Sem: det:art|a($0,n|owl($0))
example_end

Sent: you call them overalls .
Sem: lambda $0_{ev}.v|call(pro:per|you,lambda $1_{e}.n:pt|overalls($1),pro:obj|them,$0)
example_end

Sent: because they are .
Sem: lambda $0_{ev}.cop|be-pres(pro:sub|they,$0)
example_end

Sent: why d you say poor piggie ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|say(pro:per|you,lambda $1_{e}.and(adj|poor($1),n|pig-dim($1)),$0),$2($0)),$0)
example_end

Sent: why would you knock that tree down ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(n|knock(pro:per|you,pro:rel|that($1,n|tree($1)),$0),$2($0)),adv|down($0)),$0)
example_end

Sent: he will laugh ?
Sem: lambda $0_{ev}.Q(mod|will(v|laugh(pro:sub|he,$0),$0))
example_end

Sent: that 's a plum .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|plum(pro:dem|that,$0))
example_end

Sent: a plum .
Sem: det:art|a($0,n|plum($0))
example_end

Sent: what kind of plum ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|plum($2))))
example_end

Sent: well she 's just standing there I guess .
Sem: lambda $0_{ev}.and(and(cop|~be(and(and(on|standing(pro:sub|she,$0),adv|just($0)),adv|there($0)),$0),v|guess(pro:sub|i,$0)),co|well($0))
example_end

Sent: this is a raccoon .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|raccoon(pro:dem|this,$0))
example_end

Sent: a raccoon .
Sem: det:art|a($0,n|raccoon($0))
example_end

Sent: a raft .
Sem: det:art|a($0,n|raft($0))
example_end

Sent: because they 're on the river .
Sem: lambda $0_{ev}.prep|on(det:art|the($1,n|river($1)),pro:sub|they,$0)
example_end

Sent: no they 're on the raft .
Sem: lambda $0_{ev}.and(adv|on(det:art|the($1,n|raft($1)),pro:sub|they,$0),co|no($0))
example_end

Sent: they can 't swim .
Sem: lambda $0_{ev}.not(mod|can(v|swim(pro:sub|they,$0),$0),$0)
example_end

Sent: that 's a raven .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|raven(pro:dem|that,$0))
example_end

Sent: but what 's happening ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|happen-presp($1,$0),$0)
example_end

Sent: who 's talking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|talk-presp($1,$0),$0)
example_end

Sent: have you ever seen a turtle talk on a telephone ?
Sem: lambda $0_{ev}.Q(aux|have(and(part|see-pastp(pro:per|you,lambda $1_{ev}.and(n|talk(det:art|a($2,n|turtle($2)),$1),prep|on(det:art|a($3,n|telephone($3)),$1)),$0),adv|ever($0)),$0))
example_end

Sent: yes that 's a funny page .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(n|page(pro:dem|that,$0),adj|fun-dn(pro:dem|that,$0))),co|yes($0))
example_end

Sent: that 's a truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|truck(pro:dem|that,$0))
example_end

Sent: yes a dump truck .
Sem: lambda $0_{ev}.and(det:art|a($1,and_comp(n|dump($1),n|truck($1)),$0),co|yes($0))
example_end

Sent: a train .
Sem: det:art|a($0,n|train($0))
example_end

Sent: here 's a spider right here .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|spider($1)),$0),pro:exist|here($0)),adv|right(adv|here($0)))
example_end

Sent: he 's going to do what ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.v|do(pro:sub|he,$2,$1),$0),$0)
example_end

Sent: fall on a spoon ?
Sem: lambda $0_{ev}.Q(and(n|fall(you,$0),prep|on(det:art|a($1,n|spoon($1)),$0)))
example_end

Sent: if he 's not careful .
Sem: lambda $0_{ev}.not(co|careful(pro:sub|he,$0),$0)
example_end

Sent: what is that spoon ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,n|spoon($2)),$0)
example_end

Sent: d you know what 's happening on this page ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.aux|~be(and(part|happen-presp(pro:int|what,$1),prep|on(pro:dem|this($2,n|page($2)),$1)),$1),$0),$0))
example_end

Sent: no it looks like a fox .
Sem: lambda $0_{ev}.and(and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|fox($1)),$0)),co|no($0))
example_end

Sent: that 's a wolf .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|wolf(pro:dem|that,$0))
example_end

Sent: that 's a yak .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|yak(pro:dem|that,$0))
example_end

Sent: no he 's playing the xylophone .
Sem: lambda $0_{ev}.and(aux|~be(part|play-presp(pro:sub|he,det:art|the($1,n|xylophone($1)),$0),$0),co|no($0))
example_end

Sent: maybe he 's looking at his music .
Sem: lambda $0_{ev}.aux|~be(and(and(part|look-presp(pro:sub|he,$0),adv|maybe($0)),prep|at(det:poss|his($1,n|music($1)),$0)),$0)
example_end

Sent: you can 't see the music .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:per|you,det:art|the($1,n|music($1)),$0),$0),$0)
example_end

Sent: it must be over here .
Sem: lambda $0_{ev}.mod|must(and(cop|be(pro:per|it,$0),prep|over(adv|here($0))),$0)
example_end

Sent: they didn 't put it on the picture .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(pro:sub|they,pro:per|it,$0),prep|on(det:art|the($1,n|picture($1)),$0)),$0),$0)
example_end

Sent: x to nine .
Sem: lambda $0_{e}.n:let|x($0)
example_end

Sent: you mean this ladder ?
Sem: lambda $0_{ev}.Q(v|mean(pro:per|you,pro:dem|this($1,n|ladder($1)),$0))
example_end

Sent: what place d you think that is ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|think(pro:per|you,lambda $1_{ev}.$2(pro:dem|that,n|place(pro:dem|that,$1)),$0),$0)
example_end

Sent: where d you think you 'd find all those animals ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|think(pro:per|you,lambda $1_{ev}.mod|~genmod(v|find(pro:per|you,qn|all(pro:dem|those($2,n|animal-pl($2))),$1),$1),$0),$3($0)),$0)
example_end

Sent: where 's Mr Pickle 's park ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(n:prop|pickle_mr's($1,n|park($1)),$0),$2($0))
example_end

Sent: where they sell balloons ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|sell(pro:sub|they,lambda $1_{e}.n|balloon-pl($1),$0),$2($0))
example_end

Sent: d you know the name of the park ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,det:art|the($1,att(n|name($1),prep|of(det:art|the($2,n|park($2))))),$0),$0))
example_end

Sent: I have an idea .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,n|idea($1)),$0)
example_end

Sent: if I had to go to one place and find all those animals where would it be ?
Sem: lambda $4_{e}.lambda $0_{ev}.mod|will-cond(conj|if(v|have-past(pro:sub|i,lambda $1_{ev}.and(v|find(pro:sub|i,qn|all(pro:dem|those($2,n|animal-pl($2))),$1),prep|to(lambda $3_{e}.det:num|one(n|place($3)),$1)),$0),and(cop|be(pro:per|it,$0),$4($0))),$0)
example_end

Sent: in a trash can ?
Sem: Q(prep|in(det:art|a($0,and_comp(n|trash($0),mod|can($0)))))
example_end

Sent: yes that 's saggy baggy elephant .
Sem: lambda $0_{ev}.and(and_comp(and_comp(adj|sag-dv(pro:dem|that,$0),adj|bag-dn(pro:dem|that,$0)),n|elephant(pro:dem|that,$0)),co|yes($0))
example_end

Sent: no he must be one of those big elephants .
Sem: lambda $0_{ev}.and(mod|must(att(pro:indef|one(pro:sub|he,$0),prep|of(pro:dem|those($1,and(adj|big($1),n|elephant-pl($1))))),$0),co|no($0))
example_end

Sent: they 're not wet .
Sem: lambda $0_{ev}.not(part|wet-pastp(pro:sub|they,$0),$0)
example_end

Sent: I can 't wear that anymore .
Sem: lambda $0_{ev}.not(mod|can(and(v|wear(pro:sub|i,pro:rel|that,$0),adv|anymore($0)),$0),$0)
example_end

Sent: you better cut that down ?
Sem: lambda $0_{ev}.Q(and(and(v|cut-zero(pro:per|you,pro:dem|that,$0),adv|good-cp($0)),adv|down($0)))
example_end

Sent: why would you cut the elephant ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(v|cut-zero(pro:per|you,det:art|the($1,n|elephant($1)),$0),$2($0)),$0)
example_end

Sent: the window .
Sem: det:art|the($0,n|window($0))
example_end

Sent: where d you have a wonderful baby ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,det:art|a($1,and(adj|wonder-full($1),n|baby($1))),$0),$2($0)),$0)
example_end

Sent: daisy oh .
Sem: lambda $0_{ev}.and(n|daisy($0),co|oh($0))
example_end

Sent: on your napkin ?
Sem: Q(prep|on(det:poss|your($0,n|napkin($0))))
example_end

Sent: oh you got some cheese .
Sem: lambda $0_{ev}.and(v|get-past(pro:per|you,qn|some($1,n|cheese($1)),$0),co|oh($0))
example_end

Sent: or what 's this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: a bird carriage ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|bird($1),n|carriage($1)),$0))
example_end

Sent: a lobster .
Sem: det:art|a($0,n|lobster($0))
example_end

Sent: that 's not a lobster .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|lobster(pro:dem|that,$0)),$0)
example_end

Sent: it 's a crab .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|crab(pro:per|it,$0))
example_end

Sent: you sound like Donald_Duck .
Sem: lambda $0_{ev}.and(v|sound(pro:per|you,$0),conj|like(n:prop|donald_duck,$0))
example_end

Sent: d you have it ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: who took it ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|take-past($1,pro:per|it,$0)
example_end

Sent: I like to play with the children .
Sem: lambda $0_{ev}.v|like(pro:sub|i,lambda $1_{ev}.and(v|play(pro:sub|i,$1),prep|with(det:art|the($2,n|child-pl($2)),$1)),$0)
example_end

Sent: you 're a big child .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(n|child(pro:per|you,$0),adj|big(pro:per|you,$0)))
example_end

Sent: what has Celia got ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|have-3s(v|get-past(n:prop|celia,$1,$0),$0)
example_end

Sent: chop down ?
Sem: lambda $0_{ev}.Q(and(n|chop(you,$0),adv|down($0)))
example_end

Sent: are you taking them down ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|take-presp(pro:per|you,pro:obj|them,$0),adv|down($0)),$0))
example_end

Sent: turn a somersault .
Sem: lambda $0_{ev}.v|turn(you,det:art|a($1,n|somersault($1)),$0)
example_end

Sent: turning a somersault .
Sem: lambda $0_{ev}.part|turn-presp(you,det:art|a($1,n|somersault($1)),$0)
example_end

Sent: she 's standing on her hands .
Sem: lambda $0_{ev}.aux|~be(and(on|standing(pro:sub|she,$0),prep|on(det:poss|her($1,n|hand-pl($1)),$0)),$0)
example_end

Sent: she like to play that way .
Sem: lambda $0_{ev}.v|like(pro:sub|she,lambda $1_{ev}.v|play(pro:sub|she,pro:dem|that($2,n|way($2)),$1),$0)
example_end

Sent: that means fun jolly .
Sem: lambda $0_{ev}.v|mean-3s(pro:rel|that,lambda $1_{e}.adj|fun($1),$0)
example_end

Sent: jolly means happy .
Sem: lambda $0_{ev}.n:pt|means(lambda $1_{e}.adj|jolly($1),lambda $2_{e}.adj|happy($2),$0)
example_end

Sent: paint brush .
Sem: lambda $0_{e}.and_comp(n|paint($0),n|brush($0))
example_end

Sent: because he likes to paint .
Sem: lambda $0_{ev}.v|like-3s(pro:sub|he,lambda $1_{ev}.v|paint(pro:sub|he,$1),$0)
example_end

Sent: because it 's fun .
Sem: lambda $0_{ev}.adj|fun(pro:per|it,$0)
example_end

Sent: and snowballing what ?
Sem: lambda $1_{e}.lambda $0_{ev}.part|snow+ball(you,$1,$0)
example_end

Sent: they didn 't cry at all did they ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|cry(pro:sub|they,$0),prep|at(lambda $1_{e}.qn|all($1),$0)),$0),$0),mod|do-past(pro:sub|they,$0)))
example_end

Sent: is that your favorite story ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,and(n|story(pro:rel|that,$0),adj|favorite(pro:rel|that,$0))))
example_end

Sent: why don 't you do your puzzle ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|do(pro:per|you,det:poss|your($1,n|puzzle($1)),$0),$2($0)),$0),$0)
example_end

Sent: you do your puzzle .
Sem: lambda $0_{ev}.v|do(pro:per|you,det:poss|your($1,n|puzzle($1)),$0)
example_end

Sent: well no that 's a window .
Sem: lambda $0_{ev}.and(and(det:art|a(pro:dem|that,n|window(pro:dem|that,$0)),co|well($0)),co|no($0))
example_end

Sent: I don 't think that 's a lobster .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|lobster(pro:dem|that,$1)),$0),$0),$0)
example_end

Sent: a clothes .
Sem: det:art|a($0,n|clothes+pin($0))
example_end

Sent: your Mommy will bring yours Adam .
Sem: lambda $0_{ev}.mod|will(v|bring(det:poss|your($1,n:prop|mommy($1)),pro:poss|yours,$0),$0)
example_end

Sent: you eat there on the tray .
Sem: lambda $0_{ev}.and(and(v|eat(pro:per|you,$0),adv|there($0)),prep|on(det:art|the($1,n|tray($1)),$0))
example_end

Sent: Adam what do you want ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,$1,$0),$0)
example_end

Sent: you have cheese on your plate ?
Sem: lambda $0_{ev}.Q(and(v|have(pro:per|you,lambda $1_{e}.n|cheese($1),$0),prep|on(det:poss|your($2,n|plate($2)),$0)))
example_end

Sent: that pineapple juice is so sweet .
Sem: lambda $0_{ev}.adv|so(adj|sweet(pro:dem|that($1,and_comp(n|pineapple($1),n|juice($1))),$0))
example_end

Sent: is that your favorite ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,n|favorite(pro:rel|that,$0)))
example_end

Sent: they look like night sticks .
Sem: lambda $0_{ev}.and(cop|look(pro:sub|they,$0),co|like(lambda $1_{e}.and_comp(n|night($1),n|stick-pl($1)),$0))
example_end

Sent: what d you think they are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: baseball bat ?
Sem: lambda $0_{e}.Q(and_comp(n|baseball($0),n|bat($0)))
example_end

Sent: in the face ?
Sem: Q(prep|in(det:art|the($0,n|face($0))))
example_end

Sent: you don 't run with a baseball bat .
Sem: lambda $0_{ev}.not(mod|do(and(v|run(pro:per|you,$0),prep|with(det:art|a($1,and_comp(n|baseball($1),n|bat($1))),$0)),$0),$0)
example_end

Sent: I thought you were going to eat the cheese .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|eat(pro:per|you,det:art|the($3,n|cheese($3)),$2),$1),$1),$0)
example_end

Sent: oh no I don 't like to fight .
Sem: lambda $0_{ev}.and(and(not(mod|do(v|like(pro:sub|i,lambda $1_{ev}.v|fight(pro:sub|i,$1),$0),$0),$0),co|oh($0)),co|no($0))
example_end

Sent: my hand is cold .
Sem: lambda $0_{ev}.adv|cold(det:poss|my($1,n|hand($1)),$0)
example_end

Sent: did you finish the puzzle ?
Sem: lambda $0_{ev}.Q(v|do-past(v|finish(pro:per|you,det:art|the($1,n|puzzle($1)),$0),$0))
example_end

Sent: you stay here with Urs .
Sem: lambda $0_{ev}.and(and(n|stay(pro:per|you,$0),adv|here($0)),prep|with(n:prop|ursula,$0))
example_end

Sent: Adam can you say package ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,lambda $1_{e}.n|package($1),$0),$0))
example_end

Sent: well go sit down .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),adv|down($0)),co|well($0))
example_end

Sent: Adam come back here .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|back(adv|here($0)))
example_end

Sent: d you have_to go ?
Sem: lambda $0_{ev}.Q(mod:aux|have_to(mod|do(v|go(pro:per|you,$0),$0),$0))
example_end

Sent: they are tied .
Sem: lambda $0_{ev}.aux|be-pres(part|tie-pastp(pro:sub|they,$0),$0)
example_end

Sent: who are you asking Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|ask-presp(pro:per|you,$1,$0),$0)
example_end

Sent: at the pillow station ?
Sem: Q(prep|at(det:art|the($0,and_comp(n|pillow($0),n|station($0)))))
example_end

Sent: would you give me one of your crackers please ?
Sem: lambda $0_{ev}.Q(and(mod|will-cond(v|give(pro:per|you,att(pro:indef|one,prep|of(det:poss|your($1,n|cracker-pl($1)))),pro:obj|me,$0),$0),co|please($0)))
example_end

Sent: they 're going to fall off the line .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|they,lambda $1_{ev}.and(v|fall(pro:sub|they,$1),prep|off(det:art|the($2,n|line($2)),$1)),$0),$0)
example_end

Sent: Urs would you like more coffee ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{e}.and(qn|more($1),n|coffee($1)),$0),$0))
example_end

Sent: you don 't like coffee .
Sem: lambda $0_{ev}.not(mod|do(v|like(pro:per|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: in Adam 's house ?
Sem: Q(prep|in(n:prop|adam's($0,n|house($0))))
example_end

Sent: where is Adam 's house ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|adam's($1,n|house($1)),$0),$2($0))
example_end

Sent: it 's turned out ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|turn-pastp(pro:per|it,$0),adv|out($0)),$0))
example_end

Sent: how did your house get turned out ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(part|turn-pastp(_,det:poss|your($1,n|house($1)),$0),$2($0)),adv|out($0))
example_end

Sent: are you doing the twist ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|do-presp(pro:per|you,det:art|the($1,n|twist($1)),$0),$0))
example_end

Sent: you 've got your shirt on ?
Sem: lambda $0_{ev}.Q(aux|~have(and(part|get-pastp(pro:per|you,det:poss|your($1,n|shirt($1)),$0),adv|on($0)),$0))
example_end

Sent: it 's not hanging ?
Sem: lambda $0_{ev}.Q(not(cop|~be(part|hang-presp(pro:per|it,$0),$0),$0))
example_end

Sent: it 's not hanging on the line .
Sem: lambda $0_{ev}.not(cop|~be(and(part|hang-presp(pro:per|it,$0),prep|on(det:art|the($1,n|line($1)),$0)),$0),$0)
example_end

Sent: shall I drink your pineapple juice ?
Sem: lambda $0_{ev}.Q(mod|shall(v|drink(pro:sub|i,det:poss|your($1,and_comp(n|pineapple($1),n|juice($1))),$0),$0))
example_end

Sent: and go for a ride !
Sem: lambda $0_{ev}.and(v|go(you,$0),prep|for(det:art|a($1,n|ride($1)),$0))
example_end

Sent: in my pocket and go for a ride !
Sem: prep|in(det:poss|my($0,n|pocket($0)))
example_end

Sent: but I 'm not a kangaroo what 're you doing making such a mess on your face ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(not(det:art|a(pro:sub|i,n|kangaroo(pro:sub|i,$0)),$0),aux|~be(part|do-presp(pro:per|you,$1,$0),$0))
example_end

Sent: d you really have dreams ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,lambda $1_{e}.n|dream-pl($1),$0),adv|real-dadj($0)),$0))
example_end

Sent: what 're dreams ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.n|dream-pl($2),$0)
example_end

Sent: yes if it 's dirty than it can 't be cleaned .
Sem: lambda $0_{ev}.and(not(aux|be(mod|can(conj|if(v|dirty(pro:per|it,$0),part|clean-pastp(pro:per|it,$0)),$0),$0),$0),co|yes($0))
example_end

Sent: and get my pencil out first .
Sem: lambda $0_{ev}.and(and(v|get(you,det:poss|my($1,n|pencil($1)),$0),adv|out($0)),adv|first($0))
example_end

Sent: how d you know ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,$0),$1($0)),$0)
example_end

Sent: I show you ?
Sem: lambda $0_{ev}.Q(v|show(pro:sub|i,pro:per|you,$0))
example_end

Sent: you like one ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,pro:indef|one,$0))
example_end

Sent: oh did you used to have one ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|use-past(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,pro:indef|one,$1),$0),$0),co|oh($0)))
example_end

Sent: what part broke ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|broke($1($2,n|part($2)),$0)
example_end

Sent: can you fix it ?
Sem: lambda $0_{ev}.Q(mod|can(v|fix(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you 're not finished with that yet .
Sem: lambda $0_{ev}.not(aux|~be(and(and(part|finish-pastp(pro:per|you,$0),prep|with(pro:dem|that,$0)),adv|yet($0)),$0),$0)
example_end

Sent: I 'll pull something out .
Sem: lambda $0_{ev}.mod|~will(and(v|pull(pro:sub|i,pro:indef|something,$0),adv|out($0)),$0)
example_end

Sent: d you want to put your hand in it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,n|hand($2)),$1),prep|in(pro:per|it,$1)),$0),$0))
example_end

Sent: I don 't know what it is d you ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: you put your hand in .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,det:poss|your($1,n|hand($1)),$0),adv|in($0))
example_end

Sent: can 't you close your mouth ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|close(pro:per|you,det:poss|your($1,n|mouth($1)),$0),$0),$0))
example_end

Sent: can you put some of your fingers in this part ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,qn|some(det:poss|your($1,n|finger-pl($1))),$0),prep|in(pro:dem|this($2,n|part($2)),$0)),$0))
example_end

Sent: now he can close his mouth .
Sem: lambda $0_{ev}.mod|can(and(v|close(pro:sub|he,det:poss|his($1,n|mouth($1)),$0),adv|now($0)),$0)
example_end

Sent: what is he saying ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|say-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: he 's singing .
Sem: lambda $0_{ev}.aux|~be(part|sing-presp(pro:sub|he,$0),$0)
example_end

Sent: I make a birdie ?
Sem: lambda $0_{ev}.Q(v|make(pro:sub|i,det:art|a($1,n|bird-dim($1)),$0))
example_end

Sent: is that a birdie ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|bird-dim(pro:rel|that,$0)))
example_end

Sent: that doesn 't look like a birdie .
Sem: lambda $0_{ev}.not(mod|do(and(cop|look(pro:dem|that,$0),conj|like(det:art|a($1,n|bird-dim($1)),$0)),$0),$0)
example_end

Sent: good morning Mr Alligator .
Sem: lambda $0_{e}.and(adj|good($0),n|morning($0))
example_end

Sent: let 's hear .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|hear(pro:obj|~us,$1),$0)
example_end

Sent: what can I have ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(v|have(pro:sub|i,$1,$0),$0)
example_end

Sent: yes I do .
Sem: lambda $0_{ev}.and(v|do(pro:sub|i,$0),co|yes($0))
example_end

Sent: d you have anything in your pocket Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,att(pro:indef|anything,prep|in(det:poss|your($1,n|pocket($1)))),$0),$0))
example_end

Sent: I 'm hungry for breakfast .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|hungry($0,$1)
example_end

Sent: I can 't have breakfast in bed .
Sem: lambda $0_{ev}.not(mod|can(and(v|have(pro:sub|i,lambda $1_{e}.n|breakfast($1),$0),prep|in(lambda $2_{e}.n|bed($2),$0)),$0),$0)
example_end

Sent: because I would get crumbs in the bed .
Sem: lambda $0_{ev}.mod|will-cond(and(aux|get(pro:sub|i,lambda $1_{e}.n|crumb-pl($1),$0),prep|in(det:art|the($2,n|bed($2)),$0)),$0)
example_end

Sent: where 's my breakfast ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|my($1,n|breakfast($1)),$0),$2($0))
example_end

Sent: I want some cracker crumbs and some seeds .
Sem: lambda $0_{ev}.v|want(pro:sub|i,qn|some($1,and_comp(n|cracker($1),n|crumb-pl($1))),$0)
example_end

Sent: because chickens like to eat seeds .
Sem: lambda $0_{ev}.co|like(lambda $1_{e}.n|chicken-pl($1),lambda $2_{ev}.v|eat(lambda $3_{e}.n|chicken-pl($3),lambda $4_{e}.n|seed-pl($4),$2),$0)
example_end

Sent: what are you going to have ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,$2,$1),$0),$0)
example_end

Sent: morning supper ?
Sem: lambda $0_{e}.Q(and_comp(n|morning($0),n|supper($0)))
example_end

Sent: what did you eat for morning supper ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|eat(pro:per|you,$1,$0),prep|for(lambda $2_{e}.and_comp(n|morning($2),n|supper($2)),$0)),$0)
example_end

Sent: the what went off ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|go-past_off($1,$0)
example_end

Sent: a Rambler ?
Sem: lambda $0_{e}.Q(det:art|a($1,n:prop|rambler($1),$0))
example_end

Sent: can 't get through .
Sem: lambda $0_{ev}.not(mod|can(and(v|get(you,$0),adj|through($0)),$0),$0)
example_end

Sent: this car doesn 't have any lights .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:dem|this($1,n|car($1)),qn|any($2,n|light-pl($2)),$0),$0),$0)
example_end

Sent: maybe the lights go on when you push the button .
Sem: lambda $3_{e}.lambda $0_{ev}.and(and(and(v|go(det:art|the($1,n|light-pl($1)),$0),adv|maybe($0)),adv|on($0)),and(v|push(pro:per|you,det:art|the($2,n|button($2)),$0),$3($0)))
example_end

Sent: that says Mobilgas .
Sem: lambda $0_{ev}.v|say-3s(pro:rel|that,n:prop|mobilgas,$0)
example_end

Sent: it 's working .
Sem: lambda $0_{ev}.aux|~be(part|work-presp(pro:per|it,$0),$0)
example_end

Sent: what isn 't working ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(cop|be(part|work-presp($1,$0),$0),$0)
example_end

Sent: is that a new one ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),adj|new(pro:rel|that,$0))))
example_end

Sent: let 's see it .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|see(pro:obj|~us,pro:per|it,$1),$0)
example_end

Sent: it has beads on the back .
Sem: lambda $0_{ev}.and(aux|have-3s(pro:per|it,lambda $1_{e}.n|bead-pl($1),$0),prep|on(det:art|the($2,n|back($2)),$0))
example_end

Sent: I see them .
Sem: lambda $0_{ev}.v|see(pro:sub|i,pro:obj|them,$0)
example_end

Sent: did you run over the bridge ?
Sem: lambda $0_{ev}.Q(v|do-past(and(n|run(pro:per|you,$0),prep|over(det:art|the($1,n|bridge($1)),$0)),$0))
example_end

Sent: hit my knee .
Sem: lambda $0_{ev}.v|hit-zero(you,det:poss|my($1,n|knee($1)),$0)
example_end

Sent: it 's inside the what ?
Sem: lambda $0_{ev}.adj|inside(det:art|the($1,pro:int|what($1)),pro:per|it,$0)
example_end

Sent: oh I can 't reach it .
Sem: lambda $0_{ev}.and(not(mod|can(v|reach(pro:sub|i,pro:per|it,$0),$0),$0),co|oh($0))
example_end

Sent: did you get it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|get(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: hi Paul .
Sem: lambda $0_{ev}.and(n:prop|paul($0),co|hi($0))
example_end

Sent: he 's a sugar .
Sem: lambda $0_{ev}.det:art|a(pro:sub|he,n|sugar(pro:sub|he,$0))
example_end

Sent: did you show Urs your Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:poss|your($1,n:prop|humpty_dumpty($1)),n:prop|ursula,$0),$0))
example_end

Sent: dust in your hair .
Sem: lambda $0_{e}.att(n|dust($0),prep|in(det:poss|your($1,n|hair($1))))
example_end

Sent: there where your hand is .
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(cop|be-3s(det:poss|your($1,n|hand($1)),$0),adv|there($0)),$2($0))
example_end

Sent: I would like to .
Sem: lambda $0_{ev}.mod|will-cond(v|like(pro:sub|i,$0),$0)
example_end

Sent: well keep it on the floor .
Sem: lambda $0_{ev}.and(and(v|keep(you,pro:per|it,$0),prep|on(det:art|the($1,n|floor($1)),$0)),co|well($0))
example_end

Sent: a motor ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|motor($1),$0))
example_end

Sent: where 's the motor ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|motor($1)),$0),$2($0))
example_end

Sent: where would the motor be ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(cop|be(det:art|the($1,n|motor($1)),$0),$2($0)),$0)
example_end

Sent: may be it 's in the back .
Sem: lambda $0_{ev}.cop|be_may(prep|in(det:art|the($1,n|back($1)),pro:per|it,$0))
example_end

Sent: what kind of a Rambler is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(det:art|a($2,n:prop|rambler($2)))))
example_end

Sent: don 't hit my toe .
Sem: lambda $0_{ev}.not(mod|do(v|hit-zero(you,det:poss|my($1,n|toe($1)),$0),$0),$0)
example_end

Sent: I think we should leave that bridge down Adam .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|should(and(v|leave(pro:sub|we,pro:dem|that($2,n|bridge($2)),$1),adv|down($1)),$1),$0)
example_end

Sent: that bridge .
Sem: pro:dem|that($0,n|bridge($0))
example_end

Sent: leave it on the floor Adam .
Sem: lambda $0_{ev}.and(v|leave(you,pro:per|it,$0),prep|on(det:art|the($1,n|floor($1)),$0))
example_end

Sent: tiny cars for a race .
Sem: lambda $0_{e}.att(and(adj|tiny($0),n|car-pl($0)),prep|for(det:art|a($1,n|race($1))))
example_end

Sent: that 's how the car goes .
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|~be(pro:dem|that,lambda $1_{ev}.v|go-3s(det:art|the($2,n|car($2)),$1),$0),$3($0))
example_end

Sent: is that broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(pro:dem|that,$0))
example_end

Sent: that one 's broken .
Sem: lambda $0_{ev}.part|break-pastp(pro:dem|that($1,pro:indef|one($1)),$0)
example_end

Sent: fix the flat tires .
Sem: lambda $0_{ev}.v|fix(you,det:art|the($1,and(n|flat($1),n|tire-pl($1))),$0)
example_end

Sent: is that better ?
Sem: lambda $0_{ev}.Q(adj|good-cp(pro:dem|that,$0))
example_end

Sent: oh that 's the steering wheel .
Sem: lambda $0_{ev}.and(det:art|the(pro:dem|that,and_comp(part|steer-presp(pro:dem|that,$0),n|wheel(pro:dem|that,$0))),co|oh($0))
example_end

Sent: that 's a train part isn 't it ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,and_comp(n|train(pro:dem|that,$0),n|part(pro:dem|that,$0))),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: it looks like a tank car .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,and_comp(n|tank($1),n|car($1))),$0))
example_end

Sent: when the snow is high you can clear the street .
Sem: lambda $0_{ev}.mod|can(and(adv|clear(pro:per|you,det:art|the($1,n|street($1)),$0),conj|when(adj|high(det:art|the($2,n|snow($2)),$0))),$0)
example_end

Sent: that 's a marble bag .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|marble(pro:dem|that,$0),n|bag(pro:dem|that,$0)))
example_end

Sent: for marbles .
Sem: prep|for(lambda $0_{e}.n|marble-pl($0))
example_end

Sent: that 's not a bag car .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,and_comp(n|bag(pro:dem|that,$0),n|car(pro:dem|that,$0))),$0)
example_end

Sent: you could put it on your arm .
Sem: lambda $0_{ev}.mod|could(and(v|put-zero(pro:per|you,pro:per|it,$0),prep|on(det:poss|your($1,n|arm($1)),$0)),$0)
example_end

Sent: what 's happened to it ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(v|happen-past($1,$0),prep|to(pro:per|it,$0)),$0)
example_end

Sent: that 's to hold it .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.v|hold(pro:dem|that,pro:per|it,$1),$0)
example_end

Sent: you see how it 's tied together ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,lambda $1_{ev}.aux|~be(and(and(part|tie-pastp(pro:per|it,$1),adv:int|how($1)),adv|together($1)),$1),$0))
example_end

Sent: it 's made by Indians .
Sem: lambda $0_{ev}.aux|~be(and(part|make-pastp(pro:per|it,$0),prep|by(n:prop|indians,$0)),$0)
example_end

Sent: I don 't know which one .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$1($2,pro:indef|one($2)),$0),$0),$0)
example_end

Sent: Indians in New Hampshire .
Sem: att(n:prop|indians,prep|in(n:prop|hampshire_new))
example_end

Sent: who is there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1,$0),adv|there($0))
example_end

Sent: Adam are you an Indian ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,n:prop|indian(pro:per|you,$0)))
example_end

Sent: that 's a pen .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|pen(pro:dem|that,$0))
example_end

Sent: that makes it longer so you can see better .
Sem: lambda $0_{ev}.conj|so(mod|can(v|see(pro:per|you,lambda $1_{ev}.adj|good-cp(pro:per|you,$1),$0),$0),v|make-3s(pro:rel|that,lambda $2_{ev}.adj|long-cp(pro:per|it,$2),$0))
example_end

Sent: across the room .
Sem: prep|across(det:art|the($0,n|room($0)))
example_end

Sent: across the room I see a tiny Adam .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,det:art|a($1,att(lambda $2_{e}.n:prop|adam($2),lambda $3_{e}.adj|tiny($3),$1)),$0),prep|across(det:art|the($4,n|room($4)),$0))
example_end

Sent: a n t down .
Sem: lambda $0_{e}.adv|down($0)
example_end

Sent: can you see me ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,pro:obj|me,$0),$0))
example_end

Sent: those are sunglasses .
Sem: lambda $0_{ev}.n|sunglass-pl(pro:dem|those,$0)
example_end

Sent: you can put them on .
Sem: lambda $0_{ev}.mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|on($0)),$0)
example_end

Sent: no I 'm not going yet .
Sem: lambda $0_{ev}.and(not(cop|~be(and(part|go-presp(pro:sub|i,$0),adv|yet($0)),$0),$0),co|no($0))
example_end

Sent: here 's something else .
Sem: lambda $0_{ev}.and(cop|~be(post|else(pro:indef|something),$0),pro:exist|here($0))
example_end

Sent: you try those .
Sem: lambda $0_{ev}.v|try(pro:per|you,pro:dem|those,$0)
example_end

Sent: do they fit you ?
Sem: lambda $0_{ev}.Q(mod|do(v|fit-zero(pro:sub|they,pro:per|you,$0),$0))
example_end

Sent: nothing is right !
Sem: lambda $0_{ev}.n|right(pro:indef|nothing,$0)
example_end

Sent: alright Adam .
Sem: lambda $0_{ev}.co|alright($0)
example_end

Sent: did you ever use a pencil sharpener ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|use(pro:per|you,det:art|a($1,and_comp(n|pencil($1),n|sharpen-dv($1))),$0),adv|ever($0)),$0))
example_end

Sent: will you sharpen my pencils ?
Sem: lambda $0_{ev}.Q(mod|will(v|sharpen(pro:per|you,det:poss|my($1,n|pencil-pl($1)),$0),$0))
example_end

Sent: fixing my beads .
Sem: lambda $0_{ev}.part|fix-presp(you,det:poss|my($1,n|bead-pl($1)),$0)
example_end

Sent: I just fixed my beads .
Sem: lambda $0_{ev}.and(v|fix-past(pro:sub|i,det:poss|my($1,n|bead-pl($1)),$0),adv|just($0))
example_end

Sent: oh you sharpen it .
Sem: lambda $0_{ev}.and(v|sharpen(pro:per|you,pro:per|it,$0),co|oh($0))
example_end

Sent: with the pencil sharpener .
Sem: prep|with(det:art|the($0,and_comp(n|pencil($0),n|sharpen-dv($0))))
example_end

Sent: you can 't take it apart no .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,pro:per|it,$0),adv|apart($0)),$0),$0),co|no($0))
example_end

Sent: they are why ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-pres(pro:sub|they,$0),$1($0))
example_end

Sent: they fit you .
Sem: lambda $0_{ev}.v|fit-zero(pro:sub|they,pro:per|you,$0)
example_end

Sent: d you want to show them to your Mother ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|show(pro:per|you,pro:obj|them,$1),prep|to(det:poss|your($2,n:prop|mother($2)),$1)),$0),$0))
example_end

Sent: please do .
Sem: lambda $0_{ev}.and(v|do(you,$0),co|please($0))
example_end

Sent: oh I can 't wear those .
Sem: lambda $0_{ev}.and(not(mod|can(v|wear(pro:sub|i,pro:dem|those,$0),$0),$0),co|oh($0))
example_end

Sent: they 're too small .
Sem: lambda $0_{ev}.adv|too(adj|small(pro:sub|they,$0))
example_end

Sent: no the glasses are too small .
Sem: lambda $0_{ev}.and(adv|too(adj|small(det:art|the($1,n|glass-pl($1)),$0)),qn|no($0))
example_end

Sent: he 's not going to sleep .
Sem: lambda $0_{ev}.not(aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.v|sleep(pro:sub|he,$1),$0),$0),$0)
example_end

Sent: yes if Urs says it 's alright .
Sem: lambda $0_{ev}.and(v|say-3s(n:prop|ursula,lambda $1_{ev}.co|alright(pro:per|it,$1),$0),co|yes($0))
example_end

Sent: don 't put them there .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,pro:obj|them,$0),adv|there($0)),$0),$0)
example_end

Sent: someone might sit on them .
Sem: lambda $0_{ev}.mod|might(and(v|sit(pro:indef|someone,$0),prep|on(pro:obj|them,$0)),$0)
example_end

Sent: maybe I might sit on them .
Sem: lambda $0_{ev}.mod|might(and(and(v|sit(pro:sub|i,$0),adv|maybe($0)),prep|on(pro:obj|them,$0)),$0)
example_end

Sent: oh what 's driving on me ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be(and(part|drive-presp($1,$0),prep|on(pro:obj|me,$0)),$0),co|oh($0))
example_end

Sent: don 't tear her stockings .
Sem: lambda $0_{ev}.not(mod|do(v|tear(you,det:poss|her($1,n:gerund|stock-presp($1)),$0),$0),$0)
example_end

Sent: yes but you 'll hurt her .
Sem: lambda $0_{ev}.and(mod|~will(v|hurt-zero(pro:per|you,pro:obj|her,$0),$0),co|yes($0))
example_end

Sent: a sixty Rambler .
Sem: det:art|a($0,det:num|sixty(n:prop|rambler($0)))
example_end

Sent: a car hit what ?
Sem: lambda $2_{e}.lambda $0_{ev}.part|hit-pastp(det:art|a($1,n|car($1)),$2,$0)
example_end

Sent: what happened to Wednesday ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|wednesday,$0))
example_end

Sent: one talking at the microphone .
Sem: lambda $0_{ev}.and(part|talk-presp(pro:indef|one,$0),prep|at(det:art|the($1,n|microphone($1)),$0))
example_end

Sent: don 't step on Paul 's toesies .
Sem: lambda $0_{ev}.not(mod|do(and(v|step(you,$0),prep|on(n:prop|paul's($1,n|toe-pl($1)),$0)),$0),$0)
example_end

Sent: if you wish to .
Sem: lambda $0_{ev}.v|wish(pro:per|you,$0)
example_end

Sent: did you put them on ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|on($0)),$0))
example_end

Sent: that 's the tuner remember ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,n|tune-dv(pro:dem|that,$0)),co|remember(you,$0)))
example_end

Sent: tuner for a violin .
Sem: lambda $0_{e}.att(n|tune-dv($0),prep|for(det:art|a($1,n|violin($1))))
example_end

Sent: I didn 't bring one .
Sem: lambda $0_{ev}.not(mod|do(v|bring(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: who is that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:rel|that,$0)
example_end

Sent: a puppet on Miss Jean 's show .
Sem: det:art|a($0,att(n|puppet($0),prep|on(n:prop|jean_miss's($1,n|show($1)))))
example_end

Sent: how are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(pro:per|you,$0),$1($0))
example_end

Sent: ask you .
Sem: lambda $0_{ev}.v|ask(you,pro:per|you,$0)
example_end

Sent: what is your name ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|your($2,n|name($2)),$0)
example_end

Sent: quacky duck .
Sem: lambda $0_{e}.and(chi|quacky($0),n|duck($0))
example_end

Sent: Shadow_Gay riding a pony .
Sem: lambda $0_{ev}.part|ride-presp(n:prop|shadow_gay,det:art|a($1,n|pony($1)),$0)
example_end

Sent: I sneezed .
Sem: lambda $0_{ev}.v|sneeze-past(pro:sub|i,$0)
example_end

Sent: yes you may keep them right there .
Sem: lambda $0_{ev}.and(mod|may(and(v|keep(pro:per|you,pro:obj|them,$0),adv|right(adv|there($0))),$0),co|yes($0))
example_end

Sent: when it gets dark ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|get-3s(pro:per|it,lambda $1_{ev}.n|dark(pro:per|it,$1),$0),$2($0))
example_end

Sent: what will you do with that when it gets dark ?
Sem: lambda $3_{e}.lambda $1_{e}.lambda $0_{ev}.and(mod|will(and(v|do(pro:per|you,$1,$0),prep|with(pro:dem|that,$0)),$0),and(v|get-3s(pro:per|it,lambda $2_{ev}.n|dark(pro:per|it,$2),$0),$3($0)))
example_end

Sent: you might break it .
Sem: lambda $0_{ev}.mod|might(v|break(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: but it 's not a pipe .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|pipe(pro:per|it,$0)),$0)
example_end

Sent: what is that on the drum ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(att(pro:dem|that,prep|on(det:art|the($2,n|drum($2)))),$0)
example_end

Sent: the drum is out there .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|drum($1)),$0),adv|out(adv|there($0)))
example_end

Sent: you rolled it over there .
Sem: lambda $0_{ev}.and(v|roll-past(pro:per|you,pro:per|it,$0),adv|over(adv|there($0)))
example_end

Sent: I 'm not mad at you .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|mad($0,$1)
example_end

Sent: I 'm mad because I had to get the drum ?
Sem: lambda $0_{ev}.Q(conj|because(v|have-past(pro:sub|i,lambda $1_{ev}.v|get(pro:sub|i,det:art|the($2,n|drum($2)),$1),$0),adj|mad(pro:sub|i,$0)))
example_end

Sent: why don 't you play a little song on the drum Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|play(pro:per|you,det:art|a($1,and(adj|little($1),n|song($1))),$0),$2($0)),prep|on(det:art|the($3,n|drum($3)),$0)),$0),$0)
example_end

Sent: what shall we sing ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|sing(pro:sub|we,$1,$0),$0)
example_end

Sent: it 's not broken is it ?
Sem: lambda $0_{ev}.Q(and(not(part|break-pastp(pro:per|it,$0),$0),aux|be-3s(pro:per|it,$0)))
example_end

Sent: that 's a light .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|light(pro:dem|that,$0))
example_end

Sent: maybe Ursula uses that .
Sem: lambda $0_{ev}.and(v|use-3s(n:prop|ursula,pro:dem|that,$0),adv|maybe($0))
example_end

Sent: to write letters .
Sem: lambda $0_{ev}.v|write(you,lambda $1_{e}.n|letter-pl($1),$0)
example_end

Sent: you could use it .
Sem: lambda $0_{ev}.mod|could(v|use(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: she said you may use it .
Sem: lambda $0_{ev}.v|say-past(pro:sub|she,lambda $1_{ev}.mod|may(v|use(pro:per|you,pro:per|it,$1),$1),$0)
example_end

Sent: where 's your paper ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|paper($1)),$0),$2($0))
example_end

Sent: you need a pencil .
Sem: lambda $0_{ev}.v|need(pro:per|you,det:art|a($1,n|pencil($1)),$0)
example_end

Sent: you have_to sharpen it first .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|sharpen(pro:per|you,pro:per|it,$0),adv|first($0)),$0)
example_end

Sent: does your pencil have a point ?
Sem: lambda $0_{ev}.Q(v|do-3s(v|have(det:poss|your($1,n|pencil($1)),det:art|a($2,n|point($2)),$0),$0))
example_end

Sent: on the pencil .
Sem: prep|on(det:art|the($0,n|pencil($0)))
example_end

Sent: fill it all up .
Sem: lambda $0_{ev}.and(v|fill(you,pro:per|it,$0),adv|all(adv|up($0)))
example_end

Sent: now fill up this part too .
Sem: lambda $0_{ev}.and(and(and(v|fill(you,pro:dem|this($1,n|part($1)),$0),adv|now($0)),prep|up($0)),post|too($0))
example_end

Sent: now do the edge .
Sem: lambda $0_{ev}.and(v|do(you,det:art|the($1,n|edge($1)),$0),adv|now($0))
example_end

Sent: which letter d you want to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|want(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,$2($3,n|letter($3)),$1),$0),$0)
example_end

Sent: that 's a number two .
Sem: det:art|a($0,and_comp(n|number($0),det:num|two($0)))
example_end

Sent: all of them .
Sem: prep|of(qn|all($0,pro:obj|them($0)))
example_end

Sent: here 's number eight over here .
Sem: lambda $0_{ev}.and(and(cop|~be(lambda $1_{e}.and_comp(n|number($1),det:num|eight($1)),$0),pro:exist|here($0)),adv|over(adv|here($0)))
example_end

Sent: fill it in .
Sem: lambda $0_{ev}.and(v|fill(you,pro:per|it,$0),adv|in($0))
example_end

Sent: with your pencil .
Sem: prep|with(det:poss|your($0,n|pencil($0)))
example_end

Sent: that 's a funny one .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|fun-dn(pro:dem|that,$0)))
example_end

Sent: do you dream sometimes ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|dream(pro:per|you,$0),adv|sometimes($0)),$0))
example_end

Sent: about a n t ?
Sem: Q(adv|about(lambda $0_{e}.and_comp(and_comp(n:let|a($0),n:let|n($0)),n:let|t($0))))
example_end

Sent: maybe we need a new page .
Sem: lambda $0_{ev}.and(v|need(pro:sub|we,det:art|a($1,and(adj|new($1),n|page($1))),$0),adv|maybe($0))
example_end

Sent: you 're going to mail that ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|mail(pro:per|you,pro:dem|that,$1),$0),$0))
example_end

Sent: there 's h .
Sem: lambda $0_{ev}.and(aux|~be(lambda $1_{e}.n:let|h($1),$0),pro:exist|there($0))
example_end

Sent: there 's an h .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n:let|h($1)),$0),pro:exist|there($0))
example_end

Sent: do you have a sharp point ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,and(adj|sharp($1),n|point($1))),$0),$0))
example_end

Sent: let 's do number nine .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|do(pro:obj|~us,lambda $2_{e}.and_comp(n|number($2),det:num|nine($2)),$1),$0)
example_end

Sent: for the teacher ?
Sem: Q(conj|for(det:art|the($0,n|teach-dv($0))))
example_end

Sent: this way it 's not .
Sem: lambda $0_{ev}.not(pro:dem|this(pro:per|it,n|way(pro:per|it,$0)),$0)
example_end

Sent: you have a d and an a and what else ?
Sem: lambda $0_{ev}.v|have(pro:per|you,det:art|a($1,n:let|d($1)),$0)
example_end

Sent: m is here .
Sem: lambda $0_{ev}.and(cop|be-3s(lambda $1_{e}.n:let|m($1),$0),adv|here($0))
example_end

Sent: you fill that in .
Sem: lambda $0_{ev}.and(v|fill(pro:per|you,det:dem|that,$0),adv|in($0))
example_end

Sent: let 's have a t .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|have(pro:obj|~us,det:art|a($2,n:let|t($2)),$1),$0)
example_end

Sent: why 're you going to mail them ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|mail(pro:per|you,pro:obj|them,$1),$0),$2($0)),$0)
example_end

Sent: d you have a stump ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|stump($1)),$0),$0))
example_end

Sent: that 's so you can put it in your pocket .
Sem: lambda $0_{ev}.conj|so(mod|can(and(v|put-zero(pro:per|you,pro:per|it,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)),$0),cop|~be(pro:dem|that,$0))
example_end

Sent: I need that though .
Sem: lambda $0_{ev}.and(v|need(pro:sub|i,pro:dem|that,$0),adv|though($0))
example_end

Sent: I need to write .
Sem: lambda $0_{ev}.v|need(pro:sub|i,lambda $1_{ev}.v|write(pro:sub|i,$1),$0)
example_end

Sent: Shadow_Gay told you ?
Sem: lambda $0_{ev}.Q(v|tell-past(n:prop|shadow_gay,pro:per|you,$0))
example_end

Sent: they are for you .
Sem: lambda $0_{ev}.prep|for(pro:per|you,pro:sub|they,$0)
example_end

Sent: it can 't be !
Sem: lambda $0_{ev}.not(mod|can(cop|be(pro:per|it,$0),$0),$0)
example_end

Sent: you might break something .
Sem: lambda $0_{ev}.mod|might(v|break(pro:per|you,pro:indef|something,$0),$0)
example_end

Sent: yes I waited for you .
Sem: lambda $0_{ev}.and(and(v|wait-past(pro:sub|i,$0),prep|for(pro:per|you,$0)),co|yes($0))
example_end

Sent: yes bless you .
Sem: lambda $0_{ev}.and(v|bless(you,pro:per|you,$0),co|yes($0))
example_end

Sent: don 't catch cold .
Sem: lambda $0_{ev}.not(mod|do(v|catch(you,lambda $1_{e}.adv|cold($1),$0),$0),$0)
example_end

Sent: what 's a n t Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.and_comp(and_comp(n:let|t($2),n:let|n($2)),n:let|a($2)),$0)
example_end

Sent: tape recorder wants glasses on ?
Sem: lambda $0_{ev}.Q(and(v|want-3s(lambda $1_{e}.and_comp(n|tape($1),n|record-dv($1)),lambda $2_{e}.n|glass-pl($2),$0),adv|on($0)))
example_end

Sent: I thought that was a tuner .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.det:art|a(pro:rel|that,n|tune-dv(pro:rel|that,$1)),$0)
example_end

Sent: sing a song about a tuner .
Sem: lambda $0_{ev}.v|sing(you,det:art|a($1,att(n|song($1),prep|about(det:art|a($2,n|tune-dv($2))))),$0)
example_end

Sent: the accordion .
Sem: det:art|the($0,n|accordion($0))
example_end

Sent: that 's not an accordion but it does sound like one .
Sem: lambda $0_{ev}.not(conj|but(mod|do-3s(and(v|sound(pro:per|it,$0),prep|like(pro:indef|one,$0)),$0),det:art|a(pro:dem|that,n|accordion(pro:dem|that,$0))),$0)
example_end

Sent: that 's a tuner for a violin .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|tune-dv(pro:dem|that,$0),prep|for(det:art|a($1,n|violin($1)))))
example_end

Sent: don 't put it so far in your mouth .
Sem: lambda $0_{ev}.not(mod|do(v|put-zero(you,lambda $1_{ev}.adv|far(pro:per|it,$1),$0),$0),$0)
example_end

Sent: can you blow them one at a time ?
Sem: lambda $0_{ev}.Q(mod|can(v|blow(pro:per|you,lambda $1_{e}.pro:indef|one($1),pro:obj|them,$0),$0))
example_end

Sent: this morning .
Sem: pro:dem|this($0,n|morning($0))
example_end

Sent: yes but don 't run with it like that .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|run(you,$0),prep|with(pro:per|it,$0)),co|like(pro:dem|that,$0)),$0),$0),co|yes($0))
example_end

Sent: where 's your pad ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|pad($1)),$0),$2($0))
example_end

Sent: I thought you were going to make some letters .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|make(pro:per|you,qn|some($3,n|letter-pl($3)),$2),$1),$1),$0)
example_end

Sent: oh were you telling her that ?
Sem: lambda $0_{ev}.Q(and(aux|be-past(part|tell-presp(pro:per|you,pro:dem|that,pro:obj|her,$0),$0),co|oh($0)))
example_end

Sent: took the telephone away ?
Sem: lambda $0_{ev}.Q(and(v|take-past(you,det:art|the($1,n|telephone($1)),$0),adv|away($0)))
example_end

Sent: I guess .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,$0)
example_end

Sent: where is the puzzle ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|puzzle($1)),$0),$2($0))
example_end

Sent: what 's in the bag ?
Sem: lambda $2_{e}.lambda $0_{ev}.prep|in(det:art|the($1,n|bag($1)),$2,$0)
example_end

Sent: somebody named Linda .
Sem: lambda $0_{ev}.v|name-past(pro:indef|somebody,n:prop|linda,$0)
example_end

Sent: would you like to put these g on ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:dem|these($2,n|glove-pl($2)),$1),prep|on($1)),$0),$0))
example_end

Sent: I saw something through here .
Sem: lambda $0_{ev}.and(v|see-past(pro:sub|i,pro:indef|something,$0),adv|through(adv|here($0)))
example_end

Sent: I looked in there .
Sem: lambda $0_{ev}.and(cop|look-past(pro:sub|i,$0),prep|in(adv|there($0)))
example_end

Sent: look Adam these puppets are waiting for something to eat .
Sem: lambda $0_{ev}.and(aux|be-pres(and(part|wait-presp(pro:dem|these($1,n|puppet-pl($1)),$0),prep|for(lambda $2_{e}.rel(pro:indef|something($2),lambda $3_{ev}.v|eat(you,$3)),$0)),$0),co|look(you,$0))
example_end

Sent: they 're waiting for something for lunch .
Sem: lambda $0_{ev}.aux|~be(and(part|wait-presp(pro:sub|they,$0),prep|for(att(pro:indef|something,prep|for(lambda $1_{e}.n|lunch($1))),$0)),$0)
example_end

Sent: they say what 're you going to give me ?
Sem: lambda $0_{ev}.Q(v|say(pro:sub|they,lambda $1_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $2_{ev}.v|give(pro:per|you,pro:int|what,pro:obj|me,$2),$1),$1),$0))
example_end

Sent: what about some dog food .
Sem: att(pro:int|what,prep|about(qn|some($0,and_comp(n|dog($0),n|food($0)))))
example_end

Sent: no I don 't want to fight .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|i,lambda $1_{ev}.n|fight(pro:sub|i,$1),$0),$0),$0),co|no($0))
example_end

Sent: I 'm very sleepy .
Sem: lambda $0_{ev}.adv|very(adj|sleep-dn(pro:sub|i,$0))
example_end

Sent: I just want to sit by the fire .
Sem: lambda $0_{ev}.and(v|want(pro:sub|i,lambda $1_{ev}.and(v|sit(pro:sub|i,$1),prep|by(det:art|the($2,n|fire($2)),$1)),$0),adv|just($0))
example_end

Sent: shall comb your hair ?
Sem: lambda $0_{ev}.Q(mod|shall(v|comb(you,det:poss|your($1,n|hair($1)),$0),$0))
example_end

Sent: there that looks nice .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:rel|that,lambda $1_{ev}.adj|nice(pro:rel|that,$1),$0),adv|there($0))
example_end

Sent: you know what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|know(pro:per|you,$1,$0)
example_end

Sent: I 'd like some sunglasses on .
Sem: lambda $0_{ev}.mod|~genmod(and(v|like(pro:sub|i,qn|some($1,n|sunglass-pl($1)),$0),adv|on($0)),$0)
example_end

Sent: this sun is too bright .
Sem: lambda $0_{ev}.adv|too(adj|bright(pro:dem|this($1,n|sun($1)),$0))
example_end

Sent: that 's better .
Sem: lambda $0_{ev}.adj|good-cp(pro:dem|that,$0)
example_end

Sent: you have_to keep your nose up in the air .
Sem: lambda $0_{ev}.mod:aux|have_to(and(and(v|keep(pro:per|you,det:poss|your($1,n|nose($1)),$0),adv|up($0)),prep|in(det:art|the($2,n|air($2)),$0)),$0)
example_end

Sent: oh isn 't that nice Adam .
Sem: lambda $0_{ev}.and(not(adj|nice(pro:dem|that,$0),$0),co|oh($0))
example_end

Sent: no you have cranberry juice .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,lambda $1_{e}.and_comp(n|cranberry($1),n|juice($1)),$0),co|no($0))
example_end

Sent: you 're busy drinking your juice ?
Sem: lambda $0_{ev}.Q(adj|busy(pro:per|you,lambda $1_{ev}.part|drink-presp(pro:per|you,det:poss|your($2,n|juice($2)),$1),$0))
example_end

Sent: yes I want Mommy to have one .
Sem: lambda $0_{ev}.and(v|want(pro:sub|i,lambda $1_{ev}.v|have(n:prop|mommy,pro:indef|one,$1),$0),co|yes($0))
example_end

Sent: save one for her .
Sem: lambda $0_{ev}.and(v|save(you,det:num|one,$0),prep|for(pro:obj|her,$0))
example_end

Sent: oh what did Mommy say ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do-past(v|say(n:prop|mommy,$1,$0),$0),co|oh($0))
example_end

Sent: are you going to drink your juice ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|drink(pro:per|you,det:poss|your($2,n|juice($2)),$1),$0),$0))
example_end

Sent: I 'm going to drink my coffee .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|i,lambda $1_{ev}.v|drink(pro:sub|i,det:poss|my($2,n|coffee($2)),$1),$0),$0)
example_end

Sent: is he singing about a puppet ?
Sem: lambda $0_{ev}.Q(cop|be-3s(and(part|sing-presp(pro:sub|he,$0),prep|about(det:art|a($1,n|puppet($1)),$0)),$0))
example_end

Sent: Adam you can 't play that while you 're eating .
Sem: lambda $0_{ev}.not(n|while(aux|~be(part|eat-presp(pro:per|you,$0),$0),mod|can(v|play(pro:per|you,pro:dem|that,$0),$0)),$0)
example_end

Sent: Adam what d you have on your sandwich ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|on(det:poss|your($2,n|sandwich($2)),$0)),$0)
example_end

Sent: oh these are nice Adam .
Sem: lambda $0_{ev}.and(adj|nice(pro:dem|these,$0),co|oh($0))
example_end

Sent: you put the sugar spoon in yours too didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(and(v|put-zero(pro:per|you,det:art|the($1,and_comp(n|sugar($1),n|spoon($1))),$0),prep|in(pro:poss|yours,$0)),post|too($0)),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: I guess so .
Sem: lambda $0_{ev}.and(n|guess(pro:sub|i,$0),adv|so($0))
example_end

Sent: no it 's dirty .
Sem: lambda $0_{ev}.and(adj|dirt-dn(pro:per|it,$0),co|no($0))
example_end

Sent: we 'll eat it all up ?
Sem: lambda $0_{ev}.Q(mod|~will(and(v|eat(pro:sub|we,pro:per|it,$0),adv|all(adv|up($0))),$0))
example_end

Sent: about the water of the loom ?
Sem: Q(prep|about(det:art|the($0,att(n|water($0),prep|of(det:art|the($1,n|loom($1)))))))
example_end

Sent: what is a n t ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.and_comp(and_comp(n:let|t($2),n:let|n($2)),n:let|a($2)),$0)
example_end

Sent: where did you lost it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|lose-past(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: at the apartment .
Sem: prep|at(det:art|the($0,n|apartment($0)))
example_end

Sent: well don 't you think you should eat your sandwich ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|should(v|eat(pro:per|you,det:poss|your($2,n|sandwich($2)),$1),$1),$0),$0),$0),co|well($0)))
example_end

Sent: you 're turning around like a propeller ?
Sem: lambda $0_{ev}.Q(aux|~be(and(and(part|turn-presp(pro:per|you,$0),adv|around($0)),prep|like(det:art|a($1,n|propel-dv($1)),$0)),$0))
example_end

Sent: while you eat .
Sem: lambda $0_{ev}.v|eat(pro:per|you,$0)
example_end

Sent: if I close one eye .
Sem: lambda $0_{ev}.v|close(pro:sub|i,lambda $1_{e}.det:num|one(n|eye($1)),$0)
example_end

Sent: oh I have two eyes open .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,lambda $1_{ev}.adj|open(lambda $2_{e}.det:num|two(n|eye-pl($2)),$1),$0),co|oh($0))
example_end

Sent: you 're looking at me ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|look-presp(pro:per|you,$0),prep|at(pro:obj|me,$0)),$0))
example_end

Sent: why are you looking at me ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|look-presp(pro:per|you,$0),$1($0)),prep|at(pro:obj|me,$0)),$0)
example_end

Sent: yes now I 'm finished .
Sem: lambda $0_{ev}.and(aux|~be(and(part|finish-pastp(pro:sub|i,$0),adv|now($0)),$0),co|yes($0))
example_end

Sent: because you like it .
Sem: lambda $0_{ev}.v|like(pro:per|you,pro:per|it,$0)
example_end

Sent: I don 't know the name of it .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,det:art|the($1,att(n|name($1),prep|of(pro:per|it))),$0),$0),$0)
example_end

Sent: it tasted like spice cake .
Sem: lambda $0_{ev}.and(v|taste-past(pro:per|it,$0),co|like(lambda $1_{e}.and_comp(n|spice($1),n|cake($1)),$0))
example_end

Sent: carry the baker ?
Sem: lambda $0_{ev}.Q(v|carry(you,det:art|the($1,n|bake-dv($1)),$0))
example_end

Sent: I can see what ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(v|see(pro:sub|i,$1,$0),$0)
example_end

Sent: you 're finishing all of that aren 't you Adam ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|finish-presp(pro:per|you,att(qn|all,prep|of(pro:dem|that)),$0),$0),not(aux|be(pro:per|you,$0),$0)))
example_end

Sent: how d you put a glove on ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(and(v|put-zero(pro:per|you,det:art|a($1,n|glove($1)),$0),$2($0)),adv|on($0)),$0)
example_end

Sent: Adam Smith come back here .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|back(adv|here($0)))
example_end

Sent: yes I think so .
Sem: lambda $0_{ev}.and(and(v|think(pro:sub|i,$0),co|so($0)),co|yes($0))
example_end

Sent: a little bit .
Sem: det:art|a($0,and(adj|little($0),n|bit($0)))
example_end

Sent: why did you give her such a little little bit ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|give(pro:per|you,qn|such(det:art|a($1,and(adj|little($1),and(adj|little($1),n|bit($1))))),pro:obj|her,$0),$2($0)),$0)
example_end

Sent: the tape recorder is behind you ?
Sem: lambda $0_{ev}.Q(adv|behind(pro:per|you,det:art|the($1,and_comp(n|tape($1),n|record-dv($1))),$0))
example_end

Sent: it 's not a tape recorder .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,and_comp(n|tape(pro:per|it,$0),n|record-dv(pro:per|it,$0))),$0)
example_end

Sent: it 's tape .
Sem: lambda $0_{ev}.n|tape(pro:per|it,$0)
example_end

Sent: good shot .
Sem: lambda $0_{e}.and(adj|good($0),n|shot($0))
example_end

Sent: knock what down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|knock(you,$1,$0),adv|down($0))
example_end

Sent: you come finish eating your cake .
Sem: lambda $0_{ev}.v|come(pro:per|you,$0)
example_end

Sent: it 's a level .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|level(pro:per|it,$0))
example_end

Sent: it 's a little game .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and(n|game(pro:per|it,$0),adj|little(pro:per|it,$0)))
example_end

Sent: you can make very funny people .
Sem: lambda $0_{ev}.mod|can(v|make(pro:per|you,lambda $1_{e}.and(adv|very(adj|fun-dn($1)),n|person-pl($1)),$0),$0)
example_end

Sent: shall we make a funny man with this ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|make(pro:sub|we,det:art|a($1,and(adj|fun-dn($1),n|man($1))),$0),prep|with(pro:dem|this,$0)),$0))
example_end

Sent: you 're going to get what ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|get(pro:per|you,$2,$1),$0),$0)
example_end

Sent: that 's a lock from a door .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|lock(pro:dem|that,$0),prep|from(det:art|a($1,n|door($1)))))
example_end

Sent: d you have one to put it on ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:indef|one,pro:per|it,$1),adv|on($1)),$0),$0))
example_end

Sent: a paper punch .
Sem: det:art|a($0,and_comp(n|paper($0),n|punch($0)))
example_end

Sent: what 're you going to do with the crayons ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),prep|with(det:art|the($3,n|crayon-pl($3)),$1)),$0),$0)
example_end

Sent: they 're so tiny .
Sem: lambda $0_{ev}.adv|so(adj|tiny(pro:sub|they,$0))
example_end

Sent: you can 't color them .
Sem: lambda $0_{ev}.not(mod|can(v|color(pro:per|you,pro:obj|them,$0),$0),$0)
example_end

Sent: from Africa .
Sem: prep|from(n:prop|africa)
example_end

Sent: forty inches .
Sem: lambda $0_{e}.det:num|forty(n|inch-pl($0))
example_end

Sent: he 's not a fish .
Sem: lambda $0_{ev}.not(det:art|a(pro:sub|he,n|fish(pro:sub|he,$0)),$0)
example_end

Sent: no I 'm not a fish .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:sub|i,n|fish(pro:sub|i,$0)),$0),co|no($0))
example_end

Sent: no I don 't see any fish in here at all .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|see(pro:sub|i,qn|any($1,n|fish($1)),$0),prep|in(adv|here($0))),prep|at(lambda $2_{e}.pro:indef|all($2),$0)),$0),$0),co|no($0))
example_end

Sent: fish must swim in the lake .
Sem: lambda $0_{ev}.mod|must(and(v|swim(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|lake($2)),$0)),$0)
example_end

Sent: in the Charles River .
Sem: prep|in(det:art|the($0,and_comp(n:prop|charles($0),n:prop|river($0))))
example_end

Sent: you know where the Charles River is .
Sem: lambda $0_{ev}.v|know(pro:per|you,lambda $1_{ev}.and(cop|be-3s(det:art|the($2,and_comp(n:prop|charles($2),n:prop|river($2))),$1),adv:int|where($1)),$0)
example_end

Sent: where we see the sailboats .
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|see(pro:sub|we,det:art|the($1,n|sail+boat($1)),$0),$2($0))
example_end

Sent: why should they come from Africa ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|should(and(and(v|come(pro:sub|they,$0),$1($0)),prep|from(n:prop|africa,$0)),$0)
example_end

Sent: they live in Africa ?
Sem: lambda $0_{ev}.Q(and(v|live(pro:sub|they,$0),prep|in(n:prop|africa,$0)))
example_end

Sent: because Indians live in Africa .
Sem: lambda $0_{ev}.and(v|live(n:prop|indians,$0),prep|in(n:prop|africa,$0))
example_end

Sent: you have some work ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,qn|some($1,n|work($1)),$0))
example_end

Sent: let me try it Adam .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|try(pro:obj|me,pro:per|it,$1),$0)
example_end

Sent: what is a game ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|game($2)),$0)
example_end

Sent: you 're supposed to fit the arms with the face .
Sem: lambda $0_{ev}.aux|~be(v|suppose-past(pro:per|you,lambda $1_{ev}.v|fit-zero(pro:per|you,det:art|the($2,att(n|arm-pl($2),prep|with(det:art|the($3,n|face($3))))),$1),$0),$0)
example_end

Sent: is it in the key case ?
Sem: lambda $0_{ev}.Q(prep|in(det:art|the($1,and_comp(n|key($1),n|case($1))),pro:per|it,$0))
example_end

Sent: the key chain ?
Sem: lambda $0_{e}.Q(det:art|the($1,and_comp(n|key($1),n|chain($1)),$0))
example_end

Sent: you ask Urs to tell you about this .
Sem: lambda $0_{ev}.v|ask(pro:per|you,lambda $1_{ev}.and(v|tell(n:prop|ursula,pro:per|you,$1),prep|about(pro:dem|this,$1)),$0)
example_end

Sent: if you shoot him he won 't laugh .
Sem: lambda $0_{ev}.not(mod|will(conj|if(v|shoot(pro:per|you,pro:obj|him,$0),v|laugh(pro:sub|he,$0)),$0),$0)
example_end

Sent: in the box .
Sem: det:art|the($0,n|box($0))
example_end

Sent: draw on the paper .
Sem: lambda $0_{ev}.and(v|draw(you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: come measure the door .
Sem: lambda $0_{ev}.v|come(you,$0)
example_end

Sent: what are you going to do up there ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),adv|up(adv|there($1))),$0),$0)
example_end

Sent: can you measure the door ?
Sem: lambda $0_{ev}.Q(mod|can(v|measure(pro:per|you,det:art|the($1,n|door($1)),$0),$0))
example_end

Sent: careful you almost hit Ursula .
Sem: lambda $0_{ev}.and(and(n|hit(pro:per|you,n:prop|ursula,$0),adv|almost($0)),co|careful($0))
example_end

Sent: can you measure the door for me ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|measure(pro:per|you,det:art|the($1,n|door($1)),$0),prep|for(pro:obj|me,$0)),$0))
example_end

Sent: why d you want to ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you broke it .
Sem: lambda $0_{ev}.v|break-past(pro:per|you,pro:per|it,$0)
example_end

Sent: and you can 't have that .
Sem: lambda $0_{ev}.not(mod|can(v|have(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: yes sticks do break .
Sem: lambda $0_{ev}.and(mod|do(v|break(lambda $1_{e}.v|stick-3s($1),$0),$0),co|yes($0))
example_end

Sent: well don 't do that .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: we can make it round again .
Sem: lambda $0_{ev}.mod|can(and(v|make(pro:sub|we,lambda $1_{ev}.adv|round(pro:per|it,$1),$0),adv|again($0)),$0)
example_end

Sent: well that 's not a stapler is it ?
Sem: lambda $0_{ev}.Q(and(and(not(det:art|a(pro:dem|that,n|staple-dv(pro:dem|that,$0)),$0),aux|be-3s(pro:per|it,$0)),co|well($0)))
example_end

Sent: a wrench .
Sem: det:art|a($0,v|wrench($0))
example_end

Sent: what kind of wrench is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.v|wrench($2))))
example_end

Sent: paper punch .
Sem: lambda $0_{e}.and_comp(n|paper($0),n|punch($0))
example_end

Sent: what can we take down ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(and(v|take(pro:sub|we,$1,$0),adv|down($0)),$0)
example_end

Sent: where 's the key ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|key($1)),$0),$2($0))
example_end

Sent: Robin lost the key to the door ?
Sem: lambda $0_{ev}.Q(v|lose-past(n:prop|robin,det:art|the($1,att(n|key($1),prep|to(det:art|the($2,n|door($2))))),$0))
example_end

Sent: maybe one of my keys fits .
Sem: lambda $0_{ev}.and(v|fit-3s(lambda $1_{e}.pro:indef|one($1),$0),adv|maybe($0))
example_end

Sent: if you 're careful .
Sem: lambda $0_{ev}.co|careful(pro:per|you,$0)
example_end

Sent: a house to a door ?
Sem: lambda $0_{e}.Q(det:art|a($1,att(n|house($1),prep|to(det:art|a($2,n|door($2)))),$0))
example_end

Sent: you mean a door to the house ?
Sem: lambda $0_{ev}.Q(v|mean(pro:per|you,det:art|a($1,att(n|door($1),prep|to(det:art|the($2,n|house($2))))),$0))
example_end

Sent: somebody can walk in .
Sem: lambda $0_{ev}.mod|can(and(v|walk(pro:indef|somebody,$0),adv|in($0)),$0)
example_end

Sent: Adam may I try it ?
Sem: lambda $0_{ev}.Q(mod|may(v|try(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: he said one of your brothers .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{e}.det:num|one($1),$0)
example_end

Sent: he didn 't think this key would work .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|he,lambda $1_{ev}.mod|will-cond(v|work(pro:dem|this($2,n|key($2)),$1),$1),$0),$0),$0)
example_end

Sent: the keyhole in your door is closed up .
Sem: lambda $0_{ev}.aux|be-3s(and(part|close-pastp(det:art|the($1,att(n|key+hole($1),prep|in(det:poss|your($2,n|door($2))))),$0),adv|up($0)),$0)
example_end

Sent: right there is one .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:indef|one,$0),adv|there($0)),adv|right($0))
example_end

Sent: you had one in your pocket .
Sem: lambda $0_{ev}.and(part|have-pastp(pro:per|you,pro:indef|one,$0),prep|in(det:poss|your($1,n|pocket($1)),$0))
example_end

Sent: Adam you 're just walking over her feet .
Sem: lambda $0_{ev}.cop|~be(and(and(part|walk-presp(pro:per|you,$0),adv|just($0)),prep|over(det:poss|her($1,n|foot-pl($1)),$0)),$0)
example_end

Sent: you might break that off .
Sem: lambda $0_{ev}.mod|might(and(v|break(pro:per|you,pro:dem|that,$0),adv|off($0)),$0)
example_end

Sent: no I don 't think you should do that .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|should(v|do(pro:per|you,pro:dem|that,$1),$1),$0),$0),$0),co|no($0))
example_end

Sent: put it on the board .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|board($1)),$0))
example_end

Sent: yes if you 're careful .
Sem: lambda $0_{ev}.and(co|careful(pro:per|you,$0),co|yes($0))
example_end

Sent: where 's my key ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|my($1,n|key($1)),$0),$2($0))
example_end

Sent: are you going to put it on ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$1),adv|on($1)),$0),$0))
example_end


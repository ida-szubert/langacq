Sent: there .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|me,$0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
example_end

Sent: that 's Lassie .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
example_end

Sent: that 's Lassie .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Lassie,$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(v|get(pro|you,det|the($1,and(adj|red($1),n|bicycle($1))),$0),$0)
example_end

Sent: get the red bicycle ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(v|get(pro|you,det|the($1,and(adj|red($1),n|bicycle($1))),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{ev}.Q(v|get(pro|you,det|the($1,and(adj|red($1),n|bicycle($1))),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
example_end

Sent: say music .
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
Sem:  lambda $0_{e}.n|music($0)
example_end

Sent: music .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
Sem:  lambda $0_{e}.n|music($0)
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
example_end

Sent: say music .
Sem:  lambda $0_{e}.n|music($0)
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
Sem:  lambda $0_{e}.n|music($0)
example_end

Sent: music .
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|music($1),$0)
Sem:  lambda $0_{e}.n|music($0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|find(pro|you,det|the($1,n|bicycle($1)),$0),$0),$0)
example_end

Sent: did you find the bicycle ?
Sem:  lambda $0_{e}.n|music($0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|find(pro|you,det|the($1,n|bicycle($1)),$0),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|little($1),adj|red($1),n|bicycle($1))),$0)
example_end

Sent: where 's the little red bicycle ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|find(pro|you,det|the($1,n|bicycle($1)),$0),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|little($1),adj|red($1),n|bicycle($1))),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|little($1),adj|red($1),n|bicycle($1))),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  n:prop|Fraser
example_end

Sent: Fraser .
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  n:prop|Fraser
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  n:prop|Fraser
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
example_end

Sent: you jump in the livingroom .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: I 'm almost finished .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: I 'm almost finished .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
example_end

Sent: you stay in the livingroom .
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
example_end

Sent: but I 'm almost finished .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),prep|in(det|the($1,n|+n|living+n|room($1)),$0))
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.and(aux|be&1S(part|finish-PERF(pro|I,$0),$0),adv|almost($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  adj|hot(pro|it)
example_end

Sent: it 's hot .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|vanilla($0)
example_end

Sent: vanilla .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|vanilla($0)
Sem:  lambda $0_{e}.n|vanilla($0)
example_end

Sent: vanilla .
Sem:  lambda $0_{e}.n|vanilla($0)
Sem:  lambda $0_{e}.n|vanilla($0)
Sem:  lambda $0_{e}.n|vanilla($0)
example_end

Sent: vanilla .
Sem:  lambda $0_{e}.n|vanilla($0)
Sem:  lambda $0_{e}.n|vanilla($0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.n|vanilla($0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(det|that($2,n|+n|tinker+n|toy($2)),$0,$1),$1),adv:loc|in($1))
example_end

Sent: what is that tinkertoy doing in there ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(det|that($2,n|+n|tinker+n|toy($2)),$0,$1),$1),adv:loc|in($1))
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|belong(pro|it,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: it doesn 't belong in there .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(det|that($2,n|+n|tinker+n|toy($2)),$0,$1),$1),adv:loc|in($1))
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|belong(pro|it,$0),$0),adv:loc|in($0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|belong(pro|it,$0),$0),adv:loc|in($0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|the($0,n|+n|rocking+n|chair($0))
example_end

Sent: the rockingchair .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|the($0,n|+n|rocking+n|chair($0))
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  det|the($0,n|+n|rocking+n|chair($0))
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: see it ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
Sem:  det|the($0,n|chair($0))
example_end

Sent: the chair .
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
Sem:  det|the($0,n|chair($0))
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: you see it ?
Sem:  det|the($0,n|chair($0))
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
example_end

Sent: find it .
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{ev}.v|find(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(v|get(pro|you,pro|it,$0),adv:tem|then($0))
example_end

Sent: you get it then .
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(v|get(pro|you,pro|it,$0),adv:tem|then($0))
Sem:  adj|lost(pro|it)
example_end

Sent: it 's lost .
Sem:  lambda $0_{ev}.and(v|get(pro|you,pro|it,$0),adv:tem|then($0))
Sem:  adj|lost(pro|it)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is it ?
Sem:  adj|lost(pro|it)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
example_end

Sent: you see it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.and(adj|orange($1),n|peel($1)),$0),$0)
example_end

Sent: I 'm making orange peel .
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.and(adj|orange($1),n|peel($1)),$0),$0)
Sem:  lambda $0_{e}.n|peel($0)
example_end

Sent: peel .
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.and(adj|orange($1),n|peel($1)),$0),$0)
Sem:  lambda $0_{e}.n|peel($0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|those,pro:poss:det|your($1,and(n|bouillon($1),n|cube-PL($1))),$0),$0)
example_end

Sent: are those your bouillon cubes ?
Sem:  lambda $0_{e}.n|peel($0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|those,pro:poss:det|your($1,and(n|bouillon($1),n|cube-PL($1))),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|sit(pro|you,$0),$0),adv|later($0))
example_end

Sent: you can sit on my lap later .
Sem:  lambda $0_{ev}.Q(eq(pro:dem|those,pro:poss:det|your($1,and(n|bouillon($1),n|cube-PL($1))),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|sit(pro|you,$0),$0),adv|later($0))
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
example_end

Sent: the big stool .
Sem:  lambda $0_{ev}.and(aux|can(v|sit(pro|you,$0),$0),adv|later($0))
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm sorry .
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
Sem:  adj|sorry(pro|I)
Sem:  pro|it
example_end

Sent: it 's not .
Sem:  adj|sorry(pro|I)
Sem:  pro|it
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
example_end

Sent: the big stool .
Sem:  pro|it
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
example_end

Sent: the big stool .
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  det|the($0,and(adj|big($0),n|stool($0)))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|my($1,n|stool($1)),$0)
example_end

Sent: this is my stool .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|my($1,n|stool($1)),$0)
Sem:  lambda $0_{ev}.Q(and(v|come&PAST(pro|you,$0),adv:loc|back($0)),$0)
example_end

Sent: you came back ?
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|my($1,n|stool($1)),$0)
Sem:  lambda $0_{ev}.Q(and(v|come&PAST(pro|you,$0),adv:loc|back($0)),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.Q(and(v|come&PAST(pro|you,$0),adv:loc|back($0)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|more($1,and(adj|orange($1),n|peel($1))),$0)
example_end

Sent: that 's more orange peel .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|more($1,and(adj|orange($1),n|peel($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|bottom($1)),$0)),$0)
example_end

Sent: you sit on your bottom ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|more($1,and(adj|orange($1),n|peel($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|bottom($1)),$0)),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(pro:poss:det|her($1,n|bottom($1)),$0))
example_end

Sent: Mommy 's sitting on her bottom .
Sem:  lambda $0_{ev}.Q(and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|bottom($1)),$0)),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(pro:poss:det|her($1,n|bottom($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(pro:poss:det|her($1,n|bottom($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
example_end

Sent: sit on your stool .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|your($1,n|stool($1)),$0))
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what do you want ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.and(adj|big($0),n|girl($0))
example_end

Sent: big girl .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.and(adj|big($0),n|girl($0))
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: again ?
Sem:  lambda $0_{e}.and(adj|big($0),n|girl($0))
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|foot($1)),$0)
example_end

Sent: my foot ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(not(pro:wh|what,$0),$0)
example_end

Sent: not what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(not(pro:wh|what,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|puzzle($1)),$0)
example_end

Sent: that 's your puzzle .
Sem:  lambda $0_{ev}.Q(not(pro:wh|what,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|puzzle($1)),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|puzzle($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(v|fix-PAST(pro|you,pro:poss:det|your($1,n|puzzle($1)),$0),$0)
example_end

Sent: you fixed your puzzle ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(v|fix-PAST(pro|you,pro:poss:det|your($1,n|puzzle($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(det|the($1,n|hole-PL($1)),$0))
example_end

Sent: you put them in the holes .
Sem:  lambda $0_{ev}.Q(v|fix-PAST(pro|you,pro:poss:det|your($1,n|puzzle($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(det|the($1,n|hole-PL($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro|you,det|a($1,n|horse-DIM($1)),$0),$0)
example_end

Sent: you 're a horsie ?
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(det|the($1,n|hole-PL($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro|you,det|a($1,n|horse-DIM($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.Q(eq(pro|you,det|a($1,n|horse-DIM($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,n|horse-DIM($1)),$0)
example_end

Sent: you are a horsie .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,n|horse-DIM($1)),$0)
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Clip_clop,$0)
example_end

Sent: you 're Clipclop .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,n|horse-DIM($1)),$0)
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Clip_clop,$0)
Sem:  lambda $0_{ev}.and(aux|be&PAST(part|run-PROG(pro|you,$0),$0),adv|fast($0))
example_end

Sent: you were running fast .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Clip_clop,$0)
Sem:  lambda $0_{ev}.and(aux|be&PAST(part|run-PROG(pro|you,$0),$0),adv|fast($0))
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
example_end

Sent: I 'm not sure .
Sem:  lambda $0_{ev}.and(aux|be&PAST(part|run-PROG(pro|you,$0),$0),adv|fast($0))
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|a($1,n|coin($1)),$0)
example_end

Sent: this is a coin .
Sem:  lambda $0_{ev}.not(adj|sure(pro|I),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|a($1,n|coin($1)),$0)
Sem:  det|a($0,n|coin($0))
example_end

Sent: a coin .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|a($1,n|coin($1)),$0)
Sem:  det|a($0,n|coin($0))
Sem:  det|a($0,and(n|baseball($0),n|coin($0)))
example_end

Sent: a baseball coin .
Sem:  det|a($0,n|coin($0))
Sem:  det|a($0,and(n|baseball($0),n|coin($0)))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|him,$0),prep|in(pro:poss:det|your($1,n|pocket($1)),$0))
example_end

Sent: put him in your pocket .
Sem:  det|a($0,and(n|baseball($0),n|coin($0)))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|him,$0),prep|in(pro:poss:det|your($1,n|pocket($1)),$0))
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(pro:poss:det|your($1,n|pocket($1)),$0)),$0)
example_end

Sent: coming outof your pocket ?
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|him,$0),prep|in(pro:poss:det|your($1,n|pocket($1)),$0))
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(pro:poss:det|your($1,n|pocket($1)),$0)),$0)
Sem:  lambda $0_{e}.n|baseball($0)
example_end

Sent: baseball .
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(pro:poss:det|your($1,n|pocket($1)),$0)),$0)
Sem:  lambda $0_{e}.n|baseball($0)
Sem:  lambda $0_{e}.and(n|baseball($0),n|coin($0))
example_end

Sent: baseball coin .
Sem:  lambda $0_{e}.n|baseball($0)
Sem:  lambda $0_{e}.and(n|baseball($0),n|coin($0))
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|him,qn|more($1,n|coffee($1)),$0),$0)
example_end

Sent: I 'll give him more coffee .
Sem:  lambda $0_{e}.and(n|baseball($0),n|coin($0))
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|him,qn|more($1,n|coffee($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|napkin($1)),$0)
example_end

Sent: that 's his napkin .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|him,qn|more($1,n|coffee($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|napkin($1)),$0)
Sem:  n:prop|Eve
example_end

Sent: Eve .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|napkin($1)),$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pencil($1)),$0),$0)
example_end

Sent: is this my pencil ?
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pencil($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: where is your pencil ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|my($1,n|pencil($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|this,$0)
example_end

Sent: you say this .
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|this,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|this,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: move your highchair .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,det|the($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: move the highchair .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,det|the($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: cheese ?
Sem:  lambda $0_{ev}.v|move(pro|you,det|the($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|some($1,n|cheese($1)),$0),$0),$0)
example_end

Sent: would you like some cheese ?
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|some($1,n|cheese($1)),$0),$0),$0)
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: what sweetie ?
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,qn|some($1,n|cheese($1)),$0),$0),$0)
Sem:  lambda $0_{e}.pro:wh|what
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|lunch($1)),$0),$0)
example_end

Sent: is that my lunch ?
Sem:  lambda $0_{e}.pro:wh|what
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|lunch($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: is it ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|my($1,n|lunch($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|lunch($1)),$0),$0)
example_end

Sent: is it my lunch ?
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|lunch($1)),$0),$0)
Sem:  pro:poss:det|your($0,n|lunch($0))
example_end

Sent: your lunch .
Sem:  lambda $0_{ev}.Q(eq(pro|it,pro:poss:det|my($1,n|lunch($1)),$0),$0)
Sem:  pro:poss:det|your($0,n|lunch($0))
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|you,qn|more($1,n|tapioca($1)),$0),$0)
example_end

Sent: I 'll give you more tapioca .
Sem:  pro:poss:det|your($0,n|lunch($0))
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|you,qn|more($1,n|tapioca($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|come(n:prop|Mommy,$0),$0),adv:loc|back($0))
example_end

Sent: Mommy did come back .
Sem:  lambda $0_{ev}.aux|will(v|give(pro|I,pro|you,qn|more($1,n|tapioca($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|come(n:prop|Mommy,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
example_end

Sent: excuse me .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|come(n:prop|Mommy,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|tell(pro|you,pro|him,$0),$0),$0)
example_end

Sent: did you tell him ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|tell(pro|you,pro|him,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|run(pro|you,$0),adv|again($0))
example_end

Sent: you run right back out again .
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|tell(pro|you,pro|him,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|run(pro|you,$0),adv|again($0))
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|I,det|a($1,n|napkin($1)),$0),$0),$0)
example_end

Sent: I don 't need a napkin .
Sem:  lambda $0_{ev}.and(v|run(pro|you,$0),adv|again($0))
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|I,det|a($1,n|napkin($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
example_end

Sent: what do you mean ?
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|I,det|a($1,n|napkin($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro:dem|those,$0),$0),$0)
example_end

Sent: you can 't have those .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro:dem|those,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|move(pro|you,$0),$0),$0)
example_end

Sent: would you move ?
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro:dem|those,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|move(pro|you,$0),$0),$0)
Sem:  lambda $0_{e}.n|icing($0)
example_end

Sent: icing .
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|move(pro|you,$0),$0),$0)
Sem:  lambda $0_{e}.n|icing($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.n|icing($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{ev}.v|forget&PAST(pro|you,pro|it,$0)
example_end

Sent: you forgot it .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{ev}.v|forget&PAST(pro|you,pro|it,$0)
Sem:  pro|them
example_end

Sent: go in and get them .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|you,pro|it,$0)
Sem:  pro|them
Sem:  pro|them
example_end

Sent: go in and get them .
Sem:  pro|them
Sem:  pro|them
Sem:  lambda $0_{ev}.Q(and(aux|shall(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0)),$0)
example_end

Sent: shall I put it there ?
Sem:  pro|them
Sem:  lambda $0_{ev}.Q(and(aux|shall(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0)),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
example_end

Sent: I see it .
Sem:  lambda $0_{ev}.Q(and(aux|shall(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0)),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
example_end

Sent: bring it here .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|it,$0)
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Sem:  adj|empty(pro|it)
example_end

Sent: it 's empty .
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro|it,$0),adv:loc|here($0))
Sem:  adj|empty(pro|it)
Sem:  lambda $0_{ev}.Q(v|wait(pro|you,$0),$0)
example_end

Sent: wait ?
Sem:  adj|empty(pro|it)
Sem:  lambda $0_{ev}.Q(v|wait(pro|you,$0),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
example_end

Sent: where 's Eve ?
Sem:  lambda $0_{ev}.Q(v|wait(pro|you,$0),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|cookie-PL($1),$0),$0)
example_end

Sent: I 'm making cookies .
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|cookie-PL($1),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: have what ?
Sem:  lambda $0_{ev}.aux|be&1S(part|make-PROG(pro|I,lambda $1_{e}.n|cookie-PL($1),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{e}.n|icing($0)
example_end

Sent: icing .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{e}.n|icing($0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|stove($1)),$0))
example_end

Sent: you take it outof the stove .
Sem:  lambda $0_{e}.n|icing($0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|stove($1)),$0))
Sem:  lambda $0_{ev}.not(and(aux|do(v|put&ZERO(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: don 't put it in there again .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|stove($1)),$0))
Sem:  lambda $0_{ev}.not(and(aux|do(v|put&ZERO(pro|you,pro|it,$0),$0),adv|again($0)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you cannot have it .
Sem:  lambda $0_{ev}.not(and(aux|do(v|put&ZERO(pro|you,pro|it,$0),$0),adv|again($0)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: you can 't have it again .
Sem:  lambda $0_{ev}.not(aux|can(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: you can 't have it again .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|anymore($0)),$0)
example_end

Sent: you can 't have it anymore .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|again($0)),$0)
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|anymore($0)),$0)
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm sorry .
Sem:  lambda $0_{ev}.not(and(aux|can(v|have(pro|you,pro|it,$0),$0),adv|anymore($0)),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.aux|be&1S(part|decorate-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
example_end

Sent: I 'm decorating the cookies .
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.aux|be&1S(part|decorate-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|put-PROG(pro|I,lambda $1_{e}.n|icing($1),$0),$0),prep|on(pro|them,$0))
example_end

Sent: I 'm putting icing on them .
Sem:  lambda $0_{ev}.aux|be&1S(part|decorate-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|put-PROG(pro|I,lambda $1_{e}.n|icing($1),$0),$0),prep|on(pro|them,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what is this ?
Sem:  lambda $0_{ev}.and(aux|be&1S(part|put-PROG(pro|I,lambda $1_{e}.n|icing($1),$0),$0),prep|on(pro|them,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{e}.n|ham($0)
example_end

Sent: ham ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{e}.n|ham($0)
Sem:  lambda $0_{ev}.Q(n:prop|Humm,$0)
example_end

Sent: Humm ?
Sem:  lambda $0_{e}.n|ham($0)
Sem:  lambda $0_{ev}.Q(n:prop|Humm,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: what are those ?
Sem:  lambda $0_{ev}.Q(n:prop|Humm,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|kitty($0)
example_end

Sent: kitty ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|kitty($0)
Sem:  n:prop|Humm_the_hamster
example_end

Sent: Hummthehamster .
Sem:  lambda $0_{e}.n|kitty($0)
Sem:  n:prop|Humm_the_hamster
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: and what 's he doing ?
Sem:  n:prop|Humm_the_hamster
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|in(det|the($1,n|sandbox($1)),$0))
example_end

Sent: he 's playing in the sandbox .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|in(det|the($1,n|sandbox($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|in(det|the($1,n|sandbox($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|banana($0)
example_end

Sent: banana .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{e}.n|parsley($0)
example_end

Sent: parsley .
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{e}.n|parsley($0)
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: peanutbutter .
Sem:  lambda $0_{e}.n|parsley($0)
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
Sem:  lambda $0_{e}.n|goldfish($0)
example_end

Sent: goldfish .
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
Sem:  lambda $0_{e}.n|goldfish($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what is this ?
Sem:  lambda $0_{e}.n|goldfish($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|they,det|a($1,n|table($1)),$0),$0)
example_end

Sent: they 've got a table .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|they,det|a($1,n|table($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|they,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: they 're eating lunch .
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|they,det|a($1,n|table($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|they,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|hide-PROG(pro|he,$0),$0)
example_end

Sent: but he 's hiding .
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|they,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|hide-PROG(pro|he,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what is this ?
Sem:  lambda $0_{ev}.aux|be&3S(part|hide-PROG(pro|he,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  det|a($0,n|goldfish($0))
example_end

Sent: a goldfish .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  det|a($0,n|goldfish($0))
Sem:  lambda $0_{e}.n|block-PL($0)
example_end

Sent: blocks .
Sem:  det|a($0,n|goldfish($0))
Sem:  lambda $0_{e}.n|block-PL($0)
Sem:  n:prop|Humm_the_hamster
example_end

Sent: Hummthehamster .
Sem:  lambda $0_{e}.n|block-PL($0)
Sem:  n:prop|Humm_the_hamster
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  n:prop|Humm_the_hamster
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|hamburger($0)
example_end

Sent: hamburger .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|hamburger($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's eating what ?
Sem:  lambda $0_{e}.n|hamburger($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|he,lambda $1_{e}.n|banana($1),$0),$0)
example_end

Sent: he 's eating banana .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|he,lambda $1_{e}.n|banana($1),$0),$0)
Sem:  lambda $0_{e}.n|bacon($0)
example_end

Sent: bacon .
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|he,lambda $1_{e}.n|banana($1),$0),$0)
Sem:  lambda $0_{e}.n|bacon($0)
Sem:  lambda $0_{e}.n|goldfish($0)
example_end

Sent: goldfish .
Sem:  lambda $0_{e}.n|bacon($0)
Sem:  lambda $0_{e}.n|goldfish($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: that 's a nice story .
Sem:  lambda $0_{e}.n|goldfish($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
example_end

Sent: can you go mmo ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
example_end

Sent: can you go mm ?
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
Sem:  n:prop|Humm
example_end

Sent: Humm .
Sem:  lambda $0_{ev}.Q(aux|can(v|go(pro|you,$0),$0),$0)
Sem:  n:prop|Humm
Sem:  n:prop|Humm
example_end

Sent: Humm .
Sem:  n:prop|Humm
Sem:  n:prop|Humm
Sem:  lambda $0_{ev}.Q(aux|can(v|sing(pro|you,n:prop|Old_Macdonald,$0),$0),$0)
example_end

Sent: can you sing OldMacdonald ?
Sem:  n:prop|Humm
Sem:  lambda $0_{ev}.Q(aux|can(v|sing(pro|you,n:prop|Old_Macdonald,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|sheep($1)),$0)
example_end

Sent: that 's the sheep .
Sem:  lambda $0_{ev}.Q(aux|can(v|sing(pro|you,n:prop|Old_Macdonald,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|sheep($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
example_end

Sent: what dropped ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|sheep($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
example_end

Sent: you dropped what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,n:prop|Frosty_the_Snowman,$0),$0)
example_end

Sent: is this FrostytheSnowman ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|drop-PAST(pro|you,$0,$1)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,n:prop|Frosty_the_Snowman,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|hold-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he holding ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,n:prop|Frosty_the_Snowman,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|hold-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|start-PAST(pro|they,$1),v|roll(pro|they,$0,$1))
example_end

Sent: and they started to roll what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|hold-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|start-PAST(pro|they,$1),v|roll(pro|they,$0,$1))
Sem:  lambda $0_{e}.n|snowball-PL($0)
example_end

Sent: snowballs .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|start-PAST(pro|they,$1),v|roll(pro|they,$0,$1))
Sem:  lambda $0_{e}.n|snowball-PL($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|use(pro|they,$0,$1),$1),prep|for(det|the($2,n|eye-PL($2)),$1))
example_end

Sent: what did they use for the eyes ?
Sem:  lambda $0_{e}.n|snowball-PL($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|use(pro|they,$0,$1),$1),prep|for(det|the($2,n|eye-PL($2)),$1))
Sem:  lambda $0_{e}.n|pipe($0)
example_end

Sent: pipe .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|use(pro|they,$0,$1),$1),prep|for(det|the($2,n|eye-PL($2)),$1))
Sem:  lambda $0_{e}.n|pipe($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|scarf($1)),$0)
example_end

Sent: that 's a scarf .
Sem:  lambda $0_{e}.n|pipe($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|scarf($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: what are those ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|scarf($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.n|mitten-PL($0)
example_end

Sent: mittens .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.n|mitten-PL($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|build-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
example_end

Sent: what are they building here ?
Sem:  lambda $0_{e}.n|mitten-PL($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|build-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
example_end

Sent: what are they doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|build-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
Sem:  lambda $0_{ev}.Q(part|skate-PROG(pro|you,$0),$0)
example_end

Sent: skating ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|here($1))
Sem:  lambda $0_{ev}.Q(part|skate-PROG(pro|you,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|they,$0,$1)
example_end

Sent: they 're what ?
Sem:  lambda $0_{ev}.Q(part|skate-PROG(pro|you,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|they,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|they,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(v|come&PAST(det|the($1,n|hat($1)),$0),adv|off($0))
example_end

Sent: the hat came off .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(v|come&PAST(det|the($1,n|hat($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Frosty_the_snowman,$0),$0)
example_end

Sent: that 's not Frostythesnowman .
Sem:  lambda $0_{ev}.and(v|come&PAST(det|the($1,n|hat($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Frosty_the_snowman,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who is that ?
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Frosty_the_snowman,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
Sem:  lambda $0_{ev}.eq(pro|he,det|the($1,n|policeman($1)),$0)
example_end

Sent: he 's the policeman .
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
Sem:  lambda $0_{ev}.eq(pro|he,det|the($1,n|policeman($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.eq(pro|he,det|the($1,n|policeman($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  det|a($0,n|cow($0))
example_end

Sent: a cow .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  det|a($0,n|cow($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
example_end

Sent: that 's a duck .
Sem:  det|a($0,n|cow($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(pro|he,$0,$1),$1)
example_end

Sent: and what 's he saying ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.n|chick-PL($0)
example_end

Sent: chicks .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|say-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.n|chick-PL($0)
Sem:  lambda $0_{e}.n|donkey-PL($0)
example_end

Sent: donkeys .
Sem:  lambda $0_{e}.n|chick-PL($0)
Sem:  lambda $0_{e}.n|donkey-PL($0)
Sem:  lambda $0_{e}.n|donkey($0)
example_end

Sent: donkey .
Sem:  lambda $0_{e}.n|donkey-PL($0)
Sem:  lambda $0_{e}.n|donkey($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|say(pro|they,$0,$1),$1)
example_end

Sent: and what do they say ?
Sem:  lambda $0_{e}.n|donkey($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|say(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|do&PERF(pro|they,$0),$0),$0)
example_end

Sent: are they done ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|say(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|do&PERF(pro|they,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: what are these ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|do&PERF(pro|they,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.n|apple-PL($0)
example_end

Sent: apples .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.n|apple-PL($0)
Sem:  lambda $0_{e}.and(n|apple($0),n|tree-PL($0))
example_end

Sent: apple trees .
Sem:  lambda $0_{e}.n|apple-PL($0)
Sem:  lambda $0_{e}.and(n|apple($0),n|tree-PL($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Old_Macdonald,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what 's OldMacdonald doing there ?
Sem:  lambda $0_{e}.and(n|apple($0),n|tree-PL($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Old_Macdonald,$0,$1),$1),adv:loc|there($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Old_Macdonald,$0,$1),$1),adv:loc|there($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|kitty($0)
example_end

Sent: kitty .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|kitty($0)
Sem:  lambda $0_{e}.n|elephant($0)
example_end

Sent: elephant .
Sem:  lambda $0_{e}.n|kitty($0)
Sem:  lambda $0_{e}.n|elephant($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bunny($1)),$0)
example_end

Sent: that 's a bunny .
Sem:  lambda $0_{e}.n|elephant($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bunny($1)),$0)
Sem:  det|a($0,n|bear($0))
example_end

Sent: a bear .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bunny($1)),$0)
Sem:  det|a($0,n|bear($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
example_end

Sent: that 's a duck .
Sem:  det|a($0,n|bear($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|dog-DIM($1)),$0)
example_end

Sent: a doggie ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|duck($1)),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|dog-DIM($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|dog-DIM($1)),$0)
example_end

Sent: that 's a doggie too .
Sem:  lambda $0_{ev}.Q(det|a($1,n|dog-DIM($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|dog-DIM($1)),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|rooster($1)),$0)
example_end

Sent: it 's a rooster .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|dog-DIM($1)),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|rooster($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(det|the($2,n|rooster($2)),$0,$1),$1)
example_end

Sent: what did the rooster say ?
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|rooster($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(det|the($2,n|rooster($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|cow-PL($1),$0)
example_end

Sent: cows go mooo  mooo .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(det|the($2,n|rooster($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|cow-PL($1),$0)
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|rooster-PL($1),$0)
example_end

Sent: roosters go cockadoodledooo .
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|cow-PL($1),$0)
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|rooster-PL($1),$0)
Sem:  adj|nice(pro:dem|that)
example_end

Sent: that 's nice .
Sem:  lambda $0_{ev}.v|go(lambda $1_{e}.n|rooster-PL($1),$0)
Sem:  adj|nice(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: what are those ?
Sem:  adj|nice(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
example_end

Sent: it sways .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
example_end

Sent: it sways .
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what is this ?
Sem:  lambda $0_{ev}.v|sway-3S(pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
example_end

Sent: I can see Eve .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
example_end

Sent: can you see me ?
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: who do you see ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|see(n:prop|Fraser,$0,$1),$1)
example_end

Sent: and who does Fraser see ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|see(n:prop|Fraser,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Eve,$0)
example_end

Sent: see Eve .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|see(n:prop|Fraser,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: who do you see ?
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
example_end

Sent: you put it back .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,n|dustpan($1)),$0)
example_end

Sent: it 's the dustpan .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,n|dustpan($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,n|dustpan($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|back($0))
example_end

Sent: would you put it back .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.aux|will(v|shut&ZERO(pro|I,det|the($1,n|door($1)),$0),$0)
example_end

Sent: I 'll shut the door .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.aux|will(v|shut&ZERO(pro|I,det|the($1,n|door($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
example_end

Sent: put it away .
Sem:  lambda $0_{ev}.aux|will(v|shut&ZERO(pro|I,det|the($1,n|door($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(n:prop|Cromer,$0))
example_end

Sent: it belongs to Cromer .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(n:prop|Cromer,$0))
Sem:  lambda $0_{e}.and(n|+n|ice+n|cube($0),n|tray-PL($0))
example_end

Sent: icecube trays .
Sem:  lambda $0_{ev}.and(v|belong-3S(pro|it,$0),prep|to(n:prop|Cromer,$0))
Sem:  lambda $0_{e}.and(n|+n|ice+n|cube($0),n|tray-PL($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
example_end

Sent: do what ?
Sem:  lambda $0_{e}.and(n|+n|ice+n|cube($0),n|tray-PL($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: later .
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(pro|you,$0,$1)
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: later .
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  n:prop|Eve
example_end

Sent: Eve .
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.and(aux|be&3S(part|run-PROG(pro|it,$0),$0),adv|fast($0))
example_end

Sent: it 's running fast .
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.and(aux|be&3S(part|run-PROG(pro|it,$0),$0),adv|fast($0))
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0)
example_end

Sent: you 're going to jump .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|run-PROG(pro|it,$0),$0),adv|fast($0))
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
example_end

Sent: big jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
example_end

Sent: big jump .
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
Sem:  lambda $0_{ev}.Q(and(v|do(n:prop|Fraser,pro|it,$0),prep|to(n:prop|Eve,$0)),$0)
example_end

Sent: Fraser do it to Eve ?
Sem:  lambda $0_{e}.and(adj|big($0),n|jump($0))
Sem:  lambda $0_{ev}.Q(and(v|do(n:prop|Fraser,pro|it,$0),prep|to(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
example_end

Sent: what do you mean ?
Sem:  lambda $0_{ev}.Q(and(v|do(n:prop|Fraser,pro|it,$0),prep|to(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|can(v|jump(pro|you,$0),$0),adv|now($0))
example_end

Sent: you can jump now .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|mean(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|can(v|jump(pro|you,$0),$0),adv|now($0))
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.and(aux|can(v|jump(pro|you,$0),$0),adv|now($0))
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: you jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: you jump .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|jump($1)),$0),$0)
example_end

Sent: that 's not a jump .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|jump($1)),$0),$0)
Sem:  det|this($0,n|time($0))
example_end

Sent: this time .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|jump($1)),$0),$0)
Sem:  det|this($0,n|time($0))
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
example_end

Sent: jump .
Sem:  det|this($0,n|time($0))
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  n:prop|Eve
example_end

Sent: Eve .
Sem:  lambda $0_{ev}.v|jump(pro|you,$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
example_end

Sent: jump off the stool .
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
example_end

Sent: jump off the stool .
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.aux|be&1S(part|ice-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
example_end

Sent: I 'm icing the cookies .
Sem:  lambda $0_{ev}.and(v|jump(pro|you,$0),prep|off(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.aux|be&1S(part|ice-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|my($1,n|stool($1)),$0))
example_end

Sent: you sit on my stool .
Sem:  lambda $0_{ev}.aux|be&1S(part|ice-PROG(pro|I,det|the($1,n|cookie-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|my($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|there($0))
example_end

Sent: sit right there .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(pro:poss:det|my($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|kitty($0)
example_end

Sent: kitty .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|kitty($0)
Sem:  lambda $0_{ev}.part|go-PROG(det|a($1,n|truck($1)),$0)
example_end

Sent: a truck going .
Sem:  lambda $0_{e}.n|kitty($0)
Sem:  lambda $0_{ev}.part|go-PROG(det|a($1,n|truck($1)),$0)
Sem:  lambda $0_{e}.n|plane($0)
example_end

Sent: plane .
Sem:  lambda $0_{ev}.part|go-PROG(det|a($1,n|truck($1)),$0)
Sem:  lambda $0_{e}.n|plane($0)
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,det|a($1,n|rooster($1)),$0),prep|on(lambda $2_{e}.n|top($2),$0))
example_end

Sent: it has a rooster on top .
Sem:  lambda $0_{e}.n|plane($0)
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,det|a($1,n|rooster($1)),$0),prep|on(lambda $2_{e}.n|top($2),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's this ?
Sem:  lambda $0_{ev}.and(v|have&3S(pro|it,det|a($1,n|rooster($1)),$0),prep|on(lambda $2_{e}.n|top($2),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  det|a($0,n|giraffe($0))
example_end

Sent: a giraffe .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  det|a($0,n|giraffe($0))
Sem:  lambda $0_{e}.n|car($0)
example_end

Sent: car .
Sem:  det|a($0,n|giraffe($0))
Sem:  lambda $0_{e}.n|car($0)
Sem:  lambda $0_{e}.n|boat($0)
example_end

Sent: boat .
Sem:  lambda $0_{e}.n|car($0)
Sem:  lambda $0_{e}.n|boat($0)
Sem:  det|a($0,and(adj|big($0),n|sailboat($0)))
example_end

Sent: a big sailboat .
Sem:  lambda $0_{e}.n|boat($0)
Sem:  det|a($0,and(adj|big($0),n|sailboat($0)))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: what are these ?
Sem:  det|a($0,and(adj|big($0),n|sailboat($0)))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.n|cat-PL($0)
example_end

Sent: cats .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.n|cat-PL($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: and what are they doing ?
Sem:  lambda $0_{e}.n|cat-PL($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
example_end

Sent: what are the cats doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|flower($1)),$0)
example_end

Sent: that 's a flower .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|flower($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
example_end

Sent: what are the cats doing ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|flower($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.eq(det|this($1,n|hat($1)),det|a($2,and(adj|round($2),n|hat($2))),$0)
example_end

Sent: this hat 's a round hat .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|the($2,n|cat-PL($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.eq(det|this($1,n|hat($1)),det|a($2,and(adj|round($2),n|hat($2))),$0)
Sem:  lambda $0_{e}.n|horse-DIM($0)
example_end

Sent: horsie .
Sem:  lambda $0_{ev}.eq(det|this($1,n|hat($1)),det|a($2,and(adj|round($2),n|hat($2))),$0)
Sem:  lambda $0_{e}.n|horse-DIM($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
example_end

Sent: what 's the horsie doing ?
Sem:  lambda $0_{e}.n|horse-DIM($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
example_end

Sent: what is the horsie doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|horse-DIM($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|truck($1)),$0)
example_end

Sent: that 's a truck .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|truck($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(det|the($1,n|horse-DIM($1)),det|the($2,n|truck($2)),$0),$0)
example_end

Sent: and the horsie is pulling the truck .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|truck($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(det|the($1,n|horse-DIM($1)),det|the($2,n|truck($2)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(lambda $1_{e}.n|horse-DIM($1),det|the($2,n|truck($2)),$0),$0)
example_end

Sent: horsie is pulling the truck .
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(det|the($1,n|horse-DIM($1)),det|the($2,n|truck($2)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(lambda $1_{e}.n|horse-DIM($1),det|the($2,n|truck($2)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what are they doing there ?
Sem:  lambda $0_{ev}.aux|be&3S(part|pull-PROG(lambda $1_{e}.n|horse-DIM($1),det|the($2,n|truck($2)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|there($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1),adv:loc|there($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
example_end

Sent: doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|splash-PROG(pro|they,$0),$0)
example_end

Sent: they 're splashing .
Sem:  lambda $0_{e}.lambda $1_{ev}.part|do-PROG(pro|you,$0,$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|splash-PROG(pro|they,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|these($2,n|person&PL($2)),$0,$1),$1)
example_end

Sent: what are these people doing ?
Sem:  lambda $0_{ev}.aux|be&PRES(part|splash-PROG(pro|they,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|these($2,n|person&PL($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dig-PROG(pro|they,det|a($1,n|hole($1)),$0),$0)
example_end

Sent: they 're digging a hole .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(det|these($2,n|person&PL($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dig-PROG(pro|they,det|a($1,n|hole($1)),$0),$0)
Sem:  lambda $0_{e}.n|bug($0)
example_end

Sent: bug .
Sem:  lambda $0_{ev}.aux|be&PRES(part|dig-PROG(pro|they,det|a($1,n|hole($1)),$0),$0)
Sem:  lambda $0_{e}.n|bug($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|this($2,n|man($2)),$0,$1),$1)
example_end

Sent: what 's this man doing ?
Sem:  lambda $0_{e}.n|bug($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|this($2,n|man($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|this($2,n|man($2)),$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|make-PROG(pro|he,lambda $1_{e}.n|popcorn($1),$0),$0)
example_end

Sent: he 's making popcorn .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|make-PROG(pro|he,lambda $1_{e}.n|popcorn($1),$0),$0)
Sem:  lambda $0_{e}.n|baby($0)
example_end

Sent: baby .
Sem:  lambda $0_{ev}.aux|be&3S(part|make-PROG(pro|he,lambda $1_{e}.n|popcorn($1),$0),$0)
Sem:  lambda $0_{e}.n|baby($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.n|baby($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he 's doing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.v|smell(pro|you,lambda $1_{e}.n|flower($1),$0)
example_end

Sent: smell flower .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.v|smell(pro|you,lambda $1_{e}.n|flower($1),$0)
Sem:  lambda $0_{ev}.part|smell-PROG(pro|you,det|the($1,n|flower($1)),$0)
example_end

Sent: smelling the flower .
Sem:  lambda $0_{ev}.v|smell(pro|you,lambda $1_{e}.n|flower($1),$0)
Sem:  lambda $0_{ev}.part|smell-PROG(pro|you,det|the($1,n|flower($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end


Sent: am I going to what ?
Sem: lambda $0_{ev}.aux|be-1s(part|go-presp(pro:sub|i,$0),$0)
example_end

Sent: that 's her pocketbook .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|that,n|pocket+book(pro:dem|that,$0))
example_end

Sent: have you seen everything ?
Sem: lambda $0_{ev}.Q(v|have(part|see-pastp(pro:per|you,pro:indef|everything,$0),$0))
example_end

Sent: oh teasing .
Sem: lambda $0_{ev}.and(part|tease-presp(you,$0),co|oh($0))
example_end

Sent: you 're teasing Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(part|tease-presp(pro:per|you,n:prop|cromer,$0),$0))
example_end

Sent: do you know what this is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no that 's not a car .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|car(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: what kind of pen ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|pen($2))))
example_end

Sent: what kind of car ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|car($2))))
example_end

Sent: red car ?
Sem: lambda $0_{e}.Q(and(adj|red($0),n|car($0)))
example_end

Sent: yellow car ?
Sem: lambda $0_{e}.Q(and(n|yellow($0),n|car($0)))
example_end

Sent: what do you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0)
example_end

Sent: where what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.and(v|go($1,$0),$2($0))
example_end

Sent: did he go to the corral ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|go(pro:sub|he,$0),prep|to(det:art|the($1,n|corral($1)),$0)),$0))
example_end

Sent: you 're doing tricks ?
Sem: lambda $0_{ev}.Q(aux|~be(part|do-presp(pro:per|you,lambda $1_{e}.n|trick-pl($1),$0),$0))
example_end

Sent: doing tricks ?
Sem: lambda $0_{ev}.Q(part|do-presp(you,lambda $1_{e}.n|trick-pl($1),$0))
example_end

Sent: what kind of tricks ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|trick-pl($2))))
example_end

Sent: chair tricks ?
Sem: lambda $0_{e}.Q(and_comp(n|chair($0),v|trick-3s($0)))
example_end

Sent: oh you 're laughing ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|laugh-presp(pro:per|you,$0),$0),co|oh($0)))
example_end

Sent: do I remember chair tricks ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:sub|i,lambda $1_{e}.and_comp(n|chair($1),n|trick-pl($1)),$0),$0))
example_end

Sent: you 're pressing a button ?
Sem: lambda $0_{ev}.Q(aux|~be(part|press-presp(pro:per|you,det:art|a($1,n|button($1)),$0),$0))
example_end

Sent: and what happens ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|happen-3s(you,$1,$0)
example_end

Sent: rope tricks ?
Sem: lambda $0_{e}.Q(and_comp(n|rope($0),v|trick-3s($0)))
example_end

Sent: oh you fell down on Mommy 's floor ?
Sem: lambda $0_{ev}.Q(and(and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|on(n:prop|mommy's($1,n|floor($1)),$0)),co|oh($0)))
example_end

Sent: no don 't throw that .
Sem: lambda $0_{ev}.and(not(mod|do(v|throw(you,pro:dem|that,$0),$0),$0),co|no($0))
example_end

Sent: oh your rope tricks .
Sem: lambda $0_{ev}.and(det:poss|your($1,and_comp(n|rope($1),n|trick-pl($1)),$0),co|oh($0))
example_end

Sent: I don 't think it will if you put him down there .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: try him up there .
Sem: lambda $0_{ev}.and(v|try(you,pro:obj|him,$0),adv|up(adv|there($0)))
example_end

Sent: well it doesn 't really belong there .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|belong(pro:per|it,$0),adv|real-dadj($0)),adv|there($0)),$0),$0),co|well($0))
example_end

Sent: I don 't know what happened .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|happen-past(pro:int|what,$1),$0),$0),$0)
example_end

Sent: what happened to him ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|him,$0))
example_end

Sent: Rusty 's down there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n:prop|rusty,$0),adv|down(adv|there($0))))
example_end

Sent: cowboy 's grass ?
Sem: lambda $0_{e}.Q(n|cow+boy's($1,n|grass($1),$0))
example_end

Sent: oh don 't take it from you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|take(you,pro:per|it,$0),prep|from(pro:per|you,$0)),$0),$0),co|oh($0)))
example_end

Sent: what is it now ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|it($0,$1)
example_end

Sent: you can 't play with that .
Sem: lambda $0_{ev}.not(mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|that,$0)),$0),$0)
example_end

Sent: it 's a can top .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and_comp(n|can(pro:per|it,$0),n|top(pro:per|it,$0)))
example_end

Sent: strong and healthy .
Sem: lambda $0_{e}.coord|and(adj|strong($0),adj|health-dn($0))
example_end

Sent: that 's not a rocket .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|rocket(pro:dem|that,$0)),$0)
example_end

Sent: that 's a Wheaties box .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n:prop|wheaties(pro:dem|that,$0),n|box(pro:dem|that,$0)))
example_end

Sent: you go over near the door .
Sem: lambda $0_{ev}.and(and(v|go(pro:per|you,$0),adv|over($0)),prep|near(det:art|the($1,n|door($1)),$0))
example_end

Sent: you got your rocket ?
Sem: lambda $0_{ev}.Q(v|get-past(pro:per|you,det:poss|your($1,n|rocket($1)),$0))
example_end

Sent: where are you trying to send your rocket ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-pres(and(part|try-presp(pro:per|you,lambda $1_{ev}.v|send(pro:per|you,det:poss|your($2,n|rocket($2)),$1),$0),$3($0)),$0)
example_end

Sent: what are you doing with the rocket ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|with(det:art|the($2,n|rocket($2)),$0)),$0)
example_end

Sent: you might hurt him .
Sem: lambda $0_{ev}.mod|might(v|hurt-zero(pro:per|you,pro:obj|him,$0),$0)
example_end

Sent: isn 't the rocket heavy ?
Sem: lambda $0_{ev}.Q(not(adj|heavy(det:art|the($1,n|rocket($1)),$0),$0))
example_end

Sent: what kind of flag ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|flag($2))))
example_end

Sent: Adam don 't throw the ball okay ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|throw(you,det:art|the($1,n|ball($1)),$0),$0),$0),adj|okay($0)))
example_end

Sent: what 's wrong with it ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|wrong($0,$1)
example_end

Sent: oh it 's a trailer ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|it,n|trailer(pro:per|it,$0)),co|oh($0)))
example_end

Sent: push Rusty down ?
Sem: lambda $0_{ev}.Q(and(n|push(you,n:prop|rusty,$0),adv|down($0)))
example_end

Sent: go where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go(you,$0),$1($0))
example_end

Sent: well I can 't do that .
Sem: lambda $0_{ev}.and(not(mod|can(v|do(pro:sub|i,pro:dem|that,$0),$0),$0),co|well($0))
example_end

Sent: what 's the trailer doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|trailer($1)),$2,$0),$0)
example_end

Sent: watching you ?
Sem: lambda $0_{ev}.Q(part|watch-presp(you,pro:per|you,$0))
example_end

Sent: I wouldn 't throw my hat .
Sem: lambda $0_{ev}.not(mod|will(v|throw(pro:sub|i,det:poss|my($1,n|hat($1)),$0),$0),$0)
example_end

Sent: careful of the light Adam .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: you 're going to leave your horses down there ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|leave(pro:per|you,det:poss|your($2,n|horse-pl($2)),$1),adv|down(adv|there($1))),$0),$0))
example_end

Sent: yes I 'm watching you .
Sem: lambda $0_{ev}.and(aux|~be(part|watch-presp(pro:sub|i,pro:per|you,$0),$0),co|yes($0))
example_end

Sent: no Adam you don 't climb up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|climb(pro:per|you,$0),adv|up(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: come down .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|down($0))
example_end

Sent: no I don 't want that book thank_you .
Sem: lambda $0_{ev}.and(and(not(mod|do(v|want(pro:sub|i,pro:dem|that($1,n|book($1)),$0),$0),$0),co|no($0)),n|thank_you($0))
example_end

Sent: come down or else you can 't player over there anymore .
Sem: lambda $0_{ev}.post|else_or(not(mod|can(and(and(n|play-dv(pro:per|you,$0),adv|over(adv|there($0))),adv|anymore($0)),$0),$0),and(v|come(you,$0),adv|down($0)))
example_end

Sent: I don 't know what happened to you ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|happen-past(pro:int|what,$1),prep|to(pro:per|you,$1)),$0),$0),$0))
example_end

Sent: oh what happened to the cowboy ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(det:art|the($2,n|cow+boy($2)),$0)),co|oh($0))
example_end

Sent: don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(you,$0),$0),$0)
example_end

Sent: he doesn 't see you putting any boots on .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|he,lambda $1_{ev}.and(part|put-presp(pro:per|you,qn|any($2,n|boot-pl($2)),$1),prep|on($1)),$0),$0),$0)
example_end

Sent: you aren 't putting any boots on .
Sem: lambda $0_{ev}.not(aux|be(and(part|put-presp(pro:per|you,qn|any($1,n|boot-pl($1)),$0),prep|on($0)),$0),$0)
example_end

Sent: Adam you 're going to fall .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|fall(pro:per|you,$1),$0),$0)
example_end

Sent: how can you see when you 've broken it .
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(aux|~have(part|break-pastp(pro:per|you,pro:per|it,$0),$0),mod|can(and(v|see(pro:per|you,$0),$1($0)),$0))
example_end

Sent: what do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: see you what ?
Sem: lambda $0_{ev}.v|see(you,pro:per|you,$0)
example_end

Sent: it 's broken .
Sem: lambda $0_{ev}.part|break-pastp(pro:per|it,$0)
example_end

Sent: no it doesn 't come out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|come(pro:per|it,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: it won 't come out .
Sem: lambda $0_{ev}.not(mod|will(and(v|come(pro:per|it,$0),adv|out($0)),$0),$0)
example_end

Sent: well she needs her pencil .
Sem: lambda $0_{ev}.and(v|need-3s(pro:sub|she,det:poss|her($1,n|pencil($1)),$0),co|well($0))
example_end

Sent: here 's your pencil over here .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|your($1,n|pencil($1)),$0),pro:exist|here($0)),adv|over(adv|here($0)))
example_end

Sent: get out_of the way ?
Sem: lambda $0_{ev}.Q(and(v|get(you,$0),prep|out_of(det:art|the($1,n|way($1)),$0)))
example_end

Sent: who 's in your way ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|your($2,n|way($2)),$0))
example_end

Sent: that doesn 't belong on the floor .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:dem|that,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0)
example_end

Sent: ask Ursula what that is .
Sem: lambda $0_{ev}.v|ask(you,n:prop|ursula,$0)
example_end

Sent: you ask her .
Sem: lambda $0_{ev}.v|ask(pro:per|you,pro:obj|her,$0)
example_end

Sent: give it back to Ursla .
Sem: lambda $0_{ev}.and(v|give(you,pro:per|it,$0),adv|back(prep|to(n:prop|ursla,$0)))
example_end

Sent: it 's a brush for a typewriter with an eraser on this end .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,att(att(n|brush(pro:per|it,$0),prep|for(det:art|a($1,n|type+writer($1)))),prep|with(det:art|a($2,att(n|erase-dv($2),prep|on(pro:dem|this($3,n|end($3))))))))
example_end

Sent: I don 't think that 's yours .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.pro:poss|yours(pro:rel|that,$1),$0),$0),$0)
example_end

Sent: no let Urs look now Adam .
Sem: lambda $0_{ev}.and(part|let-pastp(you,lambda $1_{ev}.and(cop|look(n:prop|ursula,$1),adv|now($1)),$0),co|no($0))
example_end

Sent: let her finish looking in her pocket book now .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.v|finish(pro:obj|her,$1),$0),adv|now($0))
example_end

Sent: a picture of somebody .
Sem: det:art|a($0,att(n|picture($0),prep|of(pro:indef|somebody)))
example_end

Sent: who is the somebody ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,pro:indef|somebody($0,$1))
example_end

Sent: Adam wait .
Sem: lambda $0_{ev}.v|wait(you,$0)
example_end

Sent: oh that 's dollar ?
Sem: lambda $0_{ev}.Q(and(n|dollar(pro:dem|that,$0),co|oh($0)))
example_end

Sent: this doesn 't cut .
Sem: lambda $0_{ev}.not(mod|do(v|cut-zero(pro:dem|this,$0),$0),$0)
example_end

Sent: here are some more paper clips .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some(qn|more($1,and_comp(n|paper($1),n|clip-pl($1)))),$0),adv|here($0))
example_end

Sent: are you going to put them back in the box ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back(prep|in(det:art|the($2,n|box($2)),$1))),$0),$0))
example_end

Sent: oh then put it .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:per|it,$0),adv:tem|then($0)),co|oh($0))
example_end

Sent: what do you do with the pipe ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|pipe($2)),$0)),$0)
example_end

Sent: oh button press .
Sem: lambda $0_{ev}.and(and_comp(n|button($0),n|press($0)),co|oh($0))
example_end

Sent: what happens when you press the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),v|happen-3s($2,$0))
example_end

Sent: got it ?
Sem: lambda $0_{ev}.Q(v|get-past(you,pro:per|it,$0))
example_end

Sent: what did you get ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|get(pro:per|you,$1,$0),$0)
example_end

Sent: you caught it ?
Sem: lambda $0_{ev}.Q(v|catch-past(pro:per|you,pro:per|it,$0))
example_end

Sent: what did you catch ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|catch(pro:per|you,$1,$0),$0)
example_end

Sent: meadow pond .
Sem: lambda $0_{e}.and_comp(adj|meadow($0),n|pond($0))
example_end

Sent: oh a meadow pond .
Sem: lambda $0_{ev}.and(det:art|a($1,and_comp(adj|meadow($1),n|pond($1)),$0),co|oh($0))
example_end

Sent: what about the meadow pond ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|meadow($0),n|pond($0)))))
example_end

Sent: you jumped over it ?
Sem: lambda $0_{ev}.Q(and(v|jump-past(pro:per|you,$0),adv|over(pro:per|it,$0)))
example_end

Sent: I don 't think you can jump over the pipe .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|jump(pro:per|you,$1),adv|over(det:art|the($2,n|pipe($2)),$1)),$1),$0),$0),$0)
example_end

Sent: yes you did jump over the pipe didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|do-past(and(n|jump(pro:per|you,$0),adv|over(det:art|the($1,n|pipe($1)),$0)),$0),not(mod|do(pro:per|you,$0),$0)),co|yes($0)))
example_end

Sent: missed it ?
Sem: lambda $0_{ev}.Q(v|miss-past(you,pro:per|it,$0))
example_end

Sent: Adam what happens when you press the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),v|happen-3s($2,$0))
example_end

Sent: what does the button do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|button($1)),$2,$0),$0)
example_end

Sent: press over the candle maker .
Sem: lambda $0_{ev}.and(n|press(you,$0),adv|over(lambda $1_{e}.and_comp(det:art|the($2,n|candle+stick($2),$1),n|make-dv($1)),$0))
example_end

Sent: when did you press the button ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),$0))
example_end

Sent: where were you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-past(pro:per|you,$0),$1($0))
example_end

Sent: when you pressed the button where were you Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press-past(pro:per|you,det:art|the($1,n|button($1)),$0),and(cop|be-past(pro:per|you,$0),$2($0)))
example_end

Sent: where were you when you pressed the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press-past(pro:per|you,det:art|the($1,n|button($1)),$0),and(cop|be-past(pro:per|you,$0),$2($0)))
example_end

Sent: what were you riding in ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-past(and(part|ride-presp(pro:per|you,$1,$0),adv|in($0)),$0)
example_end

Sent: in a what ?
Sem: det:art|a($0,pro:int|what($0))
example_end

Sent: in taxi ?
Sem: Q(prep|in(lambda $0_{e}.n|taxi($0)))
example_end

Sent: you dropped a taxi wheel ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|a($1,and_comp(n|taxi($1),n|wheel($1))),$0))
example_end

Sent: if you like to .
Sem: lambda $0_{ev}.v|like(pro:per|you,$0)
example_end

Sent: oh what happened to the taxi wheels ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(det:art|the($2,and_comp(n|taxi($2),n|wheel-pl($2))),$0)),co|oh($0))
example_end

Sent: here are some .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some,$0),adv|here($0))
example_end

Sent: oh that 's for Cromer ?
Sem: lambda $0_{ev}.Q(and(and(cop|~be(pro:dem|that,$0),prep|for(n:prop|cromer,$0)),co|oh($0)))
example_end

Sent: Urs has one ?
Sem: lambda $0_{ev}.Q(aux|have-3s(n:prop|ursula,pro:indef|one,$0))
example_end

Sent: what shall I buy with my dollar ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(and(v|buy(pro:sub|i,$1,$0),prep|with(det:poss|my($2,n|dollar($2)),$0)),$0)
example_end

Sent: I don 't know where to find a unicorn .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|find(_,det:art|a($2,n|unicorn($2)),$1),adv:int|where($1)),$0),$0),$0)
example_end

Sent: well where 's your unicorn ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(aux|~be(det:poss|your($1,n|unicorn($1)),$0),$2($0)),co|well($0))
example_end

Sent: you took our money now you have_to give us a unicorn .
Sem: lambda $0_{ev}.and(v|take-past(pro:per|you,det:poss|our($1,n|money($1)),$0),mod:aux|have_to(and(v|give(pro:per|you,det:art|a($2,n|unicorn($2)),pro:obj|us,$0),adv|now($0)),$0))
example_end

Sent: why I thought you were buying us a unicorn .
Sem: lambda $3_{e}.lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|buy-presp(pro:per|you,det:art|a($2,n|unicorn($2)),pro:obj|us,$1),$1),$0),$3($0))
example_end

Sent: the unicorn didn 't want to come ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(det:art|the($1,n|unicorn($1)),lambda $2_{ev}.v|come(det:art|the($1,n|unicorn($1)),$2),$0),$0),$0))
example_end

Sent: help you reach ?
Sem: lambda $0_{ev}.Q(v|help(you,lambda $1_{ev}.v|reach(pro:per|you,$1),$0))
example_end

Sent: that 's for the unicorn ?
Sem: lambda $0_{ev}.Q(and(cop|~be(pro:dem|that,$0),conj|for(det:art|the($1,n|unicorn($1)),$0)))
example_end

Sent: where 's the unicorn ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|unicorn($1)),$0),$2($0))
example_end

Sent: buy this one ?
Sem: lambda $0_{ev}.Q(v|buy(you,pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: in it ?
Sem: Q(prep|in(pro:per|it))
example_end

Sent: putting them in Rusty 's hat ?
Sem: lambda $0_{ev}.Q(and(part|put-presp(you,pro:obj|them,$0),prep|in(n:prop|rusty's($1,n|hat($1)),$0)))
example_end

Sent: Rusty didn 't want them in his hat ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|want(n:prop|rusty,pro:obj|them,$0),prep|in(det:poss|his($1,n|hat($1)),$0)),$0),$0))
example_end

Sent: why are you throwing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|throw-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: no Adam what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: are you tired ?
Sem: lambda $0_{ev}.Q(v|tire-past(pro:per|you,$0))
example_end

Sent: what does she have_to buy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(v|do-3s(v|buy(pro:sub|she,$1,$0),$0),$0)
example_end

Sent: what did he do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(pro:sub|he,$1,$0),$0)
example_end

Sent: what did Rusty do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(n:prop|rusty,$1,$0),$0)
example_end

Sent: well what are you buying ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(part|buy-presp(pro:per|you,$1,$0),$0),co|well($0))
example_end

Sent: what did you buy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|buy(pro:per|you,$1,$0),$0)
example_end

Sent: I see you have some crumpled dollars .
Sem: lambda $0_{ev}.v|see(pro:sub|i,lambda $1_{ev}.v|have(pro:per|you,qn|some($2,and(v|crumple-past($2),n|dollar-pl($2))),$1),$0)
example_end

Sent: you 're going shopping ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{e}.part|shop-presp($1),$0),$0))
example_end

Sent: what did you do with the dollars ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|dollar-pl($2)),$0)),$0)
example_end

Sent: let Urs do it .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|do(n:prop|ursula,pro:per|it,$1),$0)
example_end

Sent: can you put them back in the bag ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|back(prep|in(det:art|the($1,n|bag($1)),$0))),$0))
example_end

Sent: I know what you might like .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.mod|might(prep|like(pro:per|you,pro:int|what,$1),$1),$0)
example_end

Sent: I have very long gloves .
Sem: lambda $0_{ev}.v|have(pro:sub|i,adv|very(lambda $1_{e}.and(adj|long($1),n|glove-pl($1))),$0)
example_end

Sent: you plug this in .
Sem: lambda $0_{ev}.and(v|plug(pro:per|you,pro:dem|this,$0),adv|in($0))
example_end

Sent: we have_to put this up now .
Sem: lambda $0_{ev}.mod:aux|have_to(and(and(v|put-zero(pro:sub|we,pro:dem|this,$0),adv|up($0)),adv|now($0)),$0)
example_end

Sent: what do you hear ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|hear(pro:per|you,$1,$0),$0)
example_end

Sent: can you hear Urs ?
Sem: lambda $0_{ev}.Q(mod|can(v|hear(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: no it 's not a toy .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:per|it,n|toy(pro:per|it,$0)),$0),co|no($0))
example_end

Sent: are you going home Adam ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|go-presp(pro:per|you,$0),adv|home($0)),$0))
example_end

Sent: there you are .
Sem: lambda $0_{ev}.and(cop|be-pres(pro:per|you,$0),adv|there($0))
example_end

Sent: I don 't know what that is .
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: button let you press ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|press(pro:per|you,$1),$0))
example_end

Sent: a box .
Sem: det:art|a($0,n|box($0))
example_end

Sent: Cromer can 't change your diaper .
Sem: lambda $0_{ev}.not(mod|can(v|change(n:prop|cromer,det:poss|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: she can 't change your diaper either .
Sem: lambda $0_{ev}.not(mod|can(and(v|change(pro:sub|she,det:poss|your($1,n|diaper($1)),$0),adv|either($0)),$0),$0)
example_end

Sent: no don 't put your foot up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,det:poss|your($1,n|foot($1)),$0),adv|up(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: Urs can 't change your diaper like that .
Sem: lambda $0_{ev}.not(mod|can(and(v|change(n:prop|ursula,det:poss|your($1,n|diaper($1)),$0),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: do you want me to change your diaper ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|change(pro:obj|me,det:poss|your($2,n|diaper($2)),$1),$0),$0))
example_end

Sent: oh you 're telling the microphone ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|tell-presp(pro:per|you,det:art|the($1,n|microphone($1)),$0),$0),co|oh($0)))
example_end

Sent: will you ask them to excuse you ?
Sem: lambda $0_{ev}.Q(mod|will(v|ask(pro:per|you,lambda $1_{ev}.v|excuse(pro:obj|them,pro:per|you,$1),$0),$0))
example_end

Sent: did he catch you ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|catch(pro:sub|he,pro:per|you,$0),$0))
example_end

Sent: you 're playing peekaboo with Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|play-presp(pro:per|you,lambda $1_{e}.v|peekaboo($1),$0),prep|with(n:prop|cromer,$0)),$0))
example_end

Sent: oh you caught him ?
Sem: lambda $0_{ev}.Q(and(v|catch-past(pro:per|you,pro:obj|him,$0),co|oh($0)))
example_end

Sent: oh you fell down in the bunkhouse .
Sem: lambda $0_{ev}.and(and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|in(det:art|the($1,n|bunkhouse($1)),$0)),co|oh($0))
example_end

Sent: you fell down with your shoes .
Sem: lambda $0_{ev}.and(v|fall-past_down(pro:per|you,$0),prep|with(det:poss|your($1,n|shoe-pl($1)),$0))
example_end

Sent: with your shoes ?
Sem: Q(prep|with(det:poss|your($0,n|shoe-pl($0))))
example_end

Sent: I put it in my pocket .
Sem: lambda $0_{ev}.and(v|put-zero(pro:sub|i,pro:per|it,$0),prep|in(det:poss|my($1,n|pocket($1)),$0))
example_end

Sent: don 't break the point Adam .
Sem: lambda $0_{ev}.not(mod|do(v|break(you,det:art|the($1,n|point($1)),$0),$0),$0)
example_end

Sent: now you 're getting it .
Sem: lambda $0_{ev}.aux|~be(and(n:gerund|get-presp(pro:per|you,pro:per|it,$0),adv|now($0)),$0)
example_end

Sent: drop it on the point ?
Sem: lambda $0_{ev}.Q(and(v|drop(you,pro:per|it,$0),prep|on(det:art|the($1,n|point($1)),$0)))
example_end

Sent: how many glasses ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|glass-pl($0))
example_end

Sent: oh there it goes ?
Sem: lambda $0_{ev}.Q(and(and(v|go-3s(pro:per|it,$0),adv|there($0)),co|oh($0)))
example_end

Sent: no don 't play with glasses .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|play(you,$0),prep|with(lambda $1_{e}.n|glass-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: how many pencils do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|pencil-pl($1)),$0),$0)
example_end

Sent: big one ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,lambda $1_{e}.adj|big($1),$0))
example_end

Sent: you like cereal .
Sem: lambda $0_{ev}.v|like(pro:per|you,lambda $1_{e}.n|cereal($1),$0)
example_end

Sent: oh I see .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,$0),co|oh($0))
example_end

Sent: when I eat grapefruit .
Sem: lambda $0_{ev}.v|eat(pro:sub|i,lambda $1_{e}.n|grape+fruit($1),$0)
example_end

Sent: okay you have your bib on ?
Sem: lambda $0_{ev}.Q(and(and(v|have(pro:per|you,det:poss|your($1,n|bib($1)),$0),adv|on($0)),co|okay($0)))
example_end

Sent: you like it .
Sem: lambda $0_{ev}.v|like(pro:per|you,pro:per|it,$0)
example_end

Sent: he dropped his pencil .
Sem: lambda $0_{ev}.v|drop-past(pro:sub|he,det:poss|his($1,n|pencil($1)),$0)
example_end

Sent: yes now you pick it up .
Sem: lambda $0_{ev}.and(and(and(v|pick(pro:per|you,pro:per|it,$0),adv|now($0)),adv|up($0)),co|yes($0))
example_end

Sent: who turned around ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|turn-past($1,$0),adv|around($0))
example_end

Sent: you 've got a tunnel ?
Sem: lambda $0_{ev}.Q(aux|~have(part|get-pastp(pro:per|you,det:art|a($1,n|tunnel($1)),$0),$0))
example_end

Sent: where are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-pres(pro:sub|they,$0),$1($0))
example_end

Sent: don 't go down ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|go(you,$0),adv|down($0)),$0),$0))
example_end

Sent: where do you want to go ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.v|go(pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: Daddy went down ?
Sem: lambda $0_{ev}.Q(and(v|go-past(n:prop|daddy,$0),adv|down($0)))
example_end

Sent: how many pencils ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|pencil-pl($0))
example_end

Sent: this is a radiator .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|radiator(pro:dem|this,$0))
example_end

Sent: so you mean elevator .
Sem: lambda $0_{ev}.and(adj|mean(pro:per|you,lambda $1_{e}.n|elevator($1),$0),co|so($0))
example_end

Sent: where are you putting them ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,pro:obj|them,$0),$1($0)),$0)
example_end

Sent: there 's some .
Sem: lambda $0_{ev}.and(cop|~be(qn|some,$0),pro:exist|there($0))
example_end

Sent: oh peek you .
Sem: lambda $0_{ev}.and(v|peek(you,pro:per|you,$0),co|oh($0))
example_end

Sent: see what you can do ?
Sem: lambda $0_{ev}.Q(v|see(you,lambda $1_{ev}.mod|can(v|do(pro:per|you,pro:int|what,$1),$1),$0))
example_end

Sent: that 's good .
Sem: lambda $0_{ev}.adj|good(pro:dem|that,$0)
example_end

Sent: put it on the wall ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|wall($1)),$0)))
example_end

Sent: what do you call that ?
Sem: lambda $0_{ev}.v|call(pro:per|you,pro:dem|that,$0)
example_end

Sent: I 'm watching .
Sem: lambda $0_{ev}.aux|~be(part|watch-presp(pro:sub|i,$0),$0)
example_end

Sent: no go get your rubber band .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|your($1,and_comp(n|rubber($1),n|band($1))),$0),co|no($0))
example_end

Sent: did you have any more ?
Sem: lambda $0_{ev}.Q(v|do-past(v|have(pro:per|you,qn|any($1,pro:indef|more($1)),$0),$0))
example_end

Sent: yes you sit outside .
Sem: lambda $0_{ev}.and(and(v|sit(pro:per|you,$0),adv|outside($0)),co|yes($0))
example_end

Sent: whose blanket ?
Sem: lambda $0_{e}.$0($1,n|blanket($1))
example_end

Sent: oh does Adam have a blanket ?
Sem: lambda $0_{ev}.Q(and(mod|do-3s(v|have(n:prop|adam,det:art|a($1,n|blanket($1)),$0),$0),co|oh($0)))
example_end

Sent: why do you need your blanket ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|need(pro:per|you,det:poss|your($1,n|blanket($1)),$0),$2($0)),$0)
example_end

Sent: I think it 's out in the kitchen .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(cop|~be(pro:per|it,$1),adv|out(prep|in(det:art|the($2,n|kitchen($2)),$1))),$0)
example_end

Sent: are you taking your nap ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|take-presp(pro:per|you,det:poss|your($1,n|nap($1)),$0),$0))
example_end

Sent: oh is that a small one ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),adj|small(pro:rel|that,$0))),co|oh($0)))
example_end

Sent: well you give him the pen .
Sem: lambda $0_{ev}.and(v|give(pro:per|you,det:art|the($1,n|pen($1)),pro:obj|him,$0),co|well($0))
example_end

Sent: Adam dropped the pencil .
Sem: lambda $0_{ev}.v|drop-past(n:prop|adam,det:art|the($1,n|pencil($1)),$0)
example_end

Sent: oh a trombone .
Sem: lambda $0_{ev}.and(det:art|a($1,n|trombone($1),$0),co|oh($0))
example_end

Sent: can you play the trombone ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:per|you,det:art|the($1,n|trombone($1)),$0),$0))
example_end

Sent: a fish ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|fish($1),$0))
example_end

Sent: swim with you ?
Sem: lambda $0_{ev}.Q(and(n|swim(you,$0),prep|with(pro:per|you,$0)))
example_end

Sent: looks like a real tiny fish .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),adj|real(prep|like(det:art|a($1,and(adj|tiny($1),n|fish($1))),$0)))
example_end

Sent: know what that is ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|know(you,$0,$1)
example_end

Sent: that 's a circle .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|circle(pro:dem|that,$0))
example_end

Sent: where is the cowboy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|cow+boy($1)),$0),$2($0))
example_end

Sent: can you draw his boots ?
Sem: lambda $0_{ev}.Q(mod|can(v|draw(pro:per|you,det:poss|his($1,n|boot-pl($1)),$0),$0))
example_end

Sent: oh his spurs .
Sem: lambda $0_{ev}.and(det:poss|his($1,n|spur-pl($1),$0),co|oh($0))
example_end

Sent: it 's Goldilocks .
Sem: lambda $0_{ev}.n:prop|goldilocks(pro:per|it,$0)
example_end

Sent: cowboy bill ?
Sem: lambda $0_{e}.Q(and_comp(n|cow+boy($0),n|bill($0)))
example_end

Sent: looks like a road .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|road($1)),$0))
example_end

Sent: is it a road ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|road(pro:per|it,$0)))
example_end

Sent: looks like another one is it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(you,$0),prep|like(qn|another($1,pro:indef|one($1)),$0)),cop|be-3s(pro:per|it,$0)))
example_end

Sent: a road another road ?
Sem: lambda $0_{e}.Q(and(det:art|a($1,n|road($1)),qn|another($2,n|road($2)),$0))
example_end

Sent: it 's a cowboy ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|cow+boy(pro:per|it,$0)))
example_end

Sent: he has a what on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|have-3s(pro:sub|he,$1,$0),adv|on($0))
example_end

Sent: whose boots are those ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|those,n|boot-pl(pro:dem|those,$0))
example_end

Sent: is that a hat ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|hat(pro:rel|that,$0)))
example_end

Sent: oh it 's a boy .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,n|boy(pro:per|it,$0)),co|oh($0))
example_end

Sent: does he have hat on ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|have(pro:sub|he,lambda $1_{e}.n|hat($1),$0),adv|on($0)),$0))
example_end

Sent: whose bandana is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|bandana(pro:dem|that,$0))
example_end

Sent: looks like a square .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|square($1)),$0))
example_end

Sent: is it a square ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|square(pro:per|it,$0)))
example_end

Sent: it 's a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.det:art|a(pro:per|it,$1(pro:per|it,$0))
example_end

Sent: it 's a clown he said .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{ev}.det:art|a(pro:per|it,n|clown(pro:per|it,$1)),$0)
example_end

Sent: it 's clown Adam .
Sem: lambda $0_{ev}.n|clown(pro:per|it,$0)
example_end

Sent: is Adam a clown ?
Sem: lambda $0_{ev}.Q(det:art|a(n:prop|adam,n|clown(n:prop|adam,$0)))
example_end

Sent: Adam 's busy ?
Sem: lambda $0_{ev}.Q(adj|busy(n:prop|adam,$0))
example_end

Sent: what is Adam busy doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|busy(n:prop|adam,lambda $1_{ev}.part|do-presp(n:prop|adam,$2,$1),$0)
example_end

Sent: you 're busy at home ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|busy($0,$1)
example_end

Sent: it is your home .
Sem: lambda $0_{ev}.det:poss|your(pro:per|it,n|home(pro:per|it,$0))
example_end

Sent: is it my home ?
Sem: lambda $0_{ev}.Q(det:poss|my(pro:per|it,n|home(pro:per|it,$0)))
example_end

Sent: yes I came on my bicycle .
Sem: lambda $0_{ev}.and(and(v|come-past(pro:sub|i,$0),prep|on(det:poss|my($1,n|cycle($1)),$0)),co|yes($0))
example_end

Sent: is it another clown .
Sem: lambda $0_{ev}.qn|another(pro:per|it,n|clown(pro:per|it,$0))
example_end

Sent: oh that 's a rope ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|rope(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: rope for tricks ?
Sem: lambda $0_{e}.Q(att(n|rope($0),prep|for(lambda $1_{e}.n|trick-pl($1))))
example_end

Sent: whose rope is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|rope(pro:per|it,$0))
example_end

Sent: another fish ?
Sem: lambda $0_{e}.Q(qn|another($1,n|fish($1),$0))
example_end

Sent: is that a fish ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|fish(pro:rel|that,$0)))
example_end

Sent: it 's a boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|boy(pro:per|it,$0))
example_end

Sent: did you reach the towel ?
Sem: lambda $0_{ev}.Q(v|do-past(v|reach(pro:per|you,det:art|the($1,n|towel($1)),$0),$0))
example_end

Sent: no you didn 't reach it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|reach(pro:per|you,pro:per|it,$0),$0),$0),co|no($0)))
example_end

Sent: what did you do in the kitchen ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|in(det:art|the($2,n|kitchen($2)),$0)),$0)
example_end

Sent: is it a flag ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|flag(pro:per|it,$0)))
example_end

Sent: it 's a pipe ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|pipe(pro:per|it,$0)))
example_end

Sent: looks like a circle .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|circle($1)),$0))
example_end

Sent: let 's put this on the other side .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,pro:dem|this,$1),prep|on(det:art|the($2,and(qn|other($2),n|side($2))),$1)),$0)
example_end

Sent: oh yes he needs that one .
Sem: lambda $0_{ev}.and(and(v|need-3s(pro:sub|he,pro:dem|that($1,pro:indef|one($1)),$0),co|oh($0)),co|yes($0))
example_end

Sent: he needs that .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|he,pro:dem|that,$0)
example_end

Sent: I 'll write you a note then you can have one .
Sem: lambda $0_{ev}.adv:tem|then(mod|can(v|have(pro:per|you,pro:indef|one,$0),$0),mod|~will(v|write(pro:sub|i,det:art|a($1,n|note($1)),pro:per|you,$0),$0))
example_end

Sent: you want me to fold it ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|fold(pro:obj|me,pro:per|it,$1),$0))
example_end

Sent: yes what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,$0),co|yes($0))
example_end

Sent: coat hanger ?
Sem: lambda $0_{e}.Q(and_comp(n|coat($0),n|hang-dv($0)))
example_end

Sent: like penguins ?
Sem: Q(prep|like(lambda $0_{e}.n|penguin-pl($0)))
example_end

Sent: penguins don 't fly do they ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|fly(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0),mod|do(pro:sub|they,$0)))
example_end

Sent: they do fly .
Sem: lambda $0_{ev}.mod|do(v|fly(pro:sub|they,$0),$0)
example_end

Sent: no they don 't fly I don 't think .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(not(mod|do(v|fly(pro:sub|they,$1),$1),$1),co|no($1)),$0),$0),$0)
example_end

Sent: no they don 't .
Sem: lambda $0_{ev}.and(not(mod|do(pro:sub|they,$0),$0),co|no($0))
example_end

Sent: no he can 't fly like a kite .
Sem: lambda $0_{ev}.and(not(mod|can(and(n|fly(pro:sub|he,$0),prep|like(det:art|a($1,n|kite($1)),$0)),$0),$0),co|no($0))
example_end

Sent: you did what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(pro:per|you,$1,$0)
example_end

Sent: penguins can 't fly .
Sem: lambda $0_{ev}.not(mod|can(v|fly(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0)
example_end

Sent: in the water ?
Sem: Q(prep|in(det:art|the($0,n|water($0))))
example_end

Sent: cold outside yes .
Sem: lambda $0_{ev}.and(and(n|cold($0),prep|outside($0)),co|yes($0))
example_end

Sent: yes the wind 's blowing .
Sem: lambda $0_{ev}.and(aux|~be(part|blow-presp(det:art|the($1,n|wind($1)),$0),$0),co|yes($0))
example_end

Sent: did you see all the snow ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|see(pro:per|you,adv|all(det:art|the($1,n|snow($1))),$0),$0))
example_end

Sent: drummer show .
Sem: lambda $0_{e}.and_comp(n|drum-dv($0),n|show($0))
example_end

Sent: oh look up the cowboy 's hat ?
Sem: lambda $0_{ev}.Q(and(and(co|look(you,$0),prep|up(n|cow+boy's($1,det:art|the($2,n|hat($2),$1)),$0)),co|oh($0)))
example_end

Sent: didn 't you go out in the snow ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(and(v|go(pro:per|you,$0),adv|out($0)),prep|in(det:art|the($1,n|snow($1)),$0)),$0),$0))
example_end

Sent: you didn 't go for a walk in the snow ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(and(v|go(pro:per|you,$0),prep|for(det:art|a($1,n|walk($1)),$0)),prep|in(det:art|the($2,n|snow($2)),$0)),$0),$0))
example_end

Sent: did you go over to the library in the snow ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(and(v|go(pro:per|you,$0),adv|over($0)),prep|to(det:art|the($1,n|library($1)),$0)),prep|in(det:art|the($2,n|snow($2)),$0)),$0))
example_end

Sent: and ride the elevator ?
Sem: lambda $0_{ev}.Q(v|ride(you,det:art|the($1,n|elevator($1)),$0))
example_end

Sent: in the library ?
Sem: Q(prep|in(det:art|the($0,n|library($0))))
example_end

Sent: Daddy took you for a walk ?
Sem: lambda $0_{ev}.Q(and(v|take-past(n:prop|daddy,pro:per|you,$0),prep|for(det:art|a($1,n|walk($1)),$0)))
example_end

Sent: did you touch the snow Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|touch(pro:per|you,det:art|the($1,n|snow($1)),$0),$0))
example_end

Sent: did you throw some ?
Sem: lambda $0_{ev}.Q(v|do-past(v|throw(pro:per|you,qn|some,$0),$0))
example_end

Sent: you threw some snow like Joshua ?
Sem: lambda $0_{ev}.Q(and(v|throw-past(pro:per|you,qn|some($1,n|snow($1)),$0),co|like(n:prop|joshua,$0)))
example_end

Sent: Joshua throws like a penguin ?
Sem: lambda $0_{ev}.Q(and(v|throw-3s(n:prop|joshua,$0),prep|like(det:art|a($1,n|penguin($1)),$0)))
example_end

Sent: penguins can 't throw can they ?
Sem: lambda $0_{ev}.Q(and(not(mod|can(v|throw(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0),mod|can(pro:sub|they,$0)))
example_end

Sent: yes they are big and heavy .
Sem: lambda $0_{ev}.and(coord|and(adj|big(pro:sub|they,$0),adj|heavy(pro:sub|they,$0)),co|yes($0))
example_end

Sent: listen to you ?
Sem: lambda $0_{ev}.Q(and(v|listen(you,$0),prep|to(pro:per|you,$0)))
example_end

Sent: what are you saying ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|say-presp(pro:per|you,$1,$0),$0)
example_end

Sent: yes I see you .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:per|you,$0),co|yes($0))
example_end

Sent: do you see me ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,pro:obj|me,$0),$0))
example_end

Sent: it 's how I wonder what you are .
Sem: lambda $0_{ev}.aux|~be(pro:per|it,lambda $1_{ev}.and(v|wonder(pro:sub|i,lambda $2_{ev}.pro:int|what(pro:per|you,$2),$1),adv:int|how($1)),$0)
example_end


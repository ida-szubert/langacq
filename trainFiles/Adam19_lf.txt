Sent: you 're going to come in in fourteen minutes ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(and(v|come(pro:per|you,$1),adv|in($1)),prep|in(lambda $2_{e}.det:num|fourteen(n|minute-pl($2)),$1)),$0),$0))
example_end

Sent: come in Adam .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|in($0))
example_end

Sent: Adam can you go down the steps ?
Sem: lambda $0_{ev}.Q(n|can(and(v|go(pro:per|you,$0),adv|down(det:art|the($1,n|step-pl($1)),$0)),$0))
example_end

Sent: d you have more parts ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.and(qn|more($1),n|part-pl($1)),$0),$0))
example_end

Sent: oh here you are .
Sem: lambda $0_{ev}.and(and(cop|be-pres(pro:per|you,$0),adv|here($0)),co|oh($0))
example_end

Sent: what 're you going to make ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|make(pro:per|you,$2,$1),$0),$0)
example_end

Sent: what did you make ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|make(pro:per|you,$1,$0),$0)
example_end

Sent: a road .
Sem: det:art|a($0,n|road($0))
example_end

Sent: thank_you yes .
Sem: lambda $0_{ev}.and(co|thank_you($0),co|yes($0))
example_end

Sent: he doesn 't have a ball .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|he,det:art|a($1,n|ball($1)),$0),$0),$0)
example_end

Sent: I think it came off .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(v|come-past(pro:per|it,$1),adv|off($1)),$0)
example_end

Sent: maybe it broke Adam .
Sem: lambda $0_{ev}.and(v|break-past(pro:per|it,$0),adv|maybe($0))
example_end

Sent: now you play the game with me .
Sem: lambda $0_{ev}.and(and(v|play(pro:per|you,det:art|the($1,n|game($1)),$0),adv|now($0)),prep|with(pro:obj|me,$0))
example_end

Sent: you ask me .
Sem: lambda $0_{ev}.v|ask(pro:per|you,pro:obj|me,$0)
example_end

Sent: oh I didn 't bring raisins .
Sem: lambda $0_{ev}.and(not(mod|do(v|bring(pro:sub|i,lambda $1_{e}.n|raisin-pl($1),$0),$0),$0),co|oh($0))
example_end

Sent: alright now you ask me .
Sem: lambda $0_{ev}.and(and(v|ask(pro:per|you,pro:obj|me,$0),adv|now($0)),co|alright($0))
example_end

Sent: what shall I give you ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|give(pro:sub|i,$1,pro:per|you,$0),$0)
example_end

Sent: what did you ask me ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|ask(pro:per|you,$1,pro:obj|me,$0),$0)
example_end

Sent: he throws it up in the air .
Sem: lambda $0_{ev}.and(and(v|throw-3s(pro:sub|he,pro:per|it,$0),adv|up($0)),prep|in(det:art|the($1,n|air($1)),$0))
example_end

Sent: your house ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n|house($1),$0))
example_end

Sent: what do I have in my hand ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:sub|i,$1,$0),prep|in(det:poss|my($2,n|hand($2)),$0)),$0)
example_end

Sent: two raisins !
Sem: lambda $0_{e}.det:num|two(n|raisin-pl($0))
example_end

Sent: she has two raisins .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|she,lambda $1_{e}.det:num|two(n|raisin-pl($1)),$0)
example_end

Sent: would you like some juice ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|juice($1)),$0),$0))
example_end

Sent: it 's not broken .
Sem: lambda $0_{ev}.not(part|break-pastp(pro:per|it,$0),$0)
example_end

Sent: give it to Ursula .
Sem: lambda $0_{ev}.and(v|give(you,pro:per|it,$0),prep|to(n:prop|ursula,$0))
example_end

Sent: what d you have Adam .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|have(pro:per|you,$1,$0),$0)
example_end

Sent: d you have a saucer ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|saucer($1)),$0),$0))
example_end

Sent: don 't let it spill .
Sem: lambda $0_{ev}.not(mod|do(v|let-zero(you,lambda $1_{ev}.v|spill(pro:per|it,$1),$0),$0),$0)
example_end

Sent: this is a cucumber honey .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|cucumber(pro:dem|this,$0))
example_end

Sent: what 're you going to show her ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|show(pro:per|you,$2,pro:obj|her,$1),$0),$0)
example_end

Sent: your Jiminy_Cricket ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n:prop|jiminy_cricket($1),$0))
example_end

Sent: oh honey be careful .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|care-dn($0,$1)
example_end

Sent: you come show her .
Sem: lambda $0_{ev}.v|come(pro:per|you,$0)
example_end

Sent: your blanket ?
Sem: lambda $0_{e}.Q(det:poss|your($1,n|blanket($1),$0))
example_end

Sent: may I see how he walks Adam ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,lambda $1_{ev}.and(v|walk-3s(pro:sub|he,$1),adv:int|how($1)),$0),$0))
example_end

Sent: he fell over .
Sem: lambda $0_{ev}.and(v|fall-past(pro:sub|he,$0),adv|over($0))
example_end

Sent: stop kicking me .
Sem: lambda $0_{ev}.n|stop(you,$0)
example_end

Sent: what does Jiminy_Cricket have on his back ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|have(n:prop|jiminy_cricket,$1,$0),prep|on(det:poss|his($2,n|back($2)),$0)),$0)
example_end

Sent: oh is that like a wheelbarrow ?
Sem: lambda $0_{ev}.Q(and(and(cop|be-3s(pro:dem|that,$0),prep|like(det:art|a($1,n|wheel+barrow($1)),$0)),co|oh($0)))
example_end

Sent: he fell .
Sem: lambda $0_{ev}.v|fall-past(pro:sub|he,$0)
example_end

Sent: that 's fresh .
Sem: lambda $0_{ev}.adj|fresh(pro:dem|that,$0)
example_end

Sent: yes catch him please .
Sem: lambda $0_{ev}.and(and(v|catch(you,pro:obj|him,$0),co|yes($0)),co|please($0))
example_end

Sent: it must be in Daddy 's car isn 't it ?
Sem: lambda $0_{ev}.Q(and(mod|must(and(cop|be(pro:per|it,$0),prep|in(n:prop|daddy's($1,n|car($1)),$0)),$0),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: your pail .
Sem: det:poss|your($0,n|pail($0))
example_end

Sent: well Daddy has the car .
Sem: lambda $0_{ev}.and(v|have-3s(n:prop|daddy,det:art|the($1,n|car($1)),$0),co|well($0))
example_end

Sent: he took the car to work .
Sem: lambda $0_{ev}.and(v|take-past(pro:sub|he,det:art|the($1,n|car($1)),$0),prep|to(lambda $2_{e}.n|work($2),$0))
example_end

Sent: we 'll look at it tonight .
Sem: lambda $0_{ev}.mod|~will(and(and(cop|look(pro:sub|we,$0),prep|at(pro:per|it,$0)),adv:tem|tonight($0)),$0)
example_end

Sent: you may be excused .
Sem: lambda $0_{ev}.cop|be(mod|may(part|excuse-pastp(pro:per|you,$0),$0),$0)
example_end

Sent: didn 't you burp ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|burp(pro:per|you,$0),$0),$0))
example_end

Sent: who wrote that ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|write-past($1,pro:dem|that,$0)
example_end

Sent: he 's going to wear that to the wedding .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.and(v|wear(pro:sub|he,pro:dem|that,$1),prep|to(det:art|the($2,n|wedding($2)),$1)),$0),$0)
example_end

Sent: he 's going to a wedding .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:sub|he,$0),prep|to(det:art|a($1,n|wedding($1)),$0)),$0)
example_end

Sent: what 's a wedding Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|wedding($2)),$0)
example_end

Sent: Catherine 's wedding .
Sem: n:prop|catherine's($0,n|wedding($0))
example_end

Sent: well because she wanted to .
Sem: lambda $0_{ev}.and(v|want-past(pro:sub|she,$0),co|well($0))
example_end

Sent: but don 't write on the chair .
Sem: lambda $0_{ev}.not(mod|do(and(v|write(you,$0),prep|on(det:art|the($1,n|chair($1)),$0)),$0),$0)
example_end

Sent: poor Urs what will she do for a pencil if you break it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(conj|if(v|break(pro:per|you,pro:per|it,$0),mod|will(and(v|do(pro:sub|she,$1,$0),prep|for(det:art|a($2,n|pencil($2)),$0)),$0)),att(n:prop|ursula,lambda $3_{e}.adj|poor($3)))
example_end

Sent: yes but suppose something happens to that one .
Sem: lambda $0_{ev}.and(v|suppose(you,lambda $1_{ev}.and(v|happen-3s(pro:indef|something,$1),prep|to(pro:dem|that($2,pro:indef|one($2)),$1)),$0),co|yes($0))
example_end

Sent: she 'll need another one .
Sem: lambda $0_{ev}.mod|~will(v|need(pro:sub|she,qn|another($1,pro:indef|one($1)),$0),$0)
example_end

Sent: yes you can look in there .
Sem: lambda $0_{ev}.and(mod|can(and(cop|look(pro:per|you,$0),prep|in(adv|there($0))),$0),co|yes($0))
example_end

Sent: no not another pencil Adam .
Sem: lambda $0_{ev}.and(not(qn|another($1,n|pencil($1)),$0),co|no($0))
example_end

Sent: yes write your name .
Sem: lambda $0_{ev}.and(v|write(you,det:poss|your($1,n|name($1)),$0),co|yes($0))
example_end

Sent: no you 're already broken one .
Sem: lambda $0_{ev}.and(aux|~be(and(part|break-pastp(pro:per|you,pro:indef|one,$0),adv|already($0)),$0),co|no($0))
example_end

Sent: why d you break one ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|break(pro:per|you,pro:indef|one,$0),$1($0)),$0)
example_end

Sent: can you write on the box ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|write(pro:per|you,$0),prep|on(det:art|the($1,n|box($1)),$0)),$0))
example_end

Sent: we didn 't show what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|show(pro:sub|we,$1,$0),$0),$0)
example_end

Sent: what did happen Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|happen($1,$0),$0)
example_end

Sent: you spilled it yes .
Sem: lambda $0_{ev}.and(v|spill-past(pro:per|you,pro:per|it,$0),co|yes($0))
example_end

Sent: we don 't sit on books dear .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(pro:sub|we,$0),prep|on(lambda $1_{e}.n|book-pl($1),$0)),$0),$0)
example_end

Sent: because books are for reading .
Sem: lambda $0_{ev}.and(cop|be-pres(lambda $1_{e}.n|book-pl($1),$0),prep|for(lambda $2_{e}.n:gerund|read-presp($2),$0))
example_end

Sent: no I don 't want you to Adam .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|i,pro:per|you,$0),$0),$0),co|no($0))
example_end

Sent: what d you see Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: where did your what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|go($1,$0),$2($0)),$0)
example_end

Sent: tonight we 'll get it out_of the car .
Sem: lambda $0_{ev}.mod|~will(and(and(aux|get(pro:sub|we,pro:per|it,$0),adv:tem|tonight($0)),prep|out_of(det:art|the($1,n|car($1)),$0)),$0)
example_end

Sent: Adam I 'll have_to take the pencil from you if you don 't be more careful .
Sem: lambda $0_{ev}.conj|if(mod|do(adv|more(co|careful(pro:per|you,$0)),$0),mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|pencil($1)),$0),prep|from(pro:per|you,$0)),$0),$0))
example_end

Sent: little soda water ?
Sem: lambda $0_{e}.Q(and_comp(n|soda($0),and(adj|little($0),n|water($0))))
example_end

Sent: m e spells me .
Sem: lambda $0_{ev}.v|spell-3s(lambda $1_{e}.n:let|e($1),pro:obj|me,$0)
example_end

Sent: did you go fishing with it ?
Sem: lambda $0_{ev}.Q(v|do-past(and(part|fish-presp(pro:per|you,$0),prep|with(pro:per|it,$0)),$0))
example_end

Sent: you 're going to turn the water off tomorrow .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|turn(pro:per|you,det:art|the($2,n|water($2)),$1),adv|off($1)),$0),adv:tem|tomorrow($0)),$0)
example_end

Sent: did you learn to swim ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|learn(pro:per|you,lambda $1_{ev}.v|swim(pro:per|you,$1),$0),$0))
example_end

Sent: Adam don 't do that dear .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: no I don 't think you know how to put a hole back together .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|know(pro:per|you,lambda $2_{ev}.and(and(v|put-zero(pro:per|you,det:art|a($3,n|hole($3)),$2),adv:int|how($2)),adv|back(adv|together($2))),$1),$0),$0),$0),co|no($0))
example_end

Sent: it 's a card holder .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and_comp(n|card(pro:per|it,$0),n|hold-dv(pro:per|it,$0)))
example_end

Sent: David made it .
Sem: lambda $0_{ev}.v|make-past(n:prop|david,pro:per|it,$0)
example_end

Sent: he didn 't make it for you .
Sem: lambda $0_{ev}.not(mod|do(and(v|make(pro:sub|he,pro:per|it,$0),prep|for(pro:per|you,$0)),$0),$0)
example_end

Sent: he made it for his Mother .
Sem: lambda $0_{ev}.and(v|make-past(pro:sub|he,pro:per|it,$0),prep|for(det:poss|his($1,n:prop|mother($1)),$0))
example_end

Sent: are you his Mother ?
Sem: lambda $0_{ev}.Q(det:poss|his(pro:per|you,n:prop|mother(pro:per|you,$0)))
example_end

Sent: no she didn 't say Robin she said David didn 't she ?
Sem: lambda $0_{ev}.Q(and(not(and(mod|do(v|say(pro:sub|she,n:prop|robin,$0),$0),and(v|say-past(pro:sub|she,n:prop|david,$0),not(mod|do(pro:sub|she,$0),$0))),$0),co|no($0)))
example_end

Sent: is there something else in there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(post|else(pro:indef|something),$0),adv|in(adv|there($0))))
example_end

Sent: oh one piece broke .
Sem: lambda $0_{ev}.and(adj|broke(lambda $1_{e}.det:num|one(n|piece($1)),$0),co|oh($0))
example_end

Sent: maybe something bumped it .
Sem: lambda $0_{ev}.and(v|bump-past(pro:indef|something,pro:per|it,$0),adv|maybe($0))
example_end

Sent: I don 't know what bumped it Adam .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|bump-past(pro:int|what,pro:per|it,$1),$0),$0),$0)
example_end

Sent: I don 't know either .
Sem: lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,$0),adv|either($0)),$0),$0)
example_end

Sent: it was an accident .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|accident(pro:per|it,$0))
example_end

Sent: no you can 't put crayon back together once it 's broken .
Sem: lambda $0_{ev}.and(not(conj|once(part|break-pastp(pro:per|it,$0),mod|can(and(v|put-zero(pro:per|you,lambda $1_{e}.n|crayon($1),$0),adv|back(adv|together($0))),$0)),$0),co|no($0))
example_end

Sent: maybe Robin broke that one .
Sem: lambda $0_{ev}.and(v|break-past(n:prop|robin,pro:dem|that($1,pro:indef|one($1)),$0),adv|maybe($0))
example_end

Sent: maybe a fire truck .
Sem: adv|maybe(det:art|a($0,and_comp(n|fire($0),n|truck($0))))
example_end

Sent: from our fire station up the street .
Sem: prep|from(det:poss|our($0,att(and_comp(n|fire($0),v|station($0)),adv|up(det:art|the($1,n|street($1))))))
example_end

Sent: I think it 's resting now .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.cop|~be(and(part|rest-presp(pro:per|it,$1),adv|now($1)),$1),$0)
example_end

Sent: so when the fire alarm rings it will be ready to go to the fire .
Sem: lambda $0_{ev}.and(mod|will(conj|when(v|ring-3s(det:art|the($1,and_comp(n|fire($1),n|alarm($1))),$0),adj|ready(pro:per|it,lambda $2_{ev}.and(v|go(pro:per|it,$2),prep|to(det:art|the($3,n|fire($3)),$2)),$0)),$0),co|so($0))
example_end

Sent: no that 's not the one ?
Sem: lambda $0_{ev}.Q(and(not(det:art|the(pro:dem|that,pro:indef|one(pro:dem|that,$0)),$0),co|no($0)))
example_end

Sent: look in the bag Adam .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|in(det:art|the($1,n|bag($1)),$0))
example_end

Sent: it 's an indian .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|indian(pro:per|it,$0))
example_end

Sent: well he doesn 't have anything .
Sem: lambda $0_{ev}.and(not(mod|do(v|have(pro:sub|he,pro:indef|anything,$0),$0),$0),co|well($0))
example_end

Sent: looks as_if he had a spear in his hand .
Sem: lambda $0_{ev}.cop|look-3s(you,lambda $1_{ev}.and(v|have-past(pro:sub|he,det:art|a($2,n|spear($2)),$1),prep|in(det:poss|his($3,n|hand($3)),$1)),$0)
example_end

Sent: is that the one ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,pro:indef|one(pro:rel|that,$0)))
example_end

Sent: I don 't know if you can .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: that 's cake ?
Sem: lambda $0_{ev}.Q(n|cake(pro:dem|that,$0))
example_end

Sent: yes he 's keeping that one .
Sem: lambda $0_{ev}.and(aux|~be(part|keep-presp(pro:sub|he,pro:dem|that($1,pro:indef|one($1)),$0),$0),co|yes($0))
example_end

Sent: it was very good .
Sem: lambda $0_{ev}.adv|very(adj|good(pro:per|it,$0))
example_end

Sent: I don 't want to eat his head .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|eat(pro:sub|i,det:poss|his($2,n|head($2)),$1),$0),$0),$0)
example_end

Sent: that 's band around his head .
Sem: lambda $0_{ev}.att(n|band(pro:dem|that,$0),prep|around(det:poss|his($1,n|head($1))))
example_end

Sent: and let the birds eat it ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|eat(det:art|the($2,n|bird-pl($2)),pro:per|it,$1),$0))
example_end

Sent: remember when you fed the pigeons you didn 't have_to put it in a dish .
Sem: lambda $0_{ev}.and(not(mod:aux|have_to(mod|do(conj|when(v|feed-past(pro:per|you,det:art|the($1,n|pigeon-pl($1)),$0),and(v|put-zero(pro:per|you,pro:per|it,$0),prep|in(det:art|a($2,n|dish($2)),$0))),$0),$0),$0),v|remember(you,$0))
example_end

Sent: to the fish ?
Sem: Q(prep|to(det:art|the($0,n|fish($0))))
example_end

Sent: where can you find some fish ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(v|find(pro:per|you,qn|some($1,n|fish($1)),$0),$2($0)),$0)
example_end

Sent: okay Adam .
Sem: lambda $0_{ev}.and(n:prop|adam($0),co|okay($0))
example_end

Sent: now pick the things up .
Sem: lambda $0_{ev}.and(and(v|pick(you,det:art|the($1,n|thing-pl($1)),$0),adv|now($0)),adv|up($0))
example_end

Sent: don 't throw Adam .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,$0),$0),$0)
example_end

Sent: it is red .
Sem: lambda $0_{ev}.adj|red(pro:per|it,$0)
example_end

Sent: there 's a grey crayon .
Sem: lambda $0_{ev}.cop|~be(det:art|a($1,and(adj|grey($1),n|crayon($1))),$0)
example_end

Sent: don 't take them out Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(you,pro:obj|them,$0),adv|out($0)),$0),$0)
example_end

Sent: because little boys don 't smoke cigarettes .
Sem: lambda $0_{ev}.not(mod|do(v|smoke(lambda $1_{e}.and(adj|little($1),n|boy-pl($1)),lambda $2_{e}.n|cigarette-pl($2),$0),$0),$0)
example_end

Sent: I have a good black pen .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,and(adj|black($1),and(adj|good($1),n|pen($1)))),$0)
example_end

Sent: you 're making what ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|make-presp(pro:per|you,$1,$0),$0)
example_end

Sent: yes it does look like spaghetti .
Sem: lambda $0_{ev}.and(mod|do-3s(and(co|look(pro:per|it,$0),co|like(lambda $1_{e}.n|spaghetti($1),$0)),$0),co|yes($0))
example_end

Sent: what kind of spaghetti is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|spaghetti($2))))
example_end

Sent: Perro 's spaghetti ?
Sem: lambda $0_{e}.Q(n:prop|perro's($1,n|spaghetti($1),$0))
example_end

Sent: he talking ?
Sem: lambda $0_{ev}.Q(part|talk-presp(pro:sub|he,$0))
example_end

Sent: he is a pony ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,n|pony(pro:sub|he,$0)))
example_end

Sent: he 's a little boy .
Sem: lambda $0_{ev}.det:art|a(pro:sub|he,and(n|boy(pro:sub|he,$0),adj|little(pro:sub|he,$0)))
example_end

Sent: no you don 't open it by pulling it .
Sem: lambda $0_{ev}.and(not(adv|by(part|pull-presp(you,pro:per|it,$0),mod|do(v|open(pro:per|you,pro:per|it,$0),$0)),$0),co|no($0))
example_end

Sent: you turn the knob .
Sem: lambda $0_{ev}.v|turn(pro:per|you,det:art|the($1,n|knob($1)),$0)
example_end

Sent: turn the knob .
Sem: lambda $0_{ev}.v|turn(you,det:art|the($1,n|knob($1)),$0)
example_end

Sent: looks like a gun ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|gun($1)),$0)))
example_end

Sent: you threw them away .
Sem: lambda $0_{ev}.and(v|throw-past(pro:per|you,pro:obj|them,$0),adv|away($0))
example_end

Sent: poor cowboys .
Sem: lambda $0_{e}.and(adj|poor($0),n|cow+boy($0))
example_end

Sent: yes why did you throw the cowboys away ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(mod|do-past(and(and(v|throw(pro:per|you,det:art|the($1,n|cow+boy($1)),$0),$2($0)),adv|away($0)),$0),co|yes($0))
example_end

Sent: bring them back tomorrow ?
Sem: lambda $0_{ev}.Q(and(and(v|bring(you,pro:obj|them,$0),adv|back($0)),adv:tem|tomorrow($0)))
example_end

Sent: why don 't you use a pencil too ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|use(pro:per|you,det:art|a($1,n|pencil($1)),$0),$2($0)),post|too($0)),$0),$0)
example_end

Sent: you 've broken that one ?
Sem: lambda $0_{ev}.Q(aux|~have(part|break-pastp(pro:per|you,pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: you see what happens ?
Sem: lambda $0_{ev}.Q(v|see(pro:per|you,lambda $1_{ev}.v|happen-3s(pro:int|what,$1),$0))
example_end

Sent: there 's your pen .
Sem: lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|pen($1)),$0),pro:exist|there($0))
example_end

Sent: I don 't need one .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: you must be need one ?
Sem: lambda $0_{ev}.cop|be(you,$0)
example_end

Sent: Adam use them only on the pad .
Sem: lambda $0_{ev}.and(v|use(you,pro:obj|them,$0),adv|only(prep|on(det:art|the($1,n|pad($1)),$0)))
example_end

Sent: because it would hurt Paul .
Sem: lambda $0_{ev}.mod|will-cond(part|hurt-pastp(pro:per|it,n:prop|paul,$0),$0)
example_end

Sent: because he 's one of your toys .
Sem: lambda $0_{ev}.att(pro:indef|one(pro:sub|he,$0),prep|of(det:poss|your($1,n|toy-pl($1))))
example_end

Sent: that 's not Perro who ?
Sem: lambda $0_{ev}.not(n:prop|perro(pro:dem|that,$0),$0)
example_end

Sent: what 's in here ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(adv|here($0)))
example_end

Sent: Perro 's what ?
Sem: n:prop|perro's($0,pro:int|what($0))
example_end

Sent: he said with those horse .
Sem: lambda $0_{ev}.and(v|say-past(pro:sub|he,$0),prep|with(pro:dem|those($1,n|horse($1)),$0))
example_end

Sent: your skin hurts ?
Sem: lambda $0_{ev}.Q(v|hurt-3s(det:poss|your($1,n|skin($1)),$0))
example_end

Sent: where is your skin ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|skin($1)),$0),$2($0))
example_end

Sent: why don 't you pick the other things up too ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(and(v|pick(pro:per|you,det:art|the($1,and(qn|other($1),n|thing-pl($1))),$0),$2($0)),adv|up($0)),post|too($0)),$0),$0)
example_end

Sent: save them .
Sem: lambda $0_{ev}.v|save(you,pro:obj|them,$0)
example_end

Sent: I see a seal .
Sem: lambda $0_{ev}.v|see(pro:sub|i,det:art|a($1,n|seal($1)),$0)
example_end

Sent: you have broken that ?
Sem: lambda $0_{ev}.Q(v|have(part|break-pastp(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: where is the top to that ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,att(adj|top($1),prep|to(pro:dem|that))),$0),$2($0))
example_end

Sent: yes I 'll be the baker .
Sem: lambda $0_{ev}.and(mod|~will(det:art|the(pro:sub|i,n|bake-dv(pro:sub|i,$0)),$0),co|yes($0))
example_end

Sent: yes I 'll be a baker .
Sem: lambda $0_{ev}.and(mod|~will(det:art|a(pro:sub|i,n|bake-dv(pro:sub|i,$0)),$0),co|yes($0))
example_end

Sent: who 's a baker ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|a($0,n|bake-dv($0,$1))
example_end

Sent: oh Adam d you know what these are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no I 'm no meat .
Sem: lambda $0_{ev}.and(not(n|meat(pro:sub|i,$0),$0),co|no($0))
example_end

Sent: because I 'm Cecile .
Sem: lambda $0_{ev}.n:prop|cecile(pro:sub|i,$0)
example_end

Sent: are those strong men ?
Sem: lambda $0_{ev}.Q(and(n|man-pl(pro:dem|those,$0),adj|strong(pro:dem|those,$0)))
example_end

Sent: one pitch .
Sem: lambda $0_{e}.det:num|one(n|pitch($0))
example_end

Sent: why don 't you go over there by yourself with that stick ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(and(and(v|go(pro:per|you,$0),$1($0)),adv|over(adv|there($0))),prep|by(pro:refl|yourself,$0)),prep|with(pro:dem|that($2,n|stick($2)),$0)),$0),$0)
example_end

Sent: don 't hit the baby .
Sem: lambda $0_{ev}.not(mod|do(v|hit-zero(you,det:art|the($1,n|baby($1)),$0),$0),$0)
example_end

Sent: you 'll hurt the little baby .
Sem: lambda $0_{ev}.mod|~will(v|hurt-zero(pro:per|you,det:art|the($1,and(adj|little($1),n|baby($1))),$0),$0)
example_end

Sent: he 'll cry .
Sem: lambda $0_{ev}.mod|~will(v|cry(pro:sub|he,$0),$0)
example_end

Sent: no don 't hit anybody with the stick .
Sem: lambda $0_{ev}.and(not(mod|do(and(n|hit(you,pro:indef|anybody,$0),prep|with(det:art|the($1,n|stick($1)),$0)),$0),$0),co|no($0))
example_end

Sent: no I wouldn 't hit the babies .
Sem: lambda $0_{ev}.and(not(mod|will(v|hit-zero(pro:sub|i,det:art|the($1,n|baby-pl($1)),$0),$0),$0),co|no($0))
example_end

Sent: give me the strong man .
Sem: lambda $0_{ev}.v|give(you,det:art|the($1,and(adj|strong($1),n|man($1))),pro:obj|me,$0)
example_end

Sent: they 're very heavy .
Sem: lambda $0_{ev}.adv|very(adj|heavy(pro:sub|they,$0))
example_end

Sent: he could probably lift you up with one hand .
Sem: lambda $0_{ev}.mod|could(and(and(and(v|lift(pro:sub|he,pro:per|you,$0),adv|probable-dadj($0)),adv|up($0)),prep|with(lambda $1_{e}.det:num|one(n|hand($1)),$0)),$0)
example_end

Sent: you can 't lift him up .
Sem: lambda $0_{ev}.not(mod|can(and(v|lift(pro:per|you,pro:obj|him,$0),adv|up($0)),$0),$0)
example_end

Sent: I 'll have_to take the stick away .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|stick($1)),$0),adv|away($0)),$0),$0)
example_end

Sent: no give me the lion .
Sem: lambda $0_{ev}.and(v|give(you,det:art|the($1,n|lion($1)),pro:obj|me,$0),co|no($0))
example_end

Sent: what d you think the lion is doing ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.aux|be-3s(part|do-presp(det:art|the($2,n|lion($2)),pro:int|what,$1),$1),$0),$0))
example_end

Sent: what do you think is happening there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.aux|be-3s(and(part|happen-presp(pro:int|what,$1),adv|there($1)),$1),$0),$0))
example_end

Sent: I think you 've had enough tea .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(part|have-pastp(pro:per|you,lambda $2_{e}.n|tea($2),$1),adj|enough($1)),$1),$0)
example_end

Sent: I think he 's growling .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(part|growl-presp(pro:sub|he,$1),$1),$0)
example_end

Sent: Adam did you hear a lion roar ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|hear(pro:per|you,lambda $1_{ev}.n|roar(det:art|a($2,n|lion($2)),$1),$0),$0))
example_end

Sent: when you were at the zoo ?
Sem: lambda $0_{ev}.Q(and(cop|be-past(pro:per|you,$0),prep|at(det:art|the($1,n|zoo($1)),$0)))
example_end

Sent: we are ?
Sem: lambda $0_{ev}.Q(cop|be-pres(pro:sub|we,$0))
example_end

Sent: alright I think I have one .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.v|have(pro:sub|i,pro:indef|one,$1),$0),adj|alright($0))
example_end

Sent: no I won 't let you smoke .
Sem: lambda $0_{ev}.and(not(mod|will(v|let-zero(pro:sub|i,lambda $1_{ev}.v|smoke(pro:per|you,$1),$0),$0),$0),co|no($0))
example_end

Sent: here 's a pen for you .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|pen($1)),$0),pro:exist|here($0)),prep|for(pro:per|you,$0))
example_end

Sent: that 's my pen .
Sem: lambda $0_{ev}.det:poss|my(pro:dem|that,n|pen(pro:dem|that,$0))
example_end

Sent: it came from my purse .
Sem: lambda $0_{ev}.and(v|come-past(pro:per|it,$0),prep|from(det:poss|my($1,n|purse($1)),$0))
example_end

Sent: whose would it be ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond($1(pro:per|it,$0),$0)
example_end

Sent: whose d you think it is in my purse ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: that 's my comb .
Sem: lambda $0_{ev}.det:poss|my(pro:dem|that,n|comb(pro:dem|that,$0))
example_end

Sent: it 's black .
Sem: lambda $0_{ev}.adj|black(pro:per|it,$0)
example_end

Sent: is my hair blue ?
Sem: lambda $0_{ev}.Q(n|blue(det:poss|my($1,n|hair($1)),$0))
example_end

Sent: fifty dollars .
Sem: lambda $0_{e}.det:num|fifty(n|dollar-pl($0))
example_end

Sent: you going give me fifty dollars ?
Sem: lambda $0_{ev}.Q(v|give(pro:per|you,lambda $1_{e}.det:num|fifty(n|dollar-pl($1)),pro:obj|me,$0))
example_end

Sent: you 're very kind .
Sem: lambda $0_{ev}.adv|very(adj|kind(pro:per|you,$0))
example_end

Sent: he doesn 't want any money ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:sub|he,qn|any($1,n|money($1)),$0),$0),$0))
example_end

Sent: I have a constant battle to keep him out_of a sweater .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,rel(and(n|constant($1),n|battle($1)),lambda $2_{ev}.and(v|keep(_,pro:obj|him,$2),prep|out_of(det:art|a($3,n|sweater($3)),$2)))),$0)
example_end

Sent: to the bank ?
Sem: Q(prep|to(det:art|the($0,n|bank($0))))
example_end

Sent: let you do what on the sidewalk ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),adv|on(det:art|the($3,n|sidewalk($3)),$1)),$0)
example_end

Sent: this afternoon yes .
Sem: lambda $0_{ev}.and(pro:dem|this($1,n|afternoon($1),$0),co|yes($0))
example_end

Sent: this afternoon .
Sem: pro:dem|this($0,n|afternoon($0))
example_end

Sent: that 's a doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|dog-dim(pro:dem|that,$0))
example_end

Sent: well let me see that doggie .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,pro:rel|that($2,n|dog-dim($2)),$1),$0),co|well($0))
example_end

Sent: what kind of dog is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|dog($2))))
example_end

Sent: he 'll come down backwards .
Sem: lambda $0_{ev}.mod|~will(and(and(v|come(pro:sub|he,$0),adv|down($0)),adv|backwards($0)),$0)
example_end

Sent: looks like Twinkles doesn 't it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(you,$0),conj|like(n:prop|twinkles,$0)),not(mod|do(pro:per|it,$0),$0)))
example_end

Sent: he can 't go ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|go(pro:sub|he,$0),$0),$0))
example_end

Sent: I don 't think you can open it .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(v|open(pro:per|you,pro:per|it,$1),$1),$0),$0),$0)
example_end

Sent: guess what it is .
Sem: lambda $0_{e}.lambda $1_{ev}.v|guess(you,$0,$1)
example_end

Sent: oh no it doesn 't open .
Sem: lambda $0_{ev}.and(not(mod|do(v|open(pro:per|it,$0),$0),$0),and(co|no($0),co|oh($0)))
example_end

Sent: what kind of bag is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|bag($2))))
example_end

Sent: those are palm trees from Hawaii .
Sem: lambda $0_{ev}.att(and_comp(n|palm(pro:dem|those,$0),n|tree-pl(pro:dem|those,$0)),prep|from(n:prop|hawaii))
example_end

Sent: two men ?
Sem: lambda $0_{e}.Q(det:num|two(n|man-pl($0)))
example_end

Sent: what kind of men ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|man-pl($2))))
example_end

Sent: what did Bengy see the seals doing when he went to the zoo ?
Sem: lambda $4_{e}.lambda $0_{ev}.conj|when(and(v|go-past(pro:sub|he,$0),prep|to(det:art|the($1,n|zoo($1)),$0)),mod|do-past(v|see(n:prop|bengy,lambda $2_{ev}.part|do-presp(det:art|the($3,n|seal-pl($3)),$4,$2),$0),$0))
example_end

Sent: what were they doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-past(part|do-presp(pro:sub|they,$1,$0),$0)
example_end

Sent: yes they went to sleep didn 't they ?
Sem: lambda $0_{ev}.Q(and(and(v|go-past(pro:sub|they,lambda $1_{ev}.n|sleep(pro:sub|they,$1),$0),not(mod|do(pro:sub|they,$0),$0)),co|yes($0)))
example_end

Sent: had a horn yes .
Sem: lambda $0_{ev}.and(v|have-past(you,det:art|a($1,n|horn($1)),$0),co|yes($0))
example_end

Sent: he was playing a little tune .
Sem: lambda $0_{ev}.aux|be-past(part|play-presp(pro:sub|he,det:art|a($1,and(adj|little($1),n|tune($1))),$0),$0)
example_end

Sent: these are holding balls on their noses .
Sem: lambda $0_{ev}.aux|be-pres(and(part|hold-presp(det:dem|these,lambda $1_{e}.n|ball-pl($1),$0),prep|on(det:poss|their($2,n|nose-pl($2)),$0)),$0)
example_end

Sent: he lost his ball .
Sem: lambda $0_{ev}.v|lose-past(pro:sub|he,det:poss|his($1,n|ball($1)),$0)
example_end

Sent: look at the clown .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|at(det:art|the($1,n|clown($1)),$0))
example_end

Sent: he 's being funny isn 't he ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|be-presp(pro:sub|he,lambda $1_{ev}.adj|fun-dn(pro:sub|he,$1),$0),$0),not(cop|be(pro:sub|he,$0),$0)))
example_end

Sent: that 's his head .
Sem: lambda $0_{ev}.det:poss|his(pro:dem|that,n|head(pro:dem|that,$0))
example_end

Sent: he doesn 't have much hair does he ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|have(pro:sub|he,adv|much($1,n|hair($1)),$0),$0),$0),mod|do-3s(pro:sub|he,$0)))
example_end

Sent: what d you think she does in the circus ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|do-3s(pro:sub|she,pro:int|what,$1),prep|in(det:art|the($2,n|circus($2)),$1)),$0),$0))
example_end

Sent: you took it off .
Sem: lambda $0_{ev}.and(v|take-past(pro:per|you,pro:per|it,$0),adv|off($0))
example_end

Sent: those are horses .
Sem: lambda $0_{ev}.n|horse-pl(pro:dem|those,$0)
example_end

Sent: d you think they look like Perro ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(cop|look(pro:sub|they,$1),conj|like(n:prop|perro,$1)),$0),$0))
example_end

Sent: your tummy made a noise ?
Sem: lambda $0_{ev}.Q(v|make-past(det:poss|your($1,n|tummy($1)),det:art|a($2,n|noise($2)),$0))
example_end

Sent: perhaps that was your tummy saying that it has enough chocolate .
Sem: lambda $0_{ev}.and(part|say-presp(you,lambda $1_{ev}.aux|have-3s(pro:per|it,adv|enough(lambda $2_{e}.n|chocolate($2)),$1),$0),adv|perhaps($0))
example_end

Sent: it 's a bag .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|bag(pro:per|it,$0))
example_end

Sent: you don 't remember ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|remember(pro:per|you,$0),$0),$0))
example_end

Sent: what d you think is in there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(aux|be-3s(pro:int|what,$1),adv|in(adv|there($1))),$0),$0))
example_end

Sent: they 're dried beans .
Sem: lambda $0_{ev}.and(n|bean-pl(pro:sub|they,$0),v|dry-past(pro:sub|they,$0))
example_end

Sent: dried beans .
Sem: lambda $0_{e}.and(v|dry-past($0),n|bean-pl($0))
example_end

Sent: pumpkin seeds ?
Sem: lambda $0_{e}.Q(and_comp(n|pumpkin($0),v|seed-3s($0)))
example_end

Sent: well nobody .
Sem: lambda $0_{ev}.and(pro:indef|nobody($0),co|well($0))
example_end

Sent: they 're put in here so_that you may play with the bag .
Sem: lambda $0_{ev}.conj|so_that(mod|may(and(v|play(pro:per|you,$0),prep|with(det:art|the($1,n|bag($1)),$0)),$0),aux|~be(and(part|put-pastp(pro:sub|they,$0),prep|in(adv|here($0))),$0))
example_end

Sent: bean bag .
Sem: lambda $0_{e}.and_comp(n|bean($0),n|bag($0))
example_end

Sent: well you go over there and throw it up .
Sem: lambda $0_{ev}.and(and(and(v|throw(pro:per|you,pro:per|it,$0),adv|over(adv|there($0))),adv|up($0)),co|well($0))
example_end

Sent: no I think we 'd better not throw it up like that .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.not(mod|~genmod(and(and(and(v|throw(pro:sub|we,pro:per|it,$1),adj|good-cp($1)),adv|up($1)),prep|like(pro:dem|that,$1)),$1),$1),$0),co|no($0))
example_end

Sent: you just throw it to me .
Sem: lambda $0_{ev}.and(and(v|throw(pro:per|you,pro:per|it,$0),adv|just($0)),prep|to(pro:obj|me,$0))
example_end

Sent: why are you knocking them over ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|knock-presp(pro:per|you,pro:obj|them,$0),$1($0)),adv|over($0)),$0)
example_end

Sent: are you going to eat it ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|eat(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: okay honey .
Sem: lambda $0_{ev}.and(n|honey($0),co|okay($0))
example_end

Sent: why aren 't you eating it ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(aux|be(and(part|eat-presp(pro:per|you,pro:per|it,$0),$1($0)),$0),$0)
example_end

Sent: what are you putting on your head ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,$1,$0),prep|on(det:poss|your($2,n|head($2)),$0)),$0)
example_end

Sent: look up at the light .
Sem: lambda $0_{ev}.and(and(co|look(you,$0),adv|up($0)),prep|at(det:art|the($1,n|light($1)),$0))
example_end

Sent: is that you talking ?
Sem: lambda $0_{ev}.Q(part|talk-presp(you,$0))
example_end

Sent: who is honey ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n|honey,$0)
example_end

Sent: Adam d you want to write on your money ?
Sem: lambda $0_{ev}.Q(v|do(v|want(pro:per|you,lambda $1_{ev}.and(v|write(pro:per|you,$1),prep|on(det:poss|your($2,n|money($2)),$1)),$0),$0))
example_end

Sent: I don 't see it .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: Adam you 'd better put the cover on first .
Sem: lambda $0_{ev}.mod|~genmod_good-cp(and(and(v|put-zero(pro:per|you,det:art|the($1,n|cover($1)),$0),adv|on($0)),adv|first($0)),$0)
example_end

Sent: yes you 'd better put the top on .
Sem: lambda $0_{ev}.and(mod|~genmod_good-cp(and(v|put-zero(pro:per|you,det:art|the($1,n|top($1)),$0),adv|on($0)),$0),co|yes($0))
example_end

Sent: did you make this toy ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|make(pro:per|you,pro:dem|this($1,n|toy($1)),$0),$0))
example_end

Sent: does this horse have a saddle ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(pro:dem|this($1,n|horse($1)),det:art|a($2,n|saddle($2)),$0),$0))
example_end

Sent: it doesn 't have a saddle ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(pro:per|it,det:art|a($1,n|saddle($1)),$0),$0),$0))
example_end

Sent: the diaper man .
Sem: det:art|the($0,and_comp(n|diaper($0),n|man($0)))
example_end

Sent: what kind of game d you have Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|game($3)))),$0),$0)
example_end

Sent: you match them ?
Sem: lambda $0_{ev}.Q(v|match(pro:per|you,pro:obj|them,$0))
example_end

Sent: well let 's put them all together first .
Sem: lambda $0_{ev}.and(v:obj|let(you,lambda $1_{ev}.and(and(v|put-zero(pro:obj|~us,post|all(pro:obj|them),$1),adv|together($1)),adv|first($1)),$0),co|well($0))
example_end

Sent: well how do you know ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|know(pro:per|you,$0),$1($0)),$0),co|well($0))
example_end

Sent: she 's the copilot .
Sem: lambda $0_{ev}.det:art|the(pro:sub|she,n|pilot(pro:sub|she,$0))
example_end

Sent: she helps drive the rocket .
Sem: lambda $0_{ev}.v|help-3s(pro:sub|she,$0)
example_end

Sent: yes you do .
Sem: lambda $0_{ev}.and(v|do(pro:per|you,$0),co|yes($0))
example_end

Sent: that 's the landing tower .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and_comp(part|land-presp(pro:dem|that,$0),n|tower(pro:dem|that,$0)))
example_end

Sent: those two are just alike .
Sem: lambda $0_{ev}.adv|just(adv|alike(pro:dem|those($1,det:num|two($1)),$0))
example_end

Sent: these are control panels .
Sem: lambda $0_{ev}.and_comp(n|control(pro:dem|these,$0),n|panel-pl(pro:dem|these,$0))
example_end

Sent: space scanners .
Sem: lambda $0_{e}.and_comp(n|space($0),n|scan-dv($0))
example_end

Sent: yes it is round like a circle .
Sem: lambda $0_{e}.lambda $1_{ev}.adv|round($0,$1)
example_end

Sent: I 'll help you take one .
Sem: lambda $0_{ev}.mod|~will(v|help(pro:sub|i,lambda $1_{ev}.v|take(pro:per|you,pro:indef|one,$1),$0),$0)
example_end

Sent: no I want you to sit up .
Sem: lambda $0_{ev}.and(v|want(pro:sub|i,lambda $1_{ev}.and(v|sit(pro:per|you,$1),adv|up($1)),$0),co|no($0))
example_end

Sent: you 're sitting on the others dear .
Sem: lambda $0_{ev}.aux|~be(and(part|sit-presp(pro:per|you,$0),prep|on(det:art|the($1,n:pt|others($1)),$0)),$0)
example_end

Sent: sit up so you may have another card .
Sem: lambda $0_{ev}.conj|so(mod|may(v|have(pro:per|you,qn|another($1,n|card($1)),$0),$0),and(v|sit(you,$0),adv|up($0)))
example_end

Sent: take one .
Sem: lambda $0_{ev}.v|take(you,pro:indef|one,$0)
example_end

Sent: oh look there 's another one .
Sem: lambda $0_{ev}.and(and(and(cop|~be(qn|another($1,pro:indef|one($1)),$0),pro:exist|there($0)),co|look(you,$0)),co|oh($0))
example_end

Sent: you may take another turn .
Sem: lambda $0_{ev}.mod|may(v|take(pro:per|you,qn|another($1,n|turn($1)),$0),$0)
example_end

Sent: yes you have .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,$0),co|yes($0))
example_end

Sent: oh you didn 't finish yet .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|finish(pro:per|you,$0),adv|yet($0)),$0),$0),co|oh($0))
example_end

Sent: yes that 's right .
Sem: lambda $0_{ev}.and(n|right(pro:dem|that,$0),co|yes($0))
example_end

Sent: is there another one like that ?
Sem: lambda $0_{ev}.Q(cop|be-3s(qn|another($1,att(pro:indef|one,prep|like(pro:dem|that),$1)),$0))
example_end

Sent: no don 't spread them over the floor like that .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|spread-zero(you,pro:obj|them,$0),prep|over(det:art|the($1,n|floor($1)),$0)),prep|like(pro:dem|that,$0)),$0),$0),co|no($0))
example_end

Sent: do you know what that one is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: that 's a space scanner .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|space(pro:dem|that,$0),n|scan-dv(pro:dem|that,$0)))
example_end

Sent: you use it to look into space with .
Sem: lambda $0_{ev}.v|use(pro:per|you,lambda $1_{ev}.and(cop|look(pro:per|it,$1),prep|into(lambda $2_{e}.n|space($2),$1)),$0)
example_end

Sent: and this is blast .
Sem: lambda $0_{ev}.n|blast+off(pro:dem|this,$0)
example_end

Sent: five four three two one zero blast .
Sem: lambda $0_{e}.det:num|five($0)
example_end

Sent: that 's a space chart .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|space(pro:dem|that,$0),n|chart(pro:dem|that,$0)))
example_end

Sent: you match all of them together that you can .
Sem: lambda $0_{ev}.pro:rel|that(mod|can(pro:per|you,$0),and(and(v|match(pro:per|you,$0),prep|of(qn|all($1,pro:obj|them($1)),$0)),adv|together($0)))
example_end

Sent: and here 's the pilot .
Sem: lambda $0_{ev}.and(cop|~be(det:art|the($1,n|pilot($1)),$0),pro:exist|here($0))
example_end

Sent: the pilot drives the spaceship see ?
Sem: lambda $0_{ev}.Q(and(v|drive-3s(det:art|the($1,n|pilot($1)),det:art|the($2,n|space+ship($2)),$0),v|see(you,$0)))
example_end

Sent: let 's put them all together first .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(and(v|put-zero(pro:obj|~us,post|all($2,pro:obj|them($2)),$1),adv|together($1)),adv|first($1)),$0)
example_end

Sent: this is the landing tower .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and_comp(part|land-presp(pro:dem|this,$0),n|tower(pro:dem|this,$0)))
example_end

Sent: so_that they 're go where they want to go .
Sem: lambda $0_{ev}.cop|~be(v|go(pro:sub|they,lambda $1_{ev}.and(v|want(pro:sub|they,lambda $2_{ev}.v|go(pro:sub|they,$2),$1),adv:int|where($1)),$0),$0)
example_end

Sent: it 's for the pilot to get out .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,lambda $1_{ev}.and(v|get(pro:per|it,$1),adv|out($1)),$0),conj|for(det:art|the($2,n|pilot($2)),$0))
example_end

Sent: no but what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,$0),co|no($0))
example_end

Sent: that 's five four three two one zero .
Sem: lambda $0_{e}.det:num|five($0)
example_end

Sent: and what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: what comes first ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|come-3s($1,$0),adv|first($0))
example_end

Sent: you 'll bend them .
Sem: lambda $0_{ev}.mod|~will(v|bend(pro:per|you,pro:obj|them,$0),$0)
example_end

Sent: that 's the copilot .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|pilot(pro:dem|that,$0))
example_end

Sent: that 's the seat I guess and some of the controls of the spaceship .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.det:art|the(pro:dem|that,n|seat(pro:dem|that,$1)),$0)
example_end

Sent: no you don 't throw that away .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|throw(pro:per|you,pro:rel|that,$0),adv|away($0)),$0),$0),co|no($0))
example_end

Sent: why d you have_to throw that away ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(and(and(v|throw(pro:per|you,pro:dem|that,$0),$1($0)),adv|away($0)),$0),$0)
example_end

Sent: no don 't throw it away .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|throw(you,pro:per|it,$0),adv|away($0)),$0),$0),co|no($0))
example_end

Sent: you know what those are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: they 're more than numbers .
Sem: lambda $0_{ev}.n|number-pl(pro:sub|they,$0)
example_end

Sent: they 're directions .
Sem: lambda $0_{ev}.n|direction-pl(pro:sub|they,$0)
example_end

Sent: yes they are .
Sem: lambda $0_{ev}.and(cop|be-pres(pro:sub|they,$0),co|yes($0))
example_end

Sent: it 's going to pop ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|it,lambda $1_{ev}.n|pop(pro:per|it,$1),$0),$0))
example_end

Sent: look what he has on his head .
Sem: lambda $0_{ev}.co|look(you,lambda $1_{ev}.and(aux|have-3s(pro:sub|he,pro:int|what,$1),adv|on(det:poss|his($2,n|head($2)),$1)),$0)
example_end

Sent: yes he is the pilot but what is this on his head ?
Sem: lambda $0_{ev}.and(det:art|the(pro:sub|he,n|pilot(pro:sub|he,$0)),co|yes($0))
example_end

Sent: what 're you going to do with it ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),prep|with(pro:per|it,$1)),$0),$0)
example_end

Sent: put them in the box ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:obj|them,$0),prep|in(det:art|the($1,n|box($1)),$0)))
example_end

Sent: like a Jack_a_weasel .
Sem: prep|like(det:art|a($0,n:prop|jack_a_weasel($0)))
example_end

Sent: spread them .
Sem: lambda $0_{ev}.v|spread-zero(you,pro:obj|them,$0)
example_end

Sent: what is a Jack_a_weasel ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n:prop|jack_a_weasel($2)),$0)
example_end

Sent: d you know what ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|know(pro:per|you,$1,$0),$0)
example_end

Sent: yes you can sit on me .
Sem: lambda $0_{ev}.and(mod|can(and(v|sit(pro:per|you,$0),prep|on(pro:obj|me,$0)),$0),co|yes($0))
example_end

Sent: you bent that game didn 't you ?
Sem: lambda $0_{ev}.Q(and(v|bend-past(pro:per|you,det:dem|that($1,n|game($1)),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: I don 't know why .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,$0),$1($0)),$0),$0)
example_end

Sent: because you had it in your pocket .
Sem: lambda $0_{ev}.and(v|have-past(pro:per|you,pro:per|it,$0),prep|in(det:poss|your($1,n|pocket($1)),$0))
example_end

Sent: what d you have in your pocket today ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(and(v|have(pro:per|you,$1,$0),prep|in(det:poss|your($2,n|pocket($2)),$0)),adv:tem|today($0)),$0)
example_end

Sent: how did you get zeros in your pocket ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(and(v|get(pro:per|you,lambda $1_{e}.det:num|zero-pl($1),$0),$2($0)),prep|in(det:poss|your($3,n|pocket($3)),$0)),$0)
example_end

Sent: he 's a happy fellow ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,and(n|fellow(pro:sub|he,$0),adj|happy(pro:sub|he,$0))))
example_end

Sent: why is he so happy ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|so($1(adj|happy(pro:sub|he,$0)))
example_end

Sent: been sleep .
Sem: lambda $0_{ev}.aux|be-pastp(n|sleep(you,$0),$0)
example_end

Sent: they are going to sleep ?
Sem: lambda $0_{ev}.Q(aux|be-pres(part|go-presp(pro:sub|they,lambda $1_{ev}.v|sleep(pro:sub|they,$1),$0),$0))
example_end

Sent: what shall we call the babies ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|shall(v|call(pro:sub|we,det:art|the($1,n|baby-pl($1)),$2,$0),$0)
example_end

Sent: baby Bozos .
Sem: att(n:prop|bozos,lambda $0_{e}.n|baby($0))
example_end

Sent: here 's one more baby .
Sem: lambda $0_{ev}.and(cop|~be(lambda $1_{e}.and(qn|more($1),pro:indef|one(n|baby($1))),$0),pro:exist|here($0))
example_end

Sent: oh my_goodness .
Sem: lambda $0_{ev}.and(co|my_goodness($0),co|oh($0))
example_end

Sent: what happened to one two three ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|one($2),$0))
example_end

Sent: yes what happened to one two three ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|one($2),$0)),co|yes($0))
example_end

Sent: where does this baby have his hands ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do-3s(and(v|have(pro:dem|this($1,n|baby($1)),det:poss|his($2,n|hand-pl($2)),$0),$3($0)),$0)
example_end

Sent: why d you think he has his hands on his tummy ?
Sem: lambda $4_{e}.lambda $0_{ev}.mod|do(and(v|think(pro:per|you,lambda $1_{ev}.and(v|have-3s(pro:sub|he,det:poss|his($2,n|hand-pl($2)),$1),prep|on(det:poss|his($3,n|tummy($3)),$1)),$0),$4($0)),$0)
example_end

Sent: he 's dressing up ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|dress-presp(pro:sub|he,$0),adv|up($0)),$0))
example_end

Sent: what are you putting around his neck ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,$1,$0),prep|around(det:poss|his($2,n|neck($2)),$0)),$0)
example_end

Sent: oh bandana oh this must be a cowboy .
Sem: lambda $0_{ev}.and(and(and(mod|must(det:art|a(pro:dem|this,n|cow+boy(pro:dem|this,$0)),$0),lambda $1_{e}.n|bandana($1)),co|oh($0)),co|oh($0))
example_end

Sent: did he take a bath Adam ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|take(pro:sub|he,det:art|a($1,n|bath($1)),$0),$0))
example_end

Sent: they 're going to sleep in the Wintertime .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|they,lambda $1_{ev}.and(n|sleep(pro:sub|they,$1),prep|in(det:art|the($2,n:prop|wintertime($2)),$1)),$0),$0)
example_end

Sent: do they all fit in there Adam ?
Sem: lambda $0_{ev}.Q(mod|do(and(part|fit-pastp(post|all($1,pro:sub|they($1)),$0),prep|in(adv|there($0))),$0))
example_end

Sent: they almost fit ?
Sem: lambda $0_{ev}.Q(and(v|fit-zero(pro:sub|they,$0),adv|almost($0)))
example_end

Sent: they are taking baths .
Sem: lambda $0_{ev}.aux|be-pres(part|take-presp(pro:sub|they,lambda $1_{e}.n|bath-pl($1),$0),$0)
example_end

Sent: sleeping in the bath .
Sem: lambda $0_{ev}.and(part|sleep-presp(you,$0),prep|in(det:art|the($1,n|bath($1)),$0))
example_end

Sent: did you ever do that ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|do(pro:per|you,pro:dem|that,$0),adv|ever($0)),$0))
example_end

Sent: ride on that ?
Sem: lambda $0_{ev}.Q(and(n|ride(you,$0),prep|on(pro:dem|that,$0)))
example_end

Sent: can you ride on that ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|ride(pro:per|you,$0),prep|on(pro:dem|that,$0)),$0))
example_end

Sent: you are too big .
Sem: lambda $0_{ev}.adv|too(adj|big(pro:per|you,$0))
example_end

Sent: I think so too .
Sem: lambda $0_{ev}.and(and(v|think(pro:sub|i,$0),conj|so($0)),post|too($0))
example_end

Sent: he 's hanging out_of your pocket .
Sem: lambda $0_{ev}.aux|~be(and(part|hang-presp(pro:sub|he,$0),prep|out_of(det:poss|your($1,n|pocket($1)),$0)),$0)
example_end

Sent: that doesn 't come off dear .
Sem: lambda $0_{ev}.not(mod|do(and(v|come(pro:dem|that,$0),prep|off($0)),$0),$0)
example_end

Sent: don 't throw them .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,pro:obj|them,$0),$0),$0)
example_end

Sent: no I 'll be glad if you will hand it to me .
Sem: lambda $0_{ev}.and(conj|if(mod|will(and(v|hand(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),$0),mod|~will(adj|glad(pro:sub|i,$0),$0)),co|no($0))
example_end

Sent: what happened to your babies ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|baby-pl($2)),$0))
example_end

Sent: do they have their blankets ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:sub|they,det:poss|their($1,n|blanket-pl($1)),$0),$0))
example_end

Sent: about to wake up .
Sem: lambda $0_{ev}.and(and(v|wake(you,$0),adv|about($0)),adv|up($0))
example_end

Sent: I almost dressed you ?
Sem: lambda $0_{ev}.Q(and(v|dress-past(pro:sub|i,pro:per|you,$0),adv|almost($0)))
example_end

Sent: I dressed you up like a baby elephant !
Sem: lambda $0_{ev}.and(and(v|dress-past(pro:sub|i,pro:per|you,$0),adv|up($0)),prep|like(det:art|a($1,and(n|baby($1),n|elephant($1))),$0))
example_end

Sent: there are some seals .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some($1,n|seal-pl($1)),$0),adv|there($0))
example_end

Sent: birthday time .
Sem: lambda $0_{e}.and_comp(n|birth+day($0),n|time($0))
example_end

Sent: eat my lunch ?
Sem: lambda $0_{ev}.Q(v|eat(you,det:poss|my($1,n|lunch($1)),$0))
example_end

Sent: and then may I look ?
Sem: lambda $0_{ev}.Q(mod|may(and(cop|look(pro:sub|i,$0),adv:tem|then($0)),$0))
example_end

Sent: may I look now ?
Sem: lambda $0_{ev}.Q(mod|may(and(cop|look(pro:sub|i,$0),adv|now($0)),$0))
example_end

Sent: I 've finished my lunch .
Sem: lambda $0_{ev}.aux|~have(part|finish-pastp(pro:sub|i,det:poss|my($1,n|lunch($1)),$0),$0)
example_end

Sent: three dollies .
Sem: lambda $0_{e}.det:num|three(n|doll-dim($0))
example_end

Sent: two seals one strong man .
Sem: and(lambda $0_{e}.det:num|two(n|seal-pl($0)),lambda $1_{e}.and(adj|strong($1),pro:indef|one(n|man($1))))
example_end

Sent: one bareback rider .
Sem: lambda $0_{e}.and(adv|bareback($0),det:num|one(n|ride-dv($0)))
example_end

Sent: and a train .
Sem: det:art|a($0,n|train($0))
example_end

Sent: a circus train .
Sem: det:art|a($0,and_comp(n|circus($0),n|train($0)))
example_end

Sent: that 's not a circus train those are circus men ?
Sem: lambda $0_{ev}.Q(not(and(det:art|a(pro:dem|that,and_comp(n|circus(pro:dem|that,$0),v|train(pro:dem|that,$0))),and_comp(n|circus(pro:dem|those,$0),n|man-pl(pro:dem|those,$0))),$0))
example_end

Sent: they are standing ?
Sem: lambda $0_{ev}.Q(aux|be-pres(part|stand-presp(pro:sub|they,$0),$0))
example_end


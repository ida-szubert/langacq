Sent: so you can put it in a notebook if you like .
Sem: lambda $0_{ev}.conj|if(co|like(pro:per|you,$0),mod|can(and(and(v|put-zero(pro:per|you,pro:per|it,$0),co|so($0)),prep|in(det:art|a($1,n|notebook($1)),$0)),$0))
example_end

Sent: shall we look at these first ?
Sem: lambda $0_{ev}.Q(mod|shall(and(and(cop|look(pro:sub|we,$0),prep|at(pro:dem|these,$0)),adj|first($0)),$0))
example_end

Sent: it 's a watch ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|watch(pro:per|it,$0)))
example_end

Sent: you could use the paper .
Sem: lambda $0_{ev}.mod|could(v|use(pro:per|you,det:art|the($1,n|paper($1)),$0),$0)
example_end

Sent: no he can 't have one .
Sem: lambda $0_{ev}.and(not(mod|can(v|have(pro:sub|he,pro:indef|one,$0),$0),$0),co|no($0))
example_end

Sent: he 's too little .
Sem: lambda $0_{ev}.adv|too(adj|little(pro:sub|he,$0))
example_end

Sent: you going to tell her a story ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.v|tell(pro:per|you,det:art|a($2,n|story($2)),pro:obj|her,$1),$0))
example_end

Sent: no that 's alright Adam .
Sem: lambda $0_{ev}.and(adj|alright(pro:dem|that,$0),co|no($0))
example_end

Sent: she doesn 't have any games in that one Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:sub|she,qn|any($1,n|game-pl($1)),$0),prep|in(pro:dem|that($2,pro:indef|one($2)),$0)),$0),$0)
example_end

Sent: it 's a mirror ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|mirror(pro:per|it,$0)))
example_end

Sent: what do you see in the mirror ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),prep|in(det:art|the($2,n|mirror($2)),$0)),$0)
example_end

Sent: what kind of watch ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|watch($2))))
example_end

Sent: does it look like Daddy 's watch ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(cop|look(pro:per|it,$0),conj|like(n:prop|daddy's($1,n|watch($1)),$0)),$0))
example_end

Sent: it looks like Daddy 's watch ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,$0),prep|like(n:prop|daddy's($1,n|watch($1)),$0)))
example_end

Sent: it doesn 't have a band .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|it,det:art|a($1,n|band($1)),$0),$0),$0)
example_end

Sent: maybe it 's in here .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:per|it,$0),adv|maybe($0)),adv|in(adv|here($0)))
example_end

Sent: oh what 're you going to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,$2,$1),$0),$0),co|oh($0))
example_end

Sent: okay I 'll hold it .
Sem: lambda $0_{ev}.and(mod|~will(v|hold(pro:sub|i,pro:per|it,$0),$0),co|okay($0))
example_end

Sent: it won 't stay there .
Sem: lambda $0_{ev}.not(mod|will(and(cop|stay(pro:per|it,$0),adv|there($0)),$0),$0)
example_end

Sent: you 'd better take it back to Urs .
Sem: lambda $0_{ev}.mod|~genmod_good-cp(and(and(v|take(pro:per|you,pro:per|it,$0),adv|back($0)),prep|to(n:prop|ursula,$0)),$0)
example_end

Sent: you 've never seen a watch ?
Sem: lambda $0_{ev}.Q(aux|~have(and(part|see-pastp(pro:per|you,det:art|a($1,n|watch($1)),$0),adv|never($0)),$0))
example_end

Sent: oh that 's not a chair .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|chair(pro:dem|that,$0)),$0),co|oh($0))
example_end

Sent: I think you 'd better take the watch back to Urs .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod_good-cp(and(and(v|take(pro:per|you,det:art|the($2,n|watch($2)),$1),adv|back($1)),prep|to(n:prop|ursula,$1)),$1),$0)
example_end

Sent: Adam let me see .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,$1),$0)
example_end

Sent: how did you attach that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|attach(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: we could put this in the box .
Sem: lambda $0_{ev}.mod|could(and(v|put-zero(pro:sub|we,pro:dem|this,$0),prep|in(det:art|the($1,n|box($1)),$0)),$0)
example_end

Sent: I know what you can do .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.mod|can(v|do(pro:per|you,pro:int|what,$1),$1),$0)
example_end

Sent: why don 't you use some of this ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|use(pro:per|you,qn|some(pro:dem|this),$0),$1($0)),$0),$0)
example_end

Sent: not cut it off .
Sem: lambda $0_{ev}.not(and(v|cut-zero(you,pro:per|it,$0),adv|off($0)),$0)
example_end

Sent: no look .
Sem: lambda $0_{ev}.and(co|look(you,$0),co|no($0))
example_end

Sent: cut it off on there .
Sem: lambda $0_{ev}.and(and(v|cut-zero(you,pro:per|it,$0),adv|off($0)),prep|on(adv|there($0)))
example_end

Sent: well cut it off .
Sem: lambda $0_{ev}.and(and(v|cut-zero(you,pro:per|it,$0),adv|off($0)),co|well($0))
example_end

Sent: I 'm helping you cut it .
Sem: lambda $0_{ev}.aux|~be(part|help-presp(pro:sub|i,lambda $1_{ev}.v|cut-zero(pro:per|you,pro:per|it,$1),$0),$0)
example_end

Sent: see there where your finger is ?
Sem: lambda $0_{ev}.Q(and(v|see(you,lambda $1_{ev}.and(cop|be-3s(det:poss|your($2,n|finger($2)),$1),adv:int|where($1)),$0),adv|there($0)))
example_end

Sent: oh another one .
Sem: lambda $0_{ev}.and(qn|another($1,pro:indef|one($1),$0),co|oh($0))
example_end

Sent: Adam shall I help you cut it off ?
Sem: lambda $0_{ev}.Q(mod|shall(v|help(pro:sub|i,lambda $1_{ev}.and(v|cut-zero(pro:per|you,pro:per|it,$1),adv|off($1)),$0),$0))
example_end

Sent: that 's enough Adam .
Sem: lambda $0_{ev}.adj|enough(pro:dem|that,$0)
example_end

Sent: d you want to stand up there ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|stand(pro:per|you,$1),adv|up(adv|there($1))),$0),$0))
example_end

Sent: what 's my name ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:poss|my($0,n|name($0,$1))
example_end

Sent: d you know that ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: oh I 'm sorry .
Sem: lambda $0_{ev}.and(adj|sorry(pro:sub|i,$0),co|oh($0))
example_end

Sent: I was crossing the street .
Sem: lambda $0_{ev}.aux|be-past(part|cross-presp(pro:sub|i,det:art|the($1,n|street($1)),$0),$0)
example_end

Sent: how will I get to the other side ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(and(v|get(pro:sub|i,$0),$1($0)),prep|to(det:art|the($2,and(qn|other($2),n|side($2))),$0)),$0)
example_end

Sent: what d you have_to do when you cross the street ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|cross(pro:per|you,det:art|the($1,n|street($1)),$0),mod:aux|have_to(mod|do(v|do(pro:per|you,$2,$0),$0),$0))
example_end

Sent: that 's right you look both ways .
Sem: lambda $0_{ev}.and(adj|right(pro:dem|that,$0),cop|look(pro:per|you,qn|both($1,n|way-pl($1)),$0))
example_end

Sent: no you don 't kick cars do you ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|kick(pro:per|you,lambda $1_{e}.n|car-pl($1),$0),$0),$0),v|do(pro:per|you,$0)),co|no($0)))
example_end

Sent: tell you a story ?
Sem: lambda $0_{ev}.Q(v|tell(you,det:art|a($1,n|story($1)),pro:per|you,$0))
example_end

Sent: why don 't you tell us a story ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|tell(pro:per|you,det:art|a($1,n|story($1)),pro:obj|us,$0),$2($0)),$0),$0)
example_end

Sent: where did you see boats ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,lambda $1_{e}.n|boat-pl($1),$0),$2($0)),$0)
example_end

Sent: some kind of bug .
Sem: qn|some($0,att(n|kind($0),prep|of(lambda $1_{e}.n|bug($1))))
example_end

Sent: you won 't have anymore tape .
Sem: lambda $0_{ev}.not(mod|will(aux|have(pro:per|you,lambda $1_{e}.and(adv|anymore($1),n|tape($1)),$0),$0),$0)
example_end

Sent: Adam where did you see the boats ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|boat-pl($1)),$0),$2($0)),$0)
example_end

Sent: where were you Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-past(pro:per|you,$0),$1($0))
example_end

Sent: were you lost ?
Sem: lambda $0_{ev}.Q(v|lose-past(pro:per|you,$0))
example_end

Sent: see if it can fly .
Sem: lambda $0_{ev}.v|see(you,lambda $1_{ev}.mod|can(v|fly(pro:per|it,$1),$1),$0)
example_end

Sent: that 's a duck ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|duck(pro:dem|that,$0)))
example_end

Sent: what about the tail ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|tail($0))))
example_end

Sent: what does the duck do in the water ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|do(det:art|the($1,n|duck($1)),$2,$0),prep|in(det:art|the($3,n|water($3)),$0)),$0)
example_end

Sent: he 's swimming .
Sem: lambda $0_{ev}.aux|~be(part|swim-presp(pro:sub|he,$0),$0)
example_end

Sent: it might frighten Paul .
Sem: lambda $0_{ev}.mod|might(v|frighten(pro:per|it,n:prop|paul,$0),$0)
example_end

Sent: no we already have a road .
Sem: lambda $0_{ev}.and(and(v|have(pro:sub|we,det:art|a($1,n|road($1)),$0),adv|already($0)),co|no($0))
example_end

Sent: a street light .
Sem: det:art|a($0,and_comp(n|street($0),n|light($0)))
example_end

Sent: with that .
Sem: prep|with(pro:dem|that)
example_end

Sent: how can I make a street light ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(v|make(pro:sub|i,det:art|a($1,and_comp(n|street($1),n|light($1))),$0),$2($0)),$0)
example_end

Sent: you show me how .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|show(pro:per|you,pro:obj|me,$0),$1($0))
example_end

Sent: a steam shovel !
Sem: det:art|a($0,and_comp(n|steam($0),n|shovel($0)))
example_end

Sent: I 'm making a street light .
Sem: lambda $0_{ev}.aux|~be(part|make-presp(pro:sub|i,det:art|a($1,and_comp(n|street($1),n|light($1))),$0),$0)
example_end

Sent: I don 't think we need another one do we ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:sub|we,qn|another($2,pro:indef|one($2)),$1),$0),$0),$0),mod|do(pro:sub|we,$0)))
example_end

Sent: don 't you think Robin has_to look both ways when he crosses the street ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.conj|when(v|cross-3s(pro:sub|he,det:art|the($2,n|street($2)),$1),mod:aux|has_to(cop|look(n:prop|robin,qn|both($3,n|way-pl($3)),$1),$1)),$0),$0),$0))
example_end

Sent: do I want you to do what ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:sub|i,lambda $1_{ev}.v|do(pro:per|you,$2,$1),$0),$0)
example_end

Sent: no that 's not nice to do .
Sem: lambda $0_{ev}.and(not(adj|nice(pro:dem|that,lambda $1_{ev}.v|do(pro:dem|that,$1),$0),$0),co|no($0))
example_end

Sent: that 's a convertible .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|convertible(pro:dem|that,$0))
example_end

Sent: well it doesn 't seem to have a top .
Sem: lambda $0_{ev}.and(not(mod|do(cop|seem(pro:per|it,lambda $1_{ev}.v|have(pro:per|it,det:art|a($2,n|top($2)),$1),$0),$0),$0),co|well($0))
example_end

Sent: you just said you saw ducks .
Sem: lambda $0_{ev}.and(v|say-past(pro:per|you,lambda $1_{ev}.v|saw(pro:per|you,lambda $2_{e}.n|duck-pl($2),$1),$0),adv|just($0))
example_end

Sent: where did you see the ducks ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|duck-pl($1)),$0),$2($0)),$0)
example_end

Sent: at the river ?
Sem: Q(prep|at(det:art|the($0,n|river($0))))
example_end

Sent: was that a river ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|river(pro:rel|that,$0)))
example_end

Sent: where was the water ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-past(det:art|the($1,n|water($1)),$0),$2($0))
example_end

Sent: I know where you went .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.and(v|go-past(pro:per|you,$1),pro:rel|where($1)),$0)
example_end

Sent: did you see a boat with a swan in back of it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,att(n|boat($1),adv|back(prep|with(det:art|a($2,n|swan($2)))))),$0),$0))
example_end

Sent: did you answer Urs ?
Sem: lambda $0_{ev}.Q(v|do-past(v|answer(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: did you tell Urs ?
Sem: lambda $0_{ev}.Q(v|do-past(v|tell(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: did you go on the boat ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|go(pro:per|you,$0),prep|on(det:art|the($1,n|boat($1)),$0)),$0))
example_end

Sent: where was the swan boat Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-past(det:art|the($1,and_comp(n|swan($1),n|boat($1))),$0),$2($0))
example_end

Sent: do you know where the swan boat was ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-past(det:art|the($2,and_comp(n|swan($2),n|boat($2))),$1),adv:int|where($1)),$0),$0))
example_end

Sent: you broke another one ?
Sem: lambda $0_{ev}.Q(v|break-past(pro:per|you,qn|another($1,pro:indef|one($1)),$0))
example_end

Sent: you go put it up .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|up($0))
example_end

Sent: you put this part on the floor .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:dem|this($1,n|part($1)),$0),prep|on(det:art|the($2,n|floor($2)),$0))
example_end

Sent: you 've used up all of the tape .
Sem: lambda $0_{ev}.aux|~have(and(part|use-pastp(pro:per|you,pro:indef|all(det:art|the($1,n|tape($1))),$0),adv|up($0)),$0)
example_end

Sent: open the alligator ?
Sem: lambda $0_{ev}.Q(v|open(you,det:art|the($1,n|alligator($1)),$0))
example_end

Sent: what 's an alligator ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|alligator($2)),$0)
example_end

Sent: well what 's an elevator ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|a($2,n|elevator($2)),$0),co|well($0))
example_end

Sent: put what up ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(you,$1,$0),adv|up($0))
example_end

Sent: why don 't you tell me that story ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|tell(pro:per|you,pro:dem|that($1,n|story($1)),pro:obj|me,$0),$2($0)),$0),$0)
example_end

Sent: you read it to me okay ?
Sem: lambda $0_{ev}.Q(and(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),adj|okay($0)))
example_end

Sent: you read it to me .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0))
example_end

Sent: what kind of doggie was he ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|he,att(n|kind(pro:sub|he,$0),prep|of(lambda $2_{e}.n|dog-dim($2))))
example_end

Sent: what kind of house did he live in ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(adj|live(pro:sub|he,$0),adv|in($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|house($3)))),$0)),$0)
example_end

Sent: oh a barn .
Sem: lambda $0_{ev}.and(det:art|a($1,n|barn($1),$0),co|oh($0))
example_end

Sent: did he have something pretty to wear ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|have(pro:sub|he,lambda $1_{ev}.v|wear(lambda $2_{e}.and(adj|pretty($2),pro:indef|something($2)),$1),$0),$0))
example_end

Sent: what did he have ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|have(pro:sub|he,$1,$0),$0)
example_end

Sent: what kind of bed did he sleep on ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|sleep(pro:sub|he,$0),adv|on($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|bed($3)))),$0)),$0)
example_end

Sent: what kind of yard did he have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(v|have(pro:sub|he,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|yard($3)))),$0),$0)
example_end

Sent: why was Peppy lonely ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(adv|lone-dadj(n:prop|peppy,$0))
example_end

Sent: a big moving truck .
Sem: det:art|a($0,and(n:gerund|move-presp($0),and(adj|big($0),n|truck($0))))
example_end

Sent: you read that story to me .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,pro:dem|that($1,n|story($1)),$0),prep|to(pro:obj|me,$0))
example_end

Sent: is that a pony ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pony(pro:rel|that,$0)))
example_end

Sent: is that a zebra ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|zebra(pro:rel|that,$0)))
example_end

Sent: or a donkey .
Sem: det:art|a($0,n|donkey($0))
example_end

Sent: those are the wise men .
Sem: lambda $0_{ev}.det:art|the(pro:dem|those,and(n|man-pl(pro:dem|those,$0),adj|wise(pro:dem|those,$0)))
example_end

Sent: I don 't think you need a rifle .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,det:art|a($2,n|rifle($2)),$1),$0),$0),$0)
example_end

Sent: what would you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0)
example_end

Sent: can you blow it ?
Sem: lambda $0_{ev}.Q(mod|can(v|blow(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: can you make the windmill go ?
Sem: lambda $0_{ev}.Q(mod|can(v|make(pro:per|you,lambda $1_{ev}.v|go(det:art|the($2,n|windmill($2)),$1),$0),$0))
example_end

Sent: blow it sideways .
Sem: lambda $0_{ev}.and(v|blow(you,pro:per|it,$0),adv|sideways($0))
example_end

Sent: the pin is broken .
Sem: lambda $0_{ev}.part|break-pastp(det:art|the($1,n|pin($1)),$0)
example_end

Sent: I 'll have_to get a better pin .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(v|get(pro:sub|i,det:art|a($1,and(adj|good-cp($1),n|pin($1))),$0),$0),$0)
example_end

Sent: blow it on the side .
Sem: lambda $0_{ev}.and(v|blow(you,pro:per|it,$0),prep|on(det:art|the($1,n|side($1)),$0))
example_end

Sent: blow into here .
Sem: lambda $0_{ev}.and(n|blow(you,$0),prep|into(adv|here($0)))
example_end

Sent: there it goes .
Sem: lambda $0_{ev}.and(v|go-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: Adam how does your Daddy shave ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(and(v|shave(det:poss|your($1,n:prop|daddy($1)),$0),$2($0)),$0)
example_end

Sent: he does .
Sem: lambda $0_{ev}.v|do-3s(pro:sub|he,$0)
example_end

Sent: what d you find Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|find(pro:per|you,$1,$0),$0)
example_end

Sent: I can take the top off .
Sem: lambda $0_{ev}.mod|can(and(v|take(pro:sub|i,det:art|the($1,n|top($1)),$0),adv|off($0)),$0)
example_end

Sent: you going to show it to Urs ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|show(pro:per|you,pro:per|it,$1),prep|to(n:prop|ursula,$1)),$0))
example_end

Sent: d you know where they go ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(v|go(pro:sub|they,$1),adv:int|where($1)),$0),$0))
example_end

Sent: where do they go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|go(pro:sub|they,$0),$1($0)),$0)
example_end

Sent: d you wan me squeeze it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|squeeze(pro:obj|me,pro:per|it,$1),$0),$0))
example_end

Sent: are you going to going to shave ?
Sem: lambda $0_{ev}.Q(cop|be-pres(n:gerund|go-presp(pro:per|you,lambda $1_{ev}.v|shave(pro:per|you,$1),$0),$0))
example_end

Sent: if you 're going to shave I think you 'd better put your blade in first .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(conj|if(aux|~be(part|go-presp(pro:per|you,lambda $2_{ev}.v|shave(pro:per|you,$2),$1),$1),and(and(and(v|put-zero(pro:per|you,det:poss|your($3,n|blade($3)),$1),adj|good-cp($1)),adv|in($1)),adv|first($1))),$1),$0)
example_end

Sent: here 's a mirror .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|mirror($1)),$0),pro:exist|here($0))
example_end

Sent: on your face .
Sem: prep|on(det:poss|your($0,n|face($0)))
example_end

Sent: see that little boy ?
Sem: lambda $0_{ev}.Q(v|see(you,pro:rel|that($1,and(adj|little($1),n|boy($1))),$0))
example_end

Sent: what 're you doing Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: don 't you think he 's too young ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.adv|too(adj|young(pro:sub|he,$1)),$0),$0),$0))
example_end

Sent: d you think I should shave ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|should(v|shave(pro:sub|i,$1),$1),$0),$0))
example_end

Sent: well you get it .
Sem: lambda $0_{ev}.and(v|get(pro:per|you,pro:per|it,$0),co|well($0))
example_end

Sent: they 're in your box there .
Sem: lambda $0_{ev}.adv|there(prep|in(det:poss|your($1,n|box($1)),pro:sub|they,$0))
example_end

Sent: don 't you look in the mirror when you shave ?
Sem: lambda $0_{ev}.Q(not(conj|when(v|shave(pro:per|you,$0),mod|do(and(cop|look(pro:per|you,$0),prep|in(det:art|the($1,n|mirror($1)),$0)),$0)),$0))
example_end

Sent: you 'll have_to take it off .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0),$0)
example_end

Sent: now go look in the mirror .
Sem: lambda $0_{ev}.and(and(co|look(you,$0),adv|now($0)),prep|in(det:art|the($1,n|mirror($1)),$0))
example_end

Sent: go out and get a paper towel .
Sem: lambda $0_{ev}.and(v|get(you,det:art|a($1,and_comp(n|paper($1),n|towel($1))),$0),adv|out($0))
example_end

Sent: where did you see ant ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,lambda $1_{e}.n|ant($1),$0),$2($0)),$0)
example_end

Sent: I guess from the open window out there in the hall .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,$0),adv|there(prep|from(det:art|the($1,and(adj|open($1),n|window($1))),$0)))
example_end

Sent: oh yes I see it .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,pro:per|it,$0),and(co|yes($0),co|oh($0)))
example_end

Sent: want a little water ?
Sem: lambda $0_{ev}.Q(v|want(you,det:art|a($1,and(adj|little($1),n|water($1))),$0))
example_end

Sent: if you 're careful you may have some water .
Sem: lambda $0_{ev}.mod|may(conj|if(co|careful(pro:per|you,$0),v|have(pro:per|you,qn|some($1,n|water($1)),$0)),$0)
example_end

Sent: he scratched himself .
Sem: lambda $0_{ev}.v|scratch-past(pro:sub|he,pro:refl|himself,$0)
example_end

Sent: you fell down on something .
Sem: lambda $0_{ev}.and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|on(pro:indef|something,$0))
example_end

Sent: you 're not too big .
Sem: lambda $0_{ev}.not(adv|too(adj|big(pro:per|you,$0)),$0)
example_end

Sent: when did you shave just like Daddy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|shave(pro:per|you,$0),$1($0)),adj|just(co|like(n:prop|daddy,$0))),$0)
example_end

Sent: not down your neck .
Sem: not(v|down(det:poss|your($0,n|neck($0))))
example_end

Sent: did you take the water out ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,det:art|the($1,n|water($1)),$0),adv|out($0)),$0))
example_end

Sent: now you may put it in .
Sem: lambda $0_{ev}.mod|may(and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|now($0)),adv|in($0)),$0)
example_end

Sent: whoops you had an accident .
Sem: lambda $0_{ev}.and(v|have-past(pro:per|you,det:art|a($1,n|accident($1)),$0),co|whoops($0))
example_end

Sent: don 't have an accident ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(you,det:art|a($1,n|accident($1)),$0),$0),$0))
example_end

Sent: shall I close the box ?
Sem: lambda $0_{ev}.Q(mod|shall(v|close(pro:sub|i,det:art|the($1,n|box($1)),$0),$0))
example_end

Sent: aren 't you going to drink your juice first ?
Sem: lambda $0_{ev}.Q(not(aux|be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|drink(pro:per|you,det:poss|your($2,n|juice($2)),$1),adv|first($1)),$0),$0),$0))
example_end

Sent: what 're you drinking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|drink-presp(pro:per|you,$1,$0),$0)
example_end

Sent: is your juice chewy ?
Sem: lambda $0_{ev}.Q(n|chewy(det:poss|your($1,n|juice($1)),$0))
example_end

Sent: your glass is chewy ?
Sem: lambda $0_{ev}.Q(n|chewy(det:poss|your($1,n|glass($1)),$0))
example_end

Sent: he did .
Sem: lambda $0_{ev}.v|do-past(pro:sub|he,$0)
example_end

Sent: what about this ?
Sem: att(pro:int|what,prep|about(pro:dem|this))
example_end

Sent: is that a new shirt ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,and(n|shirt(pro:rel|that,$0),adj|new(pro:rel|that,$0))))
example_end

Sent: where 's the baby stuck ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|~be(and(v|stick-past(det:art|the($1,n|baby($1)),$0),$2($0)),$0)
example_end

Sent: baby duck .
Sem: lambda $0_{e}.and(n|baby($0),n|duck($0))
example_end

Sent: it 's a baby duck ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,and(n|duck(pro:per|it,$0),n|baby(pro:per|it,$0))))
example_end

Sent: you saw boats ?
Sem: lambda $0_{ev}.Q(v|saw(pro:per|you,lambda $1_{e}.n|boat-pl($1),$0))
example_end

Sent: did you see a birdhouse ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,n|birdhouse($1)),$0),$0))
example_end

Sent: did you see a castle for birds ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,att(n|castle($1),prep|for(lambda $2_{e}.n|bird-pl($2)))),$0),$0))
example_end

Sent: did you see a swan ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|a($1,n|swan($1)),$0),$0))
example_end

Sent: and trees ?
Sem: lambda $0_{e}.Q(n|tree-pl($0))
example_end

Sent: they 're made like trees .
Sem: lambda $0_{ev}.aux|~be(and(v|make-past(pro:sub|they,$0),prep|like(lambda $1_{e}.n|tree-pl($1),$0)),$0)
example_end

Sent: one minute .
Sem: lambda $0_{e}.det:num|one(n|minute($0))
example_end

Sent: don 't look .
Sem: lambda $0_{ev}.not(mod|do(co|look(you,$0),$0),$0)
example_end

Sent: d you know what this is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: that 's a ring .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|ring(pro:dem|that,$0))
example_end

Sent: you hold the ring in your hand .
Sem: lambda $0_{ev}.and(v|hold(pro:per|you,det:art|the($1,n|ring($1)),$0),prep|in(det:poss|your($2,n|hand($2)),$0))
example_end

Sent: what does the horse do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|horse($1)),$2,$0),$0)
example_end

Sent: let 's do some tricks .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|do(pro:obj|~us,qn|some($2,n|trick-pl($2)),$1),$0)
example_end

Sent: d you want him to run ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|run(pro:obj|him,$1),$0),$0))
example_end

Sent: where 's a bird ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|bird($1)),$0),$2($0))
example_end

Sent: a house_bird .
Sem: det:art|a($0,chi|house_bird($0))
example_end

Sent: what kind of bird is a house_bird Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|house_bird($2)),att(n|kind(det:art|a($2,chi|house_bird($2)),$0),prep|of(lambda $3_{e}.n|bird($3))))
example_end

Sent: what 's a house_bird ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|house_bird($2)),$0)
example_end

Sent: yes what a house_bird is .
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|a($2,chi|house_bird($2)),$0),co|yes($0))
example_end

Sent: they are what Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|they,$0)
example_end

Sent: Smith 's barn .
Sem: n:prop|smith's($0,n|barn($0))
example_end

Sent: who are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: not in this one no .
Sem: pro:dem|this($0,pro:indef|one($0))
example_end

Sent: it 's my purse .
Sem: lambda $0_{ev}.det:poss|my(pro:per|it,n|purse(pro:per|it,$0))
example_end

Sent: nothing happened to it .
Sem: lambda $0_{ev}.and(v|happen-past(pro:indef|nothing,$0),prep|to(pro:per|it,$0))
example_end

Sent: oh we can make the toys stand up .
Sem: lambda $0_{ev}.and(mod|can(v|make(pro:sub|we,lambda $1_{ev}.and(v|stand(det:art|the($2,n|toy-pl($2)),$1),adv|up($1)),$0),$0),co|oh($0))
example_end

Sent: now he stands up .
Sem: lambda $0_{ev}.and(and(v|stand-3s(pro:sub|he,$0),adv|now($0)),adv|up($0))
example_end

Sent: make a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make(you,$1,$0)
example_end

Sent: Adam what 's a house_bird ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|house_bird($2)),$0)
example_end

Sent: I said what is a house_bird ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|say-past($1,$0,$2)
example_end

Sent: no that won 't fit around there .
Sem: lambda $0_{ev}.and(not(mod|will(and(v|fit-zero(pro:rel|that,$0),prep|around(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: d you know where the little stick is Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-3s(det:art|the($2,and(adj|little($2),n|stick($2))),$1),adv:int|where($1)),$0),$0))
example_end

Sent: he 's dancing look at this .
Sem: lambda $0_{ev}.and(aux|~be(part|dance-presp(pro:sub|he,$0),$0),and(cop|look(you,$0),prep|at(pro:dem|this,$0)))
example_end

Sent: we finished our game .
Sem: lambda $0_{ev}.v|finish-past(pro:sub|we,det:poss|our($1,n|game($1)),$0)
example_end

Sent: you want to do it again ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,pro:per|it,$1),adv|again($1)),$0))
example_end

Sent: you want to show it to your Mother ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|show(pro:per|you,pro:per|it,$1),prep|to(det:poss|your($2,n:prop|mother($2)),$1)),$0))
example_end

Sent: new one .
Sem: att(pro:indef|one,lambda $0_{e}.adj|new($0))
example_end

Sent: isn 't it open already ?
Sem: lambda $0_{ev}.Q(not(cop|be(and(v|open(pro:per|it,$0),adv|already($0)),$0),$0))
example_end

Sent: it 's going to break .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|it,lambda $1_{ev}.v|break(pro:per|it,$1),$0),$0)
example_end

Sent: not if you 're careful .
Sem: lambda $0_{ev}.co|careful(pro:per|you,$0)
example_end

Sent: you 're doing some work ?
Sem: lambda $0_{ev}.Q(aux|~be(part|do-presp(pro:per|you,qn|some($1,n|work($1)),$0),$0))
example_end

Sent: it seems to me that you tire of your games very easily .
Sem: lambda $0_{ev}.and(cop|seem-3s(pro:per|it,lambda $1_{ev}.and(and(v|tire(pro:per|you,$1),prep|of(det:poss|your($2,n|game-pl($2)),$1)),adv|very(adv|ease-dadj($1))),$0),prep|to(pro:obj|me,$0))
example_end

Sent: train tracks ?
Sem: lambda $0_{e}.Q(and_comp(n|train($0),v|track-3s($0)))
example_end

Sent: you broken the trains .
Sem: lambda $0_{ev}.part|break-pastp(pro:per|you,det:art|the($1,n|train-pl($1)),$0)
example_end

Sent: you lost your cars .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:poss|your($1,n|car-pl($1)),$0)
example_end

Sent: you left the others behind .
Sem: lambda $0_{ev}.and(v|leave-past(pro:per|you,det:art|the($1,n:pt|others($1)),$0),adv|behind($0))
example_end

Sent: oh you 're telling a story .
Sem: lambda $0_{ev}.and(aux|~be(part|tell-presp(pro:per|you,det:art|a($1,n|story($1)),$0),$0),co|oh($0))
example_end

Sent: telling the same story .
Sem: lambda $0_{ev}.part|tell-presp(you,det:art|the($1,and(adj|same($1),n|story($1))),$0)
example_end

Sent: you lost your caboozle .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:poss|your($1,wplay|caboozle($1)),$0)
example_end

Sent: sit down here .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),adv|down($0)),adv|here($0))
example_end

Sent: dry you off ?
Sem: lambda $0_{ev}.Q(and(v|dry(you,pro:per|you,$0),adv|off($0)))
example_end

Sent: there are your Soakies .
Sem: lambda $0_{ev}.and(cop|be-pres(det:poss|your($1,n:prop|soakies($1)),$0),adv|there($0))
example_end

Sent: why don 't you wash them off ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|wash(pro:per|you,pro:obj|them,$0),$1($0)),adv|off($0)),$0),$0)
example_end

Sent: sit down .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: no sit down .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),adv|down($0)),co|no($0))
example_end

Sent: what did you play over at the park ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|play(pro:per|you,$1,$0),adv|over(prep|at(det:art|the($2,n|park($2)),$0))),$0)
example_end

Sent: you played with your truck ?
Sem: lambda $0_{ev}.Q(and(v|play-past(pro:per|you,$0),prep|with(det:poss|your($1,n|truck($1)),$0)))
example_end

Sent: did you cover it with the sand ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|cover(pro:per|you,pro:per|it,$0),prep|with(det:art|the($1,n|sand($1)),$0)),$0))
example_end

Sent: did you share it with anybody ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|share(pro:per|you,pro:per|it,$0),prep|with(pro:indef|anybody,$0)),$0))
example_end

Sent: what happened to Tom ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|tom,$0))
example_end

Sent: well I guess he did .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,lambda $1_{ev}.v|do-past(pro:sub|he,$1),$0),co|well($0))
example_end

Sent: sit down dear .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: you 're a boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,n|boy(pro:per|you,$0))
example_end

Sent: sit down boy .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: yes Adam Smith .
Sem: lambda $0_{ev}.and(n:prop|smith_adam($0),co|yes($0))
example_end

Sent: that 's the boy .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|boy(pro:dem|that,$0))
example_end

Sent: well sit down if you want to .
Sem: lambda $0_{ev}.and(conj|if(v|want(pro:per|you,$0),and(v|sit(you,$0),adv|down($0))),co|well($0))
example_end

Sent: your Soakie put them up in the bag .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|them,$0),adv|up($0)),prep|in(det:art|the($1,n|bag($1)),$0))
example_end

Sent: you missed .
Sem: lambda $0_{ev}.v|miss-past(pro:per|you,$0)
example_end

Sent: don 't you have_to hold the bag with your hand ?
Sem: lambda $0_{ev}.Q(not(mod:aux|have_to(mod|do(and(v|hold(pro:per|you,det:art|the($1,n|bag($1)),$0),prep|with(det:poss|your($2,n|hand($2)),$0)),$0),$0),$0))
example_end

Sent: Adam you don 't need water dear .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,lambda $1_{e}.n|water($1),$0),$0),$0)
example_end

Sent: are your fingernails clean ?
Sem: lambda $0_{ev}.Q(adj|clean(det:poss|your($1,n|finger+nail($1)),$0))
example_end

Sent: nope they 're still dirty .
Sem: lambda $0_{ev}.and(adv|still(adj|dirt-dn(pro:sub|they,$0)),co|nope($0))
example_end

Sent: no they 're still dirty .
Sem: lambda $0_{ev}.and(adv|still(adj|dirt-dn(pro:sub|they,$0)),co|no($0))
example_end

Sent: here 's some soap dear .
Sem: lambda $0_{ev}.and(cop|~be(qn|some($1,n|soap($1)),$0),pro:exist|here($0))
example_end

Sent: a monkey train backing up .
Sem: lambda $0_{ev}.part|back-presp_up(det:art|a($1,and_comp(n|monkey($1),n|train($1))),$0)
example_end

Sent: don 't play there either .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|play(you,$0),adv|there($0)),adv|either($0)),$0),$0)
example_end

Sent: you said it first .
Sem: lambda $0_{ev}.and(v|say-past(pro:per|you,pro:per|it,$0),adv|first($0))
example_end

Sent: what about the treasure house ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|treasure($0),n|house($0)))))
example_end

Sent: that mirror ?
Sem: lambda $0_{e}.Q(pro:dem|that($1,n|mirror($1),$0))
example_end

Sent: so you can see .
Sem: lambda $0_{ev}.mod|can(and(v|see(pro:per|you,$0),co|so($0)),$0)
example_end

Sent: hop to the shower ?
Sem: lambda $0_{ev}.Q(and(n|hop(you,$0),prep|to(det:art|the($1,n|shower($1)),$0)))
example_end

Sent: who bakes pies ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|bake-3s($1,lambda $2_{e}.n|pie-pl($2),$0)
example_end

Sent: what kind of pies do I bake ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|bake(pro:sub|i,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|pie-pl($3)))),$0),$0)
example_end

Sent: where is the tape recorder ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,and_comp(n|tape($1),n|record-dv($1))),$0),$2($0))
example_end

Sent: a treasure chest .
Sem: det:art|a($0,and_comp(n|treasure($0),n|chest($0)))
example_end

Sent: I think you may knock it off Adam .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|may(and(v|knock(pro:per|you,pro:per|it,$1),prep|off($1)),$1),$0)
example_end

Sent: I don 't think you would intend to .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|will-cond(v|intend(pro:per|you,$1),$1),$0),$0),$0)
example_end

Sent: it would be a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(det:art|a(pro:per|it,$1(pro:per|it,$0)),$0)
example_end

Sent: is that a rope ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|rope(pro:rel|that,$0)))
example_end

Sent: it 's not a rope .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|rope(pro:per|it,$0)),$0)
example_end

Sent: it 's like a rope .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,$0),conj|like(det:art|a($1,n|rope($1)),$0))
example_end

Sent: it 's a cord .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|cord(pro:per|it,$0))
example_end

Sent: it 's like a rope yes .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:per|it,$0),conj|like(det:art|a($1,n|rope($1)),$0)),co|yes($0))
example_end

Sent: I want you to steal ?
Sem: lambda $0_{ev}.Q(v|want(pro:sub|i,lambda $1_{ev}.v|steal(pro:per|you,$1),$0))
example_end

Sent: how does that feel ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|feel(det:dem|that,$0),$1($0)),$0)
example_end

Sent: is that the trailer home ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and_comp(n|trailer(pro:rel|that,$0),adv|home(pro:rel|that,$0))))
example_end

Sent: no I 'm not a Bobo .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:sub|i,n:prop|bobo(pro:sub|i,$0)),$0),co|no($0))
example_end

Sent: I won 't bounce back .
Sem: lambda $0_{ev}.not(mod|will(and(v|bounce(pro:sub|i,$0),adv|back($0)),$0),$0)
example_end

Sent: oh did that hurt ?
Sem: lambda $0_{ev}.Q(and(v|do-past(v|hurt-zero(pro:dem|that,$0),$0),co|oh($0)))
example_end

Sent: you are a silly boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|silly(pro:per|you,$0)))
example_end

Sent: you 're a nut .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,n|nut(pro:per|you,$0))
example_end

Sent: oh yes you are .
Sem: lambda $0_{ev}.and(and(cop|be-pres(pro:per|you,$0),co|oh($0)),co|yes($0))
example_end

Sent: a squirrel might catch you so he 'd have something to eat .
Sem: lambda $0_{ev}.and(mod|might(v|catch(det:art|a($1,n|squirrel($1)),pro:per|you,$0),$0),mod|~genmod(v|have_so(pro:sub|he,lambda $2_{e}.rel(pro:indef|something($2),lambda $3_{ev}.v|eat(you,$3)),$0),$0))
example_end

Sent: what happens at light time ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-3s($1,$0),prep|at(lambda $2_{e}.and(adj|light($2),n|time($2)),$0))
example_end

Sent: yes dear .
Sem: lambda $0_{ev}.and(co|dear($0),co|yes($0))
example_end

Sent: you have a hanger ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,det:art|a($1,n|hang-dv($1)),$0))
example_end

Sent: park it over there near your garage dear .
Sem: lambda $0_{ev}.and(and(v|park(you,pro:per|it,$0),adv|over(adv|there($0))),prep|near(det:poss|your($1,n|garage($1)),$0))
example_end

Sent: why don 't you park it over here ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|park(pro:per|you,pro:per|it,$0),$1($0)),adv|over(adv|here($0))),$0),$0)
example_end

Sent: what story do you want to night ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(and(v|want(pro:per|you,$1($2,n|story($2)),$0),n|night_to($0)),$0)
example_end

Sent: where is Lassie ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|lassie,$0),$1($0))
example_end

Sent: is it up there ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),adv|up(adv|there($0))))
example_end

Sent: here 's a clean one .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,att(pro:indef|one,lambda $2_{e}.adj|clean($2),$1)),$0),pro:exist|here($0))
example_end

Sent: okay you read it to me tonight .
Sem: lambda $0_{ev}.and(and(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),adv:tem|tonight($0)),co|okay($0))
example_end

Sent: hello said the bunny .
Sem: lambda $0_{ev}.and(co|hello($0),v|say-past(you,det:art|the($1,n|bunny($1)),$0))
example_end

Sent: no I looked .
Sem: lambda $0_{ev}.and(cop|look-past(pro:sub|i,$0),co|no($0))
example_end

Sent: I looked .
Sem: lambda $0_{ev}.cop|look-past(pro:sub|i,$0)
example_end

Sent: yes somebody 's in that car .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:indef|somebody,$0),prep|in(pro:dem|that($1,n|car($1)),$0)),co|yes($0))
example_end

Sent: one house flying up in the air .
Sem: lambda $0_{ev}.and(and(part|fly-presp(lambda $1_{e}.det:num|one(n|house($1)),$0),adv|up($0)),prep|in(det:art|the($2,n|air($2)),$0))
example_end

Sent: colonial I guess .
Sem: lambda $0_{ev}.and(v|guess(pro:sub|i,$0),adj|colonial($0))
example_end

Sent: that 's the water .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|water(pro:dem|that,$0))
example_end

Sent: the waves of the water .
Sem: det:art|the($0,att(n|wave-pl($0),prep|of(det:art|the($1,n|water($1)))))
example_end

Sent: I said to myself .
Sem: lambda $0_{ev}.and(v|say-past(pro:sub|i,$0),prep|to(pro:refl|myself,$0))
example_end

Sent: oh it 's floating .
Sem: lambda $0_{ev}.and(cop|~be(part|float-presp(pro:per|it,$0),$0),co|oh($0))
example_end

Sent: he 's crying .
Sem: lambda $0_{ev}.aux|~be(part|cry-presp(pro:sub|he,$0),$0)
example_end

Sent: he 's sad .
Sem: lambda $0_{ev}.adj|sad(pro:sub|he,$0)
example_end

Sent: he 's happy now ?
Sem: lambda $0_{ev}.Q(adv|now(adj|happy(pro:sub|he,$0)))
example_end

Sent: oh you 're making mud pies .
Sem: lambda $0_{ev}.and(aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.and_comp(n|mud($1),n|pie-pl($1)),$0),$0),co|oh($0))
example_end

Sent: did you make mud pies over at the park ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(v|make(pro:per|you,lambda $1_{e}.and_comp(n|mud($1),n|pie-pl($1)),$0),adv|over($0)),prep|at(det:art|the($2,n|park($2)),$0)),$0))
example_end

Sent: he went for a walk with his mother .
Sem: lambda $0_{ev}.and(v|go-past(pro:sub|he,$0),prep|for(det:art|a($1,att(n|walk($1),prep|with(det:poss|his($2,n|mother($2))))),$0))
example_end

Sent: and he had lots_of friends .
Sem: lambda $0_{ev}.v|have-past(pro:sub|he,qn|lots_of($1,n|friend-pl($1)),$0)
example_end

Sent: okay hop over in your bed .
Sem: lambda $0_{ev}.and(and(and(v|hop(you,$0),adv|over($0)),prep|in(det:poss|your($1,n|bed($1)),$0)),co|okay($0))
example_end

Sent: you have sand on the floor .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,lambda $1_{e}.n|sand($1),$0),prep|on(det:art|the($2,n|floor($2)),$0))
example_end

Sent: well you get up in the bed first .
Sem: lambda $0_{ev}.and(and(and(and(v|get(pro:per|you,$0),adv|up($0)),prep|in(det:art|the($1,n|bed($1)),$0)),adv|first($0)),co|well($0))
example_end

Sent: did you have fun today ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|have(pro:per|you,lambda $1_{e}.n|fun($1),$0),adv:tem|today($0)),$0))
example_end

Sent: what did you play ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|play(pro:per|you,$1,$0),$0)
example_end

Sent: did you play with your truck today ?
Sem: lambda $0_{ev}.Q(v|do-past(and(and(v|play(pro:per|you,$0),prep|with(det:poss|your($1,n|truck($1)),$0)),adv:tem|today($0)),$0))
example_end

Sent: and you played games with Urs didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|play-past(pro:per|you,lambda $1_{e}.n|game-pl($1),$0),prep|with(n:prop|ursula,$0)),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: and then went to the park .
Sem: lambda $0_{ev}.and(and(v|go-past(you,$0),adv:tem|then($0)),prep|to(det:art|the($1,n|park($1)),$0))
example_end

Sent: so I may put your cup up .
Sem: lambda $0_{ev}.and(mod|may(and(v|put-zero(pro:sub|i,det:poss|your($1,n|cup($1)),$0),adv|up($0)),$0),conj|so($0))
example_end

Sent: how do I know to put your cup up ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.and(v|put-zero(pro:sub|i,det:poss|your($2,n|cup($2)),$1),adv|up($1)),$0),$3($0)),$0)
example_end

Sent: because it has_to be put up .
Sem: lambda $0_{ev}.cop|be(mod:aux|has_to(and(part|put-pastp(pro:per|it,$0),adv|up($0)),$0),$0)
example_end

Sent: you don 't knock water down ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|knock(pro:per|you,lambda $1_{e}.n|water($1),$0),adv|down($0)),$0),$0))
example_end

Sent: no please .
Sem: lambda $0_{ev}.and(co|please($0),co|no($0))
example_end

Sent: it has some water in it ?
Sem: lambda $0_{ev}.Q(aux|have-3s(pro:per|it,qn|some($1,att(n|water($1),prep|in(pro:per|it))),$0))
example_end

Sent: you drank it all .
Sem: lambda $0_{ev}.v|drink-past(pro:per|you,adv|all($1,pro:per|it($1)),$0)
example_end

Sent: tell you a song ?
Sem: lambda $0_{ev}.Q(v|tell(you,det:art|a($1,n|song($1)),pro:per|you,$0))
example_end

Sent: you tell me a story .
Sem: lambda $0_{ev}.v|tell(pro:per|you,det:art|a($1,n|story($1)),pro:obj|me,$0)
example_end

Sent: you sing me a song .
Sem: lambda $0_{ev}.v|sing(pro:per|you,det:art|a($1,n|song($1)),pro:obj|me,$0)
example_end

Sent: yes good night .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|night($0)),co|yes($0))
example_end

Sent: because I don 't sing very well .
Sem: lambda $0_{ev}.not(mod|do(and(v|sing(pro:sub|i,$0),adv|very(adv|well($0))),$0),$0)
example_end

Sent: don 't do what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|do(you,$1,$0),$0),$0)
example_end

Sent: don 't waste the tape ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|waste(you,det:art|the($1,n|tape($1)),$0),$0),$0))
example_end

Sent: good night dear .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|night($0)),co|dear($0))
example_end


Sent: it 's a level .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|level(pro:per|it,$0))
example_end

Sent: it 's a little game .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and(n|game(pro:per|it,$0),adj|little(pro:per|it,$0)))
example_end

Sent: you can make very funny people .
Sem: lambda $0_{ev}.mod|can(v|make(pro:per|you,lambda $1_{e}.and(adv|very(adj|fun-dn($1)),n|person-pl($1)),$0),$0)
example_end

Sent: shall we make a funny man with this ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|make(pro:sub|we,det:art|a($1,and(adj|fun-dn($1),n|man($1))),$0),prep|with(pro:dem|this,$0)),$0))
example_end

Sent: you 're going to get what ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|get(pro:per|you,$2,$1),$0),$0)
example_end

Sent: that 's a lock from a door .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|lock(pro:dem|that,$0),prep|from(det:art|a($1,n|door($1)))))
example_end

Sent: d you have one to put it on ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:indef|one,pro:per|it,$1),adv|on($1)),$0),$0))
example_end

Sent: a paper punch .
Sem: det:art|a($0,and_comp(n|paper($0),n|punch($0)))
example_end

Sent: what 're you going to do with the crayons ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),prep|with(det:art|the($3,n|crayon-pl($3)),$1)),$0),$0)
example_end

Sent: they 're so tiny .
Sem: lambda $0_{ev}.adv|so(adj|tiny(pro:sub|they,$0))
example_end

Sent: you can 't color them .
Sem: lambda $0_{ev}.not(mod|can(v|color(pro:per|you,pro:obj|them,$0),$0),$0)
example_end

Sent: from Africa .
Sem: prep|from(n:prop|africa)
example_end

Sent: forty inches .
Sem: lambda $0_{e}.det:num|forty(n|inch-pl($0))
example_end

Sent: he 's not a fish .
Sem: lambda $0_{ev}.not(det:art|a(pro:sub|he,n|fish(pro:sub|he,$0)),$0)
example_end

Sent: no I 'm not a fish .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:sub|i,n|fish(pro:sub|i,$0)),$0),co|no($0))
example_end

Sent: no I don 't see any fish in here at all .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|see(pro:sub|i,qn|any($1,n|fish($1)),$0),prep|in(adv|here($0))),prep|at(lambda $2_{e}.pro:indef|all($2),$0)),$0),$0),co|no($0))
example_end

Sent: fish must swim in the lake .
Sem: lambda $0_{ev}.mod|must(and(v|swim(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|lake($2)),$0)),$0)
example_end

Sent: in the Charles River .
Sem: prep|in(det:art|the($0,and_comp(n:prop|charles($0),n:prop|river($0))))
example_end

Sent: you know where the Charles River is .
Sem: lambda $0_{ev}.v|know(pro:per|you,lambda $1_{ev}.and(cop|be-3s(det:art|the($2,and_comp(n:prop|charles($2),n:prop|river($2))),$1),adv:int|where($1)),$0)
example_end

Sent: where we see the sailboats .
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|see(pro:sub|we,det:art|the($1,n|sail+boat($1)),$0),$2($0))
example_end

Sent: why should they come from Africa ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|should(and(and(v|come(pro:sub|they,$0),$1($0)),prep|from(n:prop|africa,$0)),$0)
example_end

Sent: they live in Africa ?
Sem: lambda $0_{ev}.Q(and(v|live(pro:sub|they,$0),prep|in(n:prop|africa,$0)))
example_end

Sent: because Indians live in Africa .
Sem: lambda $0_{ev}.and(v|live(n:prop|indians,$0),prep|in(n:prop|africa,$0))
example_end

Sent: you have some work ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,qn|some($1,n|work($1)),$0))
example_end

Sent: let me try it Adam .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|try(pro:obj|me,pro:per|it,$1),$0)
example_end

Sent: what is a game ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|game($2)),$0)
example_end

Sent: you 're supposed to fit the arms with the face .
Sem: lambda $0_{ev}.aux|~be(v|suppose-past(pro:per|you,lambda $1_{ev}.v|fit-zero(pro:per|you,det:art|the($2,att(n|arm-pl($2),prep|with(det:art|the($3,n|face($3))))),$1),$0),$0)
example_end

Sent: is it in the key case ?
Sem: lambda $0_{ev}.Q(prep|in(det:art|the($1,and_comp(n|key($1),n|case($1))),pro:per|it,$0))
example_end

Sent: the key chain ?
Sem: lambda $0_{e}.Q(det:art|the($1,and_comp(n|key($1),n|chain($1)),$0))
example_end

Sent: you ask Urs to tell you about this .
Sem: lambda $0_{ev}.v|ask(pro:per|you,lambda $1_{ev}.and(v|tell(n:prop|ursula,pro:per|you,$1),prep|about(pro:dem|this,$1)),$0)
example_end

Sent: if you shoot him he won 't laugh .
Sem: lambda $0_{ev}.not(mod|will(conj|if(v|shoot(pro:per|you,pro:obj|him,$0),v|laugh(pro:sub|he,$0)),$0),$0)
example_end

Sent: in the box .
Sem: det:art|the($0,n|box($0))
example_end

Sent: draw on the paper .
Sem: lambda $0_{ev}.and(v|draw(you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: come measure the door .
Sem: lambda $0_{ev}.v|come(you,$0)
example_end

Sent: what are you going to do up there ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),adv|up(adv|there($1))),$0),$0)
example_end

Sent: can you measure the door ?
Sem: lambda $0_{ev}.Q(mod|can(v|measure(pro:per|you,det:art|the($1,n|door($1)),$0),$0))
example_end

Sent: careful you almost hit Ursula .
Sem: lambda $0_{ev}.and(and(n|hit(pro:per|you,n:prop|ursula,$0),adv|almost($0)),co|careful($0))
example_end

Sent: can you measure the door for me ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|measure(pro:per|you,det:art|the($1,n|door($1)),$0),prep|for(pro:obj|me,$0)),$0))
example_end

Sent: why d you want to ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you broke it .
Sem: lambda $0_{ev}.v|break-past(pro:per|you,pro:per|it,$0)
example_end

Sent: and you can 't have that .
Sem: lambda $0_{ev}.not(mod|can(v|have(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: yes sticks do break .
Sem: lambda $0_{ev}.and(mod|do(v|break(lambda $1_{e}.v|stick-3s($1),$0),$0),co|yes($0))
example_end

Sent: well don 't do that .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: we can make it round again .
Sem: lambda $0_{ev}.mod|can(and(v|make(pro:sub|we,lambda $1_{ev}.adv|round(pro:per|it,$1),$0),adv|again($0)),$0)
example_end

Sent: well that 's not a stapler is it ?
Sem: lambda $0_{ev}.Q(and(and(not(det:art|a(pro:dem|that,n|staple-dv(pro:dem|that,$0)),$0),aux|be-3s(pro:per|it,$0)),co|well($0)))
example_end

Sent: a wrench .
Sem: det:art|a($0,v|wrench($0))
example_end

Sent: what kind of wrench is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.v|wrench($2))))
example_end

Sent: paper punch .
Sem: lambda $0_{e}.and_comp(n|paper($0),n|punch($0))
example_end

Sent: what can we take down ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(and(v|take(pro:sub|we,$1,$0),adv|down($0)),$0)
example_end

Sent: where 's the key ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|key($1)),$0),$2($0))
example_end

Sent: Robin lost the key to the door ?
Sem: lambda $0_{ev}.Q(v|lose-past(n:prop|robin,det:art|the($1,att(n|key($1),prep|to(det:art|the($2,n|door($2))))),$0))
example_end

Sent: maybe one of my keys fits .
Sem: lambda $0_{ev}.and(v|fit-3s(lambda $1_{e}.pro:indef|one($1),$0),adv|maybe($0))
example_end

Sent: if you 're careful .
Sem: lambda $0_{ev}.co|careful(pro:per|you,$0)
example_end

Sent: a house to a door ?
Sem: lambda $0_{e}.Q(det:art|a($1,att(n|house($1),prep|to(det:art|a($2,n|door($2)))),$0))
example_end

Sent: you mean a door to the house ?
Sem: lambda $0_{ev}.Q(v|mean(pro:per|you,det:art|a($1,att(n|door($1),prep|to(det:art|the($2,n|house($2))))),$0))
example_end

Sent: somebody can walk in .
Sem: lambda $0_{ev}.mod|can(and(v|walk(pro:indef|somebody,$0),adv|in($0)),$0)
example_end

Sent: Adam may I try it ?
Sem: lambda $0_{ev}.Q(mod|may(v|try(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: he said one of your brothers .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{e}.det:num|one($1),$0)
example_end

Sent: he didn 't think this key would work .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|he,lambda $1_{ev}.mod|will-cond(v|work(pro:dem|this($2,n|key($2)),$1),$1),$0),$0),$0)
example_end

Sent: the keyhole in your door is closed up .
Sem: lambda $0_{ev}.aux|be-3s(and(part|close-pastp(det:art|the($1,att(n|key+hole($1),prep|in(det:poss|your($2,n|door($2))))),$0),adv|up($0)),$0)
example_end

Sent: right there is one .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:indef|one,$0),adv|there($0)),adv|right($0))
example_end

Sent: you had one in your pocket .
Sem: lambda $0_{ev}.and(part|have-pastp(pro:per|you,pro:indef|one,$0),prep|in(det:poss|your($1,n|pocket($1)),$0))
example_end

Sent: Adam you 're just walking over her feet .
Sem: lambda $0_{ev}.cop|~be(and(and(part|walk-presp(pro:per|you,$0),adv|just($0)),prep|over(det:poss|her($1,n|foot-pl($1)),$0)),$0)
example_end

Sent: you might break that off .
Sem: lambda $0_{ev}.mod|might(and(v|break(pro:per|you,pro:dem|that,$0),adv|off($0)),$0)
example_end

Sent: no I don 't think you should do that .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|should(v|do(pro:per|you,pro:dem|that,$1),$1),$0),$0),$0),co|no($0))
example_end

Sent: put it on the board .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|board($1)),$0))
example_end

Sent: yes if you 're careful .
Sem: lambda $0_{ev}.and(co|careful(pro:per|you,$0),co|yes($0))
example_end

Sent: where 's my key ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|my($1,n|key($1)),$0),$2($0))
example_end

Sent: are you going to put it on ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$1),adv|on($1)),$0),$0))
example_end

Sent: you put it in .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|in($0))
example_end

Sent: do it on the floor first .
Sem: lambda $0_{ev}.and(and(mod|do(you,pro:per|it,$0),prep|on(det:art|the($1,n|floor($1)),$0)),adv|first($0))
example_end

Sent: put your lock in on the floor .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,det:poss|your($1,n|lock($1)),$0),adv|in($0)),prep|on(det:art|the($2,n|floor($2)),$0))
example_end

Sent: be careful and don 't lose the screws .
Sem: lambda $0_{e}.lambda $1_{ev}.co|careful($0,$1)
example_end

Sent: ouch Adam .
Sem: lambda $0_{ev}.n|ouch($0)
example_end

Sent: you don 't need that .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: I don 't think you need that either .
Sem: lambda $0_{ev}.not(mod|do(and(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,pro:dem|that,$1),$0),adv|either($0)),$0),$0)
example_end

Sent: okay now you do it .
Sem: lambda $0_{ev}.and(and(v|do(pro:per|you,pro:per|it,$0),adv|now($0)),co|okay($0))
example_end

Sent: no you don 't need this at all .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|need(pro:per|you,pro:dem|this,$0),prep|at(lambda $1_{e}.pro:indef|all($1),$0)),$0),$0),co|no($0))
example_end

Sent: because we need that on the door .
Sem: lambda $0_{ev}.and(v|need(pro:sub|we,pro:dem|that,$0),prep|on(det:art|the($1,n|door($1)),$0))
example_end

Sent: it already has a lock in it I think .
Sem: lambda $0_{ev}.and(and(and(v|have-3s(pro:per|it,det:art|a($1,n|lock($1)),$0),adv|already($0)),prep|in(pro:per|it,$0)),v|think(pro:sub|i,$0))
example_end

Sent: can you screw this ?
Sem: lambda $0_{ev}.Q(mod|can(v|screw(pro:per|you,pro:dem|this,$0),$0))
example_end

Sent: that 's part of the lock .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|lock($1))))
example_end

Sent: yes that 's to take it off .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,lambda $1_{ev}.and(v|take(pro:dem|that,pro:per|it,$1),adv|off($1)),$0),co|yes($0))
example_end

Sent: no no you don 't need that .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:per|you,pro:dem|that,$0),$0),$0),and(co|no($0),co|no($0)))
example_end

Sent: put your screw back in .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:poss|your($1,n|screw($1)),$0),adj|back(adv|in($0)))
example_end

Sent: where 's your screwdriver ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|screw+driver($1)),$0),$2($0))
example_end

Sent: have you looked in there ?
Sem: lambda $0_{ev}.Q(v|have(and(cop|look-past(pro:per|you,$0),prep|in(adv|there($0))),$0))
example_end

Sent: look in there .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|in(adv|there($0)))
example_end

Sent: I see my Harvard shirt .
Sem: lambda $0_{ev}.v|see(pro:sub|i,co|my($1,and_comp(n:prop|harvard($1),n|shirt($1))),$0)
example_end

Sent: that 's not a Harvard shirt .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,and_comp(n:prop|harvard(pro:dem|that,$0),n|shirt(pro:dem|that,$0))),$0)
example_end

Sent: you see the wood of the hammer .
Sem: lambda $0_{ev}.v|see(pro:per|you,det:art|the($1,att(n|wood($1),prep|of(det:art|the($2,n|hammer($2))))),$0)
example_end

Sent: we 'll see what happens when you put a key in the lock .
Sem: lambda $0_{ev}.mod|~will(v|see(pro:sub|we,lambda $1_{ev}.and(v|happen-3s(pro:int|what,$1),and(and(v|put-zero(pro:per|you,det:art|a($2,n|key($2)),$1),conj|when($1)),prep|in(det:art|the($3,n|lock($3)),$1))),$0),$0)
example_end

Sent: whoops you missed .
Sem: lambda $0_{ev}.and(v|miss-past(pro:per|you,$0),co|whoops($0))
example_end

Sent: where d you put the keys ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|put-zero(pro:per|you,det:art|the($1,n|key-pl($1)),$0),$2($0)),$0)
example_end

Sent: is that the right key ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and(n|key(pro:rel|that,$0),adj|right(pro:rel|that,$0))))
example_end

Sent: try that .
Sem: lambda $0_{ev}.v|try(you,pro:dem|that,$0)
example_end

Sent: is it turned ?
Sem: lambda $0_{ev}.Q(aux|be-3s(v|turn-past(pro:per|it,$0),$0))
example_end

Sent: come in .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|in($0))
example_end

Sent: hello Adam how 're you today ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|you($0,$1)
example_end

Sent: from Pembroke ?
Sem: Q(prep|from(n:prop|pembroke))
example_end

Sent: did you have a nice time in Pembroke ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|have(pro:per|you,det:art|a($1,and(adj|nice($1),n|time($1))),$0),prep|in(n:prop|pembroke,$0)),$0))
example_end

Sent: you played ?
Sem: lambda $0_{ev}.Q(v|play-past(pro:per|you,$0))
example_end

Sent: you played with the kitty ?
Sem: lambda $0_{ev}.Q(and(v|play-past(pro:per|you,$0),prep|with(det:art|the($1,n|kitty($1)),$0)))
example_end

Sent: that 's a funny name for a kitty .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(and(n|name(pro:dem|that,$0),adj|fun-dn(pro:dem|that,$0)),prep|for(det:art|a($1,n|kitty($1)))))
example_end

Sent: with a rocket ship ?
Sem: Q(prep|with(det:art|a($0,and_comp(n|rocket($0),n|ship($0)))))
example_end

Sent: oh what was the name of the rocket ship ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(det:art|the($2,att(n|name($2),prep|of(det:art|the($3,and_comp(n|rocket($3),n|ship($3)))))),$0),co|oh($0))
example_end

Sent: that 's a funny name for a rocket ship .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(and(n|name(pro:dem|that,$0),adj|fun-dn(pro:dem|that,$0)),prep|for(det:art|a($1,and_comp(n|rocket($1),n|ship($1))))))
example_end

Sent: where is Ursula going ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(and(part|go-presp(n:prop|ursula,$0),$1($0)),$0)
example_end

Sent: Adam you could draw some pictures now .
Sem: lambda $0_{ev}.mod|could(and(v|draw(pro:per|you,qn|some($1,n|picture-pl($1)),$0),adv|now($0)),$0)
example_end

Sent: you drew a picture once ?
Sem: lambda $0_{ev}.Q(and(v|draw-past(pro:per|you,det:art|a($1,n|picture($1)),$0),adv|once($0)))
example_end

Sent: you don 't have a mailbox up here .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|mail+box($1)),$0),adv|up(adv|here($0))),$0),$0)
example_end

Sent: to Robin ?
Sem: Q(prep|to(n:prop|robin))
example_end

Sent: Robin will read it ?
Sem: lambda $0_{ev}.Q(mod|will(v|read-zero(n:prop|robin,pro:per|it,$0),$0))
example_end

Sent: by himself ?
Sem: Q(prep|by(pro:refl|himself))
example_end

Sent: he 's been to school for one day .
Sem: lambda $0_{ev}.aux|~be(prep|to(lambda $1_{e}.att(n|school($1),prep|for(lambda $2_{e}.pro:indef|one(n|day($2)))),pro:sub|he,$0),$0)
example_end

Sent: why should he cry in school ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|should(and(and(v|cry(pro:sub|he,$0),$1($0)),prep|in(lambda $2_{e}.n|school($2),$0)),$0)
example_end

Sent: why would he want to ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(v|want(pro:sub|he,$0),$1($0)),$0)
example_end

Sent: because Shadow_Gay spanked him .
Sem: lambda $0_{ev}.v|spank-past(n:prop|shadow_gay,pro:obj|him,$0)
example_end

Sent: some little paper off ?
Sem: lambda $0_{e}.Q(adv|off(qn|some($1,and(adj|little($1),n|paper($1))),$0))
example_end

Sent: well draw on this .
Sem: lambda $0_{ev}.and(and(v|draw(you,$0),prep|on(pro:dem|this,$0)),co|well($0))
example_end

Sent: look in the other end Adam .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|in(det:art|the($1,and(qn|other($1),n|end($1))),$0))
example_end

Sent: well write on the paper .
Sem: lambda $0_{ev}.and(and(v|write(you,$0),prep|on(det:art|the($1,n|paper($1)),$0)),co|well($0))
example_end

Sent: well don 't write on it .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|write(you,$0),prep|on(pro:per|it,$0)),$0),$0),co|well($0))
example_end

Sent: yes a funny man .
Sem: lambda $0_{ev}.and(det:art|a($1,and(adj|fun-dn($1),n|man($1)),$0),co|yes($0))
example_end

Sent: no you can 't take it out .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,pro:per|it,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: he doesn 't have any arms .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|he,qn|any($1,n|arm-pl($1)),$0),$0),$0)
example_end

Sent: where d you think his arms are ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|think(pro:per|you,lambda $1_{ev}.cop|be-pres(det:poss|his($2,n|arm-pl($2)),$1),$0),$3($0)),$0)
example_end

Sent: the pen ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|pen($1),$0))
example_end

Sent: is that a man ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|man(pro:rel|that,$0)))
example_end

Sent: why don 't you write something ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|write(pro:per|you,pro:indef|something,$0),$1($0)),$0),$0)
example_end

Sent: with the pen .
Sem: prep|with(det:art|the($0,n|pen($0)))
example_end

Sent: write your name .
Sem: lambda $0_{ev}.v|write(you,det:poss|your($1,n|name($1)),$0)
example_end

Sent: will read your name ?
Sem: lambda $0_{ev}.Q(mod|will(v|read-zero(you,det:poss|your($1,n|name($1)),$0),$0))
example_end

Sent: what 's the bird doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|bird($1)),$2,$0),$0)
example_end

Sent: does this write ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|write(pro:dem|this,$0),$0))
example_end

Sent: she showed you one time .
Sem: lambda $0_{ev}.v|show-past(pro:sub|she,lambda $1_{e}.det:num|one(n|time($1)),pro:per|you,$0)
example_end

Sent: whose name are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,$1($2,n|name($2)),$0),$0)
example_end

Sent: where has Shadow_Gay been ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|have-3s(and(cop|be-pastp(n:prop|shadow_gay,$0),$1($0)),$0)
example_end

Sent: I haven 't seen Shadow_Gay in a long time .
Sem: lambda $0_{ev}.not(aux|have(and(part|see-pastp(pro:sub|i,n:prop|shadow_gay,$0),prep|in(det:art|a($1,and(adj|long($1),n|time($1))),$0)),$0),$0)
example_end

Sent: he went to Boston University ?
Sem: lambda $0_{ev}.Q(and(v|go-past(pro:sub|he,$0),prep|to(lambda $1_{e}.and_comp(n:prop|boston($1),n:prop|university($1)),$0)))
example_end

Sent: oh and what did he do there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do-past(and(v|do(pro:sub|he,$1,$0),adv|there($0)),$0),co|oh($0))
example_end

Sent: what did he play ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|play(pro:sub|he,$1,$0),$0)
example_end

Sent: he played with you ?
Sem: lambda $0_{ev}.Q(and(v|play-past(pro:sub|he,$0),prep|with(pro:per|you,$0)))
example_end

Sent: and your bunny .
Sem: det:poss|your($0,n|bunny($0))
example_end

Sent: with your bunny ?
Sem: Q(prep|with(det:poss|your($0,n|bunny($0))))
example_end

Sent: your name is Bunny ?
Sem: lambda $0_{ev}.Q(n:prop|bunny(det:poss|your($1,n|name($1)),$0))
example_end

Sent: my name is funny .
Sem: lambda $0_{ev}.adj|fun-dn(det:poss|my($1,n|name($1)),$0)
example_end

Sent: funny bunny ?
Sem: lambda $0_{e}.Q(and(adj|fun-dn($0),n|bunny($0)))
example_end

Sent: what 's a Boody ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,chi|boody($2)),$0)
example_end

Sent: this is one of your tinker toys .
Sem: lambda $0_{ev}.att(pro:indef|one(pro:dem|this,$0),prep|of(det:poss|your($1,and_comp(n|tinker($1),n|toy-pl($1)))))
example_end

Sent: you have so many pencils .
Sem: lambda $0_{ev}.v|have(pro:per|you,adv|so(qn|many($1,n|pencil-pl($1))),$0)
example_end

Sent: you lost your footie ballie .
Sem: lambda $0_{ev}.v|lose-past(pro:per|you,det:poss|your($1,and_comp(n|foot-dim($1),n|ball-dim($1))),$0)
example_end


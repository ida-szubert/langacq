*** WH questions ***
"Why are you singing?"
	lambda $1_{e}.lambda $0_{ev}.are(and(singing(you,$0),$1($0)),$0)
"What did you give her?"
	lambda $1_{e}.lambda $0_{ev}.did(give(you,$1,her,$0),$0)
"When did you see the ball?"
	lambda $2_{e}.lambda $0_{ev}.did(and(see(you,the($1,ball($1)),$0),$2($0)),$0)
"Where did the ball go?"
	lambda $2_{e}.lambda $0_{ev}.did(and(go(the($1,ball($1)),$0),$2($0)),$0)
"Who uses the pillow?"
	lambda $1_{e}.lambda $0_{ev}.uses($1,the($2,pillow($2)),$0)
"which cake is tasty?"
	lambda $1_{e}.lambda $0_{ev}.tasty($1($2,cake($2)),$0)
"How old are you?"
	lambda $1_{e}.lambda $0_{ev}.$1(old(you,$0))
"Whose ball did you borrow?"
	lambda $1_{e}.lambda $0_{ev}.did(borrow(you,$1($2,ball($2)),$0),$0)
"Whom have we seen?"
	lambda $1_{e}.lambda $0_{ev}.have(seen(we,$1,$0),$0)

*** parataxis ***
"Excuse me, I will go home."
	lambda $0_{ev}.and(will(and(go(i,$0),home($0)),$0),excuse(you,me,$0))

*** discourse ***
"Oh, you will read it."
	lambda $0_{ev}.and(will(read(you,it,$0),$0),oh($0))

*** xcomp ***
"I want you to sing a carol."
	lambda $0_{ev}.want(i,lambda $1_{ev}.sing(you,a($2,carol($2)),$1),$0)
"I want to sing a carol."
	lambda $0_{ev}.want(i,lambda $1_{ev}.sing(i,a($2,carol($2)),$1),$0)
"I am happy to sing a carol."
	lambda $0_{ev}.happy(i,lambda $1_{ev}.sing(i,a($2,carol($2)),$1),$0)

*** ccomp ***
"They say that ducks like bread."
	lambda $0_{ev}.say(they,lambda $1_{ev}.like(lambda $2_{ev}.ducks($2),lambda $3_{ev}.bread($3),$1),$0)
"They say ducks like bread."
	lambda $0_{ev}.say(they,lambda $1_{ev}.like(lambda $2_{ev}.ducks($2),lambda $3_{ev}.bread($3),$1),$0)
"She said to buy oranges."
	lambda $0_{ev}.said(she,lambda $1_{ev}.buy(_,lambda $2_{ev}.oranges($2),$1),$0)

*** passive ***
"You got tickled."
	lambda $0_{ev}.tickled(_,you,$0)
"The duck was seen."
	lambda $0_{ev}.seen(_,the($1,duck($1)),$0)
"My bread was eaten by the duck."
	lambda $0_{ev}.and(eaten(_,my($1,bread($1)),$0),by(the($2,duck($2)),$0))

*** acl ***
"a good day to watch ducks"
	a($0,rel(and(good($0),day($0)),lambda $1_{ev}.watch(_,ducks,$1)))
"ducks attracted by the smell"
	lambda $0_{ev}.and(ducks($0),lambda $1_{ev}.and(attracted(_,$0,$1),by(the($2,smell($2)),$1)))
"the people selling us the fish"
	the($0,and(people($0),lambda $1_{ev}.selling($0,the($2,fish($2)),us,$1)))
"a letter describing my day"
	a($0,and(letter($0),lambda $1_{ev}.describing($0,my($2,day($2)),$1)))
"a sign that he is tired"
	a($0,rel(sign($0),lambda $1_{ev}.tired(he,$1)))

*** expletive subject ***
"it is raining."
	lambda $0_{ev}.is(raining($0),$0)
"it is sunny."
	lambda $0_{ev}.sunny($0)
"There is a duck on the picturehere is a duck on the picture."
	lambda $0_{ev}.and(is(a($1,duck($1)),$0),on(the($2,picture($2)),$0))

*** NP conjunction ***
"we need needle and thread."
	lambda $0_{ev}.need(we,and(lambda $1_{ev}.needle($1),lambda $2_{ev}.thread($2)),$0)

*** adjective conjunction ***
"we need green or red thread."
	lambda $0_{ev}.need(we,lambda $1_{ev}.and(or(green($1),red($1)),thread($1)),$0)
"this is a green and red thread."
	lambda $0_{ev}.and(thread(this,$0),and(green(this,$0),red(this,$0)))
"this is green and sparkly."
	lambda $0_{ev}.and(green(this,$0),sparkly(this,$0))

*** verb conjunction ***
"We fought and won."
	lambda $0_{ev}.and(fought(we,$0),won(we,$0))
"We sought and found a perfect duck,"
	lambda $0_{ev}.and(sought(we,a($1,and(perfect($1),duck($1))),$0),found(we,a($1,and(perfect($1),duck($1))),$0))
"I will promise and buy you gifts. "
	lambda $0_{ev}.will(and(promise(i,lambda $1_{ev}.gifts($1),you,$0),buy(i,lambda $2_{ev}.gifts($2),you,$0)),$0)

*** VP conjunction ***
"I wanted a duck but got a pigeon."
	lambda $0_{ev}.but(got(i,a($1,pigeon($1)),$0),wanted(i,a($2,duck($2)),$0))
"the book I saw and he bough"
	the($0,and(book($0),lambda $1_{ev}.and(saw(i,$0,$1),bough(he,$0,$1))))

*** sentence conjunction ***
"I drew a duck and Henry drew a pigeon."
	lambda $0_{ev}.and(drew(henry,a($1,pigeon($1)),$0),drew(i,a($2,duck($2)),$0))
"He sung a song and I danced."
	lambda $0_{ev}.and(danced(i,$0),sung(he,a($1,song($1)),$0))

*** acl:relcl with relativizer as an object ***
"you take what you can find."
	lambda $1_{e}.lambda $0_{ev}.take(you,$1,$0)

*** acl:relcl without relativizer ***
"a duck I know"
	a($0,and(duck($0),lambda $1_{ev}.know(i,$0,$1)))

*** acl:relcl with relativizer ***
"a duck who ate my lunch"
	a($0,and(duck($0),lambda $1_{ev}.ate($0,my($2,lunch($2)),$1)))
"a duck whom I feed"
	a($0,and(duck($0),lambda $1_{ev}.feed(i,$0,$1)))

*** nmod:npmod modifying a verb ***
"You read that book last time."
	lambda $0_{ev}.and(read(you,that($1,book($1)),$0),and(last($0),time($0)))
"He cried a bit."
	lambda $0_{ev}.and(cried(he,$0),a($1,bit($1),$0))

*** nmod:npmod modifying an adverb ***
"The ducks arrived months later."
	lambda $0_{ev}.and(arrived(the($1,ducks($1)),$0),later($0,lambda $2_{ev}.months($2)))

*** nmod:npmod modifying an adjective ***
"a lot more ducks"
	lambda $0_{ev}.and(more($0,a($1,lot($1))),ducks($0))

*** predeterminer ***
"such a green duck"
	such(a($0,and(green($0),duck($0))))

*** adverbial clause modifier ***
"You saw a duck when you woke up."
	lambda $0_{ev}.when(woke_w(you,$0),saw(you,a($1,duck($1)),$0))

*** temporal modifiers ***
"I saw a duck yesterday."
	lambda $0_{ev}.and(saw(i,a($1,duck($1)),$0),yesterday($0))
"She went home in July."
	lambda $0_{ev}.and(and(went(she,$0),home($0)),in(july,$0))

*** multi-word expressions ***
"he cried because of you."
	lambda $0_{ev}.and(cried(he,$0),because_w(you,$0))
"Noam Chomsky likes ducks."
	lambda $0_{ev}.likes(chomsky_w,ducks,$0)

*** adverbs modyfing verb-attached PP ***
"I run even on rainy days"
	lambda $0_{ev}.and(run(i,$0),even(on(lambda $1_{ev}.and(rainy($1),days($1)),$0)))

*** adverbs modyfing noun-attached PP ***
"A meeting with just a few people"
	a($0,att(meeting($0),just(with(a($1,and(few($1),people($1)))))))

*** adverbs modyfing nouns ***
"I give you only one chance"
	lambda $0_{ev}.give(i,only(lambda $1_{ev}.one(chance($1))),you,$0)

*** adverbs modifying adjectives ***
"I saw a very pretty duck."
	lambda $0_{ev}.saw(i,a($1,and(very(pretty($1)),duck($1))),$0)

*** adverbs modifying verbs ***
"He can draw too."
	lambda $0_{ev}.can(and(draw(he,$0),too($0)),$0)

*** adverbs modifying adverbs ***
"He can sing so well."
	lambda $0_{ev}.can(and(sing(he,$0),so(well($0))),$0)

*** particle verbs ***
"The duck stands up."
	lambda $0_{ev}.stands_w(the($1,duck($1)),$0)
"The ducks hand the seeds over."
	lambda $0_{ev}.and(hand(the($1,ducks($1)),the($2,seeds($2)),$0),over($0))
"I call her up."
	lambda $0_{ev}.and(call(i,her,$0),up($0))

*** negation + auxiliary ***
"You cannot use it."
	lambda $0_{ev}.not(can(use(you,it,$0),$0),$0)

*** negation + copula ***
"It is not straight."
	lambda $0_{ev}.not(straight(it,$0),$0)
"I am not a boy."
	lambda $0_{ev}.not(boy(i,$0),$0)

*** copula between a nominal and a preposition or prepositional phrase ***
"This duck is from China."
	lambda $0_{ev}.from(china,this($1,duck($1)),$0)

*** verb as adjectival modifier in copular construction ***
"This incident is enraging."
	lambda $0_{ev}.enraging(this($1,incident($1)),$0)

*** verb as adjectival modifier ***
"This is an enraging incident."
	lambda $0_{ev}.and(incident(this,$0),enraging(this,$0))

*** PP verb adjunct ***
"You play in the garden."
	lambda $0_{ev}.and(play(you,$0),in(the($1,garden($1)),$0))

*** copula joining an adjective and a nominal ***
"The duck is green."
	lambda $0_{ev}.green(the($1,duck($1)),$0)

*** copula joining two nominals ***
"Eugene is a duck."
	lambda $0_{ev}.duck(eugene,$0)
"Eugene is a green duck."
	lambda $0_{ev}.and(duck(eugene,$0),green(eugene,$0))
"Eugene is a duck from China."
	lambda $0_{ev}.att(duck(eugene,$0),from(china))

*** compound of a common and proper noun ***
"I like the Hilton hotel."
	lambda $0_{ev}.like(i,the($1,and_comp(hilton($1),hotel($1))),$0)

*** compound of common nouns ***
"I made a cheese sandwich."
	lambda $0_{ev}.made(i,a($1,and_comp(cheese($1),sandwich($1))),$0)

*** PP noun adjunct ***
"I see a duck from China."
	lambda $0_{ev}.see(i,a($1,att(duck($1),from(china))),$0)
"I see John from accounting."
	lambda $0_{ev}.see(i,att(john,from(lambda $1_{ev}.accounting($1))),$0)

*** Adjectives modifying proper nouns ***
"I saw polite nice Jane."
	lambda $0_{ev}.saw(i,att(att(jane,lambda $1_{ev}.polite($1)),lambda $2_{ev}.nice($2)),$0)
"I saw pretty Mary."
	lambda $0_{ev}.saw(i,att(mary,lambda $1_{ev}.pretty($1)),$0)

*** Adjectives modifying common nouns ***
"I can see a small green duck."
	lambda $0_{ev}.can(see(i,a($1,and(green($1),and(small($1),duck($1)))),$0),$0)
"I can see a green duck."
	lambda $0_{ev}.can(see(i,a($1,and(green($1),duck($1))),$0),$0)

*** possesives ***
"I can see duck's beak"
	lambda $0_{ev}.can(see(i,duck's($1,beak($1)),$0),$0)
"I see Mary's book."
	lambda $0_{ev}.see(i,mary's($1,book($1)),$0)

*** auxiliary ***
"I can see your cows."
	lambda $0_{ev}.can(see(i,your($1,cows($1)),$0),$0)

*** basic transitive verb construction ***
"I see ducks."
	lambda $0_{ev}.see(i,lambda $1_{ev}.ducks($1),$0)

*** ditransitive verb ***
"I give you a duck."
	lambda $0_{ev}.give(i,a($1,duck($1)),you,$0)

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: you tell me .
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
example_end

Sent: you want a cookie ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|cookie($1)),$0),$0)
example_end

Sent: the chocolate cookie .
Sem:  det|the($0,and(n|chocolate($0),n|cookie($0)))
example_end

Sent: the lady did come with Fraser .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|come(det|the($1,n|lady($1)),$0),$0),prep|with(n:prop|Fraser,$0))
example_end

Sent: her name 's Gloria .
Sem:  lambda $0_{ev}.eq(pro:poss:det|her($1,n|name($1)),n:prop|Gloria,$0)
example_end

Sent: her name 's Gloria .
Sem:  lambda $0_{ev}.eq(pro:poss:det|her($1,n|name($1)),n:prop|Gloria,$0)
example_end

Sent: peek in there at her .
Sem:  lambda $0_{ev}.and(v|peek(pro|you,$0),prep|at(pro|her,$0))
example_end

Sent: see her ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro|her,$0),$0)
example_end

Sent: you 're peeking at her again ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|peek-PROG(pro|you,$0),$0),adv|again($0)),$0)
example_end

Sent: peek around .
Sem:  lambda $0_{ev}.and(v|peek(pro|you,$0),adv:loc|around($0))
example_end

Sent: Gloria .
Sem:  n:prop|Gloria
example_end

Sent: Gloria .
Sem:  n:prop|Gloria
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: not that little glass .
Sem:  lambda $0_{ev}.not(det|that($1,and(adj|little($1),n|glass($1))),$0)
example_end

Sent: you drink it outof your cup right now .
Sem:  lambda $0_{ev}.and(v|drink(pro|you,pro|it,$0),adv|now($0))
example_end

Sent: you don 't need a glass .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|glass($1)),$0),$0),$0)
example_end

Sent: drink it outof your cup .
Sem:  lambda $0_{ev}.and(v|drink(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|cup($1)),$0))
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: you don 't need your glass .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,pro:poss:det|your($1,n|glass($1)),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 's Gloria .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Gloria,$0)
example_end

Sent: you can just see Fraser .
Sem:  lambda $0_{ev}.and(aux|can(v|see(pro|you,n:prop|Fraser,$0),$0),adv:int|just($0))
example_end

Sent: where is she ?
Sem:  lambda $0_{e}.eqLoc(pro|she,$0)
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's an airplane .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|airplane($1)),$0)
example_end

Sent: does it work ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|work(pro|it,$0),$0),$0)
example_end

Sent: who fixed it for you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(part|fix-PERF($0,pro|it,$1),prep|for(pro|you,$1))
example_end

Sent: Papa .
Sem:  n:prop|Papa
example_end

Sent: and what do you do with the plane ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(det|the($2,n|plane($2)),$1))
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what 's this  camera spool ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: what do you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Cathy too .
Sem:  n:prop|Cathy
example_end

Sent: it 's a new jar .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|new($1),n|jar($1))),$0)
example_end

Sent: it 's not a new kind .
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,and(adj|new($1),n|kind($1))),$0),$0)
example_end

Sent: I 've got a book here .
Sem:  lambda $0_{ev}.and(aux|have(part|get&PERF(pro|I,det|a($1,n|book($1)),$0),$0),adv:loc|here($0))
example_end

Sent: you do ?
Sem:  lambda $0_{ev}.Q(v|do(pro|you,$0),$0)
example_end

Sent: where is he ?
Sem:  lambda $0_{e}.eqLoc(pro|he,$0)
example_end

Sent: I don 't see him .
Sem:  lambda $0_{ev}.not(aux|do(v|see(pro|I,pro|him,$0),$0),$0)
example_end

Sent: and then what does he do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&3S(v|do(pro|he,$0,$1),$1),adv:tem|then($1))
example_end

Sent: he put his hat on ?
Sem:  lambda $0_{ev}.Q(and(v|put&ZERO(pro|he,pro:poss:det|his($1,n|hat($1)),$0),adv|on($0)),$0)
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: look at that .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro:dem|that,$0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a horse ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|horse($1)),$0)
example_end

Sent: they have their hats on .
Sem:  lambda $0_{ev}.and(v|have(pro|they,pro:poss:det|their($1,n|hat-PL($1)),$0),adv|on($0))
example_end

Sent: and what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: that 's a nice story .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: tell me about that .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:dem|that,$0))
example_end

Sent: it 's a burro .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|burro($1)),$0)
example_end

Sent: which story do you like best ?
Sem:  lambda $0_{ev}.Q(and(aux|do(v|like(pro|you,lambda $1_{e}.n|story($1),$0),$0),adv|good&SP($0)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who is the little boy ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,and(adj|little($2),n|boy($2))),$1)
example_end

Sent: what 's he doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|there($1))
example_end

Sent: he working .
Sem:  lambda $0_{ev}.part|work-PROG(pro|he,$0)
example_end

Sent: you was gone away .
Sem:  lambda $0_{ev}.and(aux|be&PAST&13S(part|go&PERF(pro|you,$0),$0),adv|away($0))
example_end

Sent: newspaper .
Sem:  lambda $0_{e}.n|newspaper($0)
example_end

Sent: where is it ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: what are you doing over there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),adv:loc|there($1))
example_end

Sent: you finished that story .
Sem:  lambda $0_{ev}.v|finish-PAST(pro|you,det|that($1,n|story($1)),$0)
example_end

Sent: that was a nice story .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|story($1))),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Humm .
Sem:  n:prop|Humm
example_end

Sent: what is Humm ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,n:prop|Humm,$1)
example_end

Sent: does he sing a song ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|sing(pro|he,det|a($1,n|song($1)),$0),$0),$0)
example_end

Sent: what 's Humm doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Humm,$0,$1),$1),adv:loc|here($1))
example_end

Sent: he 's eating a banana .
Sem:  lambda $0_{ev}.aux|be&3S(part|eat-PROG(pro|he,det|a($1,n|banana($1)),$0),$0)
example_end

Sent: what 's he doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|he,$0,$1),$1),adv:loc|here($1))
example_end

Sent: eating parsley .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|parsley($1),$0)
example_end

Sent: what 's he eating ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|he,$0,$1),$1)
example_end

Sent: say girl  Eve . MLR
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: say girl  .  MLR
Sem:  lambda $0_{ev}.v|say(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: what 's Humm doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Humm,$0,$1),$1),adv:loc|there($1))
example_end

Sent: he 's looking at you .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|look-PROG(pro|he,$0),$0),prep|at(pro|you,$0))
example_end

Sent: and what 's Humm doing there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Humm,$0,$1),$1),adv:loc|there($1))
example_end

Sent: eating bacon .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|bacon($1),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: eating lunch .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,lambda $1_{e}.n|lunch($1),$0)
example_end

Sent: that fell down .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro:dem|that,$0),adv:loc|down($0))
example_end

Sent: fell down .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro|you,$0),adv:loc|down($0))
example_end

Sent: what are the children doing here ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(det|the($2,n|child&PL($2)),$0,$1),$1),adv:loc|here($1))
example_end

Sent: they 're trying to find Humm .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|try-PROG(pro|they,$0),v|find(pro|they,n:prop|Humm,$0)),$0)
example_end

Sent: who are these people ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|these($2,n|person&PL($2)),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you are a good girl .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: they eating lunch .
Sem:  lambda $0_{ev}.part|eat-PROG(pro|they,lambda $1_{e}.n|lunch($1),$0)
example_end

Sent: who are those people ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|those($2,n|person&PL($2)),$1)
example_end

Sent: they 're trying to find Humm .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|try-PROG(pro|they,$0),v|find(pro|they,n:prop|Humm,$0)),$0)
example_end

Sent: what does Humm have there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&3S(v|have(n:prop|Humm,$0,$1),$1),adv:loc|there($1))
example_end

Sent: what 's this ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: did you tell Gloria the story ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|tell(pro|you,n:prop|Gloria,det|the($1,n|story($1)),$0),$0),$0)
example_end

Sent: some ball ?
Sem:  lambda $0_{ev}.Q(qn|some($1,n|ball($1)),$0)
example_end

Sent: what do you do in a boat ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|in(det|a($2,n|boat($2)),$1))
example_end

Sent: what do you do then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),adv:tem|then($1))
example_end

Sent: what do you do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|do(pro|you,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: she is indeed .
Sem:  pro|she
example_end

Sent: who 's making that noise .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|make-PROG($0,det|that($2,n|noise($2)),$1),$1)
example_end

Sent: you ?
Sem:  lambda $0_{ev}.Q(pro|you,$0)
example_end

Sent: what 're you doing .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: I 'm glad .
Sem:  adj|glad(pro|I)
example_end

Sent: who 's the little girl ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,and(adj|little($2),n|girl($2))),$1)
example_end

Sent: who 's that little girl ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,and(adj|little($2),n|girl($2))),$1)
example_end

Sent: who 's that little baby ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,and(adj|little($2),n|baby($2))),$1)
example_end

Sent: that 's Sarah ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Sarah,$0),$0)
example_end

Sent: is she ?
Sem:  lambda $0_{ev}.Q(pro|she,$0)
example_end

Sent: what does your baby sister do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro:poss:det|your($2,and(n|baby($2),n|sister($2))),$0,$1),$1)
example_end

Sent: what else does she do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|she,$0,$1),$1)
example_end

Sent: does she cry ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|cry(pro|she,$0),$0),$0)
example_end

Sent: does she laugh ?
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|laugh(pro|she,$0),$0),$0)
example_end

Sent: what else does she do ?  RES
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|she,$0,$1),$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: what 's Sarah doing now ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(n:prop|Sarah,$0,$1),$1),adv|now($1))
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a dingdong dell .
Sem:  det|a($0,n|dell($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a cart .
Sem:  det|a($0,n|cart($0))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: isn 't it a cart ?
Sem:  lambda $0_{ev}.Q(not(eq(pro|it,det|a($1,n|cart($1)),$0),$0),$0)
example_end

Sent: you look like a turtle .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|like(det|a($1,n|turtle($1)),$0))
example_end

Sent: there it goes .
Sem:  lambda $0_{ev}.and(v|go-3S(pro|it,$0),adv:loc|there($0))
example_end

Sent: what 's it doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|it,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what does it do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
example_end

Sent: where 's the airplane ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|airplane($1)),$0)
example_end

Sent: what did it do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|it,$0,$1),$1)
example_end

Sent: here it comes .
Sem:  lambda $0_{ev}.and(v|come-3S(pro|it,$0),adv:loc|here($0))
example_end

Sent: and who did it hit ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|hit&ZERO(pro|it,$0,$1),$1)
example_end

Sent: it hit me .
Sem:  lambda $0_{ev}.v|hit&ZERO(pro|it,pro|me,$0)
example_end

Sent: is it flying now ?
Sem:  lambda $0_{ev}.Q(and(aux|be&3S(part|fly-PROG(pro|it,$0),$0),adv|now($0)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what 's Colin doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Colin,$0,$1),$1)
example_end

Sent: what 's Fraser doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(n:prop|Fraser,$0,$1),$1)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what are you going to write ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|write(pro|you,$0,$1)),$1)
example_end

Sent: that 's Colin .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Colin,$0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: that 's my name .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,n|name($1)),$0)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: I 'll write their fingers .
Sem:  lambda $0_{ev}.aux|will(v|write(pro|I,pro:poss:det|their($1,n|finger-PL($1)),$0),$0)
example_end

Sent: the dirty fingers .
Sem:  det|the($0,and(adj|dirty($0),n|finger-PL($0)))
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: a lollipop ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|lollipop($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you are .
Sem:  pro|you
example_end

Sent: dingdong bell .
Sem:  lambda $0_{e}.n|bell($0)
example_end

Sent: that 's a cart .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|cart($1)),$0)
example_end

Sent: is it green ?
Sem:  lambda $0_{ev}.Q(adj|green(pro|it),$0)
example_end

Sent: she 's  Sarah listening to the story .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|listen-PROG(pro|she,$0),$0),prep|to(det|the($1,n|story($1)),$0))
example_end

Sent: you 're not reading the book ?
Sem:  lambda $0_{ev}.Q(not(aux|be&PRES(part|read-PROG(pro|you,det|the($1,n|book($1)),$0),$0),$0),$0)
example_end

Sent: doggies ?
Sem:  lambda $0_{e}.n|dog-DIM-PL($0)
example_end

Sent: any buses ?
Sem:  lambda $0_{ev}.Q(qn|any($1,n|bus-PL($1)),$0)
example_end

Sent: that 's a lot .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|lot($1)),$0)
example_end

Sent: we 'll come right back down .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|down($0))
example_end

Sent: they did wait for us .
Sem:  lambda $0_{ev}.and(aux|do&PAST(v|wait(pro|they,$0),$0),prep|for(pro|us,$0))
example_end

Sent: and what ?
Sem:  lambda $0_{e}.and($0)
example_end

Sent: you 'll get your spoon .
Sem:  lambda $0_{ev}.aux|will(v|get(pro|you,pro:poss:det|your($1,n|spoon($1)),$0),$0)
example_end

Sent: shall I cut it ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|cut&ZERO(pro|I,pro|it,$0),$0),$0)
example_end

Sent: I already cut it .
Sem:  lambda $0_{ev}.and(v|cut&ZERO(pro|I,pro|it,$0),adv|already($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what is Sarah having ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|have-PROG(n:prop|Sarah,$0,$1),$1)
example_end

Sent: zwieback .
Sem:  lambda $0_{e}.n|zwieback($0)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: that 's his sandwich .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|his($1,n|sandwich($1)),$0)
example_end

Sent: I bumped into the board .
Sem:  lambda $0_{ev}.and(v|bump-PAST(pro|I,$0),prep|into(det|the($1,n|board($1)),$0))
example_end

Sent: you forgot something .
Sem:  lambda $0_{ev}.v|forget&PAST(pro|you,pro:indef|something,$0)
example_end

Sent: what did I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|I,$0,$1),$1)
example_end

Sent: you said God  ?  MLR
Sem:  lambda $0_{ev}.v|say&PAST(pro|you,lambda $1_{e}.n|quote($1),$0)
example_end

Sent: God ?
Sem:  lambda $0_{ev}.Q(n:prop|God,$0)
example_end

Sent: Mama didn 't say God  .  MLR
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|say(n:prop|Mama,lambda $1_{e}.n|quote($1),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and so does Margaret .
Sem:  lambda $0_{ev}.and(v|do&3S(n:prop|Margaret,$0),adv:int|so($0))
example_end

Sent: Helga 's alright .
Sem:  adj|alright(n:prop|Helga)
example_end

Sent: we 'll sing that after lunch .
Sem:  lambda $0_{ev}.and(aux|will(v|sing(pro|we,pro:dem|that,$0),$0),prep|after(lambda $1_{e}.n|lunch($1),$0))
example_end

Sent: we won 't sing it right now .
Sem:  lambda $0_{ev}.not(and(aux|will(v|sing(pro|we,pro|it,$0),$0),adv|now($0)),$0)
example_end

Sent: I 'm eating lobster salad too .
Sem:  lambda $0_{ev}.aux|be&1S(part|eat-PROG(pro|I,lambda $1_{e}.and(n|lobster($1),n|salad($1)),$0),$0)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: what 's she gonna do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(pro|she,$1),v|do(pro|she,$0,$1)),$1)
example_end

Sent: what did you tell Fraser ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|tell(pro|you,$0,n:prop|Fraser,$1),$1)
example_end

Sent: we 're eating our lunch .
Sem:  lambda $0_{ev}.aux|be&PRES(part|eat-PROG(pro|we,pro:poss:det|our($1,n|lunch($1)),$0),$0)
example_end

Sent: maybe .
Sem:  lambda $0_{ev}.adv|maybe($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you can tell him right now .
Sem:  lambda $0_{ev}.and(aux|can(v|tell(pro|you,pro|him,$0),$0),adv|now($0))
example_end

Sent: don 't do that .
Sem:  lambda $0_{ev}.not(aux|do(v|do(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: and what did we do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|we,$0,$1),$1)
example_end

Sent: we had breakfast there .
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|we,lambda $1_{e}.n|breakfast($1),$0),adv:loc|there($0))
example_end

Sent: are you finished ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
example_end

Sent: now we 'll wash your hands .
Sem:  lambda $0_{ev}.and(aux|will(v|wash(pro|we,pro:poss:det|your($1,n|hand-PL($1)),$0),$0),adv|now($0))
example_end

Sent: what was it what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did you do then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:tem|then($1))
example_end

Sent: what did we see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|see(pro|we,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what did I do there ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|I,$0,$1),$1),adv:loc|there($1))
example_end

Sent: I went to a wedding .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|I,$0),prep|to(det|a($1,n|wedding($1)),$0))
example_end

Sent: I went inside the airplane .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|I,$0),prep|inside(det|the($1,n|airplane($1)),$0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're exactly right .
Sem:  adj|right(pro|you)
example_end

Sent: yours is blue .
Sem:  adj|blue(pro:poss|yours)
example_end

Sent: yours is blue .
Sem:  adj|blue(pro:poss|yours)
example_end

Sent: you didn 't forget it .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|forget(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you said it .
Sem:  lambda $0_{ev}.v|say&PAST(pro|you,pro|it,$0)
example_end

Sent: you didn 't forget it .
Sem:  lambda $0_{ev}.not(aux|do&PAST(v|forget(pro|you,pro|it,$0),$0),$0)
example_end

Sent: it went in there .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|it,$0),adv:loc|in($0))
example_end

Sent: don 't say it again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|say(pro|you,pro|it,$0),$0),adv|again($0)),$0)
example_end

Sent: say another nursery rhyme .
Sem:  lambda $0_{ev}.v|say(pro|you,qn|another($1,and(n|nursery($1),n|rhyme($1))),$0)
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: what did we forget ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|forget(pro|we,$0,$1),$1)
example_end

Sent: they 're not talking to you .
Sem:  lambda $0_{ev}.not(and(aux|be&PRES(part|talk-PROG(pro|they,$0),$0),prep|to(pro|you,$0)),$0)
example_end

Sent: it 's not Becky .
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Becky,$0),$0)
example_end

Sent: it 's somebody else .
Sem:  lambda $0_{ev}.eq(pro|it,pro:indef|somebody,$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're pulling her down .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|pull-PROG(pro|you,pro|her,$0),$0),adv:loc|down($0))
example_end

Sent: she 's falling .
Sem:  lambda $0_{ev}.aux|be&3S(part|fall-PROG(pro|she,$0),$0)
example_end

Sent: you 're falling .
Sem:  lambda $0_{ev}.aux|be&PRES(part|fall-PROG(pro|you,$0),$0)
example_end

Sent: watch your foot .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: is she ?
Sem:  lambda $0_{ev}.Q(pro|she,$0)
example_end

Sent: that 's not Papa .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
example_end

Sent: it looks like Papa ?
Sem:  lambda $0_{ev}.Q(and(v|look-3S(pro|it,$0),prep|like(n:prop|Papa,$0)),$0)
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: a picture .
Sem:  det|a($0,n|picture($0))
example_end

Sent: another statue .
Sem:  qn|another($0,n|statue($0))
example_end

Sent: what was that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's alright .
Sem:  pro:dem|that
example_end

Sent: you come back in .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|in($0))
example_end

Sent: play with the children .
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),prep|with(det|the($1,n|child&PL($1)),$0))
example_end

Sent: outside .
Sem:  lambda $0_{ev}.adv:loc|outside($0)
example_end

Sent: what are you doing to me ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|to(pro|me,$1))
example_end

Sent: pushing what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.part|push-PROG(pro|you,$0,$1)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: yourself .
Sem:  pro:refl|yourself
example_end

Sent: leave it right there .
Sem:  lambda $0_{ev}.and(v|leave(pro|you,pro|it,$0),adv:loc|there($0))
example_end

Sent: Colin ?
Sem:  lambda $0_{ev}.Q(n:prop|Colin,$0)
example_end

Sent: Colin is his name .
Sem:  lambda $0_{ev}.eq(n:prop|Colin,pro:poss:det|his($1,n|name($1)),$0)
example_end

Sent: and Eve Cummings .
Sem:  n:prop|Eve
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: you 're drawing on it ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|draw-PROG(pro|you,$0),$0),prep|on(pro|it,$0)),$0)
example_end

Sent: what do you have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|have(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'll do that .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|that,$0),$0)
example_end

Sent: here ?
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: running ?
Sem:  lambda $0_{ev}.Q(part|run-PROG(pro|you,$0),$0)
example_end

Sent: you 're going round .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv|round($0))
example_end

Sent: what 's what ?
Sem:  lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.eq($1,$0,$2)
example_end

Sent: rain ?
Sem:  lambda $0_{e}.n|rain($0)
example_end

Sent: what hurts ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|hurt-3S(pro|you,$0,$1)
example_end

Sent: not Colingc .
Sem:  lambda $0_{ev}.not(n:prop|Coling,$0)
example_end

Sent: not Colingc .
Sem:  lambda $0_{ev}.not(n:prop|Coling,$0)
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: Colin .
Sem:  n:prop|Colin
example_end

Sent: you have a fingernail ?
Sem:  lambda $0_{ev}.Q(v|have(pro|you,det|a($1,n|fingernail($1)),$0),$0)
example_end

Sent: hangnail .
Sem:  lambda $0_{e}.n|hangnail($0)
example_end

Sent: hangnail .
Sem:  lambda $0_{e}.n|hangnail($0)
example_end

Sent: Papa fixed it for you ?
Sem:  lambda $0_{ev}.Q(and(v|fix-PAST(n:prop|Papa,pro|it,$0),prep|for(pro|you,$0)),$0)
example_end

Sent: she probably caught it in her teeth .
Sem:  lambda $0_{ev}.and(v|catch&PAST(pro|she,pro|it,$0),prep|in(pro:poss:det|her($1,n|tooth&PL($1)),$0))
example_end

Sent: it 's probably a good idea too .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: we 'll read it later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,pro|it,$0),$0),adv|later($0))
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end

Sent: who can read them to you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|can(v|read&ZERO($0,pro|them,$1),$1),prep|to(pro|you,$1))
example_end

Sent: we 'll read them later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,pro|them,$0),$0),adv|later($0))
example_end

Sent: I 'll do that for you .
Sem:  lambda $0_{ev}.and(aux|will(v|do(pro|I,pro:dem|that,$0),$0),prep|for(pro|you,$0))
example_end

Sent: what would you like me to do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(and(v|like(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: that 's the way .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
example_end

Sent: you draw some flowers for me .
Sem:  lambda $0_{ev}.and(v|draw(pro|you,qn|some($1,n|flower-PL($1)),$0),prep|for(pro|me,$0))
example_end

Sent: because what ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: write now what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|write(pro|you,$0,$1),adv|now($1))
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 'm I drawing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|draw-PROG(pro|I,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: will I draw another house ?
Sem:  lambda $0_{ev}.Q(aux|will(v|draw(pro|I,qn|another($1,n|house($1)),$0),$0),$0)
example_end

Sent: is it a bouncy couch ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,det|a($1,and(adj|bouncy($1),n|couch($1))),$0),$0)
example_end

Sent: what are we gonna get ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|get(pro|we,$0,$1)),$1)
example_end

Sent: that 's your shoe .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|shoe($1)),$0)
example_end

Sent: Sarah .
Sem:  n:prop|Sarah
example_end

Sent: she was taking a nap .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|take-PROG(pro|she,det|a($1,n|nap($1)),$0),$0)
example_end

Sent: you managed very well .
Sem:  lambda $0_{ev}.and(v|manage-PAST(pro|you,$0),adv|well($0))
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: now .
Sem:  lambda $0_{ev}.adv|now($0)
example_end

Sent: a bus ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|bus($1)),$0)
example_end

Sent: that 's a house .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|house($1)),$0)
example_end

Sent: that 's not a bus .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|bus($1)),$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: then what 'll we have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will(v|have(pro|we,$0,$1),$1),adv:tem|then($1))
example_end

Sent: it will be .
Sem:  pro|it
example_end

Sent: it looks like a sailingboat too ?
Sem:  lambda $0_{ev}.Q(and(v|look-3S(pro|it,$0),prep|like(det|a($1,n|+n|sailing+n|boat($1)),$0)),$0)
example_end

Sent: both funnels .
Sem:  qn|both($0,n|funnel-PL($0))
example_end

Sent: she is .
Sem:  pro|she
example_end

Sent: something ?
Sem:  lambda $0_{ev}.Q(pro:indef|something,$0)
example_end

Sent: did we get it ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|we,pro|it,$0),$0),$0)
example_end

Sent: the bus stop ?
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|bus($1),n|stop($1))),$0)
example_end

Sent: she 's not coming .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|come-PROG(pro|she,$0),$0),$0)
example_end

Sent: she 's working probably .
Sem:  lambda $0_{ev}.aux|be&3S(part|work-PROG(pro|she,$0),$0)
example_end

Sent: we 'll read it later .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,pro|it,$0),$0),adv|later($0))
example_end

Sent: this way ?
Sem:  lambda $0_{ev}.Q(det|this($1,n|way($1)),$0)
example_end

Sent: this is the right way .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|the($1,and(adj|right($1),n|way($1))),$0)
example_end

Sent: it 's Baabaablacksheep .
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Baa_baa_black_sheep,$0)
example_end

Sent: they 're going to market .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|they,$0),$0),prep|to(lambda $1_{e}.n|market($1),$0))
example_end

Sent: Exeter .
Sem:  n:prop|Exeter
example_end

Sent: have you got dirty feet ?
Sem:  lambda $0_{ev}.Q(aux|have(part|get&PERF(pro|you,lambda $1_{e}.and(adj|dirty($1),n|foot&PL($1)),$0),$0),$0)
example_end

Sent: or do you have clean feet .
Sem:  lambda $0_{ev}.aux|do(v|have(pro|you,lambda $1_{e}.and(adj|clean($1),n|foot&PL($1)),$0),$0)
example_end

Sent: Eve  Eve .
Sem:  n:prop|Eve
example_end

Sent: what does Eve want for lunch ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&3S(v|want(n:prop|Eve,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
example_end

Sent: what what  what ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: you washed them ?
Sem:  lambda $0_{ev}.Q(v|wash-PAST(pro|you,pro|them,$0),$0)
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'll get it for her .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|her,$0))
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: we 'll come right back .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|back($0))
example_end

Sent: Becky doesn 't say it right .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|say(n:prop|Becky,pro|it,$0),$0),adv|right($0)),$0)
example_end

Sent: stick your head in gravy .
Sem:  lambda $0_{ev}.and(v|stick(pro|you,pro:poss:det|your($1,n|head($1)),$0),prep|in(lambda $2_{e}.n|gravy($2),$0))
example_end

Sent: moment .
Sem:  lambda $0_{e}.n|moment($0)
example_end

Sent: moment .
Sem:  lambda $0_{e}.n|moment($0)
example_end

Sent: mayonnaise .
Sem:  lambda $0_{e}.n|mayonnaise($0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: mayonnaise .
Sem:  lambda $0_{e}.n|mayonnaise($0)
example_end

Sent: it 's good .
Sem:  adj|good(pro|it)
example_end

Sent: what 's she doing in the tree ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|she,$0,$1),$1),prep|in(det|the($2,n|tree($2)),$1))
example_end

Sent: mayonnaise .
Sem:  lambda $0_{e}.n|mayonnaise($0)
example_end

Sent: this is the end .
Sem:  lambda $0_{ev}.eq(pro:dem|this,det|the($1,n|end($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you sharing it with Sarah .
Sem:  lambda $0_{ev}.and(part|share-PROG(pro|you,pro|it,$0),prep|with(n:prop|Sarah,$0))
example_end

Sent: bread .
Sem:  lambda $0_{e}.n|bread($0)
example_end

Sent: bread .
Sem:  lambda $0_{e}.n|bread($0)
example_end

Sent: put it right down on your cracker .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|cracker($1)),$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: that just came outof the refrigerator .
Sem:  lambda $0_{ev}.and(v|come&PAST(pro:dem|that,$0),prep|out_of(det|the($1,n|refrigerator($1)),$0))
example_end

Sent: this is it .
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: put it in your dish .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|in(pro:poss:det|your($1,n|dish($1)),$0))
example_end

Sent: you can put it in .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,pro|it,$0),$0),adv:loc|in($0))
example_end

Sent: lick it off with your tongue .
Sem:  lambda $0_{ev}.and(v|lick(pro|you,pro|it,$0),prep|with(pro:poss:det|your($1,n|tongue($1)),$0))
example_end

Sent: taste it .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro|it,$0)
example_end

Sent: clean it off ?
Sem:  lambda $0_{ev}.Q(and(v|clean(pro|you,pro|it,$0),adv|off($0)),$0)
example_end

Sent: that 'll be wonderful .
Sem:  adj|wonderful(pro:dem|that)
example_end

Sent: you do that .
Sem:  lambda $0_{ev}.v|do(pro|you,pro:dem|that,$0)
example_end

Sent: do you want some soup ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,qn|some($1,n|soup($1)),$0),$0),$0)
example_end

Sent: it is .
Sem:  pro|it
example_end

Sent: taste it .
Sem:  lambda $0_{ev}.v|taste(pro|you,pro|it,$0)
example_end

Sent: put in your mouth and lick it off .
Sem:  pro|it
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: are you finished ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
example_end

Sent: then finish quickly .
Sem:  lambda $0_{ev}.and(v|finish(pro|you,$0),adv:tem|then($0))
example_end

Sent: hurry up .
Sem:  lambda $0_{ev}.and(v|hurry(pro|you,$0),adv:loc|up($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: this ?
Sem:  lambda $0_{ev}.Q(pro:dem|this,$0)
example_end

Sent: that 's my cookie press .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|my($1,and(n|cookie($1),n|press($1))),$0)
example_end

Sent: make cookies with it .
Sem:  lambda $0_{ev}.and(v|make(pro|you,lambda $1_{e}.n|cookie-PL($1),$0),prep|with(pro|it,$0))
example_end


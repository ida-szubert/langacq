Sent: were you a pirate too ?
Sem: lambda $0_{r}.Q(det:art|a_3(post|too_5(pro:per|you_2),n|pirate_4(post|too_5(pro:per|you_2),$0)))
example_end

Sent: he was a tiger ?
Sem: lambda $0_{r}.Q(det:art|a_3(pro:sub|he_1,n|tiger_4(pro:sub|he_1,$0)))
example_end

Sent: you want one what ?
Sem: lambda $1_{e}.lambda $0_{r}.v|want_2(pro:per|you_1,$1,$0)
example_end

Sent: you won 't eat !
Sem: lambda $0_{r}.not(mod|will_2(v|eat_4(pro:per|you_1,$0),$0),$0)
example_end

Sent: what won 't you eat ?
Sem: lambda $1_{e}.lambda $0_{r}.not(mod|will_2(v|eat_5(pro:per|you_4,$1,$0),$0),$0)
example_end

Sent: you won 't eat tigers !
Sem: lambda $0_{r}.not(mod|will_2(v|eat_4(pro:per|you_1,BARE($1,n|tiger-pl_5($1)),$0),$0),$0)
example_end

Sent: I should hope not .
Sem: lambda $0_{r}.mod|should_2(v|hope_3(pro:sub|i_1,neg|not_4,$0),$0)
example_end

Sent: what were you doing then ?
Sem: lambda $1_{e}.lambda $0_{r}.cop|be-past_2(and(part|do-presp_4(pro:per|you_3,$1,$0),adv:tem|then_5($0)),$0)
example_end

Sent: oh it was .
Sem: lambda $0_{r}.and(cop|be-past_3(pro:per|it_2,$0),co|oh_1($0))
example_end

Sent: where does he come from ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.v|do-3s_2(and(v|come_4(pro:sub|he_3,$0),$1($0)),$0)
example_end

Sent: where 's the real Ursula ?
Sem: lambda $0_{r}.Q(adv:int|where_1(det:art|the_3($1,att(BARE($2,n:prop|ursula_5($2)),BARE($3,adj|real_4($3)),$1)),$0))
example_end

Sent: Adam Smith what 're you doing ?
Sem: lambda $1_{e}.lambda $0_{r}.aux|~be_4(part|do-presp_6(pro:per|you_5,$1,$0),$0)
example_end

Sent: yes what is that ?
Sem: lambda $1_{e}.lambda $0_{r}.and($1(pro:dem|that_4,$0),co|yes_1($0))
example_end

Sent: why does that have_to be attached to that ?
Sem: lambda $2_{<r,t>}.lambda $0_{r}.mod|do-3s_2(and(mod:aux|have_to_4(pro:dem|that_3,lambda $1_{r}.v|attach-past_7(pro:dem|that_3,$1),$0),$2($0)),$0)
example_end

Sent: it 's part of it .
Sem: lambda $0_{r}.att(n|part_3(pro:per|it_1,$0),prep|of_4(pro:per|it_5))
example_end

Sent: tell Ursula what happened .
Sem: lambda $0_{r}.v|tell_1(you,n:prop|ursula_2,lambda $1_{r}.v|happen-past_4(_,pro:int|what_3,$1),$0)
example_end

Sent: and what happened to it ?
Sem: lambda $1_{e}.lambda $0_{r}.and(v|happen-past_3($1,$0),prep|to_4(pro:per|it_5,$0))
example_end

Sent: oh I don 't think so .
Sem: lambda $0_{r}.and(not(mod|do_3(and(v|think_5(pro:sub|i_2,$0),co|so_6($0)),$0),$0),co|oh_1($0))
example_end

Sent: tell her what happened .
Sem: lambda $0_{r}.v|tell_1(you,pro:obj|her_2,lambda $1_{r}.v|happen-past_4(pro:int|what_3,$1),$0)
example_end

Sent: I won 't bite .
Sem: lambda $0_{r}.not(mod|will_2(v|bite_4(pro:sub|i_1,$0),$0),$0)
example_end

Sent: what d you have in your pocket ?
Sem: lambda $1_{e}.lambda $0_{r}.mod|do_2(and(v|have_4(pro:per|you_3,$1,$0),prep|in_5(det:poss|your_6($2,n|pocket_7($2)),$0)),$0)
example_end

Sent: you turn .
Sem: lambda $0_{r}.v|turn_2(pro:per|you_1,$0)
example_end

Sent: Adam why don 't you sit down ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.not(mod|do_3(and(v|sit_6_down_7(pro:per|you_5,$0),$1($0)),$0),$0)
example_end

Sent: there 're some toys right there .
Sem: lambda $0_{r}.and(aux|~be_2(qn|some_3($1,n|toy-pl_4($1)),$0),adv|right_5(adv|there_6($0)))
example_end

Sent: what d you think it says ?
Sem: lambda $0_{r}.Q(mod|do_2(v|think_4(pro:per|you_3,lambda $1_{r}.v|say-3s_6(pro:per|it_5,pro:int|what_1,$1),$0),$0))
example_end

Sent: now you do the rest .
Sem: lambda $0_{r}.and(v|do_3(pro:per|you_2,det:art|the_4($1,n|rest_5($1)),$0),adv|now_1($0))
example_end

Sent: is Smokey in a real forest ?
Sem: lambda $0_{r}.Q(prep|in_3(det:art|a_4($1,and(adj|real_5($1),n|forest_6($1))),n:prop|smokey_2,$0))
example_end

Sent: they 're bears in real forests yes .
Sem: lambda $0_{r}.and(att(n|bear-pl_3(pro:sub|they_1,$0),prep|in_4(BARE($1,and(adj|real_5($1),n|forest-pl_6($1))))),co|yes_7($0))
example_end

Sent: she left it for me .
Sem: lambda $0_{r}.and(v|leave-past_2(pro:sub|she_1,pro:per|it_3,$0),prep|for_4(pro:obj|me_5,$0))
example_end

Sent: no I let you look at it .
Sem: lambda $0_{r}.and(v|let-zero_3(pro:sub|i_2,lambda $1_{r}.and(cop|look_5(pro:per|you_4,$1),prep|at_6(pro:per|it_7,$1)),$0),co|no_1($0))
example_end

Sent: I shared my book with you .
Sem: lambda $0_{r}.and(v|share-past_2(pro:sub|i_1,det:poss|my_3($1,n|book_4($1)),$0),prep|with_5(pro:per|you_6,$0))
example_end

Sent: what 're you doing over there ?
Sem: lambda $1_{e}.lambda $0_{r}.aux|~be_2(and(part|do-presp_4(pro:per|you_3,$1,$0),adv|over_5(adv|there_6($0))),$0)
example_end

Sent: why don 't you start down here ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.not(mod|do_2(and(and(v|start_5(pro:per|you_4,$0),$1($0)),adv|down_6(adv|here_7($0))),$0),$0)
example_end

Sent: I was looking .
Sem: lambda $0_{r}.aux|be-past_2(part|look-presp_3(pro:sub|i_1,$0),$0)
example_end

Sent: no I 'm not going to do it .
Sem: lambda $0_{r}.and(not(cop|~be_3(part|go-presp_5(pro:sub|i_2,lambda $1_{r}.v|do_7(pro:sub|i_2,pro:per|it_8,$1),$0),$0),$0),co|no_1($0))
example_end

Sent: you have_to come back .
Sem: lambda $0_{r}.mod:aux|have_to_2(pro:per|you_1,lambda $1_{r}.v|come_4(pro:per|you_1,$1),$0)
example_end

Sent: we have_to go one after another .
Sem: lambda $0_{r}.mod:aux|have_to_2(pro:sub|we_1,lambda $1_{r}.v|go_4(pro:sub|we_1,$1),$0)
example_end

Sent: put it in from the back .
Sem: lambda $0_{r}.and(and(v|put-zero_1(you,pro:per|it_2,$0),prep|in_3($0)),prep|from_4(BARE($1,adj|back_6($1)),$0))
example_end

Sent: his name is Leonard Lion .
Sem: lambda $0_{r}.n:prop|leonard_4_lion_5(det:poss|his_1($1,n|name_2($1)),$0)
example_end

Sent: put it through the back .
Sem: lambda $0_{r}.and(v|put-zero_1(you,pro:per|it_2,$0),prep|through_3(det:art|the_4($1,n|back_5($1)),$0))
example_end

Sent: Paul don 't knock on the window please .
Sem: lambda $0_{r}.and(not(mod|do_2(and(v|knock_4(you,$0),prep|on_5(det:art|the_6($1,n|window_7($1)),$0)),$0),$0),co|please_8($0))
example_end

Sent: Paul no !
Sem: lambda $0_{r}.co|no_2($0)
example_end

Sent: you missed these .
Sem: lambda $0_{r}.v|miss-past_2(pro:per|you_1,pro:dem|these_3,$0)
example_end

Sent: Adam please come and visit me .
Sem: lambda $0_{r}.and(v|visit_5(you,pro:obj|me_6,$0),co|please_2($0))
example_end

Sent: the holes .
Sem: det:art|the_1($0,n|hole-pl_2($0))
example_end

Sent: did you miss one ?
Sem: lambda $0_{r}.Q(v|do-past_1(n|miss_3(pro:per|you_2,pro:indef|one_4,$0),$0))
example_end

Sent: does a hippopotamus have a big wide mouth ?
Sem: lambda $0_{r}.Q(v|do-3s_1(v|have_4(det:art|a_2($1,n|hippopotamus_3($1)),det:art|a_5($2,and(adj|wide_7($2),and(adj|big_6($2),n|mouth_8($2)))),$0),$0))
example_end

Sent: I think it 's a rhinoceros .
Sem: lambda $0_{r}.v|think_2(pro:sub|i_1,lambda $1_{r}.det:art|a_5(pro:per|it_3,n|rhinoceros_6(pro:per|it_3,$1)),$0)
example_end

Sent: do the what ?
Sem: lambda $1_{e}.lambda $0_{r}.v|do_1(you,$1,$0)
example_end

Sent: your busy little horse ?
Sem: BARE($0,Q(det:poss|your_1($1,and(adj|little_3($1),and(adj|busy_2($1),n|horse_4($1))),$0)))
example_end

Sent: stop Diandra .
Sem: lambda $0_{r}.n|stop_1(you,$0)
example_end

Sent: that was your horse ?
Sem: lambda $0_{r}.Q(det:poss|your_3(pro:dem|that_1,n|horse_4(pro:dem|that_1,$0)))
example_end

Sent: he doesn 't know dogs and boys .
Sem: lambda $0_{r}.not(mod|do_2(v|know_4(pro:sub|he_1,BARE($1,n|boy-pl_7($1)),$0),$0),$0)
example_end

Sent: d you think the baby whale might want some milk ?
Sem: lambda $0_{r}.Q(mod|do_1(v|think_3(pro:per|you_2,lambda $1_{r}.mod|might_7(v|want_8(det:art|the_4($2,and_comp(n|baby_5($2),n|whale_6($2))),qn|some_9($3,n|milk_10($3)),$1),$1),$0),$0))
example_end

Sent: oh was that a police whistle ?
Sem: lambda $0_{r}.Q(and(det:art|a_4(pro:rel|that_3,and_comp(n|police_5(pro:rel|that_3,$0),n|whistle_6(pro:rel|that_3,$0))),co|oh_1($0)))
example_end

Sent: Paul has his .
Sem: lambda $0_{r}.aux|have-3s_2(n:prop|paul_1,det:poss|his_3,$0)
example_end

Sent: no thank_you !
Sem: qn|no_1($0,n|thank_you_2($0))
example_end

Sent: a syrup .
Sem: det:art|a_1($0,n|syrup_2($0))
example_end

Sent: what kind of syrup ?
Sem: lambda $0_{<<e,e>,e>}.$0($1,att(n|kind_2($1),prep|of_3(BARE($2,n|syrup_4($2)))))
example_end

Sent: Adam come back in here please .
Sem: lambda $0_{r}.and(and(and(v|come_2(you,$0),adv|back_3($0)),adv|here_5($0)),co|please_6($0))
example_end

Sent: I don 't have no many babies .
Sem: lambda $0_{r}.not(mod|do_2(v|have_4(pro:sub|i_1,qn|no_5($1,qn|many_6($2,n|baby-pl_7($2),$1)),$0),$0),$0)
example_end

Sent: a funnel .
Sem: det:art|a_1($0,n|funnel_2($0))
example_end

Sent: you can pour things through here into a small bottle .
Sem: lambda $0_{r}.mod|can_2(and(and(v|pour_3(pro:per|you_1,BARE($1,n|thing-pl_4($1)),$0),adv|through_5(adv|here_6($0))),prep|into_7(det:art|a_8($2,and(adj|small_9($2),n|bottle_10($2))),$0)),$0)
example_end

Sent: no why d you want to ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.and(mod|do_3(and(v|want_5(pro:per|you_4,$0),$1($0)),$0),co|no_1($0))
example_end

Sent: why don 't we not do that today ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.not(not(mod|do_2(and(and(v|do_6(pro:sub|we_4,pro:dem|that_7,$0),$1($0)),adv:tem|today_8($0)),$0),$0),$0)
example_end

Sent: but why don 't we not not do that today .
Sem: lambda $1_{<r,t>}.lambda $0_{r}.not(not(mod|do_3(and(and(v|do_8(pro:sub|we_5,pro:dem|that_9,$0),$1($0)),adv:tem|today_10($0)),$0),$0),$0)
example_end

Sent: it 's patient ?
Sem: lambda $0_{r}.Q(adj|patient_3(pro:per|it_1,$0))
example_end

Sent: where 's the nipple for that bottle ?
Sem: lambda $0_{r}.Q(adv:int|where_1(det:art|the_3($1,att(n|nipple_4($1),prep|for_5(pro:dem|that_6($2,n|bottle_7($2))))),$0))
example_end

Sent: why did she swallow it ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.mod|do-past_2(and(v|swallow_4(pro:sub|she_3,pro:per|it_5,$0),$1($0)),$0)
example_end

Sent: she likes milk ?
Sem: lambda $0_{r}.Q(v|like-3s_2(pro:sub|she_1,BARE($1,n|milk_3($1)),$0))
example_end

Sent: here the funnel ?
Sem: BARE($0,Q(adv|here_1(det:art|the_2($1,n|funnel_3($1)),$0)))
example_end

Sent: did it go down already ?
Sem: lambda $0_{r}.Q(mod|do-past_1(and(and(v|go_3(pro:per|it_2,$0),adv|down_4($0)),adv|already_5($0)),$0))
example_end

Sent: that 's spray .
Sem: lambda $0_{r}.n|spray_3(pro:dem|that_1,$0)
example_end

Sent: what d you call what you do to a bottle ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{r}.mod|do_2(v|call_4(pro:per|you_3,$1,$2,$0),$0)
example_end

Sent: d you tie a bottle ?
Sem: lambda $0_{r}.Q(mod|do_1(v|tie_3(pro:per|you_2,det:art|a_4($1,n|bottle_5($1)),$0),$0))
example_end

Sent: what d you do to a bottle ?
Sem: lambda $1_{e}.lambda $0_{r}.mod|do_2(and(v|do_4(pro:per|you_3,$1,$0),prep|to_5(det:art|a_6($2,n|bottle_7($2)),$0)),$0)
example_end

Sent: see it .
Sem: lambda $0_{r}.v|see_1(you,pro:per|it_2,$0)
example_end

Sent: d you see it ?
Sem: lambda $0_{r}.Q(mod|do_1(v|see_3(pro:per|you_2,pro:per|it_4,$0),$0))
example_end

Sent: it 's full .
Sem: lambda $0_{r}.adj|full_3(pro:per|it_1,$0)
example_end

Sent: put your fingers there .
Sem: lambda $0_{r}.and(v|put-zero_1(you,det:poss|your_2($1,n|finger-pl_3($1)),$0),adv|there_4($0))
example_end

Sent: no not in Diandro 's bottle because that top comes off very easily .
Sem: n:prop|diandro_4's($0,n|bottle_6($0))
example_end

Sent: well give him one dear .
Sem: lambda $0_{r}.and(v|give_2(you,pro:indef|one_4,pro:obj|him_3,$0),co|well_1($0))
example_end

Sent: he had one of those .
Sem: lambda $0_{r}.v|have-past_2(pro:sub|he_1,BARE($1,det:num|one_3($1)),$0)
example_end

Sent: forty cents ?
Sem: BARE($0,Q(det:num|forty_1(n|cent-pl_2($0))))
example_end

Sent: red eyes ?
Sem: BARE($0,Q(and(adj|red_1($0),n|eye-pl_2($0))))
example_end

Sent: you missed .
Sem: lambda $0_{r}.v|miss-past_2(pro:per|you_1,$0)
example_end

Sent: you don 't want to lose the tops .
Sem: lambda $0_{r}.not(mod|do_2(v|want_4(pro:per|you_1,lambda $1_{r}.v|lose_6(pro:per|you_1,det:art|the_7($2,n|top-pl_8($2)),$1),$0),$0),$0)
example_end

Sent: I think you missed the bottle .
Sem: lambda $0_{r}.v|think_2(pro:sub|i_1,lambda $1_{r}.v|miss-past_4(pro:per|you_3,det:art|the_5($2,n|bottle_6($2)),$1),$0)
example_end

Sent: it 's growing !
Sem: lambda $0_{r}.aux|~be_2(part|grow-presp_3(pro:per|it_1,$0),$0)
example_end

Sent: I don 't think so .
Sem: lambda $0_{r}.not(mod|do_2(and(v|think_4(pro:sub|i_1,$0),co|so_5($0)),$0),$0)
example_end

Sent: what does that spell ?
Sem: lambda $1_{e}.lambda $0_{r}.mod|do-3s_2(n|spell_4(pro:dem|that_3,$1,$0),$0)
example_end

Sent: what is spray ?
Sem: lambda $1_{e}.lambda $0_{r}.$1(BARE($2,v|spray_3($2)),$0)
example_end

Sent: what kind is it ?
Sem: lambda $1_{e}.lambda $0_{r}.$1(pro:per|it_4,n|kind_2(pro:per|it_4,$0))
example_end

Sent: chocolate spray ?
Sem: BARE($0,Q(and_comp(n|chocolate_1($0),n|spray_2($0))))
example_end

Sent: you said it was chocolate spray .
Sem: lambda $0_{r}.v|say-past_2(pro:per|you_1,lambda $1_{r}.and_comp(n|chocolate_5(pro:per|it_3,$1),n|spray_6(pro:per|it_3,$1)),$0)
example_end

Sent: thank_you dear .
Sem: lambda $0_{r}.co|thank_you_1(you,$0)
example_end

Sent: Paul and Diandra stop it .
Sem: lambda $0_{r}.v|stop_4(you,pro:per|it_5,$0)
example_end

Sent: that 's enough both of you .
Sem: lambda $0_{r}.adv|enough_3($0)
example_end

Sent: no that 's not clean water honey .
Sem: lambda $0_{r}.and(not(and(n|water_6(pro:dem|that_2,$0),adj|clean_5(pro:dem|that_2,$0)),$0),co|no_1($0))
example_end

Sent: you must have lost it .
Sem: lambda $0_{r}.aux|have_3(mod|must_2(part|lose-pastp_4(pro:per|you_1,pro:per|it_5,$0),$0),$0)
example_end

Sent: what happened to the funnel ?
Sem: lambda $1_{e}.lambda $0_{r}.and(v|happen-past_2($1,$0),prep|to_3(det:art|the_4($2,n|funnel_5($2)),$0))
example_end

Sent: you 're making a mess there .
Sem: lambda $0_{r}.aux|~be_2(and(part|make-presp_3(pro:per|you_1,det:art|a_4($1,n|mess_5($1)),$0),adv|there_6($0)),$0)
example_end

Sent: you have a funnel that let 's you know when you have enough in the bottle .
Sem: lambda $0_{r}.v|have_2(pro:per|you_1,det:art|a_3($1,n|funnel_4($1)),$0)
example_end

Sent: where 's the other bottle ?
Sem: lambda $0_{r}.Q(adv:int|where_1(det:art|the_3($1,and(qn|other_4($1),n|bottle_5($1))),$0))
example_end

Sent: open it up and see .
Sem: lambda $0_{r}.and(v|see_5(you,pro:per|it_2,$0),adv|up_3($0))
example_end

Sent: what have they got those men ?
Sem: lambda $1_{e}.lambda $0_{r}.v|have_2(v|get-past_4(pro:sub|they_3,$1,$0),$0)
example_end

Sent: no wonder what ?
Sem: lambda $1_{e}.lambda $0_{r}.not(v|wonder_2($1,$0),$0)
example_end

Sent: how can animals box themselves ?
Sem: lambda $2_{<r,t>}.lambda $0_{r}.mod|can_2(and(n|box_4(BARE($1,n|animal-pl_3($1)),pro:refl|themselves_5,$0),$2($0)),$0)
example_end

Sent: what d you think this says ?
Sem: lambda $0_{r}.Q(mod|do_2(v|think_4(pro:per|you_3,lambda $1_{r}.v|say-3s_6(pro:dem|this_5,pro:int|what_1,$1),$0),$0))
example_end

Sent: and they 've got animal skins on for clothes .
Sem: lambda $0_{r}.aux|~have_3(and(and(part|get-pastp_4(pro:sub|they_2,BARE($1,and_comp(n|animal_5($1),n|skin-pl_6($1))),$0),adv|on_7($0)),prep|for_8(BARE($2,n:pt|clothes_9($2)),$0)),$0)
example_end

Sent: animal skins .
Sem: BARE($0,and_comp(n|animal_1($0),n|skin-pl_2($0)))
example_end

Sent: no he 's wearing an animal skin .
Sem: lambda $0_{r}.and(aux|~be_3(part|wear-presp_4(pro:sub|he_2,det:art|a_5($1,and_comp(n|animal_6($1),n|skin_7($1))),$0),$0),co|no_1($0))
example_end

Sent: he 's a man .
Sem: lambda $0_{r}.det:art|a_3(pro:sub|he_1,n|man_4(pro:sub|he_1,$0))
example_end

Sent: well he might hit that dinosaur .
Sem: lambda $0_{r}.and(mod|might_3(v|hit-zero_4(pro:sub|he_2,pro:dem|that_5($1,n|dinosaur_6($1)),$0),$0),co|well_1($0))
example_end

Sent: sometimes they kill animals for their skins for clothing .
Sem: lambda $0_{r}.and(and(v|kill_3(pro:sub|they_2,BARE($1,n|animal-pl_4($1)),$0),adv|sometimes_1($0)),prep|for_5(det:poss|their_6($2,att(n|skin-pl_7($2),prep|for_8(BARE($3,n|clothing_9($3))))),$0))
example_end

Sent: and maybe they chop down trees .
Sem: lambda $0_{r}.and(and(v|chop_4(pro:sub|they_3,BARE($1,n|tree-pl_6($1)),$0),adv|maybe_2($0)),adv|down_5($0))
example_end

Sent: how could you wear a tree ?
Sem: lambda $2_{<r,t>}.lambda $0_{r}.mod|could_2(and(v|wear_4(pro:per|you_3,det:art|a_5($1,n|tree_6($1)),$0),$2($0)),$0)
example_end

Sent: it 's like a big flying dinosaur .
Sem: lambda $0_{r}.conj|like_3(det:art|a_4($1,and(n:gerund|fly-presp_6($1),and(adj|big_5($1),n|dinosaur_7($1)))),pro:per|it_1,$0)
example_end

Sent: yes you can take them all out if you want .
Sem: lambda $0_{r}.and(conj|if_8(v|want_10(pro:per|you_9,$0),mod|can_3(and(v|take_4(pro:per|you_2,post|all_6($1,pro:obj|them_5($1)),$0),adv|out_7($0)),$0)),co|yes_1($0))
example_end

Sent: you have_to start here .
Sem: lambda $0_{r}.mod:aux|have_to_2(pro:per|you_1,lambda $1_{r}.v|start_4(pro:per|you_1,$1),$0)
example_end

Sent: I do too .
Sem: lambda $0_{r}.and(v|do_2(pro:sub|i_1,$0),post|too_3($0))
example_end

Sent: d you have seeds in yours ?
Sem: lambda $0_{r}.Q(mod|do_1(and(v|have_3(pro:per|you_2,BARE($1,n|seed-pl_4($1)),$0),prep|in_5(pro:poss|yours_6,$0)),$0))
example_end

Sent: I got seeds in mine .
Sem: lambda $0_{r}.and(v|get-past_2(pro:sub|i_1,BARE($1,n|seed-pl_3($1)),$0),prep|in_4(pro:poss|mine_5,$0))
example_end

Sent: then what will you do with it ?
Sem: lambda $1_{e}.lambda $0_{r}.mod|will_3(and(and(v|do_5(pro:per|you_4,$1,$0),adv:tem|then_1($0)),prep|with_6(pro:per|it_7,$0)),$0)
example_end

Sent: are you going to swallow it ?
Sem: lambda $0_{r}.Q(cop|be-pres_1(part|go-presp_3(pro:per|you_2,lambda $1_{r}.v|swallow_5(pro:per|you_2,pro:per|it_6,$1),$0),$0))
example_end

Sent: what 're you digging for ?
Sem: lambda $1_{e}.lambda $0_{r}.aux|~be_2(part|dig-presp_4(pro:per|you_3,$1,$0),$0)
example_end

Sent: aren 't you going to eat your apple ?
Sem: lambda $0_{r}.Q(not(aux|be_1(part|go-presp_4(pro:per|you_3,lambda $1_{r}.v|eat_6(pro:per|you_3,det:poss|your_7($2,n|apple_8($2)),$1),$0),$0),$0))
example_end

Sent: but not boy babies ?
Sem: BARE($0,Q(not(BARE($1,and_comp(n|boy_3($1),v|baby-3s_4($1))),$0)))
example_end

Sent: does he like apples ?
Sem: lambda $0_{r}.Q(mod|do-3s_1(co|like_3(pro:sub|he_2,BARE($1,n|apple-pl_4($1)),$0),$0))
example_end

Sent: yes I think so .
Sem: lambda $0_{r}.and(and(v|think_3(pro:sub|i_2,$0),co|so_4($0)),co|yes_1($0))
example_end

Sent: he has big wings .
Sem: lambda $0_{r}.aux|have-3s_2(pro:sub|he_1,BARE($1,and(adj|big_3($1),n|wing-pl_4($1))),$0)
example_end

Sent: that 's true .
Sem: lambda $0_{r}.adj|true_3(pro:dem|that_1,$0)
example_end

Sent: can you fly ?
Sem: lambda $0_{r}.Q(mod|can_1(v|fly_3(pro:per|you_2,$0),$0))
example_end

Sent: I can fly .
Sem: lambda $0_{r}.mod|can_2(v|fly_3(pro:sub|i_1,$0),$0)
example_end

Sent: much taller .
Sem: BARE($0,adv|much_1(adj|tall-cp_2($0)))
example_end

Sent: why do you like that one ?
Sem: lambda $2_{<r,t>}.lambda $0_{r}.mod|do_2(and(co|like_4(pro:per|you_3,pro:dem|that_5($1,pro:indef|one_6($1)),$0),$2($0)),$0)
example_end

Sent: here comes the other one .
Sem: lambda $0_{r}.and(v|come-3s_2(det:art|the_3($1,and(qn|other_4($1),pro:indef|one_5($1))),$0),adv|here_1($0))
example_end

Sent: that 's a dinosaur .
Sem: lambda $0_{r}.det:art|a_3(pro:dem|that_1,n|dinosaur_4(pro:dem|that_1,$0))
example_end

Sent: goodness they 're all kinds .
Sem: lambda $0_{r}.and(adv|all_4(pro:sub|they_2,n|kind-pl_5(pro:sub|they_2,$0)),co|goodness_1($0))
example_end

Sent: he 's playing all the parts .
Sem: lambda $0_{r}.aux|~be_2(part|play-presp_3(pro:sub|he_1,qn|all_4(det:art|the_5($1,n|part-pl_6($1))),$0),$0)
example_end

Sent: oh I see .
Sem: lambda $0_{r}.and(v|see_3(pro:sub|i_2,$0),co|oh_1($0))
example_end

Sent: that 's another Paul .
Sem: lambda $0_{r}.and(n:prop|paul_4(pro:dem|that_1,$0),pro:indef|another_3(pro:dem|that_1,$0))
example_end

Sent: I don 't think I 'm very hungry thank_you .
Sem: lambda $0_{r}.and(not(mod|do_2(v|think_4(pro:sub|i_1,lambda $1_{r}.adv|very_7(adj|hungry_8(pro:sub|i_5,$1)),$0),$0),$0),n|thank_you_9(you,$0))
example_end

Sent: don 't what ?
Sem: lambda $1_{e}.lambda $0_{r}.not(mod|do_1(you,$1,$0),$0)
example_end

Sent: what is that ?
Sem: lambda $1_{e}.lambda $0_{r}.$1(pro:dem|that_3,$0)
example_end

Sent: you can 't what ?
Sem: lambda $1_{e}.lambda $0_{r}.not(mod|can_2($1(pro:per|you_1,$0),$0),$0)
example_end

Sent: you can 't either do it ?
Sem: lambda $0_{r}.Q(not(mod|can_2(and(v|do_5(pro:per|you_1,pro:per|it_6,$0),adv|either_4($0)),$0),$0))
example_end

Sent: how can she write if you sit on top of her ?
Sem: lambda $2_{<r,t>}.lambda $0_{r}.conj|if_5(and(v|sit_7(pro:per|you_6,$0),prep|on_8(BARE($1,att(n|top_9($1),prep|of_10(pro:obj|her_11))),$0)),mod|can_2(and(v|write_4(pro:sub|she_3,$0),$2($0)),$0))
example_end

Sent: who lives in your barn .
Sem: lambda $1_{e}.lambda $0_{r}.and(n|life-pl_2($1,$0),prep|in_3(det:poss|your_4($2,n|barn_5($2)),$0))
example_end

Sent: in your barn .
Sem: prep|in_1(det:poss|your_2($0,n|barn_3($0)))
example_end

Sent: that 's a picture of a barn .
Sem: lambda $0_{r}.det:art|a_3(pro:dem|that_1,att(n|picture_4(pro:dem|that_1,$0),prep|of_5(det:art|a_6($1,n|barn_7($1)))))
example_end

Sent: I didn 't see any men .
Sem: lambda $0_{r}.not(mod|do_2(v|see_4(pro:sub|i_1,qn|any_5($1,n|man-pl_6($1)),$0),$0),$0)
example_end

Sent: that 's right ?
Sem: lambda $0_{r}.Q(n|right_3(pro:dem|that_1,$0))
example_end

Sent: did you get hurt very badly ?
Sem: lambda $0_{r}.Q(v|do-past_1(and(v|get_3_hurt-zero_4(pro:per|you_2,$0),adv|very_5(adv|bad-dadj_6($0))),$0))
example_end

Sent: oh I 'm sorry .
Sem: lambda $0_{r}.and(adj|sorry_4(pro:sub|i_2,$0),co|oh_1($0))
example_end

Sent: who does ?
Sem: lambda $1_{e}.lambda $0_{r}.v|do-3s_2($1,$0)
example_end

Sent: oh you are .
Sem: lambda $0_{r}.and(cop|be-pres_3(pro:per|you_2,$0),co|oh_1($0))
example_end

Sent: oh where did you get feather brain ?
Sem: lambda $2_{<r,t>}.lambda $0_{r}.and(mod|do-past_3(and(v|get_5(pro:per|you_4,BARE($1,and_comp(n|feather_6($1),n|brain_7($1))),$0),$2($0)),$0),co|oh_1($0))
example_end

Sent: Diandra give me that .
Sem: lambda $0_{r}.v|give_2(you,pro:dem|that_4,pro:obj|me_3,$0)
example_end

Sent: that 's dangerous .
Sem: lambda $0_{r}.adj|dangerous_3(pro:dem|that_1,$0)
example_end

Sent: he can hurt himself with it .
Sem: lambda $0_{r}.mod|can_2(and(v|hurt-zero_3(pro:sub|he_1,pro:refl|himself_4,$0),prep|with_5(pro:per|it_6,$0)),$0)
example_end

Sent: where 's the Mommy ?
Sem: lambda $0_{r}.Q(adv:int|where_1(det:art|the_3($1,n:prop|mommy_4($1)),$0))
example_end

Sent: no no take it apart .
Sem: lambda $0_{r}.and(and(v|take_3(you,pro:per|it_4,$0),adv|apart_5($0)),co|no_1($0))
example_end

Sent: he can 't do the puzzle dear why don 't you leave it closed ?
Sem: lambda $3_{<r,t>}.lambda $0_{r}.and(not(mod|can_2(v|do_4(pro:sub|he_1,det:art|the_5($1,n|puzzle_6($1)),$0),$0),$0),not(mod|do_9(and(v|leave_12(pro:per|you_11,lambda $2_{r}.v|close-past_14(pro:per|it_13,$2),$0),$3($0)),$0),$0))
example_end

Sent: no he just wants to take it around like Paul is taking one around .
Sem: lambda $0_{r}.and(and(v|want-3s_4(pro:sub|he_2,lambda $1_{r}.v|like_9(aux|be-3s_11(and(part|take-presp_12(n:prop|paul_10,det:num|one_13,$1),adv|around_14($1)),$1),and(v|take_6(_,pro:per|it_7,$1),adv|around_8($1))),$0),adv|just_3($0)),co|no_1($0))
example_end

Sent: if you can 't what ?
Sem: lambda $1_{e}.lambda $0_{r}.not(mod|can_3(pro:per|you_2,$1,$0),$0)
example_end

Sent: good very good .
Sem: and(BARE($0,adj|good_1($0)),BARE($1,adv|very_2(adj|good_3($1))))
example_end

Sent: what kind of bird is that ?
Sem: lambda $1_{e}.lambda $0_{r}.$1(pro:dem|that_6,att(n|kind_2(pro:dem|that_6,$0),prep|of_3(BARE($2,n|bird_4($2)))))
example_end

Sent: that 's not a peacock .
Sem: lambda $0_{r}.not(det:art|a_4(pro:dem|that_1,n|peacock_5(pro:dem|that_1,$0)),$0)
example_end

Sent: you 're so busy .
Sem: lambda $0_{r}.adv|so_3(adj|busy_4(pro:per|you_1,$0))
example_end

Sent: I didn 't think you 'd get back around to me .
Sem: lambda $0_{r}.not(mod|do_2(v|think_4(pro:sub|i_1,lambda $1_{r}.mod|~genmod_6(and(and(v|get_7(pro:per|you_5,$1),adv|back_8(adv|around_9($1))),prep|to_10(pro:obj|me_11,$1)),$1),$0),$0),$0)
example_end

Sent: that poor dinosaur .
Sem: pro:dem|that_1($0,and(adj|poor_2($0),n|dinosaur_3($0)))
example_end

Sent: why should he do that ?
Sem: lambda $1_{<r,t>}.lambda $0_{r}.mod|should_2(and(v|do_4(pro:sub|he_3,pro:dem|that_5,$0),$1($0)),$0)
example_end

Sent: what shall I help you do ?
Sem: lambda $0_{r}.Q(mod|shall_2(v|help_4(pro:sub|i_3,lambda $1_{r}.v|do_6(pro:per|you_5,pro:int|what_1,$1),$0),$0))
example_end

Sent: who is Callie ?
Sem: lambda $1_{e}.lambda $0_{r}.$1(chi|callie_3,$0)
example_end

Sent: that 's the name .
Sem: lambda $0_{r}.det:art|the_3(pro:dem|that_1,n|name_4(pro:dem|that_1,$0))
example_end

Sent: you knocked one down driver .
Sem: lambda $0_{r}.v|knock-past_2(pro:per|you_1,BARE($1,and_comp(n|down_4($1),det:num|one_3(n|drive-dv_5($1)))),$0)
example_end

Sent: no that 's not a horse .
Sem: lambda $0_{r}.and(not(det:art|a_5(pro:dem|that_2,n|horse_6(pro:dem|that_2,$0)),$0),co|no_1($0))
example_end

Sent: it 's the cover that came off the puzzle .
Sem: lambda $0_{r}.det:art|the_3(pro:per|it_1,n|cover_4(pro:per|it_1,$0))
example_end

Sent: which one would you like ?
Sem: lambda $1_{<<e,e>,e>}.lambda $0_{r}.mod|will-cond_3(co|like_5(pro:per|you_4,$1($2,pro:indef|one_2($2)),$0),$0)
example_end


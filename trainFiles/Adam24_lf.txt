Sent: I don 't have a pencil in there .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:sub|i,det:art|a($1,n|pencil($1)),$0),prep|in(adv|there($0))),$0),$0)
example_end

Sent: you want a pencil too ?
Sem: lambda $0_{ev}.Q(and(v|want(pro:per|you,det:art|a($1,n|pencil($1)),$0),post|too($0)))
example_end

Sent: bring my purse .
Sem: lambda $0_{ev}.v|bring(you,det:poss|my($1,n|purse($1)),$0)
example_end

Sent: let 's have something to read .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|have(pro:obj|~us,lambda $2_{e}.rel(pro:indef|something($2),lambda $3_{ev}.v|read-zero(you,$3)),$1),$0)
example_end

Sent: I have something to read .
Sem: lambda $0_{ev}.v|have(pro:sub|i,lambda $1_{e}.rel(pro:indef|something($1),lambda $2_{ev}.v|read-zero(you,$2)),$0)
example_end

Sent: shall we look at this ?
Sem: lambda $0_{ev}.Q(mod|shall(and(cop|look(pro:sub|we,$0),prep|at(pro:dem|this,$0)),$0))
example_end

Sent: because you didn 't eat your breakfast .
Sem: lambda $0_{ev}.not(mod|do(v|eat(pro:per|you,det:poss|your($1,n|breakfast($1)),$0),$0),$0)
example_end

Sent: you don 't have_to go to bed again .
Sem: lambda $0_{ev}.not(mod:aux|have_to(mod|do(and(and(v|go(pro:per|you,$0),prep|to(lambda $1_{e}.n|bed($1),$0)),adv|again($0)),$0),$0),$0)
example_end

Sent: I think that 's enough .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.adv|enough(pro:dem|that,$1),$0)
example_end

Sent: d you have some things to hang up ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,qn|some($1,rel(n|thing-pl($1),lambda $2_{ev}.and(v|hang(you,$2),adv|up($2)))),$0),$0))
example_end

Sent: are you all finished with that .
Sem: lambda $0_{ev}.cop|be-pres(and(and(part|finish-pastp(pro:per|you,$0),adv|all($0)),prep|with(pro:dem|that,$0)),$0)
example_end

Sent: you haven 't even tried it yet .
Sem: lambda $0_{ev}.not(aux|have(and(and(part|try-pastp(pro:per|you,pro:per|it,$0),adv|even($0)),adv|yet($0)),$0),$0)
example_end

Sent: d you have something to hang up ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.rel(pro:indef|something($1),lambda $2_{ev}.and(v|hang(you,$2),adv|up($2))),$0),$0))
example_end

Sent: oh that 's a clothes ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|clothes+line(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: do I want to be Urs ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:sub|i,lambda $1_{ev}.n:prop|ursula(pro:sub|i,$1),$0),$0))
example_end

Sent: what 're you opening now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|open-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: what about cheek ?
Sem: att(pro:int|what,prep|about(lambda $0_{e}.n|cheek($0)))
example_end

Sent: I think perhaps I can find some handkerchiefs .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|find(pro:sub|i,qn|some($2,n|handkerchief-pl($2)),$1),adv|perhaps($1)),$1),$0)
example_end

Sent: don 't step on Paul 's blanket .
Sem: lambda $0_{ev}.not(mod|do(and(v|step(you,$0),prep|on(n:prop|paul's($1,n|blanket($1)),$0)),$0),$0)
example_end

Sent: careful of Paul .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: you didn 't hang the socks up .
Sem: lambda $0_{ev}.not(mod|do(and(v|hang(pro:per|you,det:art|the($1,n|sock-pl($1)),$0),adv|up($0)),$0),$0)
example_end

Sent: oh I think it can .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,$0),co|oh($0))
example_end

Sent: why don 't you hang it up by the heel .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(and(v|hang(pro:per|you,pro:per|it,$0),$1($0)),adv|up($0)),prep|by(det:art|the($2,n|heel($2)),$0)),$0),$0)
example_end

Sent: well hang it by the toe .
Sem: lambda $0_{ev}.and(and(v|hang(you,pro:per|it,$0),prep|by(det:art|the($1,n|toe($1)),$0)),co|well($0))
example_end

Sent: this is the toe .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,n|toe(pro:dem|this,$0))
example_end

Sent: are you putting all those away already ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(and(part|put-presp(pro:per|you,qn|all($1,pro:dem|those($1)),$0),adv|away($0)),adv|already($0)),$0))
example_end

Sent: you didn 't cook anything .
Sem: lambda $0_{ev}.not(mod|do(v|cook(pro:per|you,pro:indef|anything,$0),$0),$0)
example_end

Sent: make some breakfast .
Sem: lambda $0_{ev}.v|make(you,qn|some($1,n|breakfast($1)),$0)
example_end

Sent: that 's for a baby doll .
Sem: lambda $0_{ev}.conj|for(det:art|a($1,and_comp(n|baby($1),n|doll($1))),pro:dem|that,$0)
example_end

Sent: yes when she cries .
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|cry-3s(pro:sub|she,$0),$1($0)),co|yes($0))
example_end

Sent: d you have a doll ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|doll($1)),$0),$0))
example_end

Sent: maybe it 's in this bag Adam .
Sem: lambda $0_{ev}.adv|maybe(prep|in(pro:dem|this($1,n|bag($1)),pro:per|it,$0))
example_end

Sent: what did you take ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|take(pro:per|you,$1,$0),$0)
example_end

Sent: what hurt you ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|hurt-zero($1,pro:per|you,$0)
example_end

Sent: don 't pull on it .
Sem: lambda $0_{ev}.not(mod|do(and(v|pull(you,$0),prep|on(pro:per|it,$0)),$0),$0)
example_end

Sent: the iron might fall .
Sem: lambda $0_{ev}.mod|might(v|fall(det:art|the($1,n|iron($1)),$0),$0)
example_end

Sent: then where will we tie it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(and(v|tie(pro:sub|we,pro:per|it,$0),adv:tem|then($0)),$1($0)),$0)
example_end

Sent: no don 't pull like this .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|pull(you,$0),prep|like(pro:dem|this,$0)),$0),$0),co|no($0))
example_end

Sent: where will we put it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|put-zero(pro:sub|we,pro:per|it,$0),$1($0)),$0)
example_end

Sent: then you can 't hang anything .
Sem: lambda $0_{ev}.not(mod|can(and(v|hang(pro:per|you,pro:indef|anything,$0),adv:tem|then($0)),$0),$0)
example_end

Sent: oh what would you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|will-cond(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0),co|oh($0))
example_end

Sent: shake it ?
Sem: lambda $0_{ev}.Q(v|shake(you,pro:per|it,$0))
example_end

Sent: oh maybe I 've got a sifter .
Sem: lambda $0_{ev}.and(aux|~have(and(part|get-pastp(pro:sub|i,det:art|a($1,n|sift-dv($1)),$0),adv|maybe($0)),$0),co|oh($0))
example_end

Sent: I just put something in it .
Sem: lambda $0_{ev}.and(and(v|put-zero(pro:sub|i,pro:indef|something,$0),adv|just($0)),prep|in(pro:per|it,$0))
example_end

Sent: does that one have a top ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(pro:dem|that($1,pro:indef|one($1)),det:art|a($2,n|top($2)),$0),$0))
example_end

Sent: what d you think you cook in here ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|cook(pro:per|you,pro:int|what,$1),adv|in(adv|here($1))),$0),$0))
example_end

Sent: strong master .
Sem: lambda $0_{e}.and(adj|strong($0),n|master($0))
example_end

Sent: d you mean strong man ?
Sem: lambda $0_{ev}.Q(mod|do(adj|mean(pro:per|you,lambda $1_{e}.and(adj|strong($1),n|man($1)),$0),$0))
example_end

Sent: is that the circus strong man ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and(and_comp(n|circus(pro:rel|that,$0),n|man(pro:rel|that,$0)),adj|strong(pro:rel|that,$0))))
example_end

Sent: no don 't break him apart .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|break(you,pro:obj|him,$0),adv|apart($0)),$0),$0),co|no($0))
example_end

Sent: you broke that thing off ?
Sem: lambda $0_{ev}.Q(and(v|break-past(pro:per|you,pro:dem|that($1,n|thing($1)),$0),adv|off($0)))
example_end

Sent: what d you call that thing ?
Sem: lambda $0_{ev}.mod|do(v|call(pro:per|you,pro:dem|that($1,n|thing($1)),$0),$0)
example_end

Sent: strong man .
Sem: lambda $0_{e}.and(adj|strong($0),n|man($0))
example_end

Sent: oh what would hurt him ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|will-cond(v|hurt-zero($1,pro:obj|him,$0),$0),co|oh($0))
example_end

Sent: don 't sit on him .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(you,$0),prep|on(pro:obj|him,$0)),$0),$0)
example_end

Sent: he 's the ring master .
Sem: lambda $0_{ev}.det:art|the(pro:sub|he,and_comp(n|ring(pro:sub|he,$0),n|master(pro:sub|he,$0)))
example_end

Sent: he 's going to hit the lion .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.v|hit-zero(pro:sub|he,det:art|the($2,n|lion($2)),$1),$0),$0)
example_end

Sent: does he have skates on ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|have(pro:sub|he,lambda $1_{e}.n|skate-pl($1),$0),adv|on($0)),$0))
example_end

Sent: no that 's not a sword that 's a knife .
Sem: lambda $0_{ev}.and(not(and(det:art|a(pro:dem|that,n|sword(pro:dem|that,$0)),det:art|a(pro:rel|that,n|knife(pro:rel|that,$0))),$0),co|no($0))
example_end

Sent: Joshua had a sword .
Sem: lambda $0_{ev}.v|have-past(n:prop|joshua,det:art|a($1,n|sword($1)),$0)
example_end

Sent: she doesn 't have a sword .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|she,det:art|a($1,n|sword($1)),$0),$0),$0)
example_end

Sent: you can 't fight with her .
Sem: lambda $0_{ev}.not(mod|can(and(v|fight(pro:per|you,$0),prep|with(pro:obj|her,$0)),$0),$0)
example_end

Sent: you 're folding your sword ?
Sem: lambda $0_{ev}.Q(aux|~be(on|folding(pro:per|you,det:poss|your($1,n|sword($1)),$0),$0))
example_end

Sent: it 's suppertime ?
Sem: lambda $0_{ev}.Q(n|supper+time(pro:per|it,$0))
example_end

Sent: what did you cook ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|cook(pro:per|you,$1,$0),$0)
example_end

Sent: you could set the table .
Sem: lambda $0_{ev}.mod|could(v|set-zero(pro:per|you,det:art|the($1,n|table($1)),$0),$0)
example_end

Sent: you 're going to warm it up ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|warm(pro:per|you,pro:per|it,$1),adv|up($1)),$0),$0))
example_end

Sent: that 's a spoon ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|spoon(pro:dem|that,$0)))
example_end

Sent: oh this is a spoon .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|this,n|spoon(pro:dem|this,$0)),co|oh($0))
example_end

Sent: and I have_to eat from the pan ?
Sem: lambda $0_{ev}.Q(mod:aux|have_to(and(v|eat(pro:sub|i,$0),prep|from(det:art|the($1,n|pan($1)),$0)),$0))
example_end

Sent: what do I have_to eat Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(v|eat(pro:sub|i,$1,$0),$0),$0)
example_end

Sent: just sugar ?
Sem: lambda $0_{e}.Q(adv|just(lambda $1_{e}.n|sugar($1),$0))
example_end

Sent: you put some tea in my sugar ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,qn|some($1,n|tea($1)),$0),prep|in(det:poss|my($2,n|sugar($2)),$0)))
example_end

Sent: Adam what do I have_to eat ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(v|eat(pro:sub|i,$1,$0),$0),$0)
example_end

Sent: Adam 's eating chicken ?
Sem: lambda $0_{ev}.Q(aux|~be(part|eat-presp(n:prop|adam,lambda $1_{e}.n|chicken($1),$0),$0))
example_end

Sent: what is Urs having ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|have-presp(n:prop|ursula,$1,$0),$0)
example_end

Sent: oh you don 't like yours ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|like(pro:per|you,pro:poss|yours,$0),$0),$0),co|oh($0)))
example_end

Sent: maybe it needs some more sugar .
Sem: lambda $0_{ev}.and(v|need-3s(pro:per|it,qn|some($1,and(qn|more($1),n|sugar($1))),$0),adv|maybe($0))
example_end

Sent: would you like to go ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|go(pro:per|you,$1),$0),$0))
example_end

Sent: what color is that one ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,pro:indef|one($2)),n|color(pro:dem|that($2,pro:indef|one($2)),$0))
example_end

Sent: what color is this one ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this($2,pro:indef|one($2)),n|color(pro:dem|this($2,pro:indef|one($2)),$0))
example_end

Sent: you will put what in it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|put-zero(pro:per|you,$1,$0),prep|in(pro:per|it,$0)),$0)
example_end

Sent: this is ice ?
Sem: lambda $0_{ev}.Q(n|ice+cream(pro:dem|this,$0))
example_end

Sent: sugar ice ?
Sem: lambda $0_{e}.Q(and_comp(n|sugar($0),n|ice+cream($0)))
example_end

Sent: that 's too sweet .
Sem: lambda $0_{ev}.adv|too(co|sweet(pro:dem|that,$0))
example_end

Sent: a pipe ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|pipe($1),$0))
example_end

Sent: a cigarette ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|cigarette($1),$0))
example_end

Sent: you 're going where ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: hang the line up ?
Sem: lambda $0_{ev}.Q(and(v|hang(you,det:art|the($1,v|line($1)),$0),adv|up($0)))
example_end

Sent: where shell I tie it ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|shell(and(v|tie(pro:sub|i,pro:per|it,$0),$1($0)),$0)
example_end

Sent: that 's too bad .
Sem: lambda $0_{ev}.adv|too(adj|bad(pro:dem|that,$0))
example_end

Sent: you 'll have_to pay Urs for that .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|pay(pro:per|you,n:prop|ursula,$0),prep|for(pro:dem|that,$0)),$0),$0)
example_end

Sent: don 't you have some money ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(pro:per|you,qn|some($1,n|money($1)),$0),$0),$0))
example_end

Sent: someone threw your money away ?
Sem: lambda $0_{ev}.Q(and(v|throw-past(pro:indef|someone,det:poss|your($1,n|money($1)),$0),adv|away($0)))
example_end

Sent: Adam I 'll go downstairs with you .
Sem: lambda $0_{ev}.mod|~will(and(and(v|go(pro:sub|i,$0),adv|downstairs($0)),prep|with(pro:per|you,$0)),$0)
example_end

Sent: I 'll fix your clothes while you 're gone .
Sem: lambda $0_{ev}.conj|while(cop|~be(part|go-pastp(pro:per|you,$0),$0),mod|~will(v|fix(pro:sub|i,det:poss|your($1,n|clothes+line($1)),$0),$0))
example_end

Sent: ask her to excuse us please .
Sem: lambda $0_{ev}.and(v|ask(you,lambda $1_{ev}.v|excuse(pro:obj|her,pro:obj|us,$1),$0),co|please($0))
example_end

Sent: how d you fix that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|fix(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: oh d you want me to hang some clothes ?
Sem: lambda $0_{ev}.Q(and(v|do(v|want(pro:per|you,lambda $1_{ev}.v|hang(pro:obj|me,qn|some($2,n:pt|clothes($2)),$1),$0),$0),co|oh($0)))
example_end

Sent: could I hang a sock ?
Sem: lambda $0_{ev}.Q(mod|could(v|hang(pro:sub|i,det:art|a($1,n|sock($1)),$0),$0))
example_end

Sent: I need a clothes .
Sem: lambda $0_{ev}.v|need(pro:sub|i,det:art|a($1,n|clothes+pin($1)),$0)
example_end

Sent: d you want that one ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: is it dry ?
Sem: lambda $0_{ev}.Q(v|dry(pro:per|it,$0))
example_end

Sent: you must leave it there till it 's dry .
Sem: lambda $0_{ev}.v|till(adj|dry(pro:per|it,$0),mod|must(and(v|leave(pro:per|you,pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: you took all the laundry down ?
Sem: lambda $0_{ev}.Q(and(v|take-past(pro:per|you,qn|all(det:art|the($1,n|laundry($1))),$0),adv|down($0)))
example_end

Sent: the little golden a b c you read it to me .
Sem: lambda $0_{ev}.and(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),det:art|the($1,and_comp(and_comp(n:let|a($1),n:let|b($1)),and(adj|golden($1),and(adj|little($1),n:let|c($1))))))
example_end

Sent: boat mhm .
Sem: lambda $0_{ev}.and(n|boat($0),co|yes($0))
example_end

Sent: that 's a boy isn 't it ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|boy(pro:dem|that,$0)),not(cop|be(pro:per|it,$0),$0)))
example_end

Sent: that is a butterfly .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|butter+fly(pro:dem|that,$0))
example_end

Sent: not s .
Sem: not(lambda $0_{e}.n:let|s($0))
example_end

Sent: that is a c .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n:let|c(pro:dem|that,$0))
example_end

Sent: a clown .
Sem: det:art|a($0,n|clown($0))
example_end

Sent: a cat .
Sem: det:art|a($0,n|cat($0))
example_end

Sent: yes a boot .
Sem: lambda $0_{ev}.and(det:art|a($1,n|boot($1),$0),co|yes($0))
example_end

Sent: where 's a seal ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|seal($1)),$0),$2($0))
example_end

Sent: Celia from North Carolina .
Sem: att(n:prop|celia,prep|from(lambda $0_{e}.and_comp(n:prop|north($0),n:prop|carolina($0))))
example_end

Sent: a little dog .
Sem: det:art|a($0,and(adj|little($0),n|dog($0)))
example_end

Sent: they 're not dry ?
Sem: lambda $0_{ev}.Q(not(v|dry(pro:sub|they,$0),$0))
example_end

Sent: this is a g .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n:let|g(pro:dem|this,$0))
example_end

Sent: d you know this letter ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|this($1,n|letter($1)),$0),$0))
example_end

Sent: I don 't think the f can get in there .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|get(det:art|the($2,n:let|f($2)),$1),adv|in(adv|there($1))),$1),$0),$0),$0)
example_end

Sent: up a ladder ?
Sem: Q(prep|up(det:art|a($0,n|ladder($0))))
example_end

Sent: and water ?
Sem: lambda $0_{e}.Q(n|water($0))
example_end

Sent: I really don 't know why the farmer 's running .
Sem: lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.poss|~s(and(part|run-presp(det:art|the($2,n|farm($2)),$1),adv:int|why($1)),$1),$0),adv|real-dadj($0)),$0),$0)
example_end

Sent: perhaps to get the hay in before it rains .
Sem: lambda $0_{ev}.and(and(and(v|get(you,det:art|the($1,n|hay($1)),$0),adv|perhaps($0)),adv|in($0)),and(v|rain-3s(you,$0),prep|before($0)))
example_end

Sent: what kind of flower is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|flower($2))))
example_end

Sent: I guess it 's a daisy .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,n|daisy(pro:per|it,$1)),$0)
example_end

Sent: you kept moving .
Sem: lambda $0_{ev}.v|keep-past(pro:per|you,$0)
example_end

Sent: I only tied one shoe .
Sem: lambda $0_{ev}.and(v|tie-past(pro:sub|i,lambda $1_{e}.det:num|one(n|shoe($1)),$0),adv|only($0))
example_end

Sent: what about this Adam ?
Sem: att(pro:int|what,prep|about(pro:dem|this))
example_end

Sent: we made one .
Sem: lambda $0_{ev}.v|make-past(pro:sub|we,pro:indef|one,$0)
example_end

Sent: what did we call it ?
Sem: lambda $0_{ev}.mod|do-past(v|call(pro:sub|we,pro:per|it,$0),$0)
example_end

Sent: a giraffe .
Sem: det:art|a($0,n|giraffe($0))
example_end

Sent: a tall giraffe .
Sem: det:art|a($0,and(adj|tall($0),n|giraffe($0)))
example_end

Sent: no that 's not Chicken_Little .
Sem: lambda $0_{ev}.and(not(n:prop|chicken_little(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: these don 't say quack .
Sem: lambda $0_{ev}.not(mod|do(v|say(pro:dem|these,lambda $1_{e}.n|quack($1),$0),$0),$0)
example_end

Sent: you don 't have anything to pour it in .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,lambda $1_{e}.rel(pro:indef|anything($1),lambda $2_{ev}.and(v|pour(_,pro:per|it,$2),adv|in($2))),$0),$0),$0)
example_end

Sent: what are you putting in my coffee ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,$1,$0),prep|in(det:poss|my($2,n|coffee($2)),$0)),$0)
example_end

Sent: I don 't want meat in my coffee !
Sem: lambda $0_{ev}.not(mod|do(and(v|want(pro:sub|i,lambda $1_{e}.n|meat($1),$0),prep|in(det:poss|my($2,n|coffee($2)),$0)),$0),$0)
example_end

Sent: that 's a horse .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|horse(pro:dem|that,$0))
example_end

Sent: ice cone .
Sem: lambda $0_{e}.and_comp(n|ice+cream($0),n|cone($0))
example_end

Sent: an iceberg .
Sem: det:art|a($0,n|iceberg($0))
example_end

Sent: a hatso a fatso .
Sem: and(det:art|a($0,wplay|hatso($0)),det:art|a($1,n|fatso($1)))
example_end

Sent: this is j .
Sem: lambda $0_{ev}.n:let|j(pro:dem|this,$0)
example_end

Sent: a pumpkin bird ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|pumpkin($1),n|bird($1)),$0))
example_end

Sent: thank_you for the coffee .
Sem: lambda $0_{e}.att(co|thank_you($0),prep|for(det:art|the($1,n|coffee($1))))
example_end

Sent: an owl .
Sem: det:art|a($0,n|owl($0))
example_end

Sent: you call them overalls .
Sem: lambda $0_{ev}.v|call(pro:per|you,lambda $1_{e}.n:pt|overalls($1),pro:obj|them,$0)
example_end

Sent: because they are .
Sem: lambda $0_{ev}.cop|be-pres(pro:sub|they,$0)
example_end

Sent: why d you say poor piggie ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|say(pro:per|you,lambda $1_{e}.and(adj|poor($1),n|pig-dim($1)),$0),$2($0)),$0)
example_end

Sent: why would you knock that tree down ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(n|knock(pro:per|you,pro:rel|that($1,n|tree($1)),$0),$2($0)),adv|down($0)),$0)
example_end

Sent: he will laugh ?
Sem: lambda $0_{ev}.Q(mod|will(v|laugh(pro:sub|he,$0),$0))
example_end

Sent: that 's a plum .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|plum(pro:dem|that,$0))
example_end

Sent: a plum .
Sem: det:art|a($0,n|plum($0))
example_end

Sent: what kind of plum ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|plum($2))))
example_end

Sent: well she 's just standing there I guess .
Sem: lambda $0_{ev}.and(and(cop|~be(and(and(on|standing(pro:sub|she,$0),adv|just($0)),adv|there($0)),$0),v|guess(pro:sub|i,$0)),co|well($0))
example_end

Sent: this is a raccoon .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|raccoon(pro:dem|this,$0))
example_end

Sent: a raccoon .
Sem: det:art|a($0,n|raccoon($0))
example_end

Sent: a raft .
Sem: det:art|a($0,n|raft($0))
example_end

Sent: because they 're on the river .
Sem: lambda $0_{ev}.prep|on(det:art|the($1,n|river($1)),pro:sub|they,$0)
example_end

Sent: no they 're on the raft .
Sem: lambda $0_{ev}.and(adv|on(det:art|the($1,n|raft($1)),pro:sub|they,$0),co|no($0))
example_end

Sent: they can 't swim .
Sem: lambda $0_{ev}.not(mod|can(v|swim(pro:sub|they,$0),$0),$0)
example_end

Sent: that 's a raven .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|raven(pro:dem|that,$0))
example_end

Sent: but what 's happening ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|happen-presp($1,$0),$0)
example_end

Sent: who 's talking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|talk-presp($1,$0),$0)
example_end

Sent: have you ever seen a turtle talk on a telephone ?
Sem: lambda $0_{ev}.Q(aux|have(and(part|see-pastp(pro:per|you,lambda $1_{ev}.and(n|talk(det:art|a($2,n|turtle($2)),$1),prep|on(det:art|a($3,n|telephone($3)),$1)),$0),adv|ever($0)),$0))
example_end

Sent: yes that 's a funny page .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(n|page(pro:dem|that,$0),adj|fun-dn(pro:dem|that,$0))),co|yes($0))
example_end

Sent: that 's a truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|truck(pro:dem|that,$0))
example_end

Sent: yes a dump truck .
Sem: lambda $0_{ev}.and(det:art|a($1,and_comp(n|dump($1),n|truck($1)),$0),co|yes($0))
example_end

Sent: a train .
Sem: det:art|a($0,n|train($0))
example_end

Sent: here 's a spider right here .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|spider($1)),$0),pro:exist|here($0)),adv|right(adv|here($0)))
example_end

Sent: he 's going to do what ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|he,lambda $1_{ev}.v|do(pro:sub|he,$2,$1),$0),$0)
example_end

Sent: fall on a spoon ?
Sem: lambda $0_{ev}.Q(and(n|fall(you,$0),prep|on(det:art|a($1,n|spoon($1)),$0)))
example_end

Sent: if he 's not careful .
Sem: lambda $0_{ev}.not(co|careful(pro:sub|he,$0),$0)
example_end

Sent: what is that spoon ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,n|spoon($2)),$0)
example_end

Sent: d you know what 's happening on this page ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.aux|~be(and(part|happen-presp(pro:int|what,$1),prep|on(pro:dem|this($2,n|page($2)),$1)),$1),$0),$0))
example_end

Sent: no it looks like a fox .
Sem: lambda $0_{ev}.and(and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|fox($1)),$0)),co|no($0))
example_end

Sent: that 's a wolf .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|wolf(pro:dem|that,$0))
example_end

Sent: that 's a yak .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|yak(pro:dem|that,$0))
example_end

Sent: no he 's playing the xylophone .
Sem: lambda $0_{ev}.and(aux|~be(part|play-presp(pro:sub|he,det:art|the($1,n|xylophone($1)),$0),$0),co|no($0))
example_end

Sent: maybe he 's looking at his music .
Sem: lambda $0_{ev}.aux|~be(and(and(part|look-presp(pro:sub|he,$0),adv|maybe($0)),prep|at(det:poss|his($1,n|music($1)),$0)),$0)
example_end

Sent: you can 't see the music .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:per|you,det:art|the($1,n|music($1)),$0),$0),$0)
example_end

Sent: it must be over here .
Sem: lambda $0_{ev}.mod|must(and(cop|be(pro:per|it,$0),prep|over(adv|here($0))),$0)
example_end

Sent: they didn 't put it on the picture .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(pro:sub|they,pro:per|it,$0),prep|on(det:art|the($1,n|picture($1)),$0)),$0),$0)
example_end

Sent: x to nine .
Sem: lambda $0_{e}.n:let|x($0)
example_end

Sent: you mean this ladder ?
Sem: lambda $0_{ev}.Q(v|mean(pro:per|you,pro:dem|this($1,n|ladder($1)),$0))
example_end

Sent: what place d you think that is ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|think(pro:per|you,lambda $1_{ev}.$2(pro:dem|that,n|place(pro:dem|that,$1)),$0),$0)
example_end

Sent: where d you think you 'd find all those animals ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|think(pro:per|you,lambda $1_{ev}.mod|~genmod(v|find(pro:per|you,qn|all(pro:dem|those($2,n|animal-pl($2))),$1),$1),$0),$3($0)),$0)
example_end

Sent: where 's Mr Pickle 's park ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(n:prop|pickle_mr's($1,n|park($1)),$0),$2($0))
example_end

Sent: where they sell balloons ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|sell(pro:sub|they,lambda $1_{e}.n|balloon-pl($1),$0),$2($0))
example_end

Sent: d you know the name of the park ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,det:art|the($1,att(n|name($1),prep|of(det:art|the($2,n|park($2))))),$0),$0))
example_end

Sent: I have an idea .
Sem: lambda $0_{ev}.v|have(pro:sub|i,det:art|a($1,n|idea($1)),$0)
example_end

Sent: if I had to go to one place and find all those animals where would it be ?
Sem: lambda $4_{e}.lambda $0_{ev}.mod|will-cond(conj|if(v|have-past(pro:sub|i,lambda $1_{ev}.and(v|find(pro:sub|i,qn|all(pro:dem|those($2,n|animal-pl($2))),$1),prep|to(lambda $3_{e}.det:num|one(n|place($3)),$1)),$0),and(cop|be(pro:per|it,$0),$4($0))),$0)
example_end

Sent: in a trash can ?
Sem: Q(prep|in(det:art|a($0,and_comp(n|trash($0),mod|can($0)))))
example_end

Sent: yes that 's saggy baggy elephant .
Sem: lambda $0_{ev}.and(and_comp(and_comp(adj|sag-dv(pro:dem|that,$0),adj|bag-dn(pro:dem|that,$0)),n|elephant(pro:dem|that,$0)),co|yes($0))
example_end

Sent: no he must be one of those big elephants .
Sem: lambda $0_{ev}.and(mod|must(att(pro:indef|one(pro:sub|he,$0),prep|of(pro:dem|those($1,and(adj|big($1),n|elephant-pl($1))))),$0),co|no($0))
example_end

Sent: they 're not wet .
Sem: lambda $0_{ev}.not(part|wet-pastp(pro:sub|they,$0),$0)
example_end

Sent: I can 't wear that anymore .
Sem: lambda $0_{ev}.not(mod|can(and(v|wear(pro:sub|i,pro:rel|that,$0),adv|anymore($0)),$0),$0)
example_end

Sent: you better cut that down ?
Sem: lambda $0_{ev}.Q(and(and(v|cut-zero(pro:per|you,pro:dem|that,$0),adv|good-cp($0)),adv|down($0)))
example_end

Sent: why would you cut the elephant ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(v|cut-zero(pro:per|you,det:art|the($1,n|elephant($1)),$0),$2($0)),$0)
example_end

Sent: the window .
Sem: det:art|the($0,n|window($0))
example_end

Sent: where d you have a wonderful baby ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,det:art|a($1,and(adj|wonder-full($1),n|baby($1))),$0),$2($0)),$0)
example_end

Sent: daisy oh .
Sem: lambda $0_{ev}.and(n|daisy($0),co|oh($0))
example_end

Sent: on your napkin ?
Sem: Q(prep|on(det:poss|your($0,n|napkin($0))))
example_end

Sent: oh you got some cheese .
Sem: lambda $0_{ev}.and(v|get-past(pro:per|you,qn|some($1,n|cheese($1)),$0),co|oh($0))
example_end

Sent: or what 's this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: a bird carriage ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|bird($1),n|carriage($1)),$0))
example_end

Sent: a lobster .
Sem: det:art|a($0,n|lobster($0))
example_end

Sent: that 's not a lobster .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|lobster(pro:dem|that,$0)),$0)
example_end

Sent: it 's a crab .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|crab(pro:per|it,$0))
example_end

Sent: you sound like Donald_Duck .
Sem: lambda $0_{ev}.and(v|sound(pro:per|you,$0),conj|like(n:prop|donald_duck,$0))
example_end

Sent: d you have it ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: who took it ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|take-past($1,pro:per|it,$0)
example_end

Sent: I like to play with the children .
Sem: lambda $0_{ev}.v|like(pro:sub|i,lambda $1_{ev}.and(v|play(pro:sub|i,$1),prep|with(det:art|the($2,n|child-pl($2)),$1)),$0)
example_end

Sent: you 're a big child .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(n|child(pro:per|you,$0),adj|big(pro:per|you,$0)))
example_end

Sent: what has Celia got ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|have-3s(v|get-past(n:prop|celia,$1,$0),$0)
example_end

Sent: chop down ?
Sem: lambda $0_{ev}.Q(and(n|chop(you,$0),adv|down($0)))
example_end

Sent: are you taking them down ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|take-presp(pro:per|you,pro:obj|them,$0),adv|down($0)),$0))
example_end

Sent: turn a somersault .
Sem: lambda $0_{ev}.v|turn(you,det:art|a($1,n|somersault($1)),$0)
example_end

Sent: turning a somersault .
Sem: lambda $0_{ev}.part|turn-presp(you,det:art|a($1,n|somersault($1)),$0)
example_end

Sent: she 's standing on her hands .
Sem: lambda $0_{ev}.aux|~be(and(on|standing(pro:sub|she,$0),prep|on(det:poss|her($1,n|hand-pl($1)),$0)),$0)
example_end

Sent: she like to play that way .
Sem: lambda $0_{ev}.v|like(pro:sub|she,lambda $1_{ev}.v|play(pro:sub|she,pro:dem|that($2,n|way($2)),$1),$0)
example_end

Sent: that means fun jolly .
Sem: lambda $0_{ev}.v|mean-3s(pro:rel|that,lambda $1_{e}.adj|fun($1),$0)
example_end

Sent: jolly means happy .
Sem: lambda $0_{ev}.n:pt|means(lambda $1_{e}.adj|jolly($1),lambda $2_{e}.adj|happy($2),$0)
example_end

Sent: paint brush .
Sem: lambda $0_{e}.and_comp(n|paint($0),n|brush($0))
example_end

Sent: because he likes to paint .
Sem: lambda $0_{ev}.v|like-3s(pro:sub|he,lambda $1_{ev}.v|paint(pro:sub|he,$1),$0)
example_end

Sent: because it 's fun .
Sem: lambda $0_{ev}.adj|fun(pro:per|it,$0)
example_end

Sent: and snowballing what ?
Sem: lambda $1_{e}.lambda $0_{ev}.part|snow+ball(you,$1,$0)
example_end

Sent: they didn 't cry at all did they ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|cry(pro:sub|they,$0),prep|at(lambda $1_{e}.qn|all($1),$0)),$0),$0),mod|do-past(pro:sub|they,$0)))
example_end

Sent: is that your favorite story ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,and(n|story(pro:rel|that,$0),adj|favorite(pro:rel|that,$0))))
example_end

Sent: why don 't you do your puzzle ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|do(pro:per|you,det:poss|your($1,n|puzzle($1)),$0),$2($0)),$0),$0)
example_end

Sent: you do your puzzle .
Sem: lambda $0_{ev}.v|do(pro:per|you,det:poss|your($1,n|puzzle($1)),$0)
example_end

Sent: well no that 's a window .
Sem: lambda $0_{ev}.and(and(det:art|a(pro:dem|that,n|window(pro:dem|that,$0)),co|well($0)),co|no($0))
example_end

Sent: I don 't think that 's a lobster .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|lobster(pro:dem|that,$1)),$0),$0),$0)
example_end

Sent: a clothes .
Sem: det:art|a($0,n|clothes+pin($0))
example_end

Sent: your Mommy will bring yours Adam .
Sem: lambda $0_{ev}.mod|will(v|bring(det:poss|your($1,n:prop|mommy($1)),pro:poss|yours,$0),$0)
example_end

Sent: you eat there on the tray .
Sem: lambda $0_{ev}.and(and(v|eat(pro:per|you,$0),adv|there($0)),prep|on(det:art|the($1,n|tray($1)),$0))
example_end

Sent: Adam what do you want ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,$1,$0),$0)
example_end

Sent: you have cheese on your plate ?
Sem: lambda $0_{ev}.Q(and(v|have(pro:per|you,lambda $1_{e}.n|cheese($1),$0),prep|on(det:poss|your($2,n|plate($2)),$0)))
example_end

Sent: that pineapple juice is so sweet .
Sem: lambda $0_{ev}.adv|so(adj|sweet(pro:dem|that($1,and_comp(n|pineapple($1),n|juice($1))),$0))
example_end

Sent: is that your favorite ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,n|favorite(pro:rel|that,$0)))
example_end

Sent: they look like night sticks .
Sem: lambda $0_{ev}.and(cop|look(pro:sub|they,$0),co|like(lambda $1_{e}.and_comp(n|night($1),n|stick-pl($1)),$0))
example_end

Sent: what d you think they are ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|think($1,$0,$2)
example_end

Sent: baseball bat ?
Sem: lambda $0_{e}.Q(and_comp(n|baseball($0),n|bat($0)))
example_end

Sent: in the face ?
Sem: Q(prep|in(det:art|the($0,n|face($0))))
example_end

Sent: you don 't run with a baseball bat .
Sem: lambda $0_{ev}.not(mod|do(and(v|run(pro:per|you,$0),prep|with(det:art|a($1,and_comp(n|baseball($1),n|bat($1))),$0)),$0),$0)
example_end

Sent: I thought you were going to eat the cheese .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|eat(pro:per|you,det:art|the($3,n|cheese($3)),$2),$1),$1),$0)
example_end

Sent: oh no I don 't like to fight .
Sem: lambda $0_{ev}.and(and(not(mod|do(v|like(pro:sub|i,lambda $1_{ev}.v|fight(pro:sub|i,$1),$0),$0),$0),co|oh($0)),co|no($0))
example_end

Sent: my hand is cold .
Sem: lambda $0_{ev}.adv|cold(det:poss|my($1,n|hand($1)),$0)
example_end

Sent: did you finish the puzzle ?
Sem: lambda $0_{ev}.Q(v|do-past(v|finish(pro:per|you,det:art|the($1,n|puzzle($1)),$0),$0))
example_end

Sent: you stay here with Urs .
Sem: lambda $0_{ev}.and(and(n|stay(pro:per|you,$0),adv|here($0)),prep|with(n:prop|ursula,$0))
example_end

Sent: Adam can you say package ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,lambda $1_{e}.n|package($1),$0),$0))
example_end

Sent: well go sit down .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),adv|down($0)),co|well($0))
example_end

Sent: Adam come back here .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|back(adv|here($0)))
example_end

Sent: d you have_to go ?
Sem: lambda $0_{ev}.Q(mod:aux|have_to(mod|do(v|go(pro:per|you,$0),$0),$0))
example_end

Sent: they are tied .
Sem: lambda $0_{ev}.aux|be-pres(part|tie-pastp(pro:sub|they,$0),$0)
example_end

Sent: who are you asking Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|ask-presp(pro:per|you,$1,$0),$0)
example_end

Sent: at the pillow station ?
Sem: Q(prep|at(det:art|the($0,and_comp(n|pillow($0),n|station($0)))))
example_end

Sent: would you give me one of your crackers please ?
Sem: lambda $0_{ev}.Q(and(mod|will-cond(v|give(pro:per|you,att(pro:indef|one,prep|of(det:poss|your($1,n|cracker-pl($1)))),pro:obj|me,$0),$0),co|please($0)))
example_end

Sent: they 're going to fall off the line .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|they,lambda $1_{ev}.and(v|fall(pro:sub|they,$1),prep|off(det:art|the($2,n|line($2)),$1)),$0),$0)
example_end

Sent: Urs would you like more coffee ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{e}.and(qn|more($1),n|coffee($1)),$0),$0))
example_end

Sent: you don 't like coffee .
Sem: lambda $0_{ev}.not(mod|do(v|like(pro:per|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: in Adam 's house ?
Sem: Q(prep|in(n:prop|adam's($0,n|house($0))))
example_end

Sent: where is Adam 's house ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|adam's($1,n|house($1)),$0),$2($0))
example_end

Sent: it 's turned out ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|turn-pastp(pro:per|it,$0),adv|out($0)),$0))
example_end

Sent: how did your house get turned out ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(part|turn-pastp(_,det:poss|your($1,n|house($1)),$0),$2($0)),adv|out($0))
example_end

Sent: are you doing the twist ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|do-presp(pro:per|you,det:art|the($1,n|twist($1)),$0),$0))
example_end

Sent: you 've got your shirt on ?
Sem: lambda $0_{ev}.Q(aux|~have(and(part|get-pastp(pro:per|you,det:poss|your($1,n|shirt($1)),$0),adv|on($0)),$0))
example_end

Sent: it 's not hanging ?
Sem: lambda $0_{ev}.Q(not(cop|~be(part|hang-presp(pro:per|it,$0),$0),$0))
example_end

Sent: it 's not hanging on the line .
Sem: lambda $0_{ev}.not(cop|~be(and(part|hang-presp(pro:per|it,$0),prep|on(det:art|the($1,n|line($1)),$0)),$0),$0)
example_end

Sent: shall I drink your pineapple juice ?
Sem: lambda $0_{ev}.Q(mod|shall(v|drink(pro:sub|i,det:poss|your($1,and_comp(n|pineapple($1),n|juice($1))),$0),$0))
example_end

Sent: and go for a ride !
Sem: lambda $0_{ev}.and(v|go(you,$0),prep|for(det:art|a($1,n|ride($1)),$0))
example_end

Sent: in my pocket and go for a ride !
Sem: prep|in(det:poss|my($0,n|pocket($0)))
example_end

Sent: but I 'm not a kangaroo what 're you doing making such a mess on your face ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(not(det:art|a(pro:sub|i,n|kangaroo(pro:sub|i,$0)),$0),aux|~be(part|do-presp(pro:per|you,$1,$0),$0))
example_end

Sent: d you really have dreams ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,lambda $1_{e}.n|dream-pl($1),$0),adv|real-dadj($0)),$0))
example_end

Sent: what 're dreams ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(lambda $2_{e}.n|dream-pl($2),$0)
example_end

Sent: yes if it 's dirty than it can 't be cleaned .
Sem: lambda $0_{ev}.and(not(aux|be(mod|can(conj|if(v|dirty(pro:per|it,$0),part|clean-pastp(pro:per|it,$0)),$0),$0),$0),co|yes($0))
example_end


Sent: don 't go in there yet .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|go(you,$0),prep|in(adv|there($0))),adv|yet($0)),$0),$0)
example_end

Sent: remember how we play the surprise game ?
Sem: lambda $0_{ev}.Q(v|remember(you,lambda $1_{ev}.and(v|play(pro:sub|we,det:art|the($2,and(adj|surprise($2),n|game($2))),$1),adv:int|how($1)),$0))
example_end

Sent: what do we do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|do(pro:sub|we,$1,$0),$0)
example_end

Sent: surprise we wait .
Sem: lambda $0_{ev}.and(v|wait(pro:sub|we,$0),n|surprise(you,$0))
example_end

Sent: let 's leave the tape recorder .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|leave(pro:obj|~us,det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$1),$0)
example_end

Sent: let 's play a game .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.v|play(pro:obj|~us,det:art|a($2,n|game($2)),$1),$0)
example_end

Sent: what did you do to the tape recorder Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|to(det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$0)),$0)
example_end

Sent: so the microphone can 't fall ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|fall(det:art|the($1,n|microphone($1)),$0),$0),$0))
example_end

Sent: wait a minute .
Sem: lambda $0_{ev}.v|wait(you,det:art|a($1,n|minute($1)),$0)
example_end

Sent: would you like a glass of ginger ale ?
Sem: lambda $0_{ev}.Q(mod|will-cond(conj|like(pro:per|you,det:art|a($1,att(n|glass($1),prep|of(lambda $2_{e}.and_comp(n|ginger($2),n|ale($2))))),$0),$0))
example_end

Sent: can you wind it ?
Sem: lambda $0_{ev}.Q(mod|can(v|wind(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you wind it .
Sem: lambda $0_{ev}.v|wind(pro:per|you,pro:per|it,$0)
example_end

Sent: look you wind it right here .
Sem: lambda $0_{ev}.and(and(v|wind(pro:per|you,pro:per|it,$0),adv|right(adv|here($0))),co|look(you,$0))
example_end

Sent: I have a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|have(pro:sub|i,$1,$0)
example_end

Sent: something 's in there .
Sem: lambda $0_{ev}.and(aux|~be(pro:indef|something,$0),adv|in(adv|there($0)))
example_end

Sent: I 'm writing .
Sem: lambda $0_{ev}.aux|~be(part|write-presp(pro:sub|i,$0),$0)
example_end

Sent: I always write when I come don 't I ?
Sem: lambda $0_{ev}.Q(and(conj|when(v|come(pro:sub|i,$0),and(v|write(pro:sub|i,$0),adv|always($0))),not(mod|do(pro:sub|i,$0),$0)))
example_end

Sent: can you hear it tick ?
Sem: lambda $0_{ev}.Q(mod|can(v|hear(pro:per|you,lambda $1_{ev}.v|tick(pro:per|it,$1),$0),$0))
example_end

Sent: put it on your ear .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|on(det:poss|your($1,n|ear($1)),$0))
example_end

Sent: I can 't turn it off .
Sem: lambda $0_{ev}.not(mod|can(and(v|turn(pro:sub|i,pro:per|it,$0),adv|off($0)),$0),$0)
example_end

Sent: it doesn 't turn off .
Sem: lambda $0_{ev}.not(mod|do(and(v|turn(pro:per|it,$0),adv|off($0)),$0),$0)
example_end

Sent: because the springs are all wound up .
Sem: lambda $0_{ev}.cop|be-pres(and(and(v|wound(det:art|the($1,n|spring-pl($1)),$0),adv|all($0)),adv|up($0)),$0)
example_end

Sent: alright my friend .
Sem: lambda $0_{ev}.and(det:poss|my($1,n|friend($1),$0),co|alright($0))
example_end

Sent: what goes up ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go-3s($1,$0),adv|up($0))
example_end

Sent: take the hat .
Sem: lambda $0_{ev}.v|take(you,det:art|the($1,n|hat($1)),$0)
example_end

Sent: what d you mean heavy ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(adj|mean(pro:per|you,lambda $1_{ev}.adj|heavy($2,$1),$0),$0)
example_end

Sent: what 're you going to put in it ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,$2,$1),prep|in(pro:per|it,$1)),$0),$0)
example_end

Sent: are they just like the bus ?
Sem: lambda $0_{ev}.Q(and(cop|be-pres(pro:sub|they,$0),adv|just(prep|like(det:art|the($1,n|bus($1)),$0))))
example_end

Sent: where 's the bus ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|bus($1)),$0),$2($0))
example_end

Sent: give me the button .
Sem: lambda $0_{ev}.v|give(you,det:art|the($1,n|button($1)),pro:obj|me,$0)
example_end

Sent: that 's the button .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|button(pro:dem|that,$0))
example_end

Sent: no no switches .
Sem: lambda $0_{ev}.and(not(n|switch-pl(you,$0),$0),qn|no($0))
example_end

Sent: let 's put the buttons back first .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(and(v|put-zero(pro:obj|~us,det:art|the($2,n|button-pl($2)),$1),adv|back($1)),adv|first($1)),$0)
example_end

Sent: where 's the container ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|contain-dv($1)),$0),$2($0))
example_end

Sent: you don 't have it in the container ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|have(pro:per|you,pro:per|it,$0),prep|in(det:art|the($1,n|contain-dv($1)),$0)),$0),$0))
example_end

Sent: aren 't they in there ?
Sem: lambda $0_{ev}.Q(not(and(aux|be(pro:sub|they,$0),adv|in(adv|there($0))),$0))
example_end

Sent: oh I don 't know .
Sem: lambda $0_{ev}.and(not(mod|do(v|know(pro:sub|i,$0),$0),$0),co|oh($0))
example_end

Sent: who are those people in that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|those($2,att(n|person-pl($2),prep|in(pro:dem|that))),$0)
example_end

Sent: what d you have in your truck ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:poss|your($2,n|truck($2)),$0)),$0)
example_end

Sent: a doll in ?
Sem: lambda $0_{e}.Q(adv|in(det:art|a($1,n|doll($1)),$0))
example_end

Sent: then it 's going ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|go-presp(pro:per|it,$0),adv:tem|then($0)),$0))
example_end

Sent: where is it going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(and(part|go-presp(pro:per|it,$0),$1($0)),$0)
example_end

Sent: where will it be going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be(mod|will(and(part|go-presp(pro:per|it,$0),$1($0)),$0),$0)
example_end

Sent: you fix the mail box ?
Sem: lambda $0_{ev}.Q(v|fix(pro:per|you,det:art|the($1,and_comp(n|mail($1),n|box($1))),$0))
example_end

Sent: you take a picture of Ursula .
Sem: lambda $0_{ev}.v|take(pro:per|you,det:art|a($1,att(n|picture($1),prep|of(n:prop|ursula))),$0)
example_end

Sent: and snap it .
Sem: lambda $0_{ev}.v|snap(you,pro:per|it,$0)
example_end

Sent: no don 't turn it on .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|turn(you,pro:per|it,$0),adv|on($0)),$0),$0),co|no($0))
example_end

Sent: no what migh happen if you knocked it down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(conj|if(and(v|knock-past(pro:per|you,pro:per|it,$0),adv|down($0)),mod|might(v|happen($1,$0),$0)),co|no($0))
example_end

Sent: with your elbow .
Sem: prep|with(det:poss|your($0,n|elbow($0)))
example_end

Sent: you 'll still hurt yourself .
Sem: lambda $0_{ev}.mod|~will(and(part|hurt-pastp(pro:per|you,pro:refl|yourself,$0),adv|still($0)),$0)
example_end

Sent: how does a gentleman roll ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(n|roll(det:art|a($1,n|gentleman($1)),$0),$2($0)),$0)
example_end

Sent: no you might hurt it .
Sem: lambda $0_{ev}.and(mod|might(v|hurt-zero(pro:per|you,pro:per|it,$0),$0),co|no($0))
example_end

Sent: because you hit it .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,pro:per|it,$0)
example_end

Sent: the top of the truck .
Sem: det:art|the($0,att(n|top($0),prep|of(det:art|the($1,n|truck($1)))))
example_end

Sent: but that 's not a trash truck .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,and_comp(n|trash(pro:dem|that,$0),n|truck(pro:dem|that,$0))),$0)
example_end

Sent: that 's an armored car truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|truck(pro:dem|that,$0),part|armor-pastp(pro:dem|that,$0)))
example_end

Sent: it carries money .
Sem: lambda $0_{ev}.v|carry-3s(pro:per|it,lambda $1_{e}.n|money($1),$0)
example_end

Sent: they carry money from one building to another building .
Sem: lambda $0_{ev}.and(and(v|carry(pro:sub|they,lambda $1_{e}.n|money($1),$0),prep|from(lambda $2_{e}.det:num|one(n|building($2)),$0)),prep|to(qn|another($3,n|building($3)),$0))
example_end

Sent: he 's driving the truck .
Sem: lambda $0_{ev}.aux|~be(part|drive-presp(pro:sub|he,det:art|the($1,n|truck($1)),$0),$0)
example_end

Sent: because somebody has_to drive it .
Sem: lambda $0_{ev}.mod:aux|has_to(v|drive(pro:indef|somebody,pro:per|it,$0),$0)
example_end

Sent: no I don 't think the door opens does it ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|open-3s(det:art|the($2,n|door($2)),$1),$0),$0),$0),mod|do-3s(pro:per|it,$0)),co|no($0)))
example_end

Sent: why are those men driving ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|drive-presp(pro:dem|those($1,n|man-pl($1)),$0),$2($0)),$0)
example_end

Sent: because they have_to take the money to someplace else .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|take(pro:sub|they,det:art|the($1,n|money($1)),$0),post|else(prep|to(n|someplace,$0))),$0)
example_end

Sent: no that 's where you put your money .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,n|money($2)),$1),pro:rel|where($1)),$0),co|no($0))
example_end

Sent: you put what in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,$1,$0),adv|in(adv|there($0)))
example_end

Sent: so the toys can get down .
Sem: lambda $0_{ev}.and(mod|can(and(v|get(det:art|the($1,n|toy-pl($1)),$0),adv|down($0)),$0),co|so($0))
example_end

Sent: with Paul ?
Sem: Q(prep|with(n:prop|paul))
example_end

Sent: how d you mark something ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|mark(pro:per|you,pro:indef|something,$0),$1($0)),$0)
example_end

Sent: oh go get the carriage Adam for the baby .
Sem: lambda $0_{ev}.and(and(v|get(you,det:art|the($1,n|carriage($1)),$0),prep|for(det:art|the($2,n|baby($2)),$0)),co|oh($0))
example_end

Sent: oh Adam you 've had a horse in the armored car truck .
Sem: lambda $0_{ev}.and(aux|~have(and(part|have-pastp(pro:per|you,det:art|a($1,n|horse($1)),$0),prep|in(det:art|the($2,and_comp(n|car($2),and(part|armor-pastp($2),n|truck($2)))),$0)),$0),co|oh($0))
example_end

Sent: why did you tip it over ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|tip(pro:per|you,pro:per|it,$0),$1($0)),adv|over($0)),$0)
example_end

Sent: that 's a street light .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|street(pro:dem|that,$0),n|light(pro:dem|that,$0)))
example_end

Sent: you always had pennies .
Sem: lambda $0_{ev}.and(v|have-past(pro:per|you,lambda $1_{e}.n|penny-pl($1),$0),adv|always($0))
example_end

Sent: yes take a picture of me .
Sem: lambda $0_{ev}.and(v|take(you,det:art|a($1,att(n|picture($1),prep|of(pro:obj|me))),$0),co|yes($0))
example_end

Sent: I see you .
Sem: lambda $0_{ev}.v|see(pro:sub|i,pro:per|you,$0)
example_end

Sent: step on your toys ?
Sem: lambda $0_{ev}.Q(and(v|step(you,$0),prep|on(det:poss|your($1,n|toy-pl($1)),$0)))
example_end

Sent: on your train ?
Sem: Q(prep|on(det:poss|your($0,n|train($0))))
example_end

Sent: Urs did .
Sem: lambda $0_{ev}.v|do-past(n:prop|ursula,$0)
example_end

Sent: is that a red one ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),n|red(pro:rel|that,$0))))
example_end

Sent: poor dollie .
Sem: lambda $0_{e}.and(adj|poor($0),n|doll-dim($0))
example_end

Sent: it 's a boy I guess .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,n|boy(pro:per|it,$0)),v|guess(pro:sub|i,$0))
example_end

Sent: well yes .
Sem: lambda $0_{ev}.and(co|yes($0),co|well($0))
example_end

Sent: it 's a baby boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and(n|boy(pro:per|it,$0),n|baby(pro:per|it,$0)))
example_end

Sent: where is he going ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(and(part|go-presp(pro:sub|he,$0),$1($0)),$0)
example_end

Sent: yes it has wheels .
Sem: lambda $0_{ev}.and(aux|have-3s(pro:per|it,lambda $1_{e}.n|wheel-pl($1),$0),co|yes($0))
example_end

Sent: you need to wash your bus off .
Sem: lambda $0_{ev}.v|need(pro:per|you,lambda $1_{ev}.and(v|wash(pro:per|you,det:poss|your($2,n|bus($2)),$1),adv|off($1)),$0)
example_end

Sent: you don 't put nails in like that .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,lambda $1_{e}.n|nail-pl($1),$0),prep|in($0)),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: when you 're building things you use nails .
Sem: lambda $0_{ev}.conj|when(cop|~be(n|building(pro:per|you,lambda $1_{e}.n|thing-pl($1),$0),$0),n|use(pro:per|you,lambda $2_{e}.n|nail-pl($2),$0))
example_end

Sent: what 's happening ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|happen-presp($1,$0),$0)
example_end

Sent: no did you break something ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|break(pro:per|you,pro:indef|something,$0),$0),co|no($0)))
example_end

Sent: what did you break ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|break(pro:per|you,$1,$0),$0)
example_end

Sent: Adam where are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(pro:per|you,$0),$1($0))
example_end

Sent: what 're you doing do with the Howard Johnson ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(pro:per|you,$1,$0),prep|with(det:art|the($2,n:prop|johnson_howard($2)),$0)),$0)
example_end

Sent: I 'm going to get some big moving van .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:sub|i,lambda $1_{ev}.v|get(pro:sub|i,qn|some($2,and(n:gerund|move-presp($2),and(adj|big($2),n|van($2)))),$1),$0),$0)
example_end

Sent: hello how are you .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|you($0,$1)
example_end

Sent: that 's nice .
Sem: lambda $0_{ev}.adj|nice(pro:dem|that,$0)
example_end

Sent: that 's a big camera .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|camera(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: where did you get this ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|you,pro:dem|this,$0),$1($0)),$0)
example_end

Sent: from the park ?
Sem: Q(prep|from(det:art|the($0,n|park($0))))
example_end

Sent: he didn 't get that at the park .
Sem: lambda $0_{ev}.not(mod|do(and(v|get(pro:sub|he,pro:dem|that,$0),prep|at(det:art|the($1,n|park($1)),$0)),$0),$0)
example_end

Sent: no put them back in or we won 't play with them again .
Sem: lambda $0_{ev}.and(coord|or(not(mod|will(and(and(v|play(pro:sub|we,$0),prep|with(pro:obj|them,$0)),adv|again($0)),$0),$0),and(v|put-zero(you,pro:obj|them,$0),adj|back(adv|in($0)))),co|no($0))
example_end

Sent: that 's some turquoise .
Sem: lambda $0_{ev}.qn|some(pro:dem|that,n|turquoise(pro:dem|that,$0))
example_end

Sent: that 's a key chain .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|key(pro:dem|that,$0),n|chain(pro:dem|that,$0)))
example_end

Sent: you want to play that game with Urs ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|play(pro:per|you,pro:dem|that($2,n|game($2)),$1),prep|with(n:prop|ursula,$1)),$0))
example_end

Sent: well you can count well can 't you ?
Sem: lambda $0_{ev}.Q(and(and(mod|can(and(v|count(pro:per|you,$0),adv|well($0)),$0),not(mod|can(pro:per|you,$0),$0)),co|well($0)))
example_end

Sent: a telephone .
Sem: det:art|a($0,n|telephone($0))
example_end

Sent: you found a number .
Sem: lambda $0_{ev}.v|find-past(pro:per|you,det:art|a($1,v|number($1)),$0)
example_end

Sent: one hat .
Sem: lambda $0_{e}.det:num|one(n|hat($0))
example_end

Sent: a queen .
Sem: det:art|a($0,n|queen($0))
example_end

Sent: no that 's a queen .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|queen(pro:dem|that,$0)),co|no($0))
example_end

Sent: show me another one .
Sem: lambda $0_{ev}.v|show(you,qn|another($1,pro:indef|one($1)),pro:obj|me,$0)
example_end

Sent: don 't step on them you may tear them .
Sem: lambda $0_{ev}.not(and(mod|do(and(v|step(you,$0),prep|on(pro:obj|them,$0)),$0),mod|may(v|tear(pro:per|you,pro:obj|them,$0),$0)),$0)
example_end

Sent: Adam Smith we 'll have put them up .
Sem: lambda $0_{ev}.aux|have(mod|~will(and(v|put-zero(pro:sub|we,pro:obj|them,$0),adv|up($0)),$0),$0)
example_end

Sent: you tell me what they are .
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: well pick the rest of them up .
Sem: lambda $0_{ev}.and(and(v|pick(you,det:art|the($1,att(n|rest($1),prep|of(pro:obj|them))),$0),adv|up($0)),co|well($0))
example_end

Sent: give me the jug .
Sem: lambda $0_{ev}.v|give(you,det:art|the($1,n|jug($1)),pro:obj|me,$0)
example_end

Sent: Adam can you find the violin ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,det:art|the($1,n|violin($1)),$0),$0))
example_end

Sent: shall we pick up the cards first Adam ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|pick_up(pro:sub|we,det:art|the($1,n|card-pl($1)),$0),adj|first($0)),$0))
example_end

Sent: you made a queen ?
Sem: lambda $0_{ev}.Q(v|make-past(pro:per|you,det:art|a($1,n|queen($1)),$0))
example_end

Sent: would you pick the blocks up under Urs ?
Sem: lambda $0_{ev}.Q(mod|will-cond(and(v|pick(pro:per|you,det:art|the($1,att(n|block-pl($1),adv|under(n:prop|ursula))),$0),adv|up($0)),$0))
example_end

Sent: for Celia .
Sem: conj|for(n:prop|celia)
example_end

Sent: Celia wears sneakers .
Sem: lambda $0_{ev}.v|wear-3s(n:prop|celia,lambda $1_{e}.n|sneaker-pl($1),$0)
example_end

Sent: a house can 't dance .
Sem: lambda $0_{ev}.not(mod|can(v|dance(det:art|a($1,n|house($1)),$0),$0),$0)
example_end

Sent: I don 't think I can .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: it doesn 't really open .
Sem: lambda $0_{ev}.not(mod|do(and(adj|open(pro:per|it,$0),adv|real-dadj($0)),$0),$0)
example_end

Sent: I think it can be turned .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|be(mod|can(part|turn-pastp(pro:per|it,$1),$1),$1),$0)
example_end

Sent: chimney house .
Sem: lambda $0_{e}.and_comp(n|chimney($0),n|house($0))
example_end

Sent: let 's do it on the table .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|do(pro:obj|~us,pro:per|it,$1),prep|on(det:art|the($2,n|table($2)),$1)),$0)
example_end

Sent: you have enough ?
Sem: lambda $0_{ev}.Q(and(v|have(pro:per|you,$0),adv|enough($0)))
example_end

Sent: see you can build it high .
Sem: lambda $0_{ev}.and(mod|can(v|build(pro:per|you,lambda $1_{ev}.n|high(pro:per|it,$1),$0),$0),v|see(you,$0))
example_end

Sent: it won 't stand up very well .
Sem: lambda $0_{ev}.not(mod|will(and(and(v|stand(pro:per|it,$0),adv|up($0)),adv|very(adv|well($0))),$0),$0)
example_end

Sent: how am I going to find enough games in the store ?
Sem: lambda $4_{e}.lambda $0_{ev}.aux|be-1s(and(part|go-presp(pro:sub|i,lambda $1_{ev}.and(v|find(pro:sub|i,lambda $2_{e}.and(qn|enough($2),n|game-pl($2)),$1),prep|in(det:art|the($3,n|store($3)),$1)),$0),$4($0)),$0)
example_end

Sent: you have_to blow very hard and you 'll be surprised .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|blow(pro:per|you,lambda $1_{ev}.aux|be(mod|~will(part|surprise-pastp(pro:per|you,$1),$1),$1),$0),adv|very(adv|hard($0))),$0)
example_end

Sent: blow your own balloons .
Sem: lambda $0_{ev}.v|blow(you,det:poss|your($1,and(adj|own($1),n|balloon-pl($1))),$0)
example_end

Sent: isn 't that a surprise ?
Sem: lambda $0_{ev}.Q(not(det:art|a(det:dem|that,n|surprise(det:dem|that,$0)),$0))
example_end

Sent: you can blow it way up in the air .
Sem: lambda $0_{ev}.mod|can(and(and(v|blow(pro:per|you,pro:per|it,$0),n|way(adv|up($0))),prep|in(det:art|the($1,n|air($1)),$0)),$0)
example_end

Sent: shall we blow another one ?
Sem: lambda $0_{ev}.Q(mod|shall(v|blow(pro:sub|we,qn|another($1,pro:indef|one($1)),$0),$0))
example_end

Sent: that looks like fun Adam .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:dem|that,$0),co|like(lambda $1_{e}.adj|fun($1),$0))
example_end

Sent: when did it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: what 's it doing in Pembroke ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(and(part|do-presp(pro:per|it,$1,$0),prep|in(n:prop|pembroke,$0)),$0)
example_end

Sent: shall we blow it bigger ?
Sem: lambda $0_{ev}.Q(mod|shall(v|blow(pro:sub|we,lambda $1_{ev}.adj|big-cp(pro:per|it,$1),$0),$0))
example_end

Sent: very gentle with it .
Sem: lambda $0_{e}.adj|gentle($0)
example_end

Sent: it 's behind you .
Sem: lambda $0_{ev}.adv|behind(pro:per|you,pro:per|it,$0)
example_end

Sent: look it 's staying on the wall .
Sem: lambda $0_{ev}.and(aux|~be(and(part|stay-presp(pro:per|it,$0),prep|on(det:art|the($1,n|wall($1)),$0)),$0),co|look(you,$0))
example_end

Sent: it 's very sticky .
Sem: lambda $0_{ev}.adv|very(n|sticky(pro:per|it,$0))
example_end

Sent: no it 's more fun when it 's bigger .
Sem: lambda $0_{ev}.n|fun(pro:per|it,$0)
example_end

Sent: like a punch .
Sem: prep|like(det:art|a($0,n|punch+ball($0)))
example_end

Sent: I think he said I don 't like that stuff on me .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,lambda $2_{ev}.not(mod|do(co|like(pro:sub|i,pro:dem|that($3,att(n|stuff($3),prep|on(pro:obj|me))),$2),$2),$2),$1),$0)
example_end

Sent: well that 's enough now .
Sem: lambda $0_{ev}.and(adv|now(adv|enough(pro:dem|that,$0)),co|well($0))
example_end

Sent: well no you blow it bigger .
Sem: lambda $0_{ev}.and(and(v|blow(pro:per|you,lambda $1_{ev}.adj|big-cp(pro:per|it,$1),$0),co|well($0)),co|no($0))
example_end

Sent: look see what happens ?
Sem: lambda $0_{ev}.Q(and(v|see(you,lambda $1_{ev}.v|happen-3s(pro:int|what,$1),$0),co|look(you,$0)))
example_end

Sent: blow again .
Sem: lambda $0_{ev}.and(n|blow(you,$0),adv|again($0))
example_end

Sent: that won 't hurt you .
Sem: lambda $0_{ev}.not(mod|will(v|hurt-zero(pro:rel|that,pro:per|you,$0),$0),$0)
example_end

Sent: blow it again .
Sem: lambda $0_{ev}.and(v|blow(you,pro:per|it,$0),adv|again($0))
example_end

Sent: very gently .
Sem: lambda $0_{e}.adv|very(adv|gentle-dadj($0))
example_end

Sent: rolling_steam is steam roller .
Sem: lambda $0_{ev}.and_comp(n|steam(lambda $1_{e}.chi|rolling_steam($1),$0),n|roll-dv(lambda $2_{e}.chi|rolling_steam($2),$0))
example_end

Sent: jump to the nurse .
Sem: lambda $0_{ev}.and(n|jump(you,$0),prep|to(det:art|the($1,n|nurse($1)),$0))
example_end

Sent: what is the nurse ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|nurse($2)),$0)
example_end

Sent: wait until you finish .
Sem: lambda $0_{ev}.prep|until(v|finish(pro:per|you,$0),v|wait(you,$0))
example_end

Sent: blow hard .
Sem: lambda $0_{ev}.and(n|blow(you,$0),adv|hard($0))
example_end

Sent: come on blow again .
Sem: lambda $0_{ev}.and(and(v|come(you,$0),prep|on($0)),and(n|blow(you,$0),adv|again($0)))
example_end

Sent: what kind of egg dances around ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|dance-3s($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|egg($3)))),$0),adv|around($0))
example_end

Sent: what kind of egg does that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|egg($3)))),pro:dem|that,$0)
example_end

Sent: what kind of egg does tricks ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s($1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|egg($3)))),lambda $4_{e}.n|trick-pl($4),$0)
example_end

Sent: you 're about to sit in my chair like a boy .
Sem: lambda $0_{ev}.adv|about(pro:per|you,lambda $1_{ev}.and(and(v|sit(pro:per|you,$1),prep|in(det:poss|my($2,n|chair($2)),$1)),prep|like(det:art|a($3,n|boy($3)),$1)),$0)
example_end

Sent: you take it .
Sem: lambda $0_{ev}.v|take(pro:per|you,pro:per|it,$0)
example_end

Sent: that 's a big boy .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|boy(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: you 're big enough .
Sem: lambda $0_{ev}.adv|enough(adj|big(pro:per|you,$0))
example_end

Sent: oh that 's a big one Adam .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|big(pro:dem|that,$0))),co|oh($0))
example_end

Sent: I don 't know whether you need another one .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,qn|another($2,pro:indef|one($2)),$1),$0),$0),$0)
example_end

Sent: squeeze it like a turtle .
Sem: lambda $0_{ev}.and(v|squeeze(you,pro:per|it,$0),conj|like(det:art|a($1,n|turtle($1)),$0))
example_end

Sent: why would you squeeze a turtle like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|squeeze(pro:per|you,det:art|a($1,n|turtle($1)),$0),$2($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: I think that 's from a book .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.prep|from(det:art|a($2,n|book($2)),pro:rel|that,$1),$0)
example_end

Sent: well put it on the table .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|table($1)),$0)),co|well($0))
example_end

Sent: a frog let 's see .
Sem: lambda $0_{ev}.v:obj|let(det:art|a($1,n|frog($1)),lambda $2_{ev}.v|see(pro:obj|~us,$2),$0)
example_end

Sent: who is that little boy ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,and(adj|little($2),n|boy($2))),$0)
example_end

Sent: can I help you Adam ?
Sem: lambda $0_{ev}.Q(mod|can(v|help(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: now let 's make a little one for a head .
Sem: lambda $0_{ev}.and(v:obj|let(you,lambda $1_{ev}.and(v|make(pro:obj|~us,det:art|a($2,att(pro:indef|one,lambda $3_{e}.adj|little($3),$2)),$1),prep|for(det:art|a($4,n|head($4)),$1)),$0),adv|now($0))
example_end

Sent: it 's so sticky .
Sem: lambda $0_{ev}.adv|so(n|sticky(pro:per|it,$0))
example_end

Sent: it 's finished .
Sem: lambda $0_{ev}.aux|~be(part|finish-pastp(pro:per|it,$0),$0)
example_end

Sent: you name it .
Sem: lambda $0_{ev}.v|name(pro:per|you,pro:per|it,$0)
example_end

Sent: you 're not an eye ?
Sem: lambda $0_{ev}.Q(not(det:art|a(pro:per|you,n|eye(pro:per|you,$0)),$0))
example_end

Sent: an arm ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|arm($1),$0))
example_end

Sent: it 's very hard .
Sem: lambda $0_{ev}.adv|very(adv|hard(pro:per|it,$0))
example_end

Sent: I can 't do it .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: it will break .
Sem: lambda $0_{ev}.mod|will(v|break(pro:per|it,$0),$0)
example_end

Sent: was that Do_Bee ?
Sem: lambda $0_{ev}.Q(n:prop|do_bee(pro:rel|that,$0))
example_end


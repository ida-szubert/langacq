Sent: oh yes .
Sem: lambda $0_{r}.and(co|yes_2($0),co|oh_1($0))
example_end

Sent: try it .
Sem: lambda $0_{r}.v|try_1(you,pro:per|it_2,$0)
example_end

Sent: that 's right ?
Sem: lambda $0_{r}.Q(n|right_3(pro:dem|that_1,$0))
example_end

Sent: try it .
Sem: lambda $0_{r}.v|try_1(you,pro:per|it_2,$0)
example_end

Sent: I don 't know .
Sem: lambda $0_{r}.not(mod|do_2(v|know_4(pro:sub|i_1,$0),$0),$0)
example_end

Sent: I don 't know .
Sem: lambda $0_{r}.not(mod|do_2(v|know_4(pro:sub|i_1,$0),$0),$0)
example_end

Sent: blow again .
Sem: lambda $0_{r}.and(n|blow_1(you,$0),adv|again_2($0))
example_end

Sent: well Adam .
Sem: lambda $0_{r}.and(n:prop|adam_2($0),co|well_1($0))
example_end

Sent: that 's right ?
Sem: lambda $0_{r}.Q(n|right_3(pro:dem|that_1,$0))
example_end

Sent: I 'm all finished .
Sem: lambda $0_{r}.adv|all_3(part|finish-pastp_4(pro:sub|i_1,$0))
example_end

Sent: Adam Smith ?
Sem: lambda $0_{e}.Q(n:prop|smith_2_adam_1($0))
example_end

Sent: I don 't know .
Sem: lambda $0_{r}.not(mod|do_2(v|know_4(pro:sub|i_1,$0),$0),$0)
example_end

Sent: oh I 'm sorry .
Sem: lambda $0_{r}.and(adj|sorry_4(pro:sub|i_2,$0),co|oh_1($0))
example_end

Sent: I 'm sorry .
Sem: lambda $0_{r}.adj|sorry_3(pro:sub|i_1,$0)
example_end

Sent: oh what is that ?
Sem: lambda $0_{r}.Q(and(pro:int|what_2(pro:dem|that_4,$0),co|oh_1($0)))
example_end

Sent: who is that ?
Sem: lambda $0_{r}.Q(pro:int|who_1(pro:dem|that_3,$0))
example_end

Sent: can you say thank_you ?
Sem: lambda $0_{r}.Q(mod|can_1(v|say_3(pro:per|you_2,lambda $1_{e}.n|thank_you_4($1),$0),$0))
example_end

Sent: oh Adam .
Sem: lambda $0_{r}.and(n:prop|adam_2($0),co|oh_1($0))
example_end

Sent: you 're welcome .
Sem: lambda $0_{r}.adj|welcome_3(pro:per|you_1,$0)
example_end

Sent: that 's nice .
Sem: lambda $0_{r}.adj|nice_3(pro:dem|that_1,$0)
example_end

Sent: what did you say Adam ?
Sem: lambda $0_{r}.Q(mod|do-past_2(v|say_4(pro:per|you_3,pro:int|what_1,$0),$0))
example_end

Sent: oh I 'm sorry .
Sem: lambda $0_{r}.and(adj|sorry_4(pro:sub|i_2,$0),co|oh_1($0))
example_end

Sent: what is that Adam ?
Sem: lambda $0_{r}.Q(pro:int|what_1(pro:rel|that_3,$0))
example_end

Sent: that 's right ?
Sem: lambda $0_{r}.Q(n|right_3(pro:dem|that_1,$0))
example_end


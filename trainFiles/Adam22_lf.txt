Sent: shall I take it apart for you ?
Sem: lambda $0_{ev}.Q(mod|shall(and(and(v|take(pro:sub|i,pro:per|it,$0),adv|apart($0)),prep|for(pro:per|you,$0)),$0))
example_end

Sent: a cord ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|cord($1),$0))
example_end

Sent: that 's not a cord .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|cord(pro:dem|that,$0)),$0)
example_end

Sent: d you have a cord ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|cord($1)),$0),$0))
example_end

Sent: that 's a fuse .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fuse(pro:dem|that,$0))
example_end

Sent: it screws into the toy .
Sem: lambda $0_{ev}.and(v|screw-3s(pro:per|it,$0),prep|into(det:art|the($1,n|toy($1)),$0))
example_end

Sent: a ride ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|ride($1),$0))
example_end

Sent: look Adam you can screw it in there see ?
Sem: lambda $0_{ev}.Q(and(and(mod|can(and(v|screw(pro:per|you,pro:per|it,$0),prep|in(adv|there($0))),$0),co|look(you,$0)),v|see(you,$0)))
example_end

Sent: that one 's missing .
Sem: lambda $0_{ev}.cop|~be(part|miss-presp(pro:dem|that($1,pro:indef|one($1)),$0),$0)
example_end

Sent: you do that .
Sem: lambda $0_{ev}.v|do(pro:per|you,pro:dem|that,$0)
example_end

Sent: turn the light on ?
Sem: lambda $0_{ev}.Q(and(v|turn(you,det:art|the($1,n|light($1)),$0),adv|on($0)))
example_end

Sent: you can turn this one on .
Sem: lambda $0_{ev}.mod|can(and(v|turn(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0),adv|on($0)),$0)
example_end

Sent: like a dog ?
Sem: Q(prep|like(det:art|a($0,n|dog($0))))
example_end

Sent: oh that 's the light ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,n|light(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: where 're you going to put the light ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|put-zero(pro:per|you,det:art|the($2,n|light($2)),$1),$0),$3($0)),$0)
example_end

Sent: where did the light go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,n|light($1)),$0),$2($0)),$0)
example_end

Sent: to blast off with ?
Sem: lambda $0_{ev}.Q(and(v|blast(you,$0),adv|off($0)))
example_end

Sent: I 'll hold it while you screw .
Sem: lambda $0_{ev}.conj|while(v|screw(pro:per|you,$0),mod|~will(v|hold(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: a funny rocket ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|fun-dn($1),n|rocket($1)),$0))
example_end

Sent: oh that .
Sem: lambda $0_{ev}.and(pro:dem|that($0),co|oh($0))
example_end

Sent: if you want it to go there .
Sem: lambda $0_{ev}.v|want(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|it,$1),adv|there($1)),$0)
example_end

Sent: no this is a toy .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|this,n|toy(pro:dem|this,$0)),qn|no($0))
example_end

Sent: why d you need another piece ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|need(pro:per|you,qn|another($1,n|piece($1)),$0),$2($0)),$0)
example_end

Sent: it 's for printing .
Sem: lambda $0_{ev}.aux|~be(pro:per|it,lambda $1_{ev}.n:gerund|print-presp(you,$1),$0)
example_end

Sent: let me show you Adam .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|show(pro:obj|me,pro:per|you,$1),$0)
example_end

Sent: press it down like that .
Sem: lambda $0_{ev}.and(and(v|press(you,pro:per|it,$0),adv|down($0)),prep|like(pro:dem|that,$0))
example_end

Sent: you don 't see another one ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|see(pro:per|you,qn|another($1,pro:indef|one($1)),$0),$0),$0))
example_end

Sent: you got your fingers in it didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|get-past(pro:per|you,det:poss|your($1,n|finger-pl($1)),$0),prep|in(pro:per|it,$0)),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: it matches .
Sem: lambda $0_{ev}.v|match-3s(pro:per|it,$0)
example_end

Sent: it 's not an x is it ?
Sem: lambda $0_{ev}.Q(and(not(det:art|a(pro:per|it,n:let|x(pro:per|it,$0)),$0),aux|be-3s(pro:per|it,$0)))
example_end

Sent: well keep your fingers out .
Sem: lambda $0_{ev}.and(and(v|keep(you,det:poss|your($1,n|finger-pl($1)),$0),adv|out($0)),co|well($0))
example_end

Sent: you 're a funny one Adam .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(det:num|one(pro:per|you,$0),adj|fun-dn(pro:per|you,$0)))
example_end

Sent: don 't put it on the floor Adam .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0)
example_end

Sent: let 's put them on the paper .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,pro:obj|them,$1),prep|on(det:art|the($2,n|paper($2)),$1)),$0)
example_end

Sent: I do enough tricks .
Sem: lambda $0_{ev}.v|do(pro:sub|i,qn|enough($1,n|trick-pl($1)),$0)
example_end

Sent: you fold them .
Sem: lambda $0_{ev}.v|fold(pro:per|you,pro:obj|them,$0)
example_end

Sent: make a refrigerator ?
Sem: lambda $0_{ev}.Q(v|make(you,det:art|a($1,n|refrigerator($1)),$0))
example_end

Sent: your hands are dry .
Sem: lambda $0_{ev}.adj|dry(det:poss|your($1,n|hand-pl($1)),$0)
example_end

Sent: no ink .
Sem: qn|no($0,n|ink($0))
example_end

Sent: d you want to tell Urs about your accident ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,n:prop|ursula,$1),prep|about(det:poss|your($2,n|accident($2)),$1)),$0),$0))
example_end

Sent: what happened to the carriage ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,n|carriage($2)),$0))
example_end

Sent: no I 'm talking about your accident .
Sem: lambda $0_{ev}.and(aux|~be(and(part|talk-presp(pro:sub|i,$0),prep|about(det:poss|your($1,n|accident($1)),$0)),$0),co|no($0))
example_end

Sent: what happened to your finger ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|finger($2)),$0))
example_end

Sent: that 's clay .
Sem: lambda $0_{ev}.n|clay(pro:dem|that,$0)
example_end

Sent: a nest .
Sem: det:art|a($0,n|nest($0))
example_end

Sent: yes you can play with that one .
Sem: lambda $0_{ev}.and(mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|that($1,pro:indef|one($1)),$0)),$0),co|yes($0))
example_end

Sent: these turn .
Sem: lambda $0_{ev}.n|turn(pro:dem|these,$0)
example_end

Sent: don 't throw the ball .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,det:art|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: why don 't you play with something else ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|play(pro:per|you,$0),$1($0)),post|else(prep|with(pro:indef|something,$0))),$0),$0)
example_end

Sent: I don 't see anybody sitting there .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,lambda $1_{ev}.and(part|sit-presp(pro:indef|anybody,$1),adv|there($1)),$0),$0),$0)
example_end

Sent: does that have a driver ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(det:dem|that,det:art|a($1,n|drive-dv($1)),$0),$0))
example_end

Sent: that 's a big hat on his head .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(and(n|hat(pro:dem|that,$0),adj|big(pro:dem|that,$0)),prep|on(det:poss|his($1,n|head($1)))))
example_end

Sent: can he see ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:sub|he,$0),$0))
example_end

Sent: no it looks like it 's down over his eyes .
Sem: lambda $0_{ev}.and(cop|look-3s(pro:per|it,lambda $1_{ev}.adv|down(prep|over(det:poss|his($2,n|eye-pl($2)),pro:per|it,$1)),$0),co|no($0))
example_end

Sent: that one turned over .
Sem: lambda $0_{ev}.and(v|turn-past(pro:dem|that($1,pro:indef|one($1)),$0),adv|over($0))
example_end

Sent: no don 't throw over here .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|throw(you,$0),adv|over(adv|here($0))),$0),$0),co|no($0))
example_end

Sent: and do what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(you,$1,$0)
example_end

Sent: you can play with these .
Sem: lambda $0_{ev}.mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|these,$0)),$0)
example_end

Sent: it 's for zipping Adam .
Sem: lambda $0_{ev}.aux|~be(pro:per|it,lambda $1_{ev}.n:gerund|zip-presp(you,$1),$0)
example_end

Sent: that 's not an x that 's a v .
Sem: lambda $0_{ev}.not(and(det:art|a(pro:dem|that,n:let|x(pro:dem|that,$0)),det:art|a(pro:dem|that,n:let|v(pro:dem|that,$0))),$0)
example_end

Sent: oh aren 't they pretty pictures .
Sem: lambda $0_{ev}.and(not(and(v|picture-3s(pro:sub|they,$0),adv|pretty(pro:sub|they,$0)),$0),co|oh($0))
example_end

Sent: what are they all about ?
Sem: lambda $0_{ev}.post|all(adv|about(det:int|what,pro:sub|they,$0))
example_end

Sent: d you want to tell me about it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,pro:obj|me,$1),prep|about(pro:per|it,$1)),$0),$0))
example_end

Sent: x e June ?
Sem: lambda $0_{e}.Q(n:let|x($0))
example_end

Sent: look Adam what I have .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|have(pro:sub|i,$1,$0),co|look(you,$0))
example_end

Sent: where 's your drawing board ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,and_comp(n|drawing($1),n|board($1))),$0),$2($0))
example_end

Sent: the drawing board ?
Sem: lambda $0_{e}.Q(det:art|the($1,and_comp(n|drawing($1),n|board($1)),$0))
example_end

Sent: you broke it didn 't you ?
Sem: lambda $0_{ev}.Q(and(v|break-past(pro:per|you,pro:per|it,$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: I 'm not going anyplace .
Sem: lambda $0_{ev}.not(cop|~be(and(part|go-presp(pro:sub|i,$0),adv|anyplace($0)),$0),$0)
example_end

Sent: no I was just getting some diapers for Paul .
Sem: lambda $0_{ev}.and(cop|be-past(and(and(part|get-presp(pro:sub|i,qn|some($1,n|diaper-pl($1)),$0),adv|just($0)),prep|for(n:prop|paul,$0)),$0),co|no($0))
example_end

Sent: well I started it .
Sem: lambda $0_{ev}.and(v|start-past(pro:sub|i,pro:per|it,$0),co|well($0))
example_end

Sent: next week .
Sem: adv|next(lambda $0_{e}.n|week($0))
example_end

Sent: no you hit him didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|hit-zero(pro:per|you,pro:obj|him,$0),not(mod|do(pro:per|you,$0),$0)),co|no($0)))
example_end

Sent: leave you alone ?
Sem: lambda $0_{ev}.Q(v|leave(you,lambda $1_{ev}.adv|alone(pro:per|you,$1),$0))
example_end

Sent: Adam here are some peanuts .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some($1,n|peanut-pl($1)),$0),adv|here($0))
example_end

Sent: you have_to take the shell off .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|take(pro:per|you,det:art|the($1,n|shell($1)),$0),adv|off($0)),$0)
example_end

Sent: you cut it in a bowl ?
Sem: lambda $0_{ev}.Q(and(v|cut-zero(pro:per|you,pro:per|it,$0),prep|in(det:art|a($1,n|bowl($1)),$0)))
example_end

Sent: you have_to chew it hard .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|chew(pro:per|you,pro:per|it,$0),adv|hard($0)),$0)
example_end

Sent: pick up the paper behind you Adam .
Sem: lambda $0_{ev}.and(v|pick(you,det:art|the($1,att(n|paper($1),adv|behind(pro:per|you))),$0),prep|up($0))
example_end

Sent: d you wan to shell another one ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|shell(pro:per|you,qn|another($2,pro:indef|one($2)),$1),$0),$0))
example_end

Sent: you don 't have_to eat them .
Sem: lambda $0_{ev}.not(mod:aux|have_to(mod|do(v|eat(pro:per|you,pro:obj|them,$0),$0),$0),$0)
example_end

Sent: you could just shell them .
Sem: lambda $0_{ev}.mod|could(and(n|shell(pro:per|you,pro:obj|them,$0),adv|just($0)),$0)
example_end

Sent: take a shell out_of a shoe ?
Sem: lambda $0_{ev}.Q(and(v|take(you,det:art|a($1,n|shell($1)),$0),prep|out_of(det:art|a($2,n|shoe($2)),$0)))
example_end

Sent: here 's another one .
Sem: lambda $0_{ev}.and(cop|~be(qn|another($1,pro:indef|one($1)),$0),pro:exist|here($0))
example_end

Sent: that 's alright .
Sem: lambda $0_{ev}.adj|alright(pro:dem|that,$0)
example_end

Sent: did you chew it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|chew(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: see what 's inside .
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(poss|~s($1,$0),adv|inside($0)),co|see(you,$0))
example_end

Sent: yes I want you to go the way .
Sem: lambda $0_{ev}.and(v|want(pro:sub|i,lambda $1_{ev}.v|go(pro:per|you,det:art|the($2,n|way($2)),$1),$0),co|yes($0))
example_end

Sent: can 't you open them yet ?
Sem: lambda $0_{ev}.Q(not(mod|can(and(v|open(pro:per|you,pro:obj|them,$0),adv|yet($0)),$0),$0))
example_end

Sent: remember we did the peas yesterday ?
Sem: lambda $0_{ev}.Q(and(and(v|do-past(pro:sub|we,det:art|the($1,n|pea-pl($1)),$0),adv:tem|yesterday($0)),v|remember(you,$0)))
example_end

Sent: did you help ?
Sem: lambda $0_{ev}.Q(v|do-past(co|help(pro:per|you,$0),$0))
example_end

Sent: did you find some tiny ones ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,qn|some($1,att(pro:indef|one-pl,lambda $2_{e}.adj|tiny($2),$1)),$0),$0))
example_end

Sent: no because they weren 't cooked .
Sem: lambda $0_{ev}.and(not(aux|be(part|cook-pastp(pro:sub|they,$0),$0),$0),co|no($0))
example_end

Sent: they are to cook but they 're not cooked yet .
Sem: lambda $0_{ev}.conj|but(not(cop|~be(and(part|cook-pastp(pro:sub|they,$0),adv|yet($0)),$0),$0),cop|be-pres(pro:sub|they,lambda $1_{ev}.n|cook(pro:sub|they,$1),$0))
example_end

Sent: you have_to boil them on the stove .
Sem: lambda $0_{ev}.mod:aux|have_to(and(v|boil(pro:per|you,pro:obj|them,$0),prep|on(det:art|the($1,n|stove($1)),$0)),$0)
example_end

Sent: are you going to cook peas on it ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|cook(pro:per|you,lambda $2_{e}.n|pea-pl($2),$1),prep|on(pro:per|it,$1)),$0),$0))
example_end

Sent: are you going to take the shell off ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,det:art|the($2,n|shell($2)),$1),adv|off($1)),$0),$0))
example_end

Sent: one step ?
Sem: lambda $0_{e}.Q(det:num|one(n|step($0)))
example_end

Sent: did you get here in one step ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(and(v|get(pro:per|you,$0),adv|here($0)),prep|in(lambda $1_{e}.pro:indef|one(n|step($1)),$0)),$0))
example_end

Sent: another step ?
Sem: lambda $0_{e}.Q(pro:indef|another($1,n|step($1),$0))
example_end

Sent: does that mean you take two steps ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|mean(pro:dem|that,lambda $1_{ev}.v|take(pro:per|you,lambda $2_{e}.det:num|two(n|step-pl($2)),$1),$0),$0))
example_end

Sent: hello shell .
Sem: lambda $0_{ev}.and(n|shell($0),co|hello($0))
example_end

Sent: that would hurt .
Sem: lambda $0_{ev}.mod|will-cond(v|hurt-zero(pro:dem|that,$0),$0)
example_end

Sent: I 'm just trying to get the string off .
Sem: lambda $0_{ev}.aux|~be(and(part|try-presp(pro:sub|i,lambda $1_{ev}.and(v|get(pro:sub|i,det:art|the($2,n|string($2)),$1),adv|off($1)),$0),adv|just($0)),$0)
example_end

Sent: it doesn 't belong on here .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:per|it,$0),prep|on(adv|here($0))),$0),$0)
example_end

Sent: what happened to the other part of it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,att(and(qn|other($2),n|part($2)),prep|of(pro:per|it))),$0))
example_end

Sent: you 're rolling a barrel ?
Sem: lambda $0_{ev}.Q(aux|~be(part|roll-presp(pro:per|you,det:art|a($1,n|barrel($1)),$0),$0))
example_end

Sent: did you show Urs your monkey train ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:poss|your($1,and_comp(n|monkey($1),n|train($1))),n:prop|ursula,$0),$0))
example_end

Sent: you 're going to feed the pigeons .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|feed(pro:per|you,det:art|the($2,n|pigeon-pl($2)),$1),$0),$0)
example_end

Sent: well I don 't think they 'd like the shell .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(prep|like(pro:sub|they,det:art|the($2,n|shell($2)),$1),$1),$0),$0),$0),co|well($0))
example_end

Sent: hello Mr Shell .
Sem: lambda $0_{ev}.and(n:prop|shell_mr($0),co|hello($0))
example_end

Sent: how are you today ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(aux|be-pres(pro:per|you,$0),$1($0)),adv:tem|today($0))
example_end

Sent: he threw some pie ?
Sem: lambda $0_{ev}.Q(v|throw-past(pro:sub|he,qn|some($1,n|pie($1)),$0))
example_end

Sent: what are you going to do to that one ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do(pro:per|you,$2,$1),prep|to(pro:dem|that($3,pro:indef|one($3)),$1)),$0),$0)
example_end

Sent: I think you 'd better ask your Mother .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.mod|~genmod(and(v|ask(pro:per|you,det:poss|your($2,n:prop|mother($2)),$1),adj|good-cp($1)),$1),$0)
example_end

Sent: open it .
Sem: lambda $0_{ev}.v|open(you,pro:per|it,$0)
example_end

Sent: here it comes .
Sem: lambda $0_{ev}.and(v|come-3s(pro:per|it,$0),adv|here($0))
example_end

Sent: let 's put the outside shells in there .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,det:art|the($2,and(adj|outside($2),n|shell-pl($2))),$1),prep|in(adv|there($1))),$0)
example_end

Sent: where is a broken one .
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|a($1,att(pro:indef|one,lambda $2_{e}.part|break-pastp($2),$1)),$0),$3($0))
example_end

Sent: you can peel it now .
Sem: lambda $0_{ev}.mod|can(and(v|peel(pro:per|you,pro:per|it,$0),adv|now($0)),$0)
example_end

Sent: a top on his king hat ?
Sem: lambda $0_{e}.Q(det:art|a($1,att(n|top($1),prep|on(det:poss|his($2,and_comp(n|king($2),n|hat($2))))),$0))
example_end

Sent: we 're going play a game .
Sem: lambda $0_{ev}.aux|~be(n|play(pro:sub|we,det:art|a($1,n|game($1)),$0),$0)
example_end

Sent: to keep it closed .
Sem: lambda $0_{ev}.v|keep(you,lambda $1_{ev}.v|close-past(pro:per|it,$1),$0)
example_end

Sent: it is very sharp .
Sem: lambda $0_{ev}.adv|very(adj|sharp(pro:per|it,$0))
example_end

Sent: no it 's too sharp Adam .
Sem: lambda $0_{ev}.and(adv|too(adj|sharp(pro:per|it,$0)),co|no($0))
example_end

Sent: no that doesn 't go on .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:dem|that,$0),adv|on($0)),$0),$0),qn|no($0))
example_end

Sent: oh look it tipped over of course .
Sem: lambda $0_{ev}.and(and(and(v|tip-past_over(pro:per|it,$0),n|course_of($0)),co|look(you,$0)),co|oh($0))
example_end

Sent: to make a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make(you,$1,$0)
example_end

Sent: I 'm not mocking you .
Sem: lambda $0_{ev}.not(cop|~be(part|mock-presp(pro:sub|i,pro:per|you,$0),$0),$0)
example_end

Sent: Celia said that ?
Sem: lambda $0_{ev}.Q(v|say-past(n:prop|celia,pro:dem|that,$0))
example_end

Sent: is he ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:sub|he($0,$1)
example_end

Sent: is that funny ?
Sem: lambda $0_{ev}.Q(adj|fun-dn(pro:dem|that,$0))
example_end

Sent: where did they go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:sub|they,$0),$1($0)),$0)
example_end

Sent: they went where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go-past(pro:sub|they,$0),$1($0))
example_end

Sent: where did the circus people go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,and_comp(n|circus($1),n|person-pl($1))),$0),$2($0)),$0)
example_end

Sent: that 's part of Daddy 's barbell set .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(n:prop|daddy's($1,and_comp(n|barbell($1),part|set-pastp($1)))))
example_end

Sent: that 's not a bat .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|bat(pro:dem|that,$0)),$0)
example_end

Sent: don 't scream .
Sem: lambda $0_{ev}.not(mod|do(v|scream(you,$0),$0),$0)
example_end

Sent: are you crowded ?
Sem: lambda $0_{ev}.Q(cop|be-pres(v|crowd-past(pro:per|you,$0),$0))
example_end

Sent: she 's seen cars parking there .
Sem: lambda $0_{ev}.aux|~be(part|see-pastp(pro:sub|she,lambda $1_{ev}.and(part|park-presp(lambda $2_{e}.n|car-pl($2),$1),adv|there($1)),$0),$0)
example_end

Sent: oh that one 's no good .
Sem: lambda $0_{ev}.and(not(adj|good(pro:dem|that($1,pro:indef|one($1)),$0),$0),co|oh($0))
example_end

Sent: we 'll be at thirty two Williams Street in Roxbury .
Sem: lambda $0_{ev}.mod|~will(prep|at(att(lambda $1_{e}.det:num|thirty(det:num|two(n:prop|street_williams($1))),prep|in(n:prop|roxbury)),pro:sub|we,$0),$0)
example_end

Sent: yes there is a little door but leads up to the roof .
Sem: lambda $0_{ev}.and(conj|but(and(and(n|lead-pl(you,$0),adv|up($0)),prep|to(det:art|the($1,n|roof($1)),$0)),and(cop|be-3s(det:art|a($2,and(adj|little($2),n|door($2))),$0),adv|there($0))),co|yes($0))
example_end

Sent: careful now .
Sem: lambda $0_{e}.adv|now(co|careful($0))
example_end

Sent: you got what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|get-past(pro:per|you,$1,$0)
example_end

Sent: you got clutched !
Sem: lambda $0_{ev}.part|clutch-pastp(pro:per|you,$0)
example_end

Sent: Adam did you try the cheese ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|try(pro:per|you,det:art|the($1,n|cheese($1)),$0),$0))
example_end

Sent: did you try the cheese ?
Sem: lambda $0_{ev}.Q(v|do-past(v|try(pro:per|you,det:art|the($1,n|cheese($1)),$0),$0))
example_end

Sent: did you taste the cheese ?
Sem: lambda $0_{ev}.Q(v|do-past(v|taste(pro:per|you,det:art|the($1,n|cheese($1)),$0),$0))
example_end

Sent: please don 't knock me down little cowboy .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|knock(you,pro:obj|me,$0),adv|down($0)),$0),$0),co|please($0))
example_end

Sent: because I had enough .
Sem: lambda $0_{ev}.and(v|have-past(pro:sub|i,$0),adv|enough($0))
example_end

Sent: who 's Happy the Bowl ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n:prop|bowl_happy_the,$0)
example_end

Sent: a rifle .
Sem: det:art|a($0,n|rifle($0))
example_end

Sent: that 's to help keep the cheese fresh .
Sem: lambda $0_{ev}.cop|~be(pro:dem|that,lambda $1_{ev}.v|help(pro:dem|that,$1),$0)
example_end

Sent: yes it 's like a shell .
Sem: lambda $0_{ev}.and(conj|like(det:art|a($1,n|shell($1)),pro:per|it,$0),co|yes($0))
example_end

Sent: careful you 'll drop all your food out .
Sem: lambda $0_{ev}.and(mod|~will(and(v|drop(pro:per|you,det:poss|your($1,qn|all($2,n|food($2),$1)),$0),adv|out($0)),$0),adj|care-dn($0))
example_end

Sent: like a duck ?
Sem: Q(prep|like(det:art|a($0,n|duck($0))))
example_end

Sent: does a duck drop his food out like that ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(and(n|drop(det:art|a($1,n|duck($1)),det:poss|his($2,n|food($2)),$0),adv|out($0)),prep|like(pro:dem|that,$0)),$0))
example_end

Sent: why does he do that ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(and(v|do(pro:sub|he,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: not today .
Sem: not(lambda $0_{e}.adv:tem|today($0))
example_end

Sent: alright well you drink some milk now .
Sem: lambda $0_{ev}.and(and(and(v|drink(pro:per|you,qn|some($1,n|milk($1)),$0),adv|now($0)),co|alright($0)),n|well($0))
example_end

Sent: who 's there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),adv|there($0))
example_end

Sent: knocking on the nail .
Sem: lambda $0_{ev}.and(part|knock-presp(you,$0),prep|on(det:art|the($1,n|nail($1)),$0))
example_end

Sent: do the one about pop .
Sem: lambda $0_{ev}.v|do(you,det:art|the($1,att(pro:indef|one($1),adv|about(lambda $2_{e}.n|pop($2)))),$0)
example_end

Sent: in the circus you can see a lion ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|see(pro:per|you,det:art|a($1,n|lion($1)),$0),prep|in(det:art|the($2,n|circus($2)),$0)),$0))
example_end

Sent: a lion .
Sem: det:art|a($0,n|lion($0))
example_end

Sent: and what will the lion say ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will(v|say(det:art|the($1,n|lion($1)),$2,$0),$0)
example_end

Sent: you 're a little lion .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and(n|lion(pro:per|you,$0),adj|little(pro:per|you,$0)))
example_end

Sent: careful don 't hit your head on the mantle .
Sem: lambda $0_{ev}.and(not(mod|do(and(part|hit-pastp(you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|mantle($2)),$0)),$0),$0),adj|care-dn($0))
example_end

Sent: oh do another one .
Sem: lambda $0_{ev}.and(v|do(you,qn|another($1,pro:indef|one($1)),$0),co|oh($0))
example_end

Sent: how can Shadow_Gay ride on a pony .
Sem: lambda $1_{e}.lambda $0_{ev}.n|can(and(and(and(n|ride(you,$0),$1($0)),n:prop|shadow_gay($0)),prep|on(det:art|a($2,n|pony($2)),$0)),$0)
example_end

Sent: isn 't Shadow_Gay a horse ?
Sem: lambda $0_{ev}.Q(not(det:art|a(n:prop|shadow_gay,n|horse(n:prop|shadow_gay,$0)),$0))
example_end

Sent: who is Shadow_Gay ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(n:prop|shadow_gay,$0)
example_end

Sent: is he a little boy ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,and(n|boy(pro:sub|he,$0),adj|little(pro:sub|he,$0))))
example_end

Sent: what kind of a dog ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(det:art|a($2,n|dog($2)))))
example_end

Sent: a dog riding on a pony .
Sem: lambda $0_{ev}.and(part|ride-presp(det:art|a($1,n|dog($1)),$0),prep|on(det:art|a($2,n|pony($2)),$0))
example_end

Sent: what kind of dog are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,att(n|kind(pro:per|you,$0),prep|of(lambda $2_{e}.n|dog($2))))
example_end

Sent: you 're going back under there .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:per|you,$0),adv|under(adv|back(adv|there($0)))),$0)
example_end

Sent: he put his bread in his house .
Sem: lambda $0_{ev}.and(v|put-zero(pro:sub|he,det:poss|his($1,n|bread($1)),$0),prep|in(det:poss|his($2,n|house($2)),$0))
example_end

Sent: some bread ?
Sem: lambda $0_{e}.Q(qn|some($1,n|bread($1),$0))
example_end

Sent: the doggie says that ?
Sem: lambda $0_{ev}.Q(v|say-3s(det:art|the($1,n|dog-dim($1)),pro:dem|that,$0))
example_end

Sent: he 's crawling around .
Sem: lambda $0_{ev}.aux|~be(and(part|crawl-presp(pro:sub|he,$0),adv|around($0)),$0)
example_end

Sent: I guess he just likes to crawl .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.and(v|like-3s(pro:sub|he,lambda $2_{ev}.n|crawl(pro:sub|he,$2),$1),adv|just($1)),$0)
example_end


Sent: a hat .
Sem:  det|a($0,n|hat($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: lying on the couch .
Sem:  lambda $0_{ev}.and(part|lie-PROG(pro|you,$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: I 'll hold it .
Sem:  lambda $0_{ev}.aux|will(v|hold(pro|I,pro|it,$0),$0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: you tie that right up .
Sem:  lambda $0_{ev}.and(v|tie(pro|you,pro:dem|that,$0),adv:loc|up($0))
example_end

Sent: tie that shoe .
Sem:  lambda $0_{ev}.v|tie(pro|you,det|that($1,n|shoe($1)),$0)
example_end

Sent: you tie it .
Sem:  lambda $0_{ev}.v|tie(pro|you,pro|it,$0)
example_end

Sent: tie it .
Sem:  lambda $0_{ev}.v|tie(pro|you,pro|it,$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: it 's not dooc .
Sem:  pro|it
example_end

Sent: you tie up my shoes for me .
Sem:  lambda $0_{ev}.and(v|tie(pro|you,pro:poss:det|my($1,n|shoe-PL($1)),$0),prep|for(pro|me,$0))
example_end

Sent: you tie up my shoes .
Sem:  lambda $0_{ev}.and(v|tie(pro|you,pro:poss:det|my($1,n|shoe-PL($1)),$0),adv:loc|up($0))
example_end

Sent: what is it .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'll put it in .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|in($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's dl el fl .
Sem:  pro:dem|that
example_end

Sent: who did then ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(v|do&PAST($0,$1),adv:tem|then($1))
example_end

Sent: what 's fl ?
Sem:  lambda $0_{e}.pro:wh|what
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: you want what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|want(pro|you,$0,$1)
example_end

Sent: sandwich ?
Sem:  lambda $0_{e}.n|sandwich($0)
example_end

Sent: you want a sandwich ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|sandwich($1)),$0),$0)
example_end

Sent: a cheese sandwich ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: where is Papa ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: we 'll have some tapioca too .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,qn|some($1,n|tapioca($1)),$0),$0)
example_end

Sent: sugar ?
Sem:  lambda $0_{e}.n|sugar($0)
example_end

Sent: Fraser has sugar in his coffee .
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Fraser,lambda $1_{e}.n|sugar($1),$0),prep|in(pro:poss:det|his($2,n|coffee($2)),$0))
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: almost done .
Sem:  lambda $0_{ev}.and(part|do&PERF(pro|you,$0),adv|almost($0))
example_end

Sent: almost done .
Sem:  lambda $0_{ev}.and(part|do&PERF(pro|you,$0),adv|almost($0))
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: your finger 's jumping ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|jump-PROG(pro:poss:det|your($1,n|finger($1)),$0),$0),$0)
example_end

Sent: you must blow on it .
Sem:  lambda $0_{ev}.and(aux|must(v|blow(pro|you,$0),$0),prep|on(pro|it,$0))
example_end

Sent: you blow on it .
Sem:  lambda $0_{ev}.and(v|blow(pro|you,$0),prep|on(pro|it,$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: I 'll put it right here .
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|here($0))
example_end

Sent: peanutbutter .
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: squirrels ?
Sem:  lambda $0_{e}.n|squirrel-PL($0)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: did you bite the paddle ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|bite(pro|you,det|the($1,n|paddle($1)),$0),$0),$0)
example_end

Sent: you did bite it .
Sem:  lambda $0_{ev}.aux|do&PAST(v|bite(pro|you,pro|it,$0),$0)
example_end

Sent: you bit a hole in it .
Sem:  lambda $0_{ev}.and(v|bite&PAST(pro|you,det|a($1,n|hole($1)),$0),prep|in(pro|it,$0))
example_end

Sent: I 'm sorry .
Sem:  adj|sorry(pro|I)
example_end

Sent: it melted .
Sem:  lambda $0_{ev}.v|melt-PAST(pro|it,$0)
example_end

Sent: look right there .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|there($0))
example_end

Sent: not the cheese sandwich .
Sem:  lambda $0_{ev}.not(det|the($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: we eat the cheese sandwich .
Sem:  lambda $0_{ev}.v|eat(pro|we,det|the($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: you hit it ?
Sem:  lambda $0_{ev}.Q(v|hit&ZERO(pro|you,pro|it,$0),$0)
example_end

Sent: that is .
Sem:  pro:dem|that
example_end

Sent: he came to see you .
Sem:  lambda $0_{ev}.and(v|come&PAST(pro|he,$0),v|see(pro|he,pro|you,$0))
example_end

Sent: Papa comes everyday .
Sem:  lambda $0_{ev}.and(v|come-3S(n:prop|Papa,$0),adv:tem|everyday($0))
example_end

Sent: who else ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: eat your tapioca .
Sem:  lambda $0_{ev}.v|eat(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: and you don 't spit it out .
Sem:  lambda $0_{ev}.not(and(aux|do(v|spit(pro|you,pro|it,$0),$0),adv:loc|out($0)),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's hot ?
Sem:  lambda $0_{ev}.Q(adj|hot(pro|it),$0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it has a hat on ?
Sem:  lambda $0_{ev}.Q(and(v|have&3S(pro|it,det|a($1,n|hat($1)),$0),adv|on($0)),$0)
example_end

Sent: Mom bit the hole in it .
Sem:  lambda $0_{ev}.and(v|bite&PAST(n:prop|Mom,det|the($1,n|hole($1)),$0),prep|in(pro|it,$0))
example_end

Sent: don 't touch them again .
Sem:  lambda $0_{ev}.not(and(aux|do(v|touch(pro|you,pro|them,$0),$0),adv|again($0)),$0)
example_end

Sent: clean napkins .
Sem:  lambda $0_{e}.and(adj|clean($0),n|napkin-PL($0))
example_end

Sent: you fell down .
Sem:  lambda $0_{ev}.and(v|fall&PAST(pro|you,$0),adv:loc|down($0))
example_end

Sent: what did you do yesterday ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:tem|yesterday($1))
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: she can 't sit up .
Sem:  lambda $0_{ev}.not(and(aux|can(v|sit(pro|she,$0),$0),adv:loc|up($0)),$0)
example_end

Sent: you managed very well .
Sem:  lambda $0_{ev}.and(v|manage-PAST(pro|you,$0),adv|well($0))
example_end

Sent: Fraser 'll read it .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(n:prop|Fraser,pro|it,$0),$0)
example_end

Sent: I have teeth .
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.n|tooth&PL($1),$0)
example_end

Sent: where 's your teeth ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|tooth&PL($1)),$0)
example_end

Sent: I have big teeth .
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0)
example_end

Sent: Mom has big teeth .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Mom,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0)
example_end

Sent: Wednesday .
Sem:  n:prop|Wednesday
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: are they ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: I 'll get your pencil out .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro:poss:det|your($1,n|pencil($1)),$0),$0),adv:loc|out($0))
example_end

Sent: it 's going away .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|go-PROG(pro|it,$0),$0),adv|away($0))
example_end

Sent: then she 'll have a nap .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|she,det|a($1,n|nap($1)),$0),$0),adv:tem|then($0))
example_end

Sent: come here .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: is this your pencil ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,pro:poss:det|your($1,n|pencil($1)),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're playing with Fraser ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PRES(part|play-PROG(pro|you,$0),$0),prep|with(n:prop|Fraser,$0)),$0)
example_end

Sent: will I get your bead ?
Sem:  lambda $0_{ev}.Q(aux|will(v|get(pro|I,pro:poss:det|your($1,n|bead($1)),$0),$0),$0)
example_end

Sent: that 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:dem|that,$0,$1)
example_end

Sent: what do you do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|do(pro|you,$0,$1),$1)
example_end

Sent: you 're making what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're making a bead .
Sem:  lambda $0_{ev}.aux|be&PRES(part|make-PROG(pro|you,det|a($1,n|bead($1)),$0),$0)
example_end

Sent: are they your beads ?
Sem:  lambda $0_{ev}.Q(eq(pro|they,pro:poss:det|your($1,n|bead-PL($1)),$0),$0)
example_end

Sent: are they your bead ?
Sem:  lambda $0_{ev}.Q(eq(pro|they,pro:poss:det|your($1,n|bead($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  adj|right(pro:dem|that)
example_end

Sent: it 'll be easier .
Sem:  adj|easy-CP(pro|it)
example_end

Sent: what 's Papa going to use ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$1),v|use(n:prop|Papa,$0,$1)),$1)
example_end

Sent: is this a beads ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|this,det|a($1,n|bead-PL($1)),$0),$0)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: who ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: my cookbook ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|my($1,n|cookbook($1)),$0)
example_end

Sent: Mom got a cookbook .
Sem:  lambda $0_{ev}.v|get&PAST(n:prop|Mom,det|a($1,n|cookbook($1)),$0)
example_end

Sent: call Granny .
Sem:  lambda $0_{ev}.v|call(pro|you,n:prop|Granny,$0)
example_end

Sent: I can 't see you .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|I,pro|you,$0),$0),$0)
example_end

Sent: I can 't see you .
Sem:  lambda $0_{ev}.not(aux|can(v|see(pro|I,pro|you,$0),$0),$0)
example_end

Sent: peek .
Sem:  lambda $0_{ev}.v|peek(pro|you,$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: can you see me ?
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,pro|me,$0),$0),$0)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: what is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: tell him to come in .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|him,$0),adv:loc|in($0))
example_end

Sent: is it Cromer ?
Sem:  lambda $0_{ev}.Q(eq(pro|it,n:prop|Cromer,$0),$0)
example_end

Sent: tell him to come in .
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|him,$0),adv:loc|in($0))
example_end

Sent: he 's standing out in the cold .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|stand-PROG(pro|he,$0),$0),prep|in(det|the($1,n|cold($1)),$0))
example_end

Sent: it 's not .
Sem:  pro|it
example_end

Sent: that wasn 't Rick .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Rick,$0),$0)
example_end

Sent: it was the gas man  the gas man .
Sem:  lambda $0_{ev}.eq(pro|it,det|the($1,and(n|gas($1),n|man($1))),$0)
example_end

Sent: want some lunch ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|some($1,n|lunch($1)),$0),$0)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: did he bring the dolls ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|bring(pro|he,det|the($1,n|doll-PL($1)),$0),$0),$0)
example_end

Sent: he 'll open the bag .
Sem:  lambda $0_{ev}.aux|will(v|open(pro|he,det|the($1,n|bag($1)),$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who is it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: blow .
Sem:  lambda $0_{e}.n|blow($0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: bringing them both over here .
Sem:  lambda $0_{ev}.and(part|bring-PROG(pro|you,pro|them,$0),adv:loc|here($0))
example_end

Sent: that 's a baby doll .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|baby($1),n|doll($1))),$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: Eve .
Sem:  n:prop|Eve
example_end

Sent: what do I have ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|have(pro|I,$0,$1),$1)
example_end

Sent: have what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have(pro|you,$0,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: blow .
Sem:  lambda $0_{e}.n|blow($0)
example_end

Sent: clear it out .
Sem:  lambda $0_{ev}.and(v|clear(pro|you,pro|it,$0),adv:loc|out($0))
example_end

Sent: boy .
Sem:  lambda $0_{e}.n|boy($0)
example_end

Sent: they can stay .
Sem:  lambda $0_{ev}.aux|can(v|stay(pro|they,$0),$0)
example_end

Sent: are you ready ?
Sem:  lambda $0_{ev}.Q(adj|ready(pro|you),$0)
example_end

Sent: can I help you ?
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: look at the box .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(det|the($1,n|box($1)),$0))
example_end

Sent: you want it up here ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|it,$0),adv:loc|up($0)),$0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: look .
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: and he chirps .
Sem:  lambda $0_{ev}.v|chirp-3S(pro|he,$0)
example_end

Sent: that 's a pen .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|pen($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what should I do ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|should(v|do(pro|I,$0,$1),$1)
example_end

Sent: that 's a ring .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|ring($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: a watch .
Sem:  det|a($0,n|watch($0))
example_end

Sent: that 's a good idea .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|idea($1))),$0)
example_end


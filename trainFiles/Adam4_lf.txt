Sent: alright you read book .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,lambda $1_{e}.n|book($1),$0),co|alright($0))
example_end

Sent: ups_a_daisy you dropped your shoe .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,det:poss|your($1,n|shoe($1)),$0),co|ups_a_daisy($0))
example_end

Sent: he ate his dinner on this table last night and he dropped some beans .
Sem: lambda $0_{ev}.coord|and(v|drop-past(pro:sub|he,qn|some($1,n|bean-pl($1)),$0),and(and(v|eat-past(pro:sub|he,det:poss|his($2,n|dinner($2)),$0),prep|on(pro:dem|this($3,n|table($3)),$0)),and(adv|last($0),n|night($0))))
example_end

Sent: Papa bear .
Sem: lambda $0_{e}.and_comp(n:prop|papa($0),n|bear($0))
example_end

Sent: did you see bunny ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,lambda $1_{e}.n|bunny+rabbit($1),$0),$0))
example_end

Sent: the deer looks like Bambi .
Sem: lambda $0_{ev}.cop|look-3s(det:art|the($1,n|deer($1)),n:prop|bambi,$0)
example_end

Sent: bunny running ?
Sem: lambda $0_{ev}.Q(part|run-presp(lambda $1_{e}.n|bunny+rabbit($1),$0))
example_end

Sent: if he 's not careful yes they will stick him .
Sem: lambda $0_{ev}.and(mod|will(conj|if(not(co|careful(pro:sub|he,$0),$0),v|stick(pro:sub|they,pro:obj|him,$0)),$0),co|yes($0))
example_end

Sent: Mr Bear is dancing .
Sem: lambda $0_{ev}.aux|be-3s(part|dance-presp(n:prop|bear_mr,$0),$0)
example_end

Sent: he 's dancing .
Sem: lambda $0_{ev}.aux|~be(part|dance-presp(pro:sub|he,$0),$0)
example_end

Sent: I just read them .
Sem: lambda $0_{ev}.and(v|read-zero(pro:sub|i,pro:obj|them,$0),adv|just($0))
example_end

Sent: now you take them over to Ursula .
Sem: lambda $0_{ev}.and(and(and(v|take(pro:per|you,pro:obj|them,$0),adv|now($0)),adv|over($0)),prep|to(n:prop|ursula,$0))
example_end

Sent: they 're Ursula 's books .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:sub|they,n|book-pl(pro:sub|they,$0))
example_end

Sent: no I just read them .
Sem: lambda $0_{ev}.and(and(v|read-zero(pro:sub|i,pro:obj|them,$0),adv|just($0)),co|no($0))
example_end

Sent: you dropped a book .
Sem: lambda $0_{ev}.v|drop-past(pro:per|you,det:art|a($1,n|book($1)),$0)
example_end

Sent: poor Ursula ?
Sem: lambda $0_{e}.Q(att(n:prop|ursula,lambda $1_{e}.adj|poor($1),$0))
example_end

Sent: she needs her books .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|she,det:poss|her($1,n|book-pl($1)),$0)
example_end

Sent: poor Cromer ?
Sem: lambda $0_{e}.Q(att(n:prop|cromer,lambda $1_{e}.adj|poor($1),$0))
example_end

Sent: what 's yours ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:poss|yours($0,$1)
example_end

Sent: no that 's a lion .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|lion(pro:dem|that,$0)),co|no($0))
example_end

Sent: hungry lion .
Sem: lambda $0_{e}.and(adj|hungry($0),n|lion($0))
example_end

Sent: you go tell Ursula then .
Sem: lambda $0_{ev}.v|go(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,n:prop|ursula,$1),adv:tem|then($1)),$0)
example_end

Sent: I can 't see it .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: I thought you were going to tell her .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|tell(pro:per|you,pro:obj|her,$2),$1),$1),$0)
example_end

Sent: you have_to take it over there where she is .
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod:aux|have_to(and(v|take(pro:per|you,pro:per|it,$0),adv|over(adv|there($0))),$0),and(cop|be-3s(pro:sub|she,$0),$1($0)))
example_end

Sent: oh you 're going walking ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{e}.part|walk-presp($1),$0),$0),co|oh($0)))
example_end

Sent: did you step on the book ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|step(pro:per|you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0))
example_end

Sent: that 's alright then if you didn 't do it on purpose .
Sem: lambda $0_{ev}.conj|if(not(mod|do(and(v|do(pro:per|you,pro:per|it,$0),n|purpose($0)),$0),$0),adv:tem|then(adj|alright(pro:dem|that,$0)))
example_end

Sent: that 's red .
Sem: lambda $0_{ev}.adj|red(pro:dem|that,$0)
example_end

Sent: do you see a deer ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|a($1,n|deer($1)),$0),$0))
example_end

Sent: he 's hungry ?
Sem: lambda $0_{ev}.Q(adj|hungry(pro:sub|he,$0))
example_end

Sent: you turn it around ?
Sem: lambda $0_{ev}.Q(and(v|turn(pro:per|you,pro:per|it,$0),adv|around($0)))
example_end

Sent: I don 't think that really goes there do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(and(v|go-3s(pro:rel|that,$1),adv|real-dadj($1)),adv|there($1)),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: one pretty ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,lambda $1_{e}.adv|pretty($1),$0))
example_end

Sent: off Perro ?
Sem: Q(prep|off(n:prop|perro))
example_end

Sent: yes it 's alright .
Sem: lambda $0_{ev}.and(adj|alright(pro:per|it,$0),co|yes($0))
example_end

Sent: knock over ?
Sem: lambda $0_{ev}.Q(and(n|knock(you,$0),adv|over($0)))
example_end

Sent: go over ?
Sem: lambda $0_{ev}.Q(and(v|go(you,$0),adv|over($0)))
example_end

Sent: do you think that belongs there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|belong-3s(pro:rel|that,$1),adv|there($1)),$0),$0))
example_end

Sent: you 're turning it over .
Sem: lambda $0_{ev}.aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|over($0)),$0)
example_end

Sent: you 're turning it around .
Sem: lambda $0_{ev}.aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|around($0)),$0)
example_end

Sent: turning it around .
Sem: lambda $0_{ev}.and(part|turn-presp(you,pro:per|it,$0),adv|around($0))
example_end

Sent: that 's your brush .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|brush(pro:dem|that,$0))
example_end

Sent: that 's not a hammer .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|hammer(pro:dem|that,$0)),$0)
example_end

Sent: oh it looks like a hammer ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,det:art|a($1,n|hammer($1)),$0),co|oh($0)))
example_end

Sent: that 's not a doggie .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|dog-dim(pro:dem|that,$0)),$0)
example_end

Sent: no that 's a deer .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|deer(pro:dem|that,$0)),co|no($0))
example_end

Sent: oh you 're a big boy ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|big(pro:per|you,$0))),co|oh($0)))
example_end

Sent: why are you turning that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|turn-presp(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: well yes it 's heavy .
Sem: lambda $0_{ev}.and(and(adj|heavy(pro:per|it,$0),co|well($0)),co|yes($0))
example_end

Sent: what are you brushing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|brush-presp(pro:per|you,$1,$0),$0)
example_end

Sent: what does this say today ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|say(pro:dem|this,$1,$0),adv:tem|today($0)),$0)
example_end

Sent: oh you hurt your head on the table .
Sem: lambda $0_{ev}.and(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|table($2)),$0)),co|oh($0))
example_end

Sent: what happened Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|happen-past($1,$0)
example_end

Sent: the chair didn 't hit your head did it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|hit-zero(det:art|the($1,n|chair($1)),det:poss|your($2,n|head($2)),$0),$0),$0),mod|do-past(pro:per|it,$0)))
example_end

Sent: no the head hit the table .
Sem: lambda $0_{ev}.and(v|hit-zero(det:art|the($1,n|head($1)),det:art|the($2,n|table($2)),$0),qn|no($0))
example_end

Sent: did you step on the books ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|step(pro:per|you,$0),prep|on(det:art|the($1,n|book-pl($1)),$0)),$0))
example_end

Sent: Perro 's going to read the book .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(n:prop|perro,lambda $1_{ev}.v|read-zero(n:prop|perro,det:art|the($2,n|book($2)),$1),$0),$0)
example_end

Sent: oh Adam will read the book ?
Sem: lambda $0_{ev}.Q(and(mod|will(v|read-zero(n:prop|adam,det:art|the($1,n|book($1)),$0),$0),co|oh($0)))
example_end

Sent: you 're excused .
Sem: lambda $0_{ev}.aux|~be(part|excuse-pastp(pro:per|you,$0),$0)
example_end

Sent: turn what over ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|turn(you,$1,$0),adv|over($0))
example_end

Sent: I thought you were going to read to Perro .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.and(v|read-zero(pro:per|you,$2),prep|to(n:prop|perro,$2)),$1),$1),$0)
example_end

Sent: good morning to you .
Sem: lambda $0_{e}.att(and(adj|good($0),n|morning($0)),prep|to(pro:per|you))
example_end

Sent: oh good morning .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|morning($0)),co|oh($0))
example_end

Sent: oh laughing .
Sem: lambda $0_{ev}.and(part|laugh-presp(you,$0),co|oh($0))
example_end

Sent: what did Donald_Duck safety book say ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(v|say(lambda $1_{e}.and_comp(and_comp(n:prop|donald_duck($1),n|safety($1)),n|book($1)),$2,$0),$0)
example_end

Sent: you don 't play with plugs do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|play(pro:per|you,lambda $1_{e}.n|plug-pl($1),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: you don 't play with cords either .
Sem: lambda $0_{ev}.not(mod|do(and(v|play(pro:per|you,lambda $1_{e}.n|cord-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: put it down .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|down($0))
example_end

Sent: no it doesn 't go there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:per|it,$0),adv|there($0)),$0),$0),co|no($0))
example_end

Sent: you don 't play with matches either do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|play(pro:per|you,lambda $1_{e}.n|match-pl($1),$0),coord|either($0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: yeah you dropped it .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,pro:per|it,$0),co|yeah($0))
example_end

Sent: well what happened to five six seven ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|five($2),$0)),co|well($0))
example_end

Sent: that 's no broom .
Sem: lambda $0_{ev}.not(n|broom(pro:dem|that,$0),$0)
example_end

Sent: that 's brush .
Sem: lambda $0_{ev}.n|brush(pro:dem|that,$0)
example_end

Sent: oh it looks like a broom does it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(pro:per|it,det:art|a($1,n|broom($1)),$0),mod|do-3s(pro:per|it,$0)),co|oh($0)))
example_end

Sent: I can 't put it together .
Sem: lambda $0_{ev}.not(mod|can(and(v|put-zero(pro:sub|i,pro:per|it,$0),adv|together($0)),$0),$0)
example_end

Sent: you have_to go get the car .
Sem: lambda $0_{ev}.mod:aux|have_to(v|get(pro:per|you,det:art|the($1,n|car($1)),$0),$0)
example_end

Sent: the car got tickled ?
Sem: lambda $0_{ev}.Q(aux|get-past(part|tickle-pastp(det:art|the($1,n|car($1)),$0),$0))
example_end

Sent: does it go there ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|go(pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: car dropped ?
Sem: lambda $0_{ev}.Q(v|drop-past(lambda $1_{e}.n|car($1),$0))
example_end

Sent: you missed that ?
Sem: lambda $0_{ev}.Q(v|miss-past(pro:per|you,pro:dem|that,$0))
example_end

Sent: what 's he going to sit against if you take all the pillows off .
Sem: lambda $3_{e}.lambda $0_{ev}.conj|if(and(v|take(pro:per|you,qn|all(det:art|the($1,n|pillow-pl($1))),$0),adv|off($0)),aux|~be(part|go-presp(pro:sub|he,lambda $2_{ev}.and(v|sit($3,$2),adv|against($2)),$0),$0))
example_end

Sent: how can he sit comfortably if you take all the pillows off ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|if(and(v|take(pro:per|you,qn|all(det:art|the($1,n|pillow-pl($1))),$0),adv|off($0)),mod|can(and(and(v|sit(pro:sub|he,$0),$2($0)),adv|comfort-dadj($0)),$0))
example_end

Sent: you 're going to give him one .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|give(pro:per|you,pro:indef|one,pro:obj|him,$1),$0),$0)
example_end

Sent: who uses a pillow on the floor for exercising ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|use-3s($1,det:art|a($2,n|pillow($2)),$0),prep|on(det:art|the($3,n|floor($3)),$0)),prep|for(lambda $4_{e}.n:gerund|exercise-presp($4),$0))
example_end

Sent: all finished with your exercises ?
Sem: lambda $0_{ev}.Q(and(and(v|finish-past(you,$0),post|all($0)),prep|with(det:poss|your($1,n|exercise-pl($1)),$0)))
example_end

Sent: why don 't you put the pillows up ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,det:art|the($1,n|pillow-pl($1)),$0),$2($0)),adv|up($0)),$0),$0)
example_end

Sent: would you like to have this ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,pro:dem|this,$1),$0),$0))
example_end

Sent: a big lion .
Sem: det:art|a($0,and(adj|big($0),n|lion($0)))
example_end

Sent: that 's a baby giraffe .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|giraffe(pro:dem|that,$0),n|baby(pro:dem|that,$0)))
example_end

Sent: just one wheel left .
Sem: lambda $0_{ev}.and(v|leave-past(lambda $1_{e}.det:num|one(n|wheel($1)),$0),adv|just($0))
example_end

Sent: saggy baggy .
Sem: lambda $0_{e}.adj|sag-dv($0)
example_end

Sent: what 's the elephant doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|elephant($1)),$2,$0),$0)
example_end

Sent: that 's a porcupine .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|porcupine(pro:dem|that,$0))
example_end

Sent: that 's a hippopotamus .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|hippopotamus(pro:dem|that,$0))
example_end

Sent: and this ?
Sem: lambda $0_{e}.Q(pro:dem|this($0))
example_end

Sent: this is a panda .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|panda(pro:dem|this,$0))
example_end

Sent: no that 's not a giraffe .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|giraffe(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: a polar bear .
Sem: det:art|a($0,and_comp(adj|polar($0),n|bear($0)))
example_end

Sent: he 's sitting on top of ice .
Sem: lambda $0_{ev}.aux|~be(and(part|sit-presp(pro:sub|he,$0),prep|on(lambda $1_{e}.att(n|top($1),prep|of(lambda $2_{e}.n|ice($2))),$0)),$0)
example_end

Sent: this one 's the leopard .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this($1,pro:indef|one($1)),n|leopard(pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: do you see a seal ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|a($1,n|seal($1)),$0),$0))
example_end

Sent: is that a seal ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|seal(pro:rel|that,$0)))
example_end

Sent: sitting on the broom ?
Sem: lambda $0_{ev}.Q(and(part|sit-presp(you,$0),prep|on(det:art|the($1,n|broom($1)),$0)))
example_end

Sent: would you like one ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,pro:indef|one,$0),$0))
example_end

Sent: do you want a piece of this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,att(n|piece($1),prep|of(pro:dem|this))),$0),$0))
example_end

Sent: what are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|write-presp(pro:per|you,$1,$0),$0)
example_end

Sent: oh you 're writing Cromer ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|write-presp(pro:per|you,$0),n:prop|cromer($0)),$0),co|oh($0)))
example_end

Sent: you dropped your pencil .
Sem: lambda $0_{ev}.v|drop-past(pro:per|you,det:poss|your($1,n|pencil($1)),$0)
example_end

Sent: you have some paper .
Sem: lambda $0_{ev}.v|have(pro:per|you,qn|some($1,n|paper($1)),$0)
example_end

Sent: there 's one on the table .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),prep|on(det:art|the($1,n|table($1)),$0))
example_end

Sent: no give her her pencil back Adam because you 've been breaking pencils lately .
Sem: lambda $0_{ev}.and(conj|because(aux|be-pastp(aux|~have(and(part|break-presp(pro:per|you,lambda $1_{e}.n|pencil-pl($1),$0),adv|late-dadj($0)),$0),$0),and(v|give(you,det:poss|her($2,n|pencil($2)),pro:obj|her,$0),adj|back($0))),co|no($0))
example_end

Sent: that 's a flute .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|flute(pro:dem|that,$0))
example_end

Sent: what kind of bird is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|bird($2))))
example_end

Sent: here 's my mail from this morning .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|my($1,n|mail($1)),$0),pro:exist|here($0)),prep|from(pro:dem|this($2,n|morning($2)),$0))
example_end

Sent: letters the mailman brought .
Sem: lambda $0_{ev}.v|bring-past(det:art|the($1,n|mail+man($1)),lambda $2_{e}.n|letter-pl($2),$0)
example_end

Sent: may I show you ?
Sem: lambda $0_{ev}.Q(mod|may(v|show(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: you show me .
Sem: lambda $0_{ev}.v|show(pro:per|you,pro:obj|me,$0)
example_end

Sent: get up there and sit down .
Sem: lambda $0_{ev}.coord|and(and(v|sit(you,$0),adv|down($0)),and(v|get(you,$0),adv|up(adv|there($0))))
example_end

Sent: can you see the snow ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,det:art|the($1,n|snow($1)),$0),$0))
example_end

Sent: oh you want to watch it .
Sem: lambda $0_{ev}.and(v|want(pro:per|you,lambda $1_{ev}.v|watch(pro:per|you,pro:per|it,$1),$0),co|oh($0))
example_end

Sent: I 'm sorry .
Sem: lambda $0_{ev}.adj|sorry(pro:sub|i,$0)
example_end

Sent: I don 't think that 's yellow .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.adj|yellow(pro:dem|that,$1),$0),$0),$0)
example_end

Sent: if that 's yellow what color is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(adj|yellow(pro:dem|that,$0),$1(pro:dem|this,n|color(pro:dem|this,$0)))
example_end

Sent: don 't do that .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: you 'll bend it .
Sem: lambda $0_{ev}.mod|~will(v|bend(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: because it will disrupt the machine .
Sem: lambda $0_{ev}.mod|will(v|disrupt(pro:per|it,det:art|the($1,n|machine($1)),$0),$0)
example_end

Sent: whose pencils are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.pro:sub|they($1($2,n|pencil-pl($2)),$0)
example_end

Sent: one door !
Sem: lambda $0_{e}.det:num|one(n|door($0))
example_end

Sent: will you read it to me ?
Sem: lambda $0_{ev}.Q(mod|will(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),$0))
example_end

Sent: can you find the seal ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,det:art|the($1,n|seal($1)),$0),$0))
example_end

Sent: looks like Chatter .
Sem: lambda $0_{ev}.cop|look-3s(you,n:prop|chatter,$0)
example_end

Sent: oh that 's all .
Sem: lambda $0_{ev}.and(pro:indef|all(pro:dem|that,$0),co|oh($0))
example_end

Sent: it 's a camera .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|camera(pro:per|it,$0))
example_end

Sent: is that a hammer Adam ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|hammer(pro:rel|that,$0)))
example_end

Sent: here a hammer ?
Sem: lambda $0_{e}.Q(adv|here(det:art|a($1,n|hammer($1)),$0))
example_end

Sent: oh that 's not a hammer .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|hammer(pro:dem|that,$0)),$0),co|oh($0))
example_end

Sent: what 's that on it ?
Sem: lambda $0_{e}.lambda $1_{ev}.att(pro:dem|that($0,$1),prep|on(pro:per|it))
example_end

Sent: oh Chicken_Little .
Sem: lambda $0_{ev}.and(n:prop|chicken_little($0),co|oh($0))
example_end

Sent: where did you see Chicken_Little ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,n:prop|chicken_little,$0),$1($0)),$0)
example_end

Sent: you do ?
Sem: lambda $0_{ev}.Q(v|do(pro:per|you,$0))
example_end

Sent: well what is it that you love ?
Sem: lambda $0_{ev}.and(v|love(pro:per|you,$0),co|well($0))
example_end

Sent: what does a windmill do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|a($1,n|windmill($1)),$2,$0),$0)
example_end

Sent: yes you have_to blow your nose don 't you .
Sem: lambda $0_{ev}.and(and(mod:aux|have_to(v|blow(pro:per|you,det:poss|your($1,n|nose($1)),$0),$0),not(mod|do(pro:per|you,$0),$0)),co|yes($0))
example_end

Sent: silly boy .
Sem: lambda $0_{e}.and(co|silly($0),n|boy($0))
example_end

Sent: that 's a nice flute .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|flute(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))
example_end

Sent: no that 's a flute .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|flute(pro:dem|that,$0)),co|no($0))
example_end

Sent: it 's just from the rug honey .
Sem: lambda $0_{ev}.adj|just(prep|from(det:art|the($1,n|rug($1)),pro:per|it,$0))
example_end

Sent: oh turning like a windmill ?
Sem: lambda $0_{ev}.Q(and(and(part|turn-presp(you,$0),prep|like(det:art|a($1,n|windmill($1)),$0)),co|oh($0)))
example_end

Sent: what else has wings like that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|have-3s($1,lambda $2_{e}.n|wing-pl($2),$0),prep|like(pro:dem|that,$0))
example_end

Sent: oh here it is .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:per|it,$0),adv|here($0)),co|oh($0))
example_end

Sent: part of your car ?
Sem: lambda $0_{e}.Q(att(n|part($0),prep|of(det:poss|your($1,n|car($1)))))
example_end

Sent: poor Adam .
Sem: att(n:prop|adam,lambda $0_{e}.adj|poor($0))
example_end

Sent: did you hurt yourself ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),$0))
example_end

Sent: screw happened !
Sem: lambda $0_{ev}.v|happen-past(lambda $1_{e}.n|screw($1),$0)
example_end

Sent: you didn 't even have a screw .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|screw($1)),$0),v|even($0)),$0),$0)
example_end

Sent: you didn 't have a screw .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,det:art|a($1,n|screw($1)),$0),$0),$0)
example_end

Sent: are you playing peekaboo with me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|play-presp(pro:per|you,lambda $1_{e}.v|peekaboo($1),$0),prep|with(pro:obj|me,$0)),$0))
example_end

Sent: you peekaboo back out in the kitchen with your juice .
Sem: lambda $0_{ev}.and(and(and(and(v|peekaboo(pro:per|you,$0),adv|back($0)),adv|out($0)),prep|in(det:art|the($1,n|kitchen($1)),$0)),prep|with(det:poss|your($2,n|juice($2)),$0))
example_end

Sent: is that juice ?
Sem: lambda $0_{ev}.Q(n|juice(pro:dem|that,$0))
example_end

Sent: get broom .
Sem: lambda $0_{ev}.v|get(you,lambda $1_{e}.n|broom($1),$0)
example_end

Sent: what 's all_gone ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(co|all_gone($1,$0),$0)
example_end

Sent: oh you 're going to draw a picture .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|draw(pro:per|you,det:art|a($2,n|picture($2)),$1),$0),$0),co|oh($0))
example_end

Sent: well he doesn 't want that paper .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|he,pro:dem|that($1,n|paper($1)),$0),$0),$0),co|well($0))
example_end

Sent: he has some nice paper .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|he,qn|some($1,and(adj|nice($1),n|paper($1))),$0)
example_end

Sent: what do you want me to write ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,lambda $1_{ev}.v|write(pro:obj|me,$2,$1),$0),$0)
example_end

Sent: does that fit there Adam ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:dem|that,$0),adv|there($0)),$0))
example_end

Sent: does that one fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: does it fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(pro:per|it,$0),$0))
example_end

Sent: does it fit there ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: does it fit that way ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:per|it,$0),pro:dem|that($1,n|way($1),$0)),$0))
example_end

Sent: does boy ?
Sem: lambda $0_{ev}.Q(mod|do-3s(lambda $1_{e}.n|boy($1),$0))
example_end

Sent: no Adam I 'll have_to take the flute away if you do that .
Sem: lambda $0_{ev}.and(conj|if(v|do(pro:per|you,pro:dem|that,$0),mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|flute($1)),$0),adv|away($0)),$0),$0)),co|no($0))
example_end

Sent: it 's not hollow all the way down .
Sem: lambda $0_{e}.lambda $1_{ev}.v|hollow($0,$1)
example_end

Sent: look in that way and it 's hollow .
Sem: lambda $0_{ev}.coord|and(adj|hollow(pro:per|it,$0),and(cop|look(you,$0),prep|in(pro:dem|that($1,n|way($1)),$0)))
example_end

Sent: how many ends does it have ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(v|have(pro:per|it,lambda $1_{e}.and($2(qn|many($1)),n|end-pl($1)),$0),$0)
example_end

Sent: a little hole .
Sem: det:art|a($0,and(adj|little($0),n|hole($0)))
example_end

Sent: that doesn 't belong there either .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|belong(pro:dem|that,$0),adv|there($0)),adv|either($0)),$0),$0)
example_end

Sent: you spilled your juice .
Sem: lambda $0_{ev}.v|spill-past(pro:per|you,det:poss|your($1,n|juice($1)),$0)
example_end

Sent: shall we open it ?
Sem: lambda $0_{ev}.Q(mod|shall(v|open(pro:sub|we,pro:per|it,$0),$0))
example_end

Sent: yes paper 's in there .
Sem: lambda $0_{ev}.and(and(poss|~s(lambda $1_{e}.n|paper($1),$0),adv|in(adv|there($0))),co|yes($0))
example_end

Sent: did you find a pencil ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: we 'll use that one tomorrow .
Sem: lambda $0_{ev}.mod|~will(and(v|use(pro:sub|we,pro:dem|that($1,pro:indef|one($1)),$0),adv:tem|tomorrow($0)),$0)
example_end

Sent: shall we use it tomorrow ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|use(pro:sub|we,pro:per|it,$0),adv:tem|tomorrow($0)),$0))
example_end

Sent: are you putting it back ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|put-presp(pro:per|you,pro:per|it,$0),adv|back($0)),$0))
example_end

Sent: does the box of tape fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(det:art|the($1,att(n|box($1),prep|of(lambda $2_{e}.n|tape($2)))),$0),$0))
example_end

Sent: there are so many papers .
Sem: lambda $0_{ev}.cop|be-pres(lambda $1_{e}.and(adv|so(qn|many($1)),n|paper-pl($1)),$0)
example_end

Sent: shall we do a game ?
Sem: lambda $0_{ev}.Q(mod|shall(v|do(pro:sub|we,det:art|a($1,n|game($1)),$0),$0))
example_end

Sent: can you give the baby in the bed ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|give(pro:per|you,det:art|the($1,n|baby($1)),$0),prep|in(det:art|the($2,n|bed($2)),$0)),$0))
example_end

Sent: can you give me the boy in the bath ?
Sem: lambda $0_{ev}.Q(mod|can(v|give(pro:per|you,det:art|the($1,att(n|boy($1),prep|in(det:art|the($2,n|bath+tub($2))))),pro:obj|me,$0),$0))
example_end

Sent: here he is in the bed .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:sub|he,$0),adv|here($0)),prep|in(det:art|the($1,n|bed($1)),$0))
example_end

Sent: is the boy in the bed ?
Sem: lambda $0_{ev}.Q(prep|in(det:art|the($1,n|bed($1)),det:art|the($2,n|boy($2)),$0))
example_end

Sent: that 's a bath .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|bath+tub(pro:dem|that,$0))
example_end

Sent: that 's a boy in the bath .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|boy(pro:dem|that,$0),prep|in(det:art|the($1,n|bath+tub($1)))))
example_end

Sent: can you say that boy in the bath ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,pro:rel|that($1,att(n|boy($1),prep|in(det:art|the($2,n|bath+tub($2))))),$0),$0))
example_end

Sent: may I have them .
Sem: lambda $0_{ev}.mod|may(v|have(pro:sub|i,pro:obj|them,$0),$0)
example_end

Sent: you 're going to put them back ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back($1)),$0),$0))
example_end

Sent: can you give me the dog in the house ?
Sem: lambda $0_{ev}.Q(mod|can(v|give(pro:per|you,det:art|the($1,att(n|dog($1),prep|in(det:art|the($2,n|house($2))))),pro:obj|me,$0),$0))
example_end

Sent: is there a doggie in this house ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|dog-dim($1)),$0),prep|in(pro:dem|this($2,n|house($2)),$0)))
example_end

Sent: sit on the rug ?
Sem: lambda $0_{ev}.Q(and(v|sit(you,$0),prep|on(det:art|the($1,n|rug($1)),$0)))
example_end

Sent: his face cloth got stuck in the drain .
Sem: lambda $0_{ev}.aux|get-past(and(part|stick-pastp(det:poss|his($1,and_comp(n|face($1),n|cloth($1))),$0),prep|in(det:art|the($2,n|drain($2)),$0)),$0)
example_end

Sent: it got stuck in the drain ?
Sem: lambda $0_{ev}.Q(aux|get-past(and(part|stick-pastp(pro:per|it,$0),prep|in(det:art|the($1,n|drain($1)),$0)),$0))
example_end

Sent: which one has the doghouse ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|have-3s($1($2,pro:indef|one($2)),det:art|the($3,n|dog+house($3)),$0)
example_end

Sent: can you find it ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: are those too many Adam ?
Sem: lambda $0_{ev}.Q(adv|too(qn|many(pro:dem|those,$0)))
example_end

Sent: is there a boy in there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|boy($1)),$0),prep|in(adv|there($0))))
example_end

Sent: where is the boy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|boy($1)),$0),$2($0))
example_end

Sent: do you have a bed like that ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,n|bed($1)),$0),prep|like(pro:dem|that,$0)),$0))
example_end

Sent: you saw the pictures .
Sem: lambda $0_{ev}.v|see-past(pro:per|you,det:art|the($1,n|picture-pl($1)),$0)
example_end

Sent: in the kitchen ?
Sem: Q(prep|in(det:art|the($0,n|kitchen($0))))
example_end

Sent: no you saw a giraffe on the television .
Sem: lambda $0_{ev}.and(and(v|see-past(pro:per|you,det:art|a($1,n|giraffe($1)),$0),prep|on(det:art|the($2,n|television($2)),$0)),co|no($0))
example_end

Sent: that 's a kangaroo .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|kangaroo(pro:dem|that,$0))
example_end

Sent: here 's a leopard .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|leopard($1)),$0),pro:exist|here($0))
example_end

Sent: look at this .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|at(pro:dem|this,$0))
example_end

Sent: that 's a reindeer .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|reindeer(pro:dem|that,$0))
example_end

Sent: oh taking a shower ?
Sem: lambda $0_{ev}.Q(and(part|take-presp(you,det:art|a($1,n|shower($1)),$0),co|oh($0)))
example_end

Sent: that 's a lion .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|lion(pro:dem|that,$0))
example_end

Sent: hungry lion yes .
Sem: lambda $0_{ev}.and(and(adj|hungry($0),n|lion($0)),co|yes($0))
example_end

Sent: oh close the mouth .
Sem: lambda $0_{ev}.and(v|close(you,det:art|the($1,n|mouth($1)),$0),co|oh($0))
example_end

Sent: what does the knife do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|knife($1)),$2,$0),$0)
example_end

Sent: that 's a monkey .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|monkey(pro:dem|that,$0))
example_end

Sent: what is the monkey eating ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-3s(part|eat-presp(det:art|the($1,n|monkey($1)),$2,$0),$0)
example_end

Sent: eating crayon ?
Sem: lambda $0_{ev}.Q(part|eat-presp(you,lambda $1_{e}.n|crayon($1),$0))
example_end

Sent: what is he ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|he,$0)
example_end

Sent: that 's a fox .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fox(pro:dem|that,$0))
example_end

Sent: that 's a panda .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|panda(pro:dem|that,$0))
example_end

Sent: his legs are strong .
Sem: lambda $0_{ev}.adj|strong(det:poss|his($1,n|leg-pl($1)),$0)
example_end

Sent: sing a song .
Sem: lambda $0_{ev}.v|sing(you,det:art|a($1,n|song($1)),$0)
example_end

Sent: I don 't think that car is broken .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.part|break-pastp(pro:dem|that($2,n|car($2)),$1),$0),$0),$0)
example_end


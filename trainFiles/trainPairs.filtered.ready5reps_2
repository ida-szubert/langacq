Sent: you play with the can down there .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|bowl($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|can($1)),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(pro|it,$0),$0),adv|off($0)),$0)
example_end

Sent: that 's a can .
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|can($1)),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(pro|it,$0),$0),adv|off($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: it doesn 't come off .
Sem:  lambda $0_{ev}.and(v|play(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|can($1)),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(pro|it,$0),$0),adv|off($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|can($1)),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(pro|it,$0),$0),adv|off($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: look .
Sem:  lambda $0_{ev}.not(and(aux|do&3S(v|come(pro|it,$0),$0),adv|off($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|think(pro|you,$0,$1),$1),prep|of(pro:dem|that,$1))
example_end

Sent: what are those ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|think(pro|you,$0,$1),$1),prep|of(pro:dem|that,$1))
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,$0),$0),$0)
example_end

Sent: and what do you think of that ?
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|think(pro|you,$0,$1),$1),prep|of(pro:dem|that,$1))
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,pro|it,$0),$0),adv|already($0))
example_end

Sent: did you read ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|think(pro|you,$0,$1),$1),prep|of(pro:dem|that,$1))
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,pro|it,$0),$0),adv|already($0))
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
example_end

Sent: you 've already had it .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|think(pro|you,$0,$1),$1),prep|of(pro:dem|that,$1))
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,pro|it,$0),$0),adv|already($0))
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),adv:loc|back($0))
example_end

Sent: would you like a grahamcracker ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|read&ZERO(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,pro|it,$0),$0),adv|already($0))
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: put your highchair back .
Sem:  lambda $0_{ev}.and(aux|have(part|have&PERF(pro|you,pro|it,$0),$0),adv|already($0))
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
example_end

Sent: good girl .
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is your grape juice allgone ?
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
example_end

Sent: there .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Sem:  lambda $0_{ev}.Q(and(v|tell(pro|you,pro|me,$0),prep|about(pro|it,$0)),$0)
example_end

Sent: who is that man ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,and(n|grape($1),adj|all_gone($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Sem:  lambda $0_{ev}.Q(and(v|tell(pro|you,pro|me,$0),prep|about(pro|it,$0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: you  you tell me about it ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Sem:  lambda $0_{ev}.Q(and(v|tell(pro|you,pro|me,$0),prep|about(pro|it,$0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:poss:det|your($1,n|book($1)),$0))
example_end

Sent: that 's it .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|that($2,n|man($2)),$1)
Sem:  lambda $0_{ev}.Q(and(v|tell(pro|you,pro|me,$0),prep|about(pro|it,$0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:poss:det|your($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: now you tell me about your book .
Sem:  lambda $0_{ev}.Q(and(v|tell(pro|you,pro|me,$0),prep|about(pro|it,$0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:poss:det|your($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(adj|okkay(pro|you),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:poss:det|your($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(adj|okkay(pro|you),$0)
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
example_end

Sent: are you okkay ?
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(pro:poss:det|your($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(adj|okkay(pro|you),$0)
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you tell me .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(adj|okkay(pro|you),$0)
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|fine($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.Q(adj|okkay(pro|you),$0)
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|fine($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|mean(pro:dem|that,$0,$1),$1)
example_end

Sent: you 're doing fine .
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|me,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|fine($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|mean(pro:dem|that,$0,$1),$1)
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
example_end

Sent: what does that mean ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|fine($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|mean(pro:dem|that,$0,$1),$1)
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|hand($1)),$0)
example_end

Sent: you shut the door .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0),$0),adv|fine($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|mean(pro:dem|that,$0,$1),$1)
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|hand($1)),$0)
Sem:  lambda $0_{e}.n|cereal($0)
example_end

Sent: move your hand .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|mean(pro:dem|that,$0,$1),$1)
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|hand($1)),$0)
Sem:  lambda $0_{e}.n|cereal($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|it,$0,$1),$1),adv:loc|under($1))
example_end

Sent: cereal ?
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|hand($1)),$0)
Sem:  lambda $0_{e}.n|cereal($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|it,$0,$1),$1),adv:loc|under($1))
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Mommy,pro|it,$0),$0)
example_end

Sent: what 's it doing under there ?
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|hand($1)),$0)
Sem:  lambda $0_{e}.n|cereal($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|it,$0,$1),$1),adv:loc|under($1))
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Mommy,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|grape($1),n|juice($1))),$0)
example_end

Sent: Mommy 'll get it .
Sem:  lambda $0_{e}.n|cereal($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|it,$0,$1),$1),adv:loc|under($1))
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Mommy,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|grape($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0),$0),$0)
example_end

Sent: that 's your grape juice .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&3S(part|do-PROG(pro|it,$0,$1),$1),adv:loc|under($1))
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Mommy,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|grape($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,n:prop|Mama,pro:poss:det|your($1,n|cup($1)),$0),$0)
example_end

Sent: would you bring me your cup ?
Sem:  lambda $0_{ev}.aux|will(v|get(n:prop|Mommy,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|grape($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,n:prop|Mama,pro:poss:det|your($1,n|cup($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dog($1))),$0)
example_end

Sent: would you bring Mama your cup .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|grape($1),n|juice($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,n:prop|Mama,pro:poss:det|your($1,n|cup($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dog($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|pretty($1),n|hat($1))),$0)
example_end

Sent: that 's a nice dog .
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|bring(pro|you,pro|me,pro:poss:det|your($1,n|cup($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,n:prop|Mama,pro:poss:det|your($1,n|cup($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dog($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|pretty($1),n|hat($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's a pretty hat .
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,n:prop|Mama,pro:poss:det|your($1,n|cup($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dog($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|pretty($1),n|hat($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dog($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|pretty($1),n|hat($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
example_end

Sent: after you read .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|pretty($1),n|hat($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),adv:loc|down($0))
example_end

Sent: you put them in .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: they go down here .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,qn|both($1,n|can-PL($1)),$0)
example_end

Sent: and bring the cup too .
Sem:  lambda $0_{ev}.and(v|go(pro|they,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,qn|both($1,n|can-PL($1)),$0)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: bring both cans .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,qn|both($1,n|can-PL($1)),$0)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
example_end

Sent: good girl .
Sem:  lambda $0_{ev}.v|bring(pro|you,det|the($1,n|cup($1)),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,qn|both($1,n|can-PL($1)),$0)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:indef|one,det|the($1,and(n|dog($1),n|house($1))),$0)
example_end

Sent: shut the door .
Sem:  lambda $0_{ev}.v|bring(pro|you,qn|both($1,n|can-PL($1)),$0)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:indef|one,det|the($1,and(n|dog($1),n|house($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|throw(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: one is the dog 's house .
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:indef|one,det|the($1,and(n|dog($1),n|house($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|throw(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: can you throw the ball ?
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:indef|one,det|the($1,and(n|dog($1),n|house($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|throw(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: you catch the ball .
Sem:  lambda $0_{ev}.eq(pro:indef|one,det|the($1,and(n|dog($1),n|house($1))),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|throw(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: catch the ball .
Sem:  lambda $0_{ev}.Q(aux|can(v|throw(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
example_end

Sent: you can 't hold the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|hold(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: can you hold the ball ?
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|hold(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
example_end

Sent: hold the ball .
Sem:  lambda $0_{ev}.not(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|hold(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: that 's the way .
Sem:  lambda $0_{ev}.Q(aux|can(v|hold(pro|you,det|the($1,n|ball($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|hold(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent:  catch the ball  catch the ball .
Sem:  lambda $0_{ev}.v|hold(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|way($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
example_end

Sent: catch the ball .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: catch the ball .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|tummy($1)),$0))
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|tummy($1)),$0))
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
example_end

Sent: you had it on your tummy .
Sem:  lambda $0_{ev}.v|catch(pro|you,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|tummy($1)),$0))
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
example_end

Sent: where 's my pencil ?
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|tummy($1)),$0))
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.n|garbage($0)
example_end

Sent: where 's your pencil ?
Sem:  lambda $0_{ev}.and(v|have&PAST(pro|you,pro|it,$0),prep|on(pro:poss:det|your($1,n|tummy($1)),$0))
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.n|garbage($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
example_end

Sent: garbage ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|my($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.n|garbage($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: is that Racketyboom .
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|pencil($1)),$0)
Sem:  lambda $0_{e}.n|garbage($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: Mommy 's busy .
Sem:  lambda $0_{e}.n|garbage($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
example_end

Sent: you read .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Racketyboom,$0)
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: later we 'll read .
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(aux|do(v|drink(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(aux|do(v|drink(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|empty(pro|you,lambda $1_{e}.n|garbage($1),$0),$0)
example_end

Sent: you don 't drink coffee .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(aux|do(v|drink(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|empty(pro|you,lambda $1_{e}.n|garbage($1),$0),$0)
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: empty garbage ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(aux|do(v|drink(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|empty(pro|you,lambda $1_{e}.n|garbage($1),$0),$0)
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{e}.adj|dirty($0)
example_end

Sent: later .
Sem:  lambda $0_{ev}.not(aux|do(v|drink(pro|you,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|empty(pro|you,lambda $1_{e}.n|garbage($1),$0),$0)
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{e}.adj|dirty($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: what 's dirty ?
Sem:  lambda $0_{ev}.Q(v|empty(pro|you,lambda $1_{e}.n|garbage($1),$0),$0)
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{e}.adj|dirty($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.n|swim($0)
example_end

Sent: your foot ?
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{e}.adj|dirty($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.n|swim($0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|cracker($1)),$0)
example_end

Sent: swim ?
Sem:  lambda $0_{e}.adj|dirty($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.n|swim($0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
example_end

Sent: a cracker ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.n|swim($0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
example_end

Sent: lay down .
Sem:  lambda $0_{e}.n|swim($0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{e}.n|pot-DIM($0)
example_end

Sent: lay down here .
Sem:  lambda $0_{ev}.Q(det|a($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{e}.n|pot-DIM($0)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
example_end

Sent: pottie ?
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{e}.n|pot-DIM($0)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),prep|to(pro|you,$0))
example_end

Sent: excuse me .
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|down($0))
Sem:  lambda $0_{e}.n|pot-DIM($0)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),prep|to(pro|you,$0))
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,n:prop|Racketyboom,$0),$0),$0)
example_end

Sent: and Mommy will read to you .
Sem:  lambda $0_{e}.n|pot-DIM($0)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),prep|to(pro|you,$0))
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,n:prop|Racketyboom,$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
example_end

Sent: shall we read Racketyboom ?
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),prep|to(pro|you,$0))
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,n:prop|Racketyboom,$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: I 'll read .
Sem:  lambda $0_{ev}.and(aux|will(v|read&ZERO(n:prop|Mommy,$0),$0),prep|to(pro|you,$0))
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,n:prop|Racketyboom,$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: turn the page .
Sem:  lambda $0_{ev}.Q(aux|shall(v|read&ZERO(pro|we,n:prop|Racketyboom,$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv:loc|backwards($0))
example_end

Sent: you turn the page .
Sem:  lambda $0_{ev}.aux|will(v|read&ZERO(pro|I,$0),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv:loc|backwards($0))
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,det|the($1,n|story($1)),$0),prep|to(n:prop|Mommy,$0))
example_end

Sent: you 're going backwards .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv:loc|backwards($0))
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,det|the($1,n|story($1)),$0),prep|to(n:prop|Mommy,$0))
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
example_end

Sent: you read the story to Mommy .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv:loc|backwards($0))
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,det|the($1,n|story($1)),$0),prep|to(n:prop|Mommy,$0))
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: turn around .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|go-PROG(pro|you,$0),$0),adv:loc|backwards($0))
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,det|the($1,n|story($1)),$0),prep|to(n:prop|Mommy,$0))
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Papa,$0),$0)
example_end

Sent: that 's a girl ? .
Sem:  lambda $0_{ev}.and(v|read&ZERO(pro|you,det|the($1,n|story($1)),$0),prep|to(n:prop|Mommy,$0))
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: is that Papa ?
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
Sem:  lambda $0_{ev}.not(det|those($1,n|pillow-PL($1)),$0)
example_end

Sent: you sit on the pillow .
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
Sem:  lambda $0_{ev}.not(det|those($1,n|pillow-PL($1)),$0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|on(det|these($1,n|pillow-PL($1)),$0))
example_end

Sent: not those pillows .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
Sem:  lambda $0_{ev}.not(det|those($1,n|pillow-PL($1)),$0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|on(det|these($1,n|pillow-PL($1)),$0))
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
example_end

Sent: come over on these pillows .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|on(det|the($1,n|pillow($1)),$0))
Sem:  lambda $0_{ev}.not(det|those($1,n|pillow-PL($1)),$0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|on(det|these($1,n|pillow-PL($1)),$0))
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,n:prop|Racketyboom,$0)
example_end

Sent: wait .
Sem:  lambda $0_{ev}.not(det|those($1,n|pillow-PL($1)),$0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|on(det|these($1,n|pillow-PL($1)),$0))
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,n:prop|Racketyboom,$0)
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: this is Racketyboom .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|on(det|these($1,n|pillow-PL($1)),$0))
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,n:prop|Racketyboom,$0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: lunch .
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,n:prop|Racketyboom,$0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: you move your highchair .
Sem:  lambda $0_{ev}.eq(pro:dem|this,n:prop|Racketyboom,$0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: lunch .
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|cracker($0)
example_end

Sent: lunch .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{e}.n|cracker($0)
example_end

Sent: cracker ?
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro:poss:det|your($1,n|custard($1)),$0),adv|now($0)),$0)
example_end

Sent: cracker .
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro:poss:det|your($1,n|custard($1)),$0),adv|now($0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|lunch($1)),$0)
example_end

Sent: you want your custard now ?
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro:poss:det|your($1,n|custard($1)),$0),adv|now($0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|lunch($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: this is your lunch .
Sem:  lambda $0_{e}.n|cracker($0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro:poss:det|your($1,n|custard($1)),$0),adv|now($0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|lunch($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
example_end

Sent: Eve 's having lunch .
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro:poss:det|your($1,n|custard($1)),$0),adv|now($0)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|lunch($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$0),v|have(n:prop|Papa,lambda $1_{e}.n|lunch($1),$0)),$0)
example_end

Sent: where is Papa ?
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|lunch($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$0),v|have(n:prop|Papa,lambda $1_{e}.n|lunch($1),$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
example_end

Sent: Papa 's going to have lunch .
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$0),v|have(n:prop|Papa,lambda $1_{e}.n|lunch($1),$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drink($1)),$0)
example_end

Sent: Eve 's having lunch .
Sem:  lambda $0_{e}.eqLoc(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$0),v|have(n:prop|Papa,lambda $1_{e}.n|lunch($1),$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drink($1)),$0)
Sem:  lambda $0_{ev}.Q(part|drink-PROG(pro|you,pro:poss:det|your($1,n|milk($1)),$0),$0)
example_end

Sent: your drink ?
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Papa,$0),v|have(n:prop|Papa,lambda $1_{e}.n|lunch($1),$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drink($1)),$0)
Sem:  lambda $0_{ev}.Q(part|drink-PROG(pro|you,pro:poss:det|your($1,n|milk($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: you drinking your milk ?
Sem:  lambda $0_{ev}.aux|be&3S(part|have-PROG(n:prop|Eve,lambda $1_{e}.n|lunch($1),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drink($1)),$0)
Sem:  lambda $0_{ev}.Q(part|drink-PROG(pro|you,pro:poss:det|your($1,n|milk($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|drink(pro|you,pro:poss:det|your($1,n|milk($1)),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|drink($1)),$0)
Sem:  lambda $0_{ev}.Q(part|drink-PROG(pro|you,pro:poss:det|your($1,n|milk($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|drink(pro|you,pro:poss:det|your($1,n|milk($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: drink your milk .
Sem:  lambda $0_{ev}.Q(part|drink-PROG(pro|you,pro:poss:det|your($1,n|milk($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|drink(pro|you,pro:poss:det|your($1,n|milk($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|soup($1)),$0),$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|drink(pro|you,pro:poss:det|your($1,n|milk($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|soup($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you want more soup ?
Sem:  lambda $0_{ev}.v|drink(pro|you,pro:poss:det|your($1,n|milk($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|soup($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|soup($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,lambda $1_{e}.n|soup($1),$0)),$0)
example_end

Sent: noodle soup ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|more($1,n|soup($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,lambda $1_{e}.n|soup($1),$0)),$0)
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,$0)
example_end

Sent: Mommy 's gonna have soup .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,lambda $1_{e}.n|soup($1),$0)),$0)
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|eat-PROG(n:prop|Eve,$0),$0),$0)
example_end

Sent: eating .
Sem:  lambda $0_{e}.and(n|noodle($0),n|soup($0))
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,lambda $1_{e}.n|soup($1),$0)),$0)
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|eat-PROG(n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0,$1),$1)
example_end

Sent: is Eve eating ?
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Mommy,$0),v|have(n:prop|Mommy,lambda $1_{e}.n|soup($1),$0)),$0)
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|eat-PROG(n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0,$1),$1)
Sem:  lambda $0_{e}.n|touch($0)
example_end

Sent: what 's she eating ?
Sem:  lambda $0_{ev}.part|eat-PROG(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|eat-PROG(n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0,$1),$1)
Sem:  lambda $0_{e}.n|touch($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: touch ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|eat-PROG(n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0,$1),$1)
Sem:  lambda $0_{e}.n|touch($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|eat-PROG(pro|she,$0,$1),$1)
Sem:  lambda $0_{e}.n|touch($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|noodle($1)),$0)
example_end

Sent: taperecorder .
Sem:  lambda $0_{e}.n|touch($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|noodle($1)),$0)
Sem:  pro:wh|what
example_end

Sent: it 's a noodle .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|noodle($1)),$0)
Sem:  pro:wh|what
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: what .
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|noodle($1)),$0)
Sem:  pro:wh|what
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|noodle($1)),$0)
Sem:  pro:wh|what
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|sit(pro|you,$0),$0),adv:tem|then($0)),$0)
example_end

Sent: are you finished ?
Sem:  pro:wh|what
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|sit(pro|you,$0),$0),adv:tem|then($0)),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
example_end

Sent: would you sit down then ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|sit(pro|you,$0),$0),adv:tem|then($0)),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
Sem:  adj|sorry(pro|I)
example_end

Sent: sit down .
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|finish-PERF(pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|sit(pro|you,$0),$0),adv:tem|then($0)),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm sorry .
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|sit(pro|you,$0),$0),adv:tem|then($0)),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm sorry .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),adv:loc|down($0))
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|tire-PERF(n:prop|Eve,$0),$0),$0)
example_end

Sent: I 'm awfully sorry .
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|tire-PERF(n:prop|Eve,$0),$0),$0)
Sem:  pro|she
example_end

Sent: is Eve tired ?
Sem:  adj|sorry(pro|I)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|tire-PERF(n:prop|Eve,$0),$0),$0)
Sem:  pro|she
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),prep|to(lambda $1_{e}.n|bed($1),$0))
example_end

Sent: she is .
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|tire-PERF(n:prop|Eve,$0),$0),$0)
Sem:  pro|she
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),prep|to(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{e}.n|bed($0)
example_end

Sent: we 'll go to bed .
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|tire-PERF(n:prop|Eve,$0),$0),$0)
Sem:  pro|she
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),prep|to(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{e}.n|bed($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|finger-PL($1)),$0)
example_end

Sent: bed ?
Sem:  pro|she
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),prep|to(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{e}.n|bed($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
example_end

Sent: move your fingers .
Sem:  lambda $0_{ev}.and(aux|will(v|go(pro|we,$0),$0),prep|to(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{e}.n|bed($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
Sem:  adj|sleepy(pro|she)
example_end

Sent: we go .
Sem:  lambda $0_{e}.n|bed($0)
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
Sem:  adj|sleepy(pro|she)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: she 's sleepy .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
Sem:  adj|sleepy(pro|she)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: you bumped your head .
Sem:  lambda $0_{ev}.v|go(pro|we,$0)
Sem:  adj|sleepy(pro|she)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.aux|will(v|move(n:prop|Mommy,pro:poss:det|your($1,n|chair($1)),$0),$0)
example_end

Sent: bumped your head .
Sem:  adj|sleepy(pro|she)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.aux|will(v|move(n:prop|Mommy,pro:poss:det|your($1,n|chair($1)),$0),$0)
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: Mommy 'll move your chair .
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.aux|will(v|move(n:prop|Mommy,pro:poss:det|your($1,n|chair($1)),$0),$0)
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
example_end

Sent: coffee .
Sem:  lambda $0_{ev}.v|bump-PAST(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.aux|will(v|move(n:prop|Mommy,pro:poss:det|your($1,n|chair($1)),$0),$0)
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: come here .
Sem:  lambda $0_{ev}.aux|will(v|move(n:prop|Mommy,pro:poss:det|your($1,n|chair($1)),$0),$0)
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|cut-PROG(n:prop|Mommy,det|a($1,n|pumpkin($1)),$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|cut-PROG(n:prop|Mommy,det|a($1,n|pumpkin($1)),$0),$0)
Sem:  adj|sorry(pro|I)
example_end

Sent: Mommy 's cutting a pumpkin .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|cut-PROG(n:prop|Mommy,det|a($1,n|pumpkin($1)),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: I 'm sorry .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|cut-PROG(n:prop|Mommy,det|a($1,n|pumpkin($1)),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: I 'm gonna cook it .
Sem:  lambda $0_{ev}.aux|be&3S(part|cut-PROG(n:prop|Mommy,det|a($1,n|pumpkin($1)),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{e}.n|coffee($0)
example_end

Sent: I 'm gonna cook it .
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: coffee ?
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
example_end

Sent: what 're you doing ?
Sem:  lambda $0_{e}.n|coffee($0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
example_end

Sent: what 're you doing on the table ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
example_end

Sent: that 's not Papa .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
example_end

Sent: that 's the mailman .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|on(det|the($2,n|table($2)),$1))
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  det|a($0,n|letter($0))
example_end

Sent: that 's the mailman .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Papa,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  det|a($0,n|letter($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|letter($1)),$0)
example_end

Sent: a letter .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  det|a($0,n|letter($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.and(v|get&PAST(n:prop|Eve,det|a($1,n|letter($1)),$0),prep|from(n:prop|Nanny,$0))
example_end

Sent: Eve has a letter .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|mailman($1)),$0)
Sem:  det|a($0,n|letter($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.and(v|get&PAST(n:prop|Eve,det|a($1,n|letter($1)),$0),prep|from(n:prop|Nanny,$0))
Sem:  lambda $0_{e}.n|paper($0)
example_end

Sent: Eve got a letter from Nanny .
Sem:  det|a($0,n|letter($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.and(v|get&PAST(n:prop|Eve,det|a($1,n|letter($1)),$0),prep|from(n:prop|Nanny,$0))
Sem:  lambda $0_{e}.n|paper($0)
Sem:  lambda $0_{ev}.v|write&PAST(n:prop|Nanny,pro|you,det|the($1,n|letter($1)),$0)
example_end

Sent: paper .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.and(v|get&PAST(n:prop|Eve,det|a($1,n|letter($1)),$0),prep|from(n:prop|Nanny,$0))
Sem:  lambda $0_{e}.n|paper($0)
Sem:  lambda $0_{ev}.v|write&PAST(n:prop|Nanny,pro|you,det|the($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
example_end

Sent: Nanny wrote you the letter .
Sem:  lambda $0_{ev}.and(v|get&PAST(n:prop|Eve,det|a($1,n|letter($1)),$0),prep|from(n:prop|Nanny,$0))
Sem:  lambda $0_{e}.n|paper($0)
Sem:  lambda $0_{ev}.v|write&PAST(n:prop|Nanny,pro|you,det|the($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
Sem:  lambda $0_{e}.n|tooth&PL($0)
example_end

Sent: Nanny ?
Sem:  lambda $0_{e}.n|paper($0)
Sem:  lambda $0_{ev}.v|write&PAST(n:prop|Nanny,pro|you,det|the($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
Sem:  lambda $0_{e}.n|tooth&PL($0)
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
example_end

Sent: teeth .
Sem:  lambda $0_{ev}.v|write&PAST(n:prop|Nanny,pro|you,det|the($1,n|letter($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
Sem:  lambda $0_{e}.n|tooth&PL($0)
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|pumpkin($1)),$0)
example_end

Sent: grape juice .
Sem:  lambda $0_{ev}.Q(n:prop|Nanny,$0)
Sem:  lambda $0_{e}.n|tooth&PL($0)
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|pumpkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
example_end

Sent: this is your pumpkin .
Sem:  lambda $0_{e}.n|tooth&PL($0)
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|pumpkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|water($1)),$0)
example_end

Sent: I 'm going to cook it .
Sem:  lambda $0_{e}.and(n|grape($0),n|juice($0))
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|pumpkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|water($1)),$0)
Sem:  qn|more($0,and(n|grape($0),n|juice($0)))
example_end

Sent: more water ?
Sem:  lambda $0_{ev}.eq(pro:dem|this,pro:poss:det|your($1,n|pumpkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|water($1)),$0)
Sem:  qn|more($0,and(n|grape($0),n|juice($0)))
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro:poss:det|your($1,n|cup($1)),$0),adv:loc|here($0))
example_end

Sent: more grape juice .
Sem:  lambda $0_{ev}.aux|be&1S(and(part|go-PROG(pro|I,$0),v|cook(pro|I,pro|it,$0)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|water($1)),$0)
Sem:  qn|more($0,and(n|grape($0),n|juice($0)))
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro:poss:det|your($1,n|cup($1)),$0),adv:loc|here($0))
Sem:  adj|all_gone(pro|it)
example_end

Sent: bring your cup here .
Sem:  lambda $0_{ev}.Q(qn|more($1,n|water($1)),$0)
Sem:  qn|more($0,and(n|grape($0),n|juice($0)))
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro:poss:det|your($1,n|cup($1)),$0),adv:loc|here($0))
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: it 's allgone .
Sem:  qn|more($0,and(n|grape($0),n|juice($0)))
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro:poss:det|your($1,n|cup($1)),$0),adv:loc|here($0))
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: are you alright ?
Sem:  lambda $0_{ev}.and(v|bring(pro|you,pro:poss:det|your($1,n|cup($1)),$0),adv:loc|here($0))
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
example_end

Sent: Eve ?
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: what are these ?
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
example_end

Sent: what do you see ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: good girl .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|these,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.and(adj|good($0),n|girl($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:dem|that,$0),adv|first($0))
example_end

Sent: can I help you ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:dem|that,$0),adv|first($0))
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|your($1,n|horse-DIM($1)),$0)
example_end

Sent: take that outof your mouth first .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:dem|that,$0),adv|first($0))
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|your($1,n|horse-DIM($1)),$0)
Sem:  lambda $0_{e}.n|horse($0)
example_end

Sent: it 's your horsie .
Sem:  lambda $0_{ev}.Q(aux|can(v|help(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:dem|that,$0),adv|first($0))
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|your($1,n|horse-DIM($1)),$0)
Sem:  lambda $0_{e}.n|horse($0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
example_end

Sent: horse .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro:dem|that,$0),adv|first($0))
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|your($1,n|horse-DIM($1)),$0)
Sem:  lambda $0_{e}.n|horse($0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: Mommy 's sitting on the stool .
Sem:  lambda $0_{ev}.eq(pro|it,pro:poss:det|your($1,n|horse-DIM($1)),$0)
Sem:  lambda $0_{e}.n|horse($0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.v|get(pro|I,pro|it,$0)
example_end

Sent: here .
Sem:  lambda $0_{e}.n|horse($0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.v|get(pro|I,pro|it,$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|happen-PROG(pro:indef|nothing,$0),$0)
example_end

Sent: I get it .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(n:prop|Mommy,$0),$0),prep|on(det|the($1,n|stool($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.v|get(pro|I,pro|it,$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|happen-PROG(pro:indef|nothing,$0),$0)
Sem:  lambda $0_{ev}.not(aux|be&1S(part|do-PROG(pro|I,pro:indef|anything,$0),$0),$0)
example_end

Sent: nothing 's happening .
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.v|get(pro|I,pro|it,$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|happen-PROG(pro:indef|nothing,$0),$0)
Sem:  lambda $0_{ev}.not(aux|be&1S(part|do-PROG(pro|I,pro:indef|anything,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|machine($1),$0),$0)
example_end

Sent: I 'm not doing anything .
Sem:  lambda $0_{ev}.v|get(pro|I,pro|it,$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|happen-PROG(pro:indef|nothing,$0),$0)
Sem:  lambda $0_{ev}.not(aux|be&1S(part|do-PROG(pro|I,pro:indef|anything,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|machine($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,n|machine($1)),$0)
example_end

Sent: you want machine ?
Sem:  lambda $0_{ev}.aux|be&3S(part|happen-PROG(pro:indef|nothing,$0),$0)
Sem:  lambda $0_{ev}.not(aux|be&1S(part|do-PROG(pro|I,pro:indef|anything,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|machine($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,n|machine($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|watch(pro|you,det|the($1,n|+n|washing+n|machine($1)),$0),$0),adv|later($0))
example_end

Sent: the machine ?
Sem:  lambda $0_{ev}.not(aux|be&1S(part|do-PROG(pro|I,pro:indef|anything,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|machine($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,n|machine($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|watch(pro|you,det|the($1,n|+n|washing+n|machine($1)),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.v|watch(pro|you,$0,$1)
example_end

Sent: you can watch the washingmachine later .
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|machine($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,n|machine($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|watch(pro|you,det|the($1,n|+n|washing+n|machine($1)),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.v|watch(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
example_end

Sent: watch what ?
Sem:  lambda $0_{ev}.Q(det|the($1,n|machine($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|watch(pro|you,det|the($1,n|+n|washing+n|machine($1)),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.v|watch(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
Sem:  lambda $0_{ev}.not(aux|will(v|make(n:prop|Mommy,pro:indef|anything,$0),$0),$0)
example_end

Sent: what are we going to do ?
Sem:  lambda $0_{ev}.and(aux|can(v|watch(pro|you,det|the($1,n|+n|washing+n|machine($1)),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.v|watch(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
Sem:  lambda $0_{ev}.not(aux|will(v|make(n:prop|Mommy,pro:indef|anything,$0),$0),$0)
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: Mommy won 't make anything .
Sem:  lambda $0_{e}.lambda $1_{ev}.v|watch(pro|you,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
Sem:  lambda $0_{ev}.not(aux|will(v|make(n:prop|Mommy,pro:indef|anything,$0),$0),$0)
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.and(v|play(n:prop|Eve,$0),prep|with(pro:poss:det|her($1,n|+n|tinker+n|toy-PL($1)),$0))
example_end

Sent: Mommy 's busy .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|do(pro|we,$0,$1)),$1)
Sem:  lambda $0_{ev}.not(aux|will(v|make(n:prop|Mommy,pro:indef|anything,$0),$0),$0)
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.and(v|play(n:prop|Eve,$0),prep|with(pro:poss:det|her($1,n|+n|tinker+n|toy-PL($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|gun($1)),$0),$0)
example_end

Sent: Eve play with her tinkertoys .
Sem:  lambda $0_{ev}.not(aux|will(v|make(n:prop|Mommy,pro:indef|anything,$0),$0),$0)
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.and(v|play(n:prop|Eve,$0),prep|with(pro:poss:det|her($1,n|+n|tinker+n|toy-PL($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|gun($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: is that your gun ?
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.and(v|play(n:prop|Eve,$0),prep|with(pro:poss:det|her($1,n|+n|tinker+n|toy-PL($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|gun($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.and(v|play(n:prop|Eve,$0),prep|with(pro:poss:det|her($1,n|+n|tinker+n|toy-PL($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|gun($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|gun($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|radio($1)),$0)
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|radio($1)),$0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|turn(pro|you,$0)),$0)
example_end

Sent: that 's your radio .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|radio($1)),$0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|turn(pro|you,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you want me to turn ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|radio($1)),$0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|turn(pro|you,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|radio($1)),$0)
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|turn(pro|you,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  adj|enough(pro:dem|that)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.Q(and(v|want(pro|you,pro|me,$0),v|turn(pro|you,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  adj|enough(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that 's enough .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  adj|enough(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|clean(pro|it),$0)
example_end

Sent: there .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  adj|enough(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|clean(pro|it),$0)
Sem:  lambda $0_{e}.n|nap($0)
example_end

Sent: is it clean ?
Sem:  adj|enough(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|clean(pro|it),$0)
Sem:  lambda $0_{e}.n|nap($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: nap ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|clean(pro|it),$0)
Sem:  lambda $0_{e}.n|nap($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(det|the($2,n|radio($2)),$1))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.Q(adj|clean(pro|it),$0)
Sem:  lambda $0_{e}.n|nap($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(det|the($2,n|radio($2)),$1))
Sem:  lambda $0_{ev}.not(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),$0)
example_end

Sent: what are you doing with the radio ?
Sem:  lambda $0_{e}.n|nap($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(det|the($2,n|radio($2)),$1))
Sem:  lambda $0_{ev}.not(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
example_end

Sent: Fraser 's not going .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(det|the($2,n|radio($2)),$1))
Sem:  lambda $0_{ev}.not(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|book($1)),$0)
example_end

Sent: I 'm going upstairs .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1),prep|with(det|the($2,n|radio($2)),$1))
Sem:  lambda $0_{ev}.not(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|book($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: I have a book .
Sem:  lambda $0_{ev}.not(aux|be&3S(part|go-PROG(n:prop|Fraser,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|book($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),adv:loc|upstairs($0))
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|book($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
example_end

Sent: that 's the telephone .
Sem:  lambda $0_{ev}.v|have(pro|I,det|a($1,n|book($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Peter,$0),$0)
example_end

Sent: that was the telephone .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Peter,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Papa,$0)
example_end

Sent: it wasn 't Peter .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Peter,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,det|the($1,n|butterfly($1)),$0),$0),$0)
example_end

Sent: it was Papa .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|telephone($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Peter,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,det|the($1,n|butterfly($1)),$0),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
example_end

Sent: did you see the butterfly ?
Sem:  lambda $0_{ev}.not(eq(pro|it,n:prop|Peter,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,det|the($1,n|butterfly($1)),$0),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|butterfly($1)),$0),$0)
example_end

Sent: where 's the butterfly ?
Sem:  lambda $0_{ev}.eq(pro|it,n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,det|the($1,n|butterfly($1)),$0),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|butterfly($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|ball($1)),$0)
example_end

Sent: that 's not the butterfly .
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|see(pro|you,det|the($1,n|butterfly($1)),$0),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|butterfly($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
example_end

Sent: that 's the ball .
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|butterfly($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|that($1,n|thing($1)),$0),$0),$0)
example_end

Sent: where 's the butterfly .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|the($1,n|butterfly($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|that($1,n|thing($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(det|this($2,n|book($2)),$0,$1),$1)
example_end

Sent: would you like that thing ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|ball($1)),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|that($1,n|thing($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(det|this($2,n|book($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,pro:poss:det|my($1,n|+n|teddy+n|bear($1)),$0),$0)
example_end

Sent: what 's this book called ?
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|butterfly($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|that($1,n|thing($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(det|this($2,n|book($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,pro:poss:det|my($1,n|+n|teddy+n|bear($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(det|the($1,n|book($1)),$0))
example_end

Sent: it 's called my teddybear .
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,det|that($1,n|thing($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(det|this($2,n|book($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,pro:poss:det|my($1,n|+n|teddy+n|bear($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{ev}.and(v|tell(pro|you,n:prop|Fraser,$0),prep|about(det|the($1,n|book($1)),$0))
example_end

Sent: you tell me about the book .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|call-PERF(det|this($2,n|book($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,pro:poss:det|my($1,n|+n|teddy+n|bear($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{ev}.and(v|tell(pro|you,n:prop|Fraser,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: you tell Fraser about the book .
Sem:  lambda $0_{ev}.aux|be&3S(part|call-PERF(pro|it,pro:poss:det|my($1,n|+n|teddy+n|bear($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{ev}.and(v|tell(pro|you,n:prop|Fraser,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.and(v|tell(pro|you,pro|me,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{ev}.and(v|tell(pro|you,n:prop|Fraser,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{ev}.and(v|tell(pro|you,n:prop|Fraser,$0),prep|about(det|the($1,n|book($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: who 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0),$0)
example_end

Sent: excuse me .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Eve,det|a($1,n|dear($1)),$0)
example_end

Sent: would you shut the door .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Eve,det|a($1,n|dear($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: Eve 's a dear .
Sem:  lambda $0_{ev}.v|excuse(pro|you,pro|me,$0)
Sem:  lambda $0_{ev}.aux|will&COND(v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Eve,det|a($1,n|dear($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what did you say ?
Sem:  lambda $0_{ev}.aux|will&COND(v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Eve,det|a($1,n|dear($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|stir(pro|I,det|the($1,n|coffee($1)),$0)
example_end

Sent: who 's that ?
Sem:  lambda $0_{ev}.eq(n:prop|Eve,det|a($1,n|dear($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|stir(pro|I,det|the($1,n|coffee($1)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cracker($1)),$0)
example_end

Sent: I stir the coffee .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|stir(pro|I,det|the($1,n|coffee($1)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
example_end

Sent: more cracker ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.v|stir(pro|I,det|the($1,n|coffee($1)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
example_end

Sent: get the stool .
Sem:  lambda $0_{ev}.v|stir(pro|I,det|the($1,n|coffee($1)),$0)
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  adj|hot(pro|it)
example_end

Sent: get the stool .
Sem:  lambda $0_{ev}.Q(qn|more($1,n|cracker($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|muffin($1)),$0),$0)
example_end

Sent: it 's hot .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|muffin($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: that 's not a muffin .
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|stool($1)),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|muffin($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: that 's your cheese sandwich .
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|muffin($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: don 't touch that .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|muffin($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
example_end

Sent: don 't touch it .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.n|spoon-PL($0)
example_end

Sent: what are those ?
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.n|spoon-PL($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: spoons .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.n|spoon-PL($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: you may have it .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|those,$1)
Sem:  lambda $0_{e}.n|spoon-PL($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  adj|hot(pro|it)
example_end

Sent: did you touch it ?
Sem:  lambda $0_{e}.n|spoon-PL($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: it 's hot .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Mommy,qn|any($1,n|celery($1)),$0),$0),$0)
example_end

Sent: there .
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Mommy,qn|any($1,n|celery($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: Mommy doesn 't want any celery .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Mommy,qn|any($1,n|celery($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's this ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Mommy,qn|any($1,n|celery($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro|her,$0),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.not(aux|do&3S(v|want(n:prop|Mommy,qn|any($1,n|celery($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro|her,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|shall(v|change(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: change her ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro|her,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|shall(v|change(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|there($0))
example_end

Sent: shall I change your diaper ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro|her,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|shall(v|change(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
example_end

Sent: you lay right there .
Sem:  lambda $0_{ev}.Q(v|change(pro|you,pro|her,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|shall(v|change(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
example_end

Sent: you stay right there .
Sem:  lambda $0_{ev}.Q(aux|shall(v|change(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: you stay right there .
Sem:  lambda $0_{ev}.and(v|lay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.n|mouth($0)
example_end

Sent: what are they doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.n|mouth($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|mouth($1)),$0)
example_end

Sent: mouth ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.n|mouth($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|mouth($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
example_end

Sent: your mouth ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|they,$0,$1),$1)
Sem:  lambda $0_{e}.n|mouth($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|mouth($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
example_end

Sent: where is your celery ?
Sem:  lambda $0_{e}.n|mouth($0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|mouth($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|celery($1)),$0),adv:loc|here($0))
example_end

Sent: where is your celery ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|mouth($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|celery($1)),$0),adv:loc|here($0))
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|celery($1)),$0)
example_end

Sent: you bring the celery here .
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|celery($1)),$0),adv:loc|here($0))
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: you dropped the celery .
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|celery($1)),$0),adv:loc|here($0))
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|foot($1)),$0)
example_end

Sent: your foot ?
Sem:  lambda $0_{ev}.and(v|bring(pro|you,det|the($1,n|celery($1)),$0),adv:loc|here($0))
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|get(pro|you,pro:refl|yourself,$0),$0),adv:loc|out($0))
example_end

Sent: where is your foot ?
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|celery($1)),$0)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|get(pro|you,pro:refl|yourself,$0),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: you can get out yourself .
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|get(pro|you,pro:refl|yourself,$0),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: watch your head .
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|foot($1)),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|get(pro|you,pro:refl|yourself,$0),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.and(aux|can(v|get(pro|you,pro:refl|yourself,$0),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: you watch your head .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
Sem:  lambda $0_{ev}.and(aux|will(v|hold(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|off($0))
example_end

Sent: you do it again .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
Sem:  lambda $0_{ev}.and(aux|will(v|hold(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|off($0))
Sem:  lambda $0_{ev}.and(v|want(pro|you,lambda $1_{e}.n|lunch($1),$0),adv:tem|then($0))
example_end

Sent: we 'll hold off lunch .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
Sem:  lambda $0_{ev}.and(aux|will(v|hold(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|off($0))
Sem:  lambda $0_{ev}.and(v|want(pro|you,lambda $1_{e}.n|lunch($1),$0),adv:tem|then($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bib-DIM($1)),$0)
example_end

Sent: you want lunch then .
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),adv|again($0))
Sem:  lambda $0_{ev}.and(aux|will(v|hold(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|off($0))
Sem:  lambda $0_{ev}.and(v|want(pro|you,lambda $1_{e}.n|lunch($1),$0),adv:tem|then($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bib-DIM($1)),$0)
Sem:  pro|me
example_end

Sent: your bibbie ?
Sem:  lambda $0_{ev}.and(aux|will(v|hold(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|off($0))
Sem:  lambda $0_{ev}.and(v|want(pro|you,lambda $1_{e}.n|lunch($1),$0),adv:tem|then($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bib-DIM($1)),$0)
Sem:  pro|me
Sem:  lambda $0_{e}.n|lunch($0)
example_end

Sent: pardon me .
Sem:  lambda $0_{ev}.and(v|want(pro|you,lambda $1_{e}.n|lunch($1),$0),adv:tem|then($0))
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bib-DIM($1)),$0)
Sem:  pro|me
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
example_end

Sent: lunch .
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|bib-DIM($1)),$0)
Sem:  pro|me
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(n:prop|Mommy,det|a($1,n|sandwich($1)),$0),$0)
example_end

Sent: that 's a cheese sandwich .
Sem:  pro|me
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(n:prop|Mommy,det|a($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
example_end

Sent: Mommy 'll have a sandwich too .
Sem:  lambda $0_{e}.n|lunch($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(n:prop|Mommy,det|a($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv|apart($0))
example_end

Sent: peanutbutter ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(n|cheese($1),n|sandwich($1))),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(n:prop|Mommy,det|a($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv|apart($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|finger($1)),$0)
example_end

Sent: first take it apart .
Sem:  lambda $0_{ev}.aux|will(v|have(n:prop|Mommy,det|a($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv|apart($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  adj|hot(pro|it)
example_end

Sent: that 's your finger .
Sem:  lambda $0_{e}.n|+n|peanut+n|butter($0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv|apart($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
example_end

Sent: it 's hot .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),adv|apart($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.not(v|eat(pro|you,$0),$0)
example_end

Sent: you 're dancing .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.not(v|eat(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
example_end

Sent: not while you eat .
Sem:  adj|hot(pro|it)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.not(v|eat(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|sandwich($1)),$0),$0)
example_end

Sent: you do it down on the floor .
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.not(v|eat(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
example_end

Sent: is that your sandwich ?
Sem:  lambda $0_{ev}.not(v|eat(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|sandwich($1)),$0)
example_end

Sent: what are you eating ?
Sem:  lambda $0_{ev}.and(v|do(pro|you,pro|it,$0),prep|on(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|sandwich($1)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|turn(pro|you,$0),$0),adv:loc|around($0)),$0)
example_end

Sent: your sandwich ?
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro:poss:det|your($1,n|sandwich($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|sandwich($1)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|turn(pro|you,$0),$0),adv:loc|around($0)),$0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
example_end

Sent: would you turn around ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|eat-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|sandwich($1)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|turn(pro|you,$0),$0),adv:loc|around($0)),$0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: turn around in your chair .
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|sandwich($1)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|turn(pro|you,$0),$0),adv:loc|around($0)),$0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.Q(and(aux|will&COND(v|turn(pro|you,$0),$0),adv:loc|around($0)),$0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|around($0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),prep|in(pro:poss:det|your($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|around($0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
example_end

Sent: around .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|around($0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(det|the($1,n|baby($1)),$0),$0),adv:loc|up($0))
example_end

Sent: turn around .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|around($0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(det|the($1,n|baby($1)),$0),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
example_end

Sent: the baby 's eating up there .
Sem:  lambda $0_{ev}.adv:loc|around($0)
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(det|the($1,n|baby($1)),$0),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|bib-DIM($1)),$0),adv|on($0))
example_end

Sent: she 's eating at a table .
Sem:  lambda $0_{ev}.and(v|turn(pro|you,$0),adv:loc|around($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(det|the($1,n|baby($1)),$0),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|bib-DIM($1)),$0),adv|on($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|bib-DIM($1)),$0)
example_end

Sent: she has a bibbie on .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(det|the($1,n|baby($1)),$0),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|bib-DIM($1)),$0),adv|on($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|bib-DIM($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
example_end

Sent: Eve has a bibbie .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|bib-DIM($1)),$0),adv|on($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|bib-DIM($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: she 's eating at a table .
Sem:  lambda $0_{ev}.and(v|have&3S(pro|she,det|a($1,n|bib-DIM($1)),$0),adv|on($0))
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|bib-DIM($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drink(pro|you,pro:poss:det|your($1,n|eggnog($1)),$0),$0),$0)
example_end

Sent: you go .
Sem:  lambda $0_{ev}.v|have&3S(n:prop|Eve,det|a($1,n|bib-DIM($1)),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drink(pro|you,pro:poss:det|your($1,n|eggnog($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|eggnog($0)
example_end

Sent: did you drink your eggnog ?
Sem:  lambda $0_{ev}.and(aux|be&3S(part|eat-PROG(pro|she,$0),$0),prep|at(det|a($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drink(pro|you,pro:poss:det|your($1,n|eggnog($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Mommy,pro:poss:det|her($1,n|eggnog($1)),$0)
example_end

Sent: eggnog .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drink(pro|you,pro:poss:det|your($1,n|eggnog($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Mommy,pro:poss:det|her($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
example_end

Sent: Mommy had her eggnog .
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|drink(pro|you,pro:poss:det|your($1,n|eggnog($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Mommy,pro:poss:det|her($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Lady_Bump,$0)
example_end

Sent: do you like it ?
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Mommy,pro:poss:det|her($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Lady_Bump,$0)
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Mommy,qn|some($1,n|eggnog($1)),$0),adv|still($0))
example_end

Sent: you 're LadyBump .
Sem:  lambda $0_{ev}.v|have&PAST(n:prop|Mommy,pro:poss:det|her($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Lady_Bump,$0)
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Mommy,qn|some($1,n|eggnog($1)),$0),adv|still($0))
Sem:  lambda $0_{e}.n|eggnog($0)
example_end

Sent: Mommy still has some eggnog .
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Lady_Bump,$0)
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Mommy,qn|some($1,n|eggnog($1)),$0),adv|still($0))
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
example_end

Sent: eggnog .
Sem:  lambda $0_{ev}.eq(pro|you,n:prop|Lady_Bump,$0)
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Mommy,qn|some($1,n|eggnog($1)),$0),adv|still($0))
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
example_end

Sent: not yet .
Sem:  lambda $0_{ev}.and(v|have&3S(n:prop|Mommy,qn|some($1,n|eggnog($1)),$0),adv|still($0))
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(det|the($1,n|baby($1)),$0),$0),$0)
example_end

Sent: what 's the baby doing ?
Sem:  lambda $0_{e}.n|eggnog($0)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(det|the($1,n|baby($1)),$0),$0),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: the baby 's not sleeping .
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(det|the($1,n|baby($1)),$0),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|more($1,n|sandwich($1)),$0),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(det|the($2,n|baby($2)),$0,$1),$1)
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(det|the($1,n|baby($1)),$0),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|more($1,n|sandwich($1)),$0),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|much($1,n|cheese($1)),$0),adv:loc|on($0))
example_end

Sent: you don 't want any more sandwich ?
Sem:  lambda $0_{ev}.not(aux|be&3S(part|sleep-PROG(det|the($1,n|baby($1)),$0),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|more($1,n|sandwich($1)),$0),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|much($1,n|cheese($1)),$0),adv:loc|on($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: you have so much cheese on there .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|more($1,n|sandwich($1)),$0),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|much($1,n|cheese($1)),$0),adv:loc|on($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|understand(pro|I,pro|you,$0),$0),$0)
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.Q(not(aux|do(v|want(pro|you,qn|more($1,n|sandwich($1)),$0),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|much($1,n|cheese($1)),$0),adv:loc|on($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|understand(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
example_end

Sent: I can 't understand you .
Sem:  lambda $0_{ev}.and(v|have(pro|you,qn|much($1,n|cheese($1)),$0),adv:loc|on($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|understand(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(n:prop|Mommy,$0),$0)
example_end

Sent: chew it up .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|understand(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(n:prop|Mommy,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),adv|now($1))
example_end

Sent: Mommy 's gone .
Sem:  lambda $0_{ev}.not(aux|can(v|understand(pro|I,pro|you,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(n:prop|Mommy,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),adv|now($1))
Sem:  lambda $0_{ev}.Q(det|the($1,n|lady($1)),$0)
example_end

Sent: now what did you say ?
Sem:  lambda $0_{ev}.and(v|chew(pro|you,pro|it,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(n:prop|Mommy,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),adv|now($1))
Sem:  lambda $0_{ev}.Q(det|the($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.n|water($0)
example_end

Sent: the lady ?
Sem:  lambda $0_{ev}.aux|be&3S(part|go&PERF(n:prop|Mommy,$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),adv|now($1))
Sem:  lambda $0_{ev}.Q(det|the($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.n|water($0)
Sem:  lambda $0_{ev}.v|wipe(pro|you,det|the($1,n|finger-PL($1)),$0)
example_end

Sent: water .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|say(pro|you,$0,$1),$1),adv|now($1))
Sem:  lambda $0_{ev}.Q(det|the($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.n|water($0)
Sem:  lambda $0_{ev}.v|wipe(pro|you,det|the($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
example_end

Sent: wipe the fingers .
Sem:  lambda $0_{ev}.Q(det|the($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.n|water($0)
Sem:  lambda $0_{ev}.v|wipe(pro|you,det|the($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
example_end

Sent: wait .
Sem:  lambda $0_{e}.n|water($0)
Sem:  lambda $0_{ev}.v|wipe(pro|you,det|the($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(n:prop|Mommy,$0,$1),$1),prep|with(pro:poss:det|your($2,n|eggnog($2)),$1))
example_end

Sent: look here .
Sem:  lambda $0_{ev}.v|wipe(pro|you,det|the($1,n|finger-PL($1)),$0)
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(n:prop|Mommy,$0,$1),$1),prep|with(pro:poss:det|your($2,n|eggnog($2)),$1))
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,det|the($1,n|eggnog($1)),$0)
example_end

Sent: what did Mommy do with your eggnog ?
Sem:  lambda $0_{ev}.v|wait(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(n:prop|Mommy,$0,$1),$1),prep|with(pro:poss:det|your($2,n|eggnog($2)),$1))
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,det|the($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|I,det|the($1,n|eggnog($1)),$0),$0)
example_end

Sent: I spilled the eggnog .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(n:prop|Mommy,$0,$1),$1),prep|with(pro:poss:det|your($2,n|eggnog($2)),$1))
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,det|the($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|I,det|the($1,n|eggnog($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|floor($1)),$0))
example_end

Sent: I did  spill the eggnog .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(n:prop|Mommy,$0,$1),$1),prep|with(pro:poss:det|your($2,n|eggnog($2)),$1))
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,det|the($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|I,det|the($1,n|eggnog($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|job($1))),$0)
example_end

Sent: you wipe it off the floor .
Sem:  lambda $0_{ev}.v|spill-PAST(pro|I,det|the($1,n|eggnog($1)),$0)
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|I,det|the($1,n|eggnog($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|job($1))),$0)
Sem:  lambda $0_{ev}.v|tear&PAST(det|the($1,n|paper($1)),$0)
example_end

Sent: that 's a good job .
Sem:  lambda $0_{ev}.aux|do&PAST(v|spill(pro|I,det|the($1,n|eggnog($1)),$0),$0)
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|job($1))),$0)
Sem:  lambda $0_{ev}.v|tear&PAST(det|the($1,n|paper($1)),$0)
Sem:  pro:dem|that
example_end

Sent: the paper tore .
Sem:  lambda $0_{ev}.and(v|wipe(pro|you,pro|it,$0),prep|off(det|the($1,n|floor($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|job($1))),$0)
Sem:  lambda $0_{ev}.v|tear&PAST(det|the($1,n|paper($1)),$0)
Sem:  pro:dem|that
Sem:  pro:indef|somebody
example_end

Sent: that 's alright .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|job($1))),$0)
Sem:  lambda $0_{ev}.v|tear&PAST(det|the($1,n|paper($1)),$0)
Sem:  pro:dem|that
Sem:  pro:indef|somebody
Sem:  adj|busy(n:prop|Mommy)
example_end

Sent: somebody .
Sem:  lambda $0_{ev}.v|tear&PAST(det|the($1,n|paper($1)),$0)
Sem:  pro:dem|that
Sem:  pro:indef|somebody
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
example_end

Sent: Mommy 's busy .
Sem:  pro:dem|that
Sem:  pro:indef|somebody
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
example_end

Sent: you read .
Sem:  pro:indef|somebody
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
example_end

Sent: Eve 's going to read .
Sem:  adj|busy(n:prop|Mommy)
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|read&ZERO(pro|you,$0,$1)),$1)
example_end

Sent: Eve 's going to read .
Sem:  lambda $0_{ev}.v|read&ZERO(pro|you,$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|read&ZERO(pro|you,$0,$1)),$1)
Sem:  n:prop|Racketyboom
example_end

Sent: what are you going to read ?
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|read&ZERO(pro|you,$0,$1)),$1)
Sem:  n:prop|Racketyboom
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: Racketyboom .
Sem:  lambda $0_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|read&ZERO(n:prop|Eve,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|read&ZERO(pro|you,$0,$1)),$1)
Sem:  n:prop|Racketyboom
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|umbrella($0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$1),v|read&ZERO(pro|you,$0,$1)),$1)
Sem:  n:prop|Racketyboom
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|umbrella($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: umbrella .
Sem:  n:prop|Racketyboom
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|umbrella($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  pro:poss:det|your($0,n|book($0))
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|umbrella($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  pro:poss:det|your($0,n|book($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
example_end

Sent: your book .
Sem:  lambda $0_{e}.n|umbrella($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  pro:poss:det|your($0,n|book($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
example_end

Sent: shut the door .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  pro:poss:det|your($0,n|book($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|wastebasket($1)),$0),$0)
example_end

Sent: put that in the wastebasket .
Sem:  pro:poss:det|your($0,n|book($0))
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|wastebasket($1)),$0),$0)
Sem:  pro|it
example_end

Sent: is that the wastebasket ?
Sem:  lambda $0_{ev}.v|shut&ZERO(pro|you,det|the($1,n|door($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|wastebasket($1)),$0),$0)
Sem:  pro|it
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|fall(pro|you,$0)),$0)
example_end

Sent: it is
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|that,$0),prep|in(det|the($1,n|wastebasket($1)),$0))
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|wastebasket($1)),$0),$0)
Sem:  pro|it
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|fall(pro|you,$0)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|may(v|sit(pro|I,$0),$0),adv:loc|down($0)),$0)
example_end

Sent: you 're gonna fall .
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|the($1,n|wastebasket($1)),$0),$0)
Sem:  pro|it
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|fall(pro|you,$0)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|may(v|sit(pro|I,$0),$0),adv:loc|down($0)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|step(pro|you,$0),$0),adv:loc|back($0))
example_end

Sent: may I sit down ?
Sem:  pro|it
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|fall(pro|you,$0)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|may(v|sit(pro|I,$0),$0),adv:loc|down($0)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|step(pro|you,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|off(det|the($1,n|chair($1)),$0))
example_end

Sent: would you step back .
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|you,$0),v|fall(pro|you,$0)),$0)
Sem:  lambda $0_{ev}.Q(and(aux|may(v|sit(pro|I,$0),$0),adv:loc|down($0)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|step(pro|you,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|off(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|breakfast($1),$0),prep|in(det|the($2,n|morning($2)),$0))
example_end

Sent: come on off the chair .
Sem:  lambda $0_{ev}.Q(and(aux|may(v|sit(pro|I,$0),$0),adv:loc|down($0)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|step(pro|you,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|off(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|breakfast($1),$0),prep|in(det|the($2,n|morning($2)),$0))
Sem:  lambda $0_{ev}.aux|might(v|give(n:prop|Papa,pro|you,det|a($1,n|cracker($1)),$0),$0)
example_end

Sent: you have breakfast in the morning .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|step(pro|you,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|off(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|breakfast($1),$0),prep|in(det|the($2,n|morning($2)),$0))
Sem:  lambda $0_{ev}.aux|might(v|give(n:prop|Papa,pro|you,det|a($1,n|cracker($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|you,$0,$1)
example_end

Sent: Papa might give you a cracker .
Sem:  lambda $0_{ev}.and(v|come(pro|you,$0),prep|off(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|breakfast($1),$0),prep|in(det|the($2,n|morning($2)),$0))
Sem:  lambda $0_{ev}.aux|might(v|give(n:prop|Papa,pro|you,det|a($1,n|cracker($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|you,$0,$1)
Sem:  adj|happy(pro|you)
example_end

Sent: had what ?
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|breakfast($1),$0),prep|in(det|the($2,n|morning($2)),$0))
Sem:  lambda $0_{ev}.aux|might(v|give(n:prop|Papa,pro|you,det|a($1,n|cracker($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|you,$0,$1)
Sem:  adj|happy(pro|you)
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,lambda $1_{e}.n|coffee($1),$0),$0),$0)
example_end

Sent: you 're happy .
Sem:  lambda $0_{ev}.aux|might(v|give(n:prop|Papa,pro|you,det|a($1,n|cracker($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|you,$0,$1)
Sem:  adj|happy(pro|you)
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|my($1,n|cracker-PL($1)),$0)
example_end

Sent: may I have coffee ?
Sem:  lambda $0_{e}.lambda $1_{ev}.v|have&PAST(pro|you,$0,$1)
Sem:  adj|happy(pro|you)
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|my($1,n|cracker-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro:poss:det|your($1,n|cracker-PL($1)),$0),$0),$0)
example_end

Sent: those are my crackers .
Sem:  adj|happy(pro|you)
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|my($1,n|cracker-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro:poss:det|your($1,n|cracker-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
example_end

Sent: did you eat your crackers ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,lambda $1_{e}.n|coffee($1),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|my($1,n|cracker-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro:poss:det|your($1,n|cracker-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
example_end

Sent: I don 't want it .
Sem:  lambda $0_{ev}.eq(pro:dem|those,pro:poss:det|my($1,n|cracker-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro:poss:det|your($1,n|cracker-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro|it,$0),$0)
example_end

Sent: what do you want ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|eat(pro|you,pro:poss:det|your($1,n|cracker-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|empty-PROG(n:prop|Mommy,det|the($1,n|garbage($1)),$0),$0)
example_end

Sent: is that it ?
Sem:  lambda $0_{ev}.not(aux|do(v|want(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|empty-PROG(n:prop|Mommy,det|the($1,n|garbage($1)),$0),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: Mommy is emptying the garbage .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|want(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|empty-PROG(n:prop|Mommy,det|the($1,n|garbage($1)),$0),$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  pro:poss:det|your($0,n|eggnog($0))
example_end


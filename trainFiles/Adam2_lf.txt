Sent: whose suitcase is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|suitcase(pro:dem|that,$0))
example_end

Sent: that 's his name .
Sem: lambda $0_{ev}.det:poss|his(pro:dem|that,n|name(pro:dem|that,$0))
example_end

Sent: what does it say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|say(pro:per|it,$1,$0),$0)
example_end

Sent: whose tractor is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|tractor(pro:dem|that,$0))
example_end

Sent: put the ball where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: tape recorder ?
Sem: lambda $0_{e}.Q(and_comp(n|tape($0),n|record-dv($0)))
example_end

Sent: no you can 't put the ball on the tape recorder .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|put-zero(pro:per|you,det:art|the($1,n|ball($1)),$0),prep|on(det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$0)),$0),$0),co|no($0))
example_end

Sent: what did the ball hit ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|hit-zero(det:art|the($1,n|ball($1)),$2,$0),$0)
example_end

Sent: oh hit Mommy 's rug ?
Sem: lambda $0_{ev}.Q(and(n|hit(you,n:prop|mommy's($1,n|rug($1)),$0),co|oh($0)))
example_end

Sent: where did it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: is it under the chair ?
Sem: lambda $0_{ev}.Q(prep|under(det:art|the($1,n|chair($1)),pro:per|it,$0))
example_end

Sent: see you later again ?
Sem: lambda $0_{ev}.Q(and(and(v|see(you,pro:per|you,$0),adv|later($0)),adv|again($0)))
example_end

Sent: Adam whose ball is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|ball(pro:dem|that,$0))
example_end

Sent: no you can 't sit on my book .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|sit(pro:per|you,$0),prep|on(det:poss|my($1,n|book($1)),$0)),$0),$0),co|no($0))
example_end

Sent: what kind is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|kind(pro:dem|that,$0))
example_end

Sent: this is a diesel locomotive .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,and_comp(n|diesel(pro:dem|this,$0),n|locomotive(pro:dem|this,$0)))
example_end

Sent: can you say that ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: baggage car ?
Sem: lambda $0_{e}.Q(and_comp(n|baggage($0),n|car($0)))
example_end

Sent: streamlined coach .
Sem: lambda $0_{e}.and_comp(part|streamline-pastp($0),n|coach($0))
example_end

Sent: sleeping car .
Sem: lambda $0_{e}.and_comp(part|sleep-presp($0),n|car($0))
example_end

Sent: dining car .
Sem: lambda $0_{e}.and_comp(part|dine-presp($0),n|car($0))
example_end

Sent: modern steam locomotive .
Sem: lambda $0_{e}.and_comp(n|steam($0),and(adj|modern($0),n|locomotive($0)))
example_end

Sent: electric locomotive .
Sem: lambda $0_{e}.and_comp(adj|electric($0),n|locomotive($0))
example_end

Sent: rotary snow plow .
Sem: lambda $0_{e}.and_comp(and_comp(adj|rotary($0),n|snow($0)),n|plow($0))
example_end

Sent: flat car .
Sem: lambda $0_{e}.and_comp(adj|flat($0),n|car($0))
example_end

Sent: mail car .
Sem: lambda $0_{e}.and_comp(n|mail($0),n|car($0))
example_end

Sent: tank car .
Sem: lambda $0_{e}.and_comp(n|tank($0),n|car($0))
example_end

Sent: box car .
Sem: lambda $0_{e}.and_comp(n|box($0),n|car($0))
example_end

Sent: do you know what kind this is ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|know(pro:per|you,lambda $1_{ev}.$2(pro:dem|this,n|kind(pro:dem|this,$1)),$0),$0)
example_end

Sent: yes there 's a man .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|man($1)),$0),co|yes($0))
example_end

Sent: put the baby where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|baby($1)),$0),$2($0))
example_end

Sent: where is the baby ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|baby($1)),$0),$2($0))
example_end

Sent: where is she ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:sub|she,$0),$1($0))
example_end

Sent: bed yes .
Sem: lambda $0_{ev}.and(n|bed($0),co|yes($0))
example_end

Sent: this is the sleeping car .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and_comp(part|sleep-presp(pro:dem|this,$0),n|car(pro:dem|this,$0)))
example_end

Sent: this is a box car .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,and_comp(n|box(pro:dem|this,$0),n|car(pro:dem|this,$0)))
example_end

Sent: know what kind that is ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|know(you,lambda $1_{ev}.$2(pro:rel|that,n|kind(pro:rel|that,$1)),$0)
example_end

Sent: do you know what that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: you don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:per|you,$0),$0),$0)
example_end

Sent: that 's the mail car .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and_comp(n|mail(pro:dem|that,$0),n|car(pro:dem|that,$0)))
example_end

Sent: stop car .
Sem: lambda $0_{e}.and_comp(n|stop($0),n|car($0))
example_end

Sent: and the last car on a train is called the what ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-3s(part|call-pastp(det:art|the($1,att(and(adj|last($1),n|car($1)),prep|on(det:art|a($2,n|train($2))))),$3,$0),$0)
example_end

Sent: it 's called the caboose .
Sem: lambda $0_{ev}.aux|~be(part|call-pastp(pro:per|it,det:art|the($1,n|caboose($1)),$0),$0)
example_end

Sent: yes that does look like a broom doesn 't it .
Sem: lambda $0_{ev}.and(and(v|do-3s(and(cop|look(pro:rel|that,$0),conj|like(det:art|a($1,n|broom($1)),$0)),$0),not(mod|do(pro:per|it,$0),$0)),co|yes($0))
example_end

Sent: whose is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: fix bike ?
Sem: lambda $0_{ev}.Q(v|fix(you,lambda $1_{e}.n|bike($1),$0))
example_end

Sent: what do you want to take off ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|take($2,$1),adv|off($1)),$0),$0)
example_end

Sent: did you write it already ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|write(pro:per|you,pro:per|it,$0),adv|already($0)),$0))
example_end

Sent: careful don 't hit Ursula 's feet with the tow truck .
Sem: lambda $0_{ev}.and(not(mod|do(and(n|hit(you,n:prop|ursula's($1,n|foot-pl($1)),$0),prep|with(det:art|the($2,and_comp(n|tow($2),n|truck($2))),$0)),$0),$0),co|careful($0))
example_end

Sent: you hit your knee ?
Sem: lambda $0_{ev}.Q(v|hit-zero(pro:per|you,det:poss|your($1,n|knee($1)),$0))
example_end

Sent: the tow truck hit your knee ?
Sem: lambda $0_{ev}.Q(v|hit-zero(det:art|the($1,and_comp(n|tow($1),n|truck($1))),det:poss|your($2,n|knee($2)),$0))
example_end

Sent: yes that is Donald Duck .
Sem: lambda $0_{ev}.and(n:prop|duck_donald(pro:rel|that,$0),co|yes($0))
example_end

Sent: that 's not Pinnochio .
Sem: lambda $0_{ev}.not(n:prop|pinnochio(pro:dem|that,$0),$0)
example_end

Sent: those are chipmunks and Mickey_Mouse .
Sem: lambda $0_{ev}.coord|and(n|chipmunk-pl(pro:dem|those,$0),n:prop|mickey_mouse(pro:dem|those,$0))
example_end

Sent: put your pajamas on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:poss|your($1,n|pajamas($1)),$0),adv|on($0)))
example_end

Sent: put pajamas on and we can ride the car .
Sem: lambda $0_{ev}.coord|and(mod|can(v|ride(pro:sub|we,det:art|the($1,n|car($1)),$0),$0),and(v|put-zero(you,lambda $2_{e}.n|pajamas($2),$0),adv|on($0)))
example_end

Sent: Daddy 's racket ?
Sem: lambda $0_{e}.Q(n:prop|daddy's($1,n|racket($1),$0))
example_end

Sent: Adam whose racket is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|racket(pro:dem|that,$0))
example_end

Sent: where did your racket go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:poss|your($1,n|racket($1)),$0),$2($0)),$0)
example_end

Sent: yes Daddy 's racket .
Sem: lambda $0_{ev}.and(n:prop|daddy's($1,n|racket($1),$0),co|yes($0))
example_end

Sent: whose racket is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|racket(pro:dem|that,$0))
example_end

Sent: whose brief case is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,n|case_brief(pro:dem|this,$0))
example_end

Sent: get off her briefcase honey .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|her($1,n|briefcase($1)),$0),prep|off($0))
example_end

Sent: get up .
Sem: lambda $0_{ev}.and(v|get(you,$0),adv|up($0))
example_end

Sent: come on .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|on($0))
example_end

Sent: no you can 't sit on his either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|sit(pro:per|you,$0),prep|on(det:poss|his,$0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: where 's your foot ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|foot($1)),$0),$2($0))
example_end

Sent: where 's the other one ?
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0),$3($0))
example_end

Sent: oh did you find it ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|find(pro:per|you,pro:per|it,$0),$0),co|oh($0)))
example_end

Sent: how many do you have now ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,lambda $1_{e}.$2(qn|many($1)),$0),adv|now($0)),$0)
example_end

Sent: two feet .
Sem: lambda $0_{e}.det:num|two(n|foot-pl($0))
example_end

Sent: how many does Mr Cromer have ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(v|have(n:prop|cromer_mr,lambda $1_{e}.$2(qn|many($1)),$0),$0)
example_end

Sent: oh that 's the knee ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,n|knee(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: do you have elbow ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.n|elbow($1),$0),$0))
example_end

Sent: what 's an elbow ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|elbow($2)),$0)
example_end

Sent: oh it 's right on your arm .
Sem: lambda $0_{ev}.and(adv|right(prep|on(det:poss|your($1,n|arm($1)),pro:per|it,$0)),co|oh($0))
example_end

Sent: it 's all squashed .
Sem: lambda $0_{ev}.adv|all(part|squash-pastp(pro:per|it,$0))
example_end

Sent: all squashed .
Sem: lambda $0_{e}.post|all(part|squash-pastp($0))
example_end

Sent: you 're stepping on her feet .
Sem: lambda $0_{ev}.aux|~be(and(n:gerund|step-presp(pro:per|you,$0),prep|on(det:poss|her($1,n|foot-pl($1)),$0)),$0)
example_end

Sent: where are you sitting ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|sit-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: Joshua 's chair or did you say Joshua 's shirt ?
Sem: lambda $0_{ev}.Q(v|do-past(v|say(pro:per|you,n:prop|joshua's($1,n|shirt($1)),$0),$0))
example_end

Sent: you 're picking the dirt up with your bulldozer ?
Sem: lambda $0_{ev}.Q(aux|~be(and(and(part|pick-presp(pro:per|you,det:art|the($1,n|dirt($1)),$0),adv|up($0)),prep|with(det:poss|your($2,n|bulldoze-dv($2)),$0)),$0))
example_end

Sent: the big tow truck 's picking Joshua 's dirt up ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|pick-presp(det:art|the($1,and_comp(n|tow($1),and(adj|big($1),n|truck($1)))),n:prop|joshua's($2,n|dirt($2)),$0),adv|up($0)),$0))
example_end

Sent: write that ?
Sem: lambda $0_{ev}.Q(v|write(you,pro:dem|that,$0))
example_end

Sent: the tractor can 't write .
Sem: lambda $0_{ev}.not(mod|can(v|write(det:art|the($1,n|tractor($1)),$0),$0),$0)
example_end

Sent: the racket can 't write either .
Sem: lambda $0_{ev}.not(mod|can(and(v|write(det:art|the($1,n|racket($1)),$0),adv|either($0)),$0),$0)
example_end

Sent: Adam is sitting down .
Sem: lambda $0_{ev}.aux|be-3s(and(part|sit-presp(n:prop|adam,$0),adv|down($0)),$0)
example_end

Sent: pick the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|dirt($1)),$0),adv|up($0)))
example_end

Sent: pick the roadgrader up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|roadgrader($1)),$0),adv|up($0)))
example_end

Sent: no you don 't have a nail in there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|nail($1)),$0),prep|in(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: he 's just sharp .
Sem: lambda $0_{ev}.adv|just(adj|sharp(pro:sub|he,$0))
example_end

Sent: Robie 's nail ?
Sem: lambda $0_{e}.Q(n:prop|robie's($1,n|nail($1),$0))
example_end

Sent: pick the glove up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,v|glove($1)),$0),adv|up($0)))
example_end

Sent: pick the paper up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|paper($1)),$0),adv|up($0)))
example_end

Sent: oh you can see the rug now ?
Sem: lambda $0_{ev}.Q(and(mod|can(and(v|see(pro:per|you,det:art|the($1,n|rug($1)),$0),adv|now($0)),$0),co|oh($0)))
example_end

Sent: what color is the rug ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1($2,n|color($2)),n|rug($1($2,n|color($2)),$0))
example_end

Sent: what color is in the rug ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1($2,n|color($2)),$0),prep|in(det:art|the($3,n|rug($3)),$0))
example_end

Sent: what other color is in it ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(lambda $1_{e}.and($2($3,qn|other($3),$1),n|color($1)),$0),prep|in(pro:per|it,$0))
example_end

Sent: green and what ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|green($1),pro:int|what,$0))
example_end

Sent: well what did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do-past(v|hit-zero(pro:per|you,$1,$0),$0),co|well($0))
example_end

Sent: you hit your shoulder .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,det:poss|your($1,n|shoulder($1)),$0)
example_end

Sent: on the table ?
Sem: Q(prep|on(det:art|the($0,n|table($0))))
example_end

Sent: you don 't have a mosquito bite back there .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,and_comp(n|mosquito($1),n|bite($1))),$0),adv|back(adv|there($0))),$0),$0)
example_end

Sent: don 't hit your head on the bicycle .
Sem: lambda $0_{ev}.not(mod|do(and(part|hit-pastp(you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|cycle($2)),$0)),$0),$0)
example_end

Sent: yes that is a man .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,n|man(pro:rel|that,$0)),co|yes($0))
example_end

Sent: yes he 's pushing the dirt up .
Sem: lambda $0_{ev}.and(aux|~be(and(part|push-presp(pro:sub|he,det:art|the($1,n|dirt($1)),$0),adv|up($0)),$0),co|yes($0))
example_end

Sent: where did what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|go($1,$0),$2($0)),$0)
example_end

Sent: until he met how many men ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|meet-past(pro:sub|he,lambda $1_{e}.and($2(qn|many($1)),n|man-pl($1)),$0)
example_end

Sent: three men .
Sem: lambda $0_{e}.det:num|three(n|man-pl($0))
example_end

Sent: that 's one of the men .
Sem: lambda $0_{ev}.att(pro:indef|one(pro:dem|that,$0),prep|of(det:art|the($1,n|man-pl($1))))
example_end

Sent: come on pal .
Sem: lambda $0_{ev}.v|come_on(you,$0)
example_end

Sent: no don 't push Mommy 's book .
Sem: lambda $0_{ev}.and(not(mod|do(n|push(you,n:prop|mommy's($1,n|book($1)),$0),$0),$0),co|no($0))
example_end

Sent: no it isn 't yours .
Sem: lambda $0_{ev}.and(not(pro:poss|yours(pro:per|it,$0),$0),co|no($0))
example_end

Sent: your books are over in your basket .
Sem: lambda $0_{ev}.and(aux|be-pres(det:poss|your($1,n|book-pl($1)),$0),adv|over(prep|in(det:poss|your($2,n|basket($2)),$0)))
example_end

Sent: is that Doctor Dan ?
Sem: lambda $0_{ev}.Q(n:prop|dan_doctor(pro:rel|that,$0))
example_end

Sent: is it ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|it($0,$1)
example_end

Sent: I didn 't think it was .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.cop|be-past(pro:per|it,$1),$0),$0),$0)
example_end

Sent: why do you call that spaghetti ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|call(pro:per|you,pro:dem|that,$0),$1($0)),$0),lambda $2_{e}.n|spaghetti($2))
example_end

Sent: or is that what you 're saying ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:dem|that($0,$1)
example_end

Sent: what about Daddy ?
Sem: att(pro:int|what,prep|about(n:prop|daddy))
example_end

Sent: no that 's Mr Cromer 's suitcase .
Sem: lambda $0_{ev}.and(n:prop|cromer_mr's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),co|no($0))
example_end

Sent: no whose suitcase is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,n|suitcase(pro:dem|that,$0)),qn|no($0))
example_end

Sent: to whom does that belong ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|belong(det:dem|that,$1,$0),$0)
example_end

Sent: yes that 's Daddy 's suitcase .
Sem: lambda $0_{ev}.and(n:prop|daddy's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),co|yes($0))
example_end

Sent: it 's not a pocketbook .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|pocket+book(pro:per|it,$0)),$0)
example_end

Sent: no don 't sit on that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|sit(you,$0),prep|on(pro:dem|that,$0)),$0),$0),co|no($0))
example_end

Sent: what kind of car do you have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|car($3)))),$0),$0)
example_end

Sent: put Miss Munroe 's tow truck ?
Sem: lambda $0_{ev}.Q(v|put-zero(you,n:prop|munroe_miss's($1,and_comp(n|tow($1),n|truck($1))),$0))
example_end

Sent: is that your doggie ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,n|dog-dim(pro:rel|that,$0)))
example_end

Sent: Texaco star ?
Sem: lambda $0_{e}.Q(and_comp(n:prop|texaco($0),n|star($0)))
example_end

Sent: that 's not a star .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|star(pro:dem|that,$0)),$0)
example_end

Sent: what about Cliffy ?
Sem: att(pro:int|what,prep|about(n:prop|cliffy))
example_end

Sent: two boots ?
Sem: lambda $0_{e}.Q(det:num|two(n|boot-pl($0)))
example_end

Sent: it doesn 't belong there .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:per|it,$0),adv|there($0)),$0),$0)
example_end

Sent: Adam 's doggie ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|dog-dim($1),$0))
example_end

Sent: take his nose off ?
Sem: lambda $0_{ev}.Q(and(v|take(you,det:poss|his($1,n|nose($1)),$0),adv|off($0)))
example_end

Sent: no you can 't take his nose off .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: how will he smell anything .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|smell(pro:sub|he,pro:indef|anything,$0),$1($0)),$0)
example_end

Sent: no you can 't take his nose off either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: you can 't take his nose off .
Sem: lambda $0_{ev}.not(mod|can(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),$0),$0)
example_end

Sent: can you take your nose off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|take(pro:per|you,det:poss|your($1,n|nose($1)),$0),adv|off($0)),$0))
example_end

Sent: did you take it off ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: no I don 't think those two men can .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(pro:dem|those($2,det:num|two(n|man-pl($2))),$1),$0),$0),$0),co|no($0))
example_end

Sent: doggie take nose off ?
Sem: lambda $0_{ev}.Q(and(v|take(lambda $1_{e}.n|dog-dim($1),lambda $2_{e}.n|nose($2),$0),adv|off($0)))
example_end

Sent: no you can 't take the nose off .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,det:art|the($1,n|nose($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: Adam who take nose off ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|take($1,lambda $2_{e}.n|nose($2),$0),adv|off($0))
example_end

Sent: take nose off Donald Duck ?
Sem: lambda $0_{ev}.Q(and(and(v|take(you,lambda $1_{e}.n|nose($1),$0),prep|off($0)),n:prop|duck_donald($0)))
example_end

Sent: take nose off what ?
Sem: lambda $0_{ev}.and(v|take(you,lambda $1_{e}.n|nose($1),$0),prep|off($0))
example_end

Sent: no you can 't take the nose off the bird either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|take(pro:per|you,det:art|the($1,n|nose($1)),$0),prep|off(det:art|the($2,n|bird($2)),$0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: does the bird have a nose ?
Sem: lambda $0_{ev}.Q(v|do-3s(v|have(det:art|the($1,n|bird($1)),det:art|a($2,n|nose($2)),$0),$0))
example_end

Sent: that is a man .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|man(pro:rel|that,$0))
example_end

Sent: that 's a piggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|pig-dim(pro:dem|that,$0))
example_end

Sent: that 's a little baby doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(and(n|dog-dim(pro:dem|that,$0),adj|little(pro:dem|that,$0)),n|baby(pro:dem|that,$0)))
example_end

Sent: the baby doggie is a puppy .
Sem: lambda $0_{ev}.det:art|a(det:art|the($1,and(n|baby($1),n|dog-dim($1))),n|puppy(det:art|the($1,and(n|baby($1),n|dog-dim($1))),$0))
example_end

Sent: it 's not the same dog as Pepper .
Sem: lambda $0_{ev}.not(det:art|the(pro:per|it,att(and(n|dog(pro:per|it,$0),adj|same(pro:per|it,$0)),conj|as(n:prop|pepper))),$0)
example_end

Sent: record going to work ?
Sem: lambda $0_{ev}.Q(part|go-presp(lambda $1_{e}.n|record($1),lambda $2_{ev}.v|work(lambda $3_{e}.n|record($3),$2),$0))
example_end

Sent: it hasn 't finished .
Sem: lambda $0_{ev}.not(aux|have(part|finish-pastp(pro:per|it,$0),$0),$0)
example_end

Sent: Adam sit down .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: where are you going to sit ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|sit(pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: it doesn 't have nose .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|it,lambda $1_{e}.n|nose($1),$0),$0),$0)
example_end

Sent: where is the nose on the car ?
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,att(n|nose($1),prep|on(det:art|the($2,n|car($2))))),$0),$3($0))
example_end

Sent: that 's a train .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|train(pro:dem|that,$0))
example_end

Sent: the car is on the train .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|car($1)),$0),prep|on(det:art|the($2,n|train($2)),$0))
example_end

Sent: car train .
Sem: lambda $0_{e}.and_comp(n|car($0),n|train($0))
example_end

Sent: do you have anything in your pocket ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,pro:indef|anything,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)),$0))
example_end

Sent: do you have a penny ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|penny($1)),$0),$0))
example_end

Sent: that 's the rug .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|rug(pro:dem|that,$0))
example_end

Sent: whose rug is it Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|rug(pro:per|it,$0))
example_end

Sent: careful don 't step on his foot .
Sem: lambda $0_{ev}.and(not(mod|do(v|step(you,det:poss|his($1,n|foot($1)),$0),$0),$0),adj|care-dn($0))
example_end

Sent: how does it work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|work(pro:per|it,$0),$1($0)),$0)
example_end

Sent: that 's part of the broom .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|broom($1))))
example_end

Sent: what is that part of ?
Sem: lambda $1_{e}.lambda $0_{ev}.att($1(pro:dem|that,$0),prep|of(lambda $2_{e}.n|part($2)))
example_end

Sent: why don 't you put it in the trash ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|in(det:art|the($2,n|trash($2)),$0)),$0),$0)
example_end

Sent: what else is on there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s($1,$0),prep|on(adv|there($0)))
example_end

Sent: beans and what ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|bean-pl($1),pro:int|what,$0))
example_end

Sent: those aren 't beans they 're peas .
Sem: lambda $0_{ev}.not(and(n|bean-pl(pro:dem|those,$0),n|pea-pl(pro:sub|they,$0)),$0)
example_end

Sent: may I see them ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,pro:obj|them,$0),$0))
example_end

Sent: what did Humpty_Dumpty do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(n:prop|humpty_dumpty,$1,$0),$0)
example_end

Sent: he sat on the wall .
Sem: lambda $0_{ev}.and(v|sit-past(pro:sub|he,$0),prep|on(det:art|the($1,n|wall($1)),$0))
example_end

Sent: Ricky will fix that ?
Sem: lambda $0_{ev}.Q(mod|will(v|fix(n:prop|ricky,pro:dem|that,$0),$0))
example_end

Sent: oh Lilly will fix it .
Sem: lambda $0_{ev}.and(mod|will(v|fix(n:prop|lilly,pro:per|it,$0),$0),co|oh($0))
example_end

Sent: oh Jesus loves me ?
Sem: lambda $0_{ev}.Q(and(v|love-3s(n:prop|jesus,pro:obj|me,$0),co|oh($0)))
example_end

Sent: at church .
Sem: prep|at(lambda $0_{e}.n|church($0))
example_end

Sent: Jesus love me .
Sem: lambda $0_{ev}.v|love(n:prop|jesus,pro:obj|me,$0)
example_end

Sent: you want to go to church ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),prep|to(lambda $2_{e}.n|church($2),$1)),$0))
example_end

Sent: you don 't go to church today .
Sem: lambda $0_{ev}.not(mod|do(and(v|go(pro:per|you,lambda $1_{e}.n|church($1),$0),adv:tem|today($0)),$0),$0)
example_end

Sent: Adam 's driving ?
Sem: lambda $0_{ev}.Q(aux|~be(part|drive-presp(n:prop|adam,$0),$0))
example_end

Sent: where did Daddy go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|daddy,$0),$1($0)),$0)
example_end

Sent: careful Adam !
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: yes that is Daddy .
Sem: lambda $0_{ev}.and(n:prop|daddy(pro:rel|that,$0),co|yes($0))
example_end

Sent: may I see it ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: no leave that back there .
Sem: lambda $0_{ev}.and(and(n|leave(you,pro:rel|that,$0),adv|back(adv|there($0))),qn|no($0))
example_end

Sent: that 's Ursula 's tape recorder .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)))
example_end

Sent: Mommy is Ursula 's Daddy ?
Sem: lambda $0_{ev}.Q(n:prop|ursula's'(n:prop|mommy,n:prop|daddy(n:prop|mommy,$0)))
example_end

Sent: what does Daddy do at school ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|do(n:prop|daddy,$1,$0),prep|at(lambda $2_{e}.n|school($2),$0)),$0)
example_end

Sent: is the busy bulldozer at school ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),prep|at(lambda $2_{e}.n|school($2),$0)))
example_end

Sent: he can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(pro:sub|he,$0),$0),$0)
example_end

Sent: no he can 't march .
Sem: lambda $0_{ev}.and(not(mod|can(v|march(pro:sub|he,$0),$0),$0),co|no($0))
example_end

Sent: yes Mr Green_jeans can march .
Sem: lambda $0_{ev}.and(mod|can(v|march(n:prop|green_jeans_mr,$0),$0),co|yes($0))
example_end

Sent: Bambi can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(n:prop|bambi,$0),$0),$0)
example_end

Sent: oh yes the bear can march .
Sem: lambda $0_{ev}.and(mod|can(v|march(det:art|the($1,n|bear($1)),$0),$0),co|yes_oh($0))
example_end

Sent: where 's your bumble bee ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|bee_bumble($1)),$0),$2($0))
example_end

Sent: get the bumble bee alright .
Sem: lambda $0_{ev}.and(v|get(you,det:art|the($1,n|bee_bumble($1)),$0),adj|alright($0))
example_end

Sent: do you think he can drive with that there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|can(and(v|drive(pro:sub|he,$1),adv|there(prep|with(det:dem|that,$1))),$1),$0),$0))
example_end

Sent: that 's your name .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|name(pro:dem|that,$0))
example_end

Sent: you can take it off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: I doubt it .
Sem: lambda $0_{ev}.v|doubt(pro:sub|i,pro:per|it,$0)
example_end

Sent: put him to work ?
Sem: lambda $0_{ev}.Q(v|put-zero(you,lambda $1_{ev}.v|work(pro:obj|him,$1),$0))
example_end

Sent: oh put him on the rug .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|him,$0),prep|on(det:art|the($1,n|rug($1)),$0)),co|oh($0))
example_end

Sent: that 's Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:dem|that,$0))
example_end

Sent: do you see him ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,pro:obj|him,$0),$0))
example_end

Sent: do you see Ursula too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|see(pro:per|you,n:prop|ursula,$0),post|too($0)),$0))
example_end

Sent: who else do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: do you see your truck too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|see(pro:per|you,det:poss|your($1,n|truck($1)),$0),adv|too($0)),$0))
example_end

Sent: you don 't mean ball .
Sem: lambda $0_{ev}.not(mod|do(adj|mean(pro:per|you,lambda $1_{e}.n|ball($1),$0),$0),$0)
example_end

Sent: that 's a bat .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|bat(pro:dem|that,$0))
example_end

Sent: where 's the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: careful don 't spill it .
Sem: lambda $0_{ev}.and(not(mod|do(v|spill(you,pro:per|it,$0),$0),$0),co|careful($0))
example_end

Sent: don 't spill the water on the rug .
Sem: lambda $0_{ev}.not(mod|do(and(v|spill(you,det:art|the($1,n|water($1)),$0),prep|on(det:art|the($2,n|rug($2)),$0)),$0),$0)
example_end

Sent: he doesn 't want any water I don 't think .
Sem: lambda $0_{ev}.not(and(mod|do(v|want(pro:sub|he,qn|any($1,n|water($1)),$0),$0),not(mod|do(v|think(pro:sub|i,$0),$0),$0)),$0)
example_end

Sent: ask her if she 'd like some .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|she,qn|some,$0),$0),v|ask(you,pro:obj|her,$0))
example_end

Sent: ask me if I 'd like some .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|i,qn|some,$0),$0),v|ask(you,pro:obj|me,$0))
example_end

Sent: ask Mr Cromer if he 'd like some water .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|he,qn|some($1,n|water($1)),$0),$0),v|ask(you,n:prop|cromer_mr,$0))
example_end

Sent: the suitcase wants water .
Sem: lambda $0_{ev}.v|want-3s(det:art|the($1,n|suitcase($1)),lambda $2_{e}.n|water($2),$0)
example_end

Sent: that 's not your tummy .
Sem: lambda $0_{ev}.not(det:poss|your(pro:dem|that,n|tummy(pro:dem|that,$0)),$0)
example_end

Sent: how many tummies do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|tummy-pl($1)),$0),$0)
example_end

Sent: oh you 're wiping it off ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|wipe-presp(pro:per|you,pro:per|it,$0),adv|off($0)),$0),co|oh($0)))
example_end

Sent: are you the driver .
Sem: lambda $0_{ev}.det:art|the(pro:per|you,n|drive-dv(pro:per|you,$0))
example_end

Sent: how does it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: Adam go to work ?
Sem: lambda $0_{ev}.Q(and(v|go(n:prop|adam,$0),prep|to(lambda $1_{e}.n|work($1),$0)))
example_end

Sent: where does Adam work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(n|work(n:prop|adam,$0),$1($0)),$0)
example_end

Sent: oh Adam 's driving .
Sem: lambda $0_{ev}.and(aux|~be(part|drive-presp(n:prop|adam,$0),$0),co|oh($0))
example_end

Sent: who is driving ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(part|drive-presp($1,$0),$0)
example_end

Sent: Robbie 's driving too ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|drive-presp(n:prop|robbie,$0),post|too($0)),$0))
example_end

Sent: what kind of noise is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|noise($2))))
example_end

Sent: what kind of truck is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|truck($2))))
example_end

Sent: Hobo 's truck .
Sem: n:prop|hobo's($0,n|truck($0))
example_end

Sent: did you find it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: throw to Daddy ?
Sem: lambda $0_{ev}.Q(and(v|throw(you,$0),prep|to(n:prop|daddy,$0)))
example_end

Sent: Doctor Dan at the circus .
Sem: att(n:prop|dan_doctor,prep|at(det:art|the($0,n|circus($0))))
example_end

Sent: that 's a lion tamer .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|lion(pro:dem|that,$0),adj|tame-cp(pro:dem|that,$0)))
example_end

Sent: the lady of the elephant .
Sem: det:art|the($0,att(n|lady($0),prep|of(det:art|the($1,n|elephant($1)))))
example_end

Sent: that 's the doggie .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|dog-dim(pro:dem|that,$0))
example_end

Sent: yes tattooed man .
Sem: lambda $0_{ev}.and(and(part|tattoo-pastp($0),n|man($0)),co|yes($0))
example_end

Sent: they 're all falling down .
Sem: lambda $0_{ev}.aux|~be(and(and(part|fall-presp(pro:sub|they,$0),post|all($0)),adv|down($0)),$0)
example_end

Sent: see the bird gets away .
Sem: lambda $0_{ev}.and(v|get-3s_away(det:art|the($1,n|bird($1)),$0),v|see(you,$0))
example_end

Sent: first he does what ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|do-3s(pro:sub|he,$1,$0),adv|first($0))
example_end

Sent: no the doggie didn 't bite him .
Sem: lambda $0_{ev}.and(not(mod|do(v|bite(det:art|the($1,n|dog-dim($1)),pro:obj|him,$0),$0),$0),qn|no($0))
example_end

Sent: Adam doesn 't have cowboy boots like that .
Sem: lambda $0_{ev}.not(mod|do(v|have(n:prop|adam,lambda $1_{e}.att(and_comp(n|cow+boy($1),n|boot-pl($1)),prep|like(pro:dem|that)),$0),$0),$0)
example_end

Sent: do you recognize any of these pictures ?
Sem: lambda $0_{ev}.Q(mod|do(v|recognize(pro:per|you,pro:dem|these($1,n|picture-pl($1)),$0),$0))
example_end

Sent: yeah they all fall down .
Sem: lambda $0_{ev}.and(and(and(v|fall(pro:sub|they,$0),post|all($0)),adv|down($0)),co|yeah($0))
example_end

Sent: how did he get tattooed ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|get(mod|do-past(and(part|tattoo-pastp(pro:sub|he,$0),$1($0)),$0),$0)
example_end

Sent: who fell down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|fall-past($1,$0),adv|down($0))
example_end

Sent: what happened to your head ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|head($2)),$0))
example_end

Sent: what fell down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|fall-past($1,$0),adv|down($0))
example_end

Sent: when did Adam fall down ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(and(and(n|fall(n:prop|adam,$0),$1($0)),adv|down($0)),$0)
example_end

Sent: you beep beep Adam .
Sem: lambda $0_{ev}.v|beep_beep(pro:per|you,$0)
example_end

Sent: you move some of your toys ?
Sem: lambda $0_{ev}.Q(v|move(pro:per|you,att(qn|some,prep|of(det:poss|your($1,n|toy-pl($1)))),$0))
example_end

Sent: yes move your bike .
Sem: lambda $0_{ev}.and(v|move(you,det:poss|your($1,n|bike($1)),$0),co|yes($0))
example_end

Sent: where 's your racket ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|racket($1)),$0),$2($0))
example_end

Sent: you 're welcome .
Sem: lambda $0_{ev}.adj|welcome(pro:per|you,$0)
example_end

Sent: what shall I write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|write(pro:sub|i,$1,$0),$0)
example_end

Sent: what will you write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(v|write(pro:per|you,$1,$0),$0)
example_end

Sent: that 's for you .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,$0),conj|for(pro:per|you,$0))
example_end

Sent: whose book is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|book(pro:dem|that,$0))
example_end

Sent: playing the piano .
Sem: lambda $0_{ev}.part|play-presp(you,det:art|the($1,n|piano($1)),$0)
example_end

Sent: they do look like stars .
Sem: lambda $0_{ev}.mod|do(and(cop|look(pro:sub|they,$0),conj|like(lambda $1_{e}.n|star-pl($1),$0)),$0)
example_end

Sent: what 's he doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: no that 's no paper .
Sem: lambda $0_{ev}.and(not(n|paper(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: Adam didn 't write that .
Sem: lambda $0_{ev}.not(mod|do(v|write(you,pro:dem|that,$0),$0),$0)
example_end

Sent: Mr Walter did .
Sem: lambda $0_{ev}.v|do-past(n:prop|walter_mr,$0)
example_end

Sent: which one is Mr Walter ?
Sem: lambda $1_{e}.lambda $0_{ev}.n:prop|walter_mr($1($2,pro:indef|one($2)),$0)
example_end

Sent: did you read that book last time Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|read-zero(pro:per|you,pro:dem|that($1,n|book($1)),$0),and(adj|last($0),n|time($0))),$0))
example_end

Sent: what is he doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|do-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: he 's conducting .
Sem: lambda $0_{ev}.aux|~be(part|conduct-presp(pro:sub|he,$0),$0)
example_end

Sent: he 's in there .
Sem: lambda $0_{ev}.and(cop|~be(pro:sub|he,$0),prep|in(adv|there($0)))
example_end

Sent: you going to give back to Ursula now .
Sem: lambda $0_{ev}.part|go-presp(pro:per|you,lambda $1_{ev}.and(v|give(pro:per|you,$1),adv|now(adv|back(prep|to(n:prop|ursula,$1)))),$0)
example_end

Sent: put it back in the briefcase .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|back(prep|in(det:art|the($1,n|briefcase($1)),$0)))
example_end

Sent: have you met Mr Walter ?
Sem: lambda $0_{ev}.Q(aux|have(v|meet-past(pro:per|you,n:prop|walter_mr,$0),$0))
example_end

Sent: have you read this book before ?
Sem: lambda $0_{ev}.Q(aux|have(and(v|read-zero(pro:per|you,pro:dem|this($1,n|book($1)),$0),adv|before($0)),$0))
example_end

Sent: you have ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,$0))
example_end

Sent: Adam 's not funny .
Sem: lambda $0_{ev}.not(adj|fun-dn(n:prop|adam,$0),$0)
example_end

Sent: Daddy Cromer ?
Sem: lambda $0_{e}.Q(n:prop|cromer_daddy($0))
example_end

Sent: no that 's not Cromer 's Daddy .
Sem: lambda $0_{ev}.and(not(n:prop|cromer's'(pro:dem|that,n:prop|daddy(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: Adam Cromer ?
Sem: lambda $0_{e}.Q(n:prop|cromer_adam($0))
example_end

Sent: whose coat is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|coat(pro:dem|that,$0))
example_end

Sent: what are you going to do with the pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do($2,$1),prep|with(det:art|the($3,n|pencil($3)),$1)),$0),$0)
example_end

Sent: how do you know tha  your pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|know(pro:per|you,lambda $1_{ev}.det:poss|your(pro:rel|that,n|pencil(pro:rel|that,$1)),$0),$2($0)),$0)
example_end

Sent: yes it 's turned on .
Sem: lambda $0_{ev}.and(cop|~be(and(v|turn-past(pro:per|it,$0),adv|on($0)),$0),co|yes($0))
example_end

Sent: are you lying on the dog .
Sem: lambda $0_{ev}.cop|be-pres(part|lie-presp(pro:per|you,det:art|the($1,n|dog($1)),$0),$0)
example_end

Sent: what are you talking about ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|talk-presp(pro:per|you,$1,$0),$0)
example_end

Sent: you tell me what is that ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: Adam 's pencil ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|pencil($1),$0))
example_end

Sent: is that a pencil ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pencil(pro:rel|that,$0)))
example_end

Sent: you want some paper ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,qn|some($1,n|paper($1)),$0))
example_end

Sent: where did you get that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: Adam are you writing .
Sem: lambda $0_{ev}.aux|be-pres(part|write-presp(pro:per|you,$0),$0)
example_end

Sent: do you know how old you are ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.adv:int|how(adj|old(pro:per|you,$1)),$0),$0))
example_end

Sent: two boy ?
Sem: lambda $0_{e}.Q(det:num|two(n|boy($0)))
example_end

Sent: see the racket ?
Sem: lambda $0_{ev}.Q(v|see(you,det:art|the($1,n|racket($1)),$0))
example_end

Sent: oh you see that ?
Sem: lambda $0_{ev}.Q(and(v|see(pro:per|you,pro:dem|that,$0),co|oh($0)))
example_end

Sent: are those pillows .
Sem: lambda $0_{ev}.n|pillow-pl(pro:dem|those,$0)
example_end

Sent: Mommy 's pillows .
Sem: n:prop|mommy's($0,n|pillow-pl($0))
example_end

Sent: well I don 't want my pillows on the floor .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|want(pro:sub|i,det:poss|my($1,n|pillow-pl($1)),$0),prep|on(det:art|the($2,n|floor($2)),$0)),$0),$0),co|well($0))
example_end

Sent: oh they 're Adam 's pillows .
Sem: lambda $0_{ev}.and(n:prop|adam's'(pro:sub|they,n|pillow-pl(pro:sub|they,$0)),co|oh($0))
example_end

Sent: I don 't think Daddy wants his pillows on the floor either .
Sem: lambda $0_{ev}.not(mod|do(and(v|think(pro:sub|i,lambda $1_{ev}.and(v|want-3s(n:prop|daddy,det:poss|his($2,n|pillow-pl($2)),$1),prep|on(det:art|the($3,n|floor($3)),$1)),$0),adv|either($0)),$0),$0)
example_end

Sent: put together again .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,$0),adv|together($0)),adv|again($0))
example_end

Sent: are you fixing the dog .
Sem: lambda $0_{ev}.cop|be-pres(part|fix-presp(pro:per|you,det:art|the($1,n|dog($1)),$0),$0)
example_end

Sent: you want me to move my case ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|move(pro:obj|me,det:poss|my($2,n|case($2)),$1),$0))
example_end

Sent: did you ask him to move it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|ask(pro:per|you,lambda $1_{ev}.v|move(pro:obj|him,pro:per|it,$1),$0),$0))
example_end

Sent: are you pulling your dog .
Sem: lambda $0_{ev}.cop|be-pres(part|pull-presp(pro:per|you,det:poss|your($1,n|dog($1)),$0),$0)
example_end

Sent: is the doggie broken .
Sem: lambda $0_{ev}.part|break-pastp(det:art|the($1,n|dog-dim($1)),$0)
example_end

Sent: that 's no lion .
Sem: lambda $0_{ev}.not(n|lion(pro:dem|that,$0),$0)
example_end

Sent: well that 's the right way .
Sem: lambda $0_{ev}.and(det:art|the(pro:dem|that,and(n|way(pro:dem|that,$0),adj|right(pro:dem|that,$0))),co|well($0))
example_end

Sent: you can 't do that honey .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: are you writing a letter .
Sem: lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,det:art|a($1,n|letter($1)),$0),$0)
example_end

Sent: what are you Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: Adam did you pick up the pillows ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|pick_up(pro:per|you,det:art|the($1,n|pillow-pl($1)),$0),$0))
example_end

Sent: does the doggie like the pillows .
Sem: lambda $0_{ev}.mod|do-3s(prep|like(det:art|the($1,n|dog-dim($1)),det:art|the($2,n|pillow-pl($2)),$0),$0)
example_end

Sent: is that a racket .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|racket(pro:rel|that,$0))
example_end

Sent: what 's so funny ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|so(adj|fun-dn($1,$0))
example_end

Sent: did you think that was funny ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|think(pro:per|you,lambda $1_{ev}.adj|fun-dn(pro:rel|that,$1),$0),$0))
example_end

Sent: don 't ride the roadgrader up there .
Sem: lambda $0_{ev}.not(mod|do(and(v|ride(you,det:art|the($1,n|roadgrader($1)),$0),adv|up(adv|there($0))),$0),$0)
example_end

Sent: that 's right ?
Sem: lambda $0_{ev}.Q(n|right(pro:dem|that,$0))
example_end

Sent: it 's not a big hill .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,and(n|hill(pro:per|it,$0),adj|big(pro:per|it,$0))),$0)
example_end

Sent: where is your pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|pencil($1)),$0),$2($0))
example_end

Sent: I have mine .
Sem: lambda $0_{ev}.v|have(pro:sub|i,pro:poss|mine,$0)
example_end

Sent: can you read what 's on there Adam ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|read-zero($1,$0,$2)
example_end

Sent: do you want a piece ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,n|piece($1)),$0),$0))
example_end

Sent: are you writing your name .
Sem: lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,det:poss|your($1,n|name($1)),$0),$0)
example_end

Sent: doctor Dan ?
Sem: lambda $0_{e}.Q(n:prop|dan_doctor($0))
example_end

Sent: oh wash hands ?
Sem: lambda $0_{ev}.Q(and(n|wash(you,lambda $1_{e}.n|hand-pl($1),$0),co|oh($0)))
example_end

Sent: is that a boot .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|boot(pro:rel|that,$0))
example_end

Sent: why don 't you show it to Ursula ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|show(pro:per|you,pro:per|it,$0),$1($0)),prep|to(n:prop|ursula,$0)),$0),$0)
example_end

Sent: yes Donald_Duck .
Sem: lambda $0_{ev}.and(n:prop|donald_duck($0),co|yes($0))
example_end

Sent: is that a ladder .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|ladder(pro:rel|that,$0))
example_end

Sent: who is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: show it to Ursula .
Sem: lambda $0_{ev}.and(v|show(you,pro:per|it,$0),prep|to(n:prop|ursula,$0))
example_end

Sent: is that Bambi .
Sem: lambda $0_{ev}.n:prop|bambi(pro:rel|that,$0)
example_end

Sent: what did you say then Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|say(pro:per|you,$1,$0),adv:tem|then($0)),$0)
example_end

Sent: why is he like Perro ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(v|like(n:prop|perro,pro:sub|he,$0))
example_end

Sent: is there a bunny there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|bunny+rabbit($1)),$0),adv|there($0)))
example_end

Sent: wet your pants ?
Sem: lambda $0_{ev}.Q(part|wet-pastp(you,det:poss|your($1,n:pt|pants($1)),$0))
example_end

Sent: can you say you 're sorry ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,lambda $1_{ev}.adj|sorry(pro:per|you,$1),$0),$0))
example_end

Sent: where 's the kitchen ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|kitchen($1)),$0),$2($0))
example_end

Sent: is that the kitchen ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|kitchen(pro:rel|that,$0)))
example_end

Sent: Adam is that a ball .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|ball(pro:rel|that,$0))
example_end

Sent: oh take my hand out ?
Sem: lambda $0_{ev}.Q(and(and(v|take(you,co|my($1,n|hand($1)),$0),adv|out($0)),co|oh($0)))
example_end

Sent: are you as tall as Mommy ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|tall($0,$1)
example_end

Sent: get the hand out ?
Sem: lambda $0_{ev}.Q(and(v|get(you,det:art|the($1,v|hand($1)),$0),adv|out($0)))
example_end

Sent: that 's not Donald Duck .
Sem: lambda $0_{ev}.not(n:prop|duck_donald(pro:dem|that,$0),$0)
example_end

Sent: that 's an egg .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|egg(pro:dem|that,$0))
example_end

Sent: hello Chatter .
Sem: lambda $0_{ev}.and(n:prop|chatter($0),co|hello($0))
example_end

Sent: you 're eating Chatter 's what ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|eat-presp(pro:per|you,$1,$0),$0)
example_end

Sent: what did you bite ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|bite(pro:per|you,$1,$0),$0)
example_end

Sent: wipe it off .
Sem: lambda $0_{ev}.and(v|wipe(you,pro:per|it,$0),adv|off($0))
example_end

Sent: did you like it ?
Sem: lambda $0_{ev}.Q(v|do-past(prep|like(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: was it good ?
Sem: lambda $0_{ev}.Q(adj|good(pro:per|it,$0))
example_end

Sent: it doesn 't go in your mouth does it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|go(pro:per|it,det:poss|your($1,n|mouth($1)),$0),$0),$0),mod|do-3s(pro:per|it,$0)))
example_end

Sent: in whose mouth does it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|go(pro:per|it,$1($2,v|mouth($2)),$0),$0)
example_end

Sent: no not Mommy 's mouth .
Sem: lambda $0_{ev}.and(not(n:prop|mommy's($1,n|mouth($1)),$0),co|no($0))
example_end

Sent: not Adam 's mouth .
Sem: not(n:prop|adam's($0,n|mouth($0)))
example_end

Sent: bite whose mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|bite(you,$1($2,n|mouth($2)),$0)
example_end

Sent: does the tape recorder have a mouth ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(det:art|the($1,and_comp(n|tape($1),n|record-dv($1))),det:art|a($2,n|mouth($2)),$0),$0))
example_end

Sent: what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: is that hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:dem|that,$0))
example_end

Sent: Daddy 's desk ?
Sem: lambda $0_{e}.Q(n:prop|daddy's($1,n|desk($1),$0))
example_end

Sent: whose tummy hurts ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|hurt-3s($1($2,n|tummy($2)),$0)
example_end

Sent: oh your tummy hurts .
Sem: lambda $0_{ev}.and(v|hurt-3s(det:poss|your($1,n|tummy($1)),$0),co|oh($0))
example_end

Sent: if you put the tractor on your book won 't you tear it up ?
Sem: lambda $0_{ev}.Q(not(mod|will(conj|if(and(v|put-zero(pro:per|you,det:art|the($1,n|tractor($1)),$0),prep|on(det:poss|your($2,n|book($2)),$0)),and(v|tear(pro:per|you,pro:per|it,$0),adv|up($0))),$0),$0))
example_end

Sent: no you won 't tear the book up ?
Sem: lambda $0_{ev}.Q(and(not(mod|will(and(v|tear(pro:per|you,det:art|the($1,n|book($1)),$0),adv|up($0)),$0),$0),co|no($0)))
example_end

Sent: is that a green car .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,and(n|car(pro:rel|that,$0),n|green(pro:rel|that,$0)))
example_end

Sent: that 's a block .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|block(pro:dem|that,$0))
example_end

Sent: what color is the block ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|block($2)),n|color(det:art|the($2,n|block($2)),$0))
example_end

Sent: what color is the hammer ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|hammer($2)),n|color(det:art|the($2,n|hammer($2)),$0))
example_end

Sent: Bambi 's green .
Sem: lambda $0_{ev}.n|green(n:prop|bambi,$0)
example_end

Sent: what 's Bambi doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(n:prop|bambi,$1,$0),$0)
example_end

Sent: poor Bambi .
Sem: att(n:prop|bambi,lambda $0_{e}.adj|poor($0))
example_end

Sent: did you hurt your head when you feel ?
Sem: lambda $0_{ev}.Q(conj|when(v|feel(pro:per|you,$0),v|do-past(v|hurt-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),$0)))
example_end

Sent: did he hurt his head ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:sub|he,det:poss|his($1,n|head($1)),$0),$0))
example_end

Sent: is it there .
Sem: lambda $0_{ev}.and(aux|be-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: you get it .
Sem: lambda $0_{ev}.v|get(pro:per|you,pro:per|it,$0)
example_end

Sent: did you throw the ball ?
Sem: lambda $0_{ev}.Q(v|do-past(v|throw(pro:per|you,det:art|the($1,n|ball($1)),$0),$0))
example_end

Sent: the light ?
Sem: lambda $0_{e}.Q(det:art|the($1,n|light($1),$0))
example_end

Sent: are you hitting the ball .
Sem: lambda $0_{ev}.cop|be-pres(part|hit-presp(pro:per|you,det:art|the($1,n|ball($1)),$0),$0)
example_end

Sent: where did the glove go .
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,n|glove($1)),$0),$2($0)),$0)
example_end

Sent: how can you use the glove and the racket at the same time ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(and(v|use(pro:per|you,det:art|the($1,n|glove($1)),$0),$2($0)),prep|at(det:art|the($3,and(adj|same($3),n|time($3))),$0)),$0)
example_end

Sent: is that a bat .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|bat(pro:rel|that,$0))
example_end

Sent: oh you lost your shoe ?
Sem: lambda $0_{ev}.Q(and(v|lose-past(pro:per|you,det:poss|your($1,n|shoe($1)),$0),co|oh($0)))
example_end

Sent: what did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|hit-zero(pro:per|you,$1,$0),$0)
example_end

Sent: you knocked Bambi off ?
Sem: lambda $0_{ev}.Q(and(v|knock-past(pro:per|you,n:prop|bambi,$0),adv|off($0)))
example_end

Sent: call Daddy .
Sem: lambda $0_{ev}.n|call(you,n:prop|daddy,$0)
example_end

Sent: Cromer 's at your home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|cromer,$0),prep|at(det:poss|your($1,n|home($1)),$0))
example_end

Sent: Joshua 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|joshua,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: Kenny 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|kenny,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: yes man driving tractor over there .
Sem: lambda $0_{ev}.and(and(part|drive-presp(lambda $1_{e}.n|man($1),lambda $2_{e}.n|tractor($2),$0),prep|over(adv|there($0))),co|yes($0))
example_end

Sent: oh yes .
Sem: lambda $0_{ev}.and(co|yes($0),co|oh($0))
example_end

Sent: Ricky 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|ricky,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: Susy is at her home .
Sem: lambda $0_{ev}.prep|at(det:poss|her($1,n|home($1)),n:prop|susy,$0)
example_end

Sent: what 's in his mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|his($2,n|mouth($2)),$0))
example_end

Sent: yes that 's an eye .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|eye(pro:dem|that,$0)),co|yes($0))
example_end

Sent: how many eyes ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|eye-pl($0))
example_end

Sent: two ears .
Sem: lambda $0_{e}.det:num|two(n|ear-pl($0))
example_end

Sent: two eyes .
Sem: lambda $0_{e}.det:num|two(n|eye-pl($0))
example_end

Sent: yes that is a bell .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,n|bell(pro:rel|that,$0)),co|yes($0))
example_end

Sent: Ursula 's at your home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|ursula,$0),prep|at(det:poss|your($1,n|home($1)),$0))
example_end

Sent: tape recorder 's at your home .
Sem: lambda $0_{ev}.and(poss|~s(lambda $1_{e}.and_comp(n|tape($1),n|record($1)),$0),prep|at(det:poss|your($2,n|home($2)),$0))
example_end

Sent: don 't you think you should pick it up and put it in the basket ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|should(and(coord|and(and(v|put-zero(pro:per|you,pro:per|it,$1),prep|in(det:art|the($2,n|basket($2)),$1)),v|pick(pro:per|you,pro:per|it,$1)),adv|up($1)),$1),$0),$0),$0))
example_end

Sent: make Cromer do it !
Sem: lambda $0_{ev}.v|make(you,lambda $1_{ev}.v|do(n:prop|cromer,pro:per|it,$1),$0)
example_end

Sent: you pick doc Dan up yourself .
Sem: lambda $0_{ev}.and(and(v|pick(pro:per|you,n:prop|dan_doctor,$0),adv|up($0)),pro:refl|yourself($0))
example_end

Sent: do you like this book .
Sem: lambda $0_{ev}.mod|do(v|like(pro:per|you,pro:dem|this($1,n|book($1)),$0),$0)
example_end

Sent: why don 't you show him the tattooed man ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|show(pro:per|you,det:art|the($1,and(part|tattoo-pastp($1),n|man($1))),pro:obj|him,$0),$2($0)),$0),$0)
example_end

Sent: is this the tattooed man .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and(n|man(pro:dem|this,$0),part|tattoo-pastp(pro:dem|this,$0)))
example_end

Sent: do you like the tattooed man .
Sem: lambda $0_{ev}.mod|do(conj|like(pro:per|you,det:art|the($1,and(part|tattoo-pastp($1),n|man($1))),$0),$0)
example_end

Sent: is that like your doggie .
Sem: lambda $0_{ev}.prep|like(det:poss|your($1,n|dog-dim($1)),pro:dem|that,$0)
example_end

Sent: part of an apple ?
Sem: lambda $0_{e}.Q(att(n|part($0),prep|of(det:art|a($1,n|apple($1)))))
example_end

Sent: I think maybe it came from your basket .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(and(v|come-past(pro:per|it,$1),adv|maybe($1)),prep|from(det:poss|your($2,n|basket($2)),$1)),$0)
example_end

Sent: go where it belongs ?
Sem: lambda $0_{ev}.Q(v|go(you,lambda $1_{ev}.and(v|belong-3s(pro:per|it,$1),adv:int|where($1)),$0))
example_end

Sent: I don 't think you can put it back .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|put-zero(pro:per|you,pro:per|it,$1),adv|back($1)),$1),$0),$0),$0)
example_end

Sent: no that 's not part of an apple .
Sem: lambda $0_{ev}.and(not(att(n|part(pro:dem|that,$0),prep|of(det:art|a($1,n|apple($1)))),$0),co|no($0))
example_end

Sent: it 's not part of the apple .
Sem: lambda $0_{ev}.not(att(n|part(pro:per|it,$0),prep|of(det:art|the($1,n|apple($1)))),$0)
example_end

Sent: careful Adam with that pencil .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: what happened to Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|adam,$0))
example_end

Sent: did somebody spank Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|spank(pro:indef|somebody,n:prop|adam,$0),$0))
example_end

Sent: change your diaper ?
Sem: lambda $0_{ev}.Q(v|change(you,det:poss|your($1,n|diaper($1)),$0))
example_end

Sent: that 's your back .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|back(pro:dem|that,$0))
example_end

Sent: you don 't have two tummies .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,lambda $1_{e}.det:num|two(n|tummy-pl($1)),$0),$0),$0)
example_end

Sent: your tummy 's in front .
Sem: lambda $0_{ev}.and(poss|~s(det:poss|your($1,n|tummy($1)),$0),n|front($0))
example_end

Sent: whose shoes did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|hit-zero(pro:per|you,$1($2,n|shoe-pl($2)),$0),$0)
example_end


Sent: you say it .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,det|the($1,n|stool($1)),$0),adv:loc|back($0))
Sem:  det|the($0,n|block-PL($0))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|throw-PROG(pro|you,det|the($1,n|toy-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
example_end

Sent: are you throwing the toys ?
Sem:  det|the($0,n|block-PL($0))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|throw-PROG(pro|you,det|the($1,n|toy-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
example_end

Sent: you don 't throw them .
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|throw-PROG(pro|you,det|the($1,n|toy-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
example_end

Sent: sit by you .
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|throw-PROG(pro|you,det|the($1,n|toy-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
example_end

Sent: you build a big tower .
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|throw-PROG(pro|you,det|the($1,n|toy-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: a big tower .
Sem:  lambda $0_{ev}.not(aux|do(v|throw(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
example_end

Sent: you don 't play with it .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|by(pro|you,$0))
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
Sem:  pro|you
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.v|build(pro|you,det|a($1,and(adj|big($1),n|tower($1))),$0)
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
Sem:  pro|you
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
example_end

Sent: you 're running .
Sem:  det|a($0,and(adj|big($0),n|tower($0)))
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
Sem:  pro|you
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
example_end

Sent: you are .
Sem:  lambda $0_{ev}.not(and(aux|do(v|play(pro|you,$0),$0),prep|with(pro|it,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
Sem:  pro|you
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
example_end

Sent: are you alright ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
Sem:  pro|you
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
example_end

Sent: we 're gonna have coffee .
Sem:  lambda $0_{ev}.aux|be&PRES(part|run-PROG(pro|you,$0),$0)
Sem:  pro|you
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
example_end

Sent: that 's not Cromer .
Sem:  pro|you
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
example_end

Sent: Cromer didn 't come today .
Sem:  lambda $0_{ev}.Q(adj|alright(pro|you),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
Sem:  adj|all_gone(pro|it)
example_end

Sent: you want paper too ?
Sem:  lambda $0_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$0),v|have(pro|we,lambda $1_{e}.n|coffee($1),$0)),$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: a red pencil ?
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
example_end

Sent: it 's allgone .
Sem:  lambda $0_{ev}.not(and(aux|do&PAST(v|come(n:prop|Cromer,$0),$0),adv:tem|today($0)),$0)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: what did you say ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,lambda $1_{e}.n|paper($1),$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: that improves the page greatly .
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|red($1),n|pencil($1))),$0)
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
example_end

Sent: there .
Sem:  adj|all_gone(pro|it)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
example_end

Sent: there .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Sem:  lambda $0_{ev}.adv|later($0)
example_end

Sent: is it allgone ?
Sem:  lambda $0_{ev}.v|improve-3S(pro:dem|that,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
example_end

Sent: you have pudding for lunch .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
Sem:  qn|no($0,n|lunch($0))
example_end

Sent: later .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
Sem:  qn|no($0,n|lunch($0))
Sem:  qn|no($0,n|lunch($0))
example_end

Sent: no supper ?
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
Sem:  qn|no($0,n|lunch($0))
Sem:  qn|no($0,n|lunch($0))
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
example_end

Sent: no lunch .
Sem:  lambda $0_{ev}.and(v|have(pro|you,lambda $1_{e}.n|pudding($1),$0),prep|for(lambda $2_{e}.n|lunch($2),$0))
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
Sem:  qn|no($0,n|lunch($0))
Sem:  qn|no($0,n|lunch($0))
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.n|fun($0)
example_end

Sent: no lunch .
Sem:  lambda $0_{ev}.adv|later($0)
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
Sem:  qn|no($0,n|lunch($0))
Sem:  qn|no($0,n|lunch($0))
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.n|fun($0)
Sem:  lambda $0_{e}.n|celery($0)
example_end

Sent: later we 'll have lunch .
Sem:  lambda $0_{ev}.Q(qn|no($1,n|supper($1)),$0)
Sem:  qn|no($0,n|lunch($0))
Sem:  qn|no($0,n|lunch($0))
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.n|fun($0)
Sem:  lambda $0_{e}.n|celery($0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
example_end

Sent: fun ?
Sem:  qn|no($0,n|lunch($0))
Sem:  qn|no($0,n|lunch($0))
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.n|fun($0)
Sem:  lambda $0_{e}.n|celery($0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
Sem:  lambda $0_{e}.and($0)
example_end

Sent: celery .
Sem:  qn|no($0,n|lunch($0))
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.n|fun($0)
Sem:  lambda $0_{e}.n|celery($0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.n|soup($0)
example_end

Sent: we 'll have celery too .
Sem:  lambda $0_{ev}.and(aux|will(v|have(pro|we,lambda $1_{e}.n|lunch($1),$0),$0),adv|later($0))
Sem:  lambda $0_{e}.n|fun($0)
Sem:  lambda $0_{e}.n|celery($0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.n|soup($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
example_end

Sent: and what else ?
Sem:  lambda $0_{e}.n|fun($0)
Sem:  lambda $0_{e}.n|celery($0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.n|soup($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
Sem:  lambda $0_{e}.n|cheese($0)
example_end

Sent: soup .
Sem:  lambda $0_{e}.n|celery($0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.n|soup($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: and what else would you like for lunch ?
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,lambda $1_{e}.n|celery($1),$0),$0)
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.n|soup($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: cheese .
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.n|soup($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{e}.n|pudding($0)
example_end

Sent: what else ?
Sem:  lambda $0_{e}.n|soup($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{e}.n|pudding($0)
Sem:  lambda $0_{e}.n|milk($0)
example_end

Sent: what else ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|will&COND(v|like(pro|you,$0,$1),$1),prep|for(lambda $2_{e}.n|lunch($2),$1))
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{e}.n|pudding($0)
Sem:  lambda $0_{e}.n|milk($0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
example_end

Sent: pudding ?
Sem:  lambda $0_{e}.n|cheese($0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{e}.n|pudding($0)
Sem:  lambda $0_{e}.n|milk($0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: milk ?
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{e}.n|pudding($0)
Sem:  lambda $0_{e}.n|milk($0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
example_end

Sent: you just look at it .
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{e}.n|pudding($0)
Sem:  lambda $0_{e}.n|milk($0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
example_end

Sent: don 't touch it .
Sem:  lambda $0_{e}.n|pudding($0)
Sem:  lambda $0_{e}.n|milk($0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
example_end

Sent: you just look at it .
Sem:  lambda $0_{e}.n|milk($0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  adj|good(pro:dem|that)
example_end

Sent: what does it do ?
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
example_end

Sent: that 's good .
Sem:  lambda $0_{ev}.and(v|look(pro|you,$0),prep|at(pro|it,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: don 't drop it .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|do(pro|it,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
example_end

Sent: don 't drop it .
Sem:  adj|right(pro:dem|that)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
Sem:  det|a($0,and(adj|round($0),n|block($0)))
example_end

Sent: there .
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
Sem:  det|a($0,and(adj|round($0),n|block($0)))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
example_end

Sent: a round tinkertoy .
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
Sem:  det|a($0,and(adj|round($0),n|block($0)))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
example_end

Sent: a round block .
Sem:  lambda $0_{ev}.not(aux|do(v|drop(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
Sem:  det|a($0,and(adj|round($0),n|block($0)))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: that 's a round block too .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
Sem:  det|a($0,and(adj|round($0),n|block($0)))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
example_end

Sent: it 's a round block .
Sem:  det|a($0,and(adj|round($0),n|+n|tinker+n|toy($0)))
Sem:  det|a($0,and(adj|round($0),n|block($0)))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  n:prop|Eve
example_end

Sent: I can 't pin your diaper .
Sem:  det|a($0,and(adj|round($0),n|block($0)))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
example_end

Sent: taperecorder .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
example_end

Sent: Eve .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,and(adj|round($1),n|block($1))),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: I 'm not Cromer .
Sem:  lambda $0_{ev}.not(aux|can(v|pin(pro|I,pro:poss:det|your($1,n|diaper($1)),$0),$0),$0)
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  adj|right(pro:dem|that)
Sem:  n:prop|Colin
example_end

Sent: I 'm Fraser .
Sem:  lambda $0_{e}.n|+n|tape+n|recorder($0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  adj|right(pro:dem|that)
Sem:  n:prop|Colin
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
example_end

Sent: that 's right .
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  adj|right(pro:dem|that)
Sem:  n:prop|Colin
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
Sem:  n:prop|Eve
example_end

Sent: Colin .
Sem:  lambda $0_{ev}.not(eq(pro|I,n:prop|Cromer,$0),$0)
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  adj|right(pro:dem|that)
Sem:  n:prop|Colin
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
Sem:  n:prop|Eve
Sem:  n:prop|Fraser
example_end

Sent: are you okay ?
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  adj|right(pro:dem|that)
Sem:  n:prop|Colin
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
Sem:  n:prop|Eve
Sem:  n:prop|Fraser
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
example_end

Sent: Eve .
Sem:  adj|right(pro:dem|that)
Sem:  n:prop|Colin
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
Sem:  n:prop|Eve
Sem:  n:prop|Fraser
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: Fraser .
Sem:  n:prop|Colin
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
Sem:  n:prop|Eve
Sem:  n:prop|Fraser
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
example_end

Sent: coming outof the hole ?
Sem:  lambda $0_{ev}.Q(adj|okay(pro|you),$0)
Sem:  n:prop|Eve
Sem:  n:prop|Fraser
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
example_end

Sent: there .
Sem:  n:prop|Eve
Sem:  n:prop|Fraser
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: I can see Eve .
Sem:  n:prop|Fraser
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
example_end

Sent: can you see Eve ?
Sem:  lambda $0_{ev}.Q(and(part|come-PROG(pro|you,$0),prep|out_of(det|the($1,n|hole($1)),$0)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
example_end

Sent: who do you see ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: I see Eve .
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,n:prop|Eve,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|up($0)
example_end

Sent: you see Fraser .
Sem:  lambda $0_{ev}.Q(aux|can(v|see(pro|you,n:prop|Eve,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|up($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: there .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|up($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: up .
Sem:  lambda $0_{ev}.v|see(pro|I,n:prop|Eve,$0)
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|up($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.v|see(pro|you,n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|up($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.adv:loc|up($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.adv:loc|up($0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
example_end

Sent: sit down in his lap .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
example_end

Sent: down ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
example_end

Sent: Eve 's gonna climb ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
example_end

Sent: you can climb .
Sem:  lambda $0_{ev}.and(v|sit(pro|you,$0),prep|in(pro:poss:det|his($1,n|lap($1)),$0))
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
example_end

Sent: climb up there .
Sem:  lambda $0_{ev}.Q(adv:loc|down($0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
example_end

Sent: you want a letter ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|climb(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: we 'll  we will have a letter .
Sem:  lambda $0_{ev}.aux|can(v|climb(pro|you,$0),$0)
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
example_end

Sent: this will make a good letter .
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: Mommy put one there .
Sem:  lambda $0_{ev}.aux|will(v|have(pro|we,det|a($1,n|letter($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.aux|will(v|make(pro:dem|this,det|a($1,and(adj|good($1),n|letter($1))),$0),$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
example_end

Sent: you may have it .
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
example_end

Sent: I 'll answer it .
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Mommy,pro:indef|one,$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
example_end

Sent: that was Natalie .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's not your sock .
Sem:  lambda $0_{ev}.aux|may(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
example_end

Sent: we 'll look at the pictures .
Sem:  lambda $0_{ev}.aux|will(v|answer(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Natalie,$0)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
example_end

Sent: lady .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,pro:poss:det|your($1,n|sock($1)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: she has pretty dresses .
Sem:  lambda $0_{ev}.and(aux|will(v|look(pro|we,$0),$0),prep|at(det|the($1,n|picture-PL($1)),$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: that 's another lady .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
Sem:  qn|another($0,n|man($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.v|have&3S(pro|she,lambda $1_{e}.and(adj|pretty($1),n|dress-PL($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
Sem:  qn|another($0,n|man($0))
Sem:  qn|another($0,n|man($0))
example_end

Sent: that 's a man .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|lady($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
Sem:  qn|another($0,n|man($0))
Sem:  qn|another($0,n|man($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: another man .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
Sem:  qn|another($0,n|man($0))
Sem:  qn|another($0,n|man($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
example_end

Sent: another man .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
Sem:  qn|another($0,n|man($0))
Sem:  qn|another($0,n|man($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|man($1)),$0)
Sem:  qn|another($0,n|man($0))
Sem:  qn|another($0,n|man($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
example_end

Sent: lady .
Sem:  qn|another($0,n|man($0))
Sem:  qn|another($0,n|man($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  qn|another($0,n|man($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|girl($0)
example_end

Sent: that 's not a man .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|girl($0)
Sem:  qn|another($0,n|lady($0))
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.n|lady($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|girl($0)
Sem:  qn|another($0,n|lady($0))
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: girl .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|girl($0)
Sem:  qn|another($0,n|lady($0))
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
example_end

Sent: another lady .
Sem:  lambda $0_{ev}.not(eq(pro:dem|that,det|a($1,n|man($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|girl($0)
Sem:  qn|another($0,n|lady($0))
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
example_end

Sent: you turn the page .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|girl($0)
Sem:  qn|another($0,n|lady($0))
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
example_end

Sent: she has a hat .
Sem:  lambda $0_{e}.n|girl($0)
Sem:  qn|another($0,n|lady($0))
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
example_end

Sent: you turn the page .
Sem:  qn|another($0,n|lady($0))
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: would you move into the room .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: go on .
Sem:  lambda $0_{ev}.v|have&3S(pro|she,det|a($1,n|hat($1)),$0)
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
example_end

Sent: move .
Sem:  lambda $0_{ev}.v|turn(pro|you,det|the($1,n|page($1)),$0)
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
example_end

Sent: move .
Sem:  lambda $0_{ev}.and(aux|will&COND(v|move(pro|you,$0),$0),prep|into(det|the($1,n|room($1)),$0))
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
example_end

Sent: move .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),adv|on($0))
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
example_end

Sent: pick up the paper .
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
example_end

Sent: pick up the paper .
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: that 's a girl .
Sem:  lambda $0_{ev}.v|move(pro|you,$0)
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
example_end

Sent: that 's Fraser .
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
example_end

Sent: what shall I do with it ?
Sem:  lambda $0_{ev}.and(v|pick(pro|you,det|the($1,n|paper($1)),$0),adv:loc|up($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: that 's the top .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
example_end

Sent: put it on the sugar .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|shall(v|do(pro|I,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
example_end

Sent: take the spoon out .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|top($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: take it outof the sugar .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|it,$0),prep|on(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
example_end

Sent: you don 't lick the top .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.and(v|take(pro|you,det|the($1,n|spoon($1)),$0),adv:loc|out($0))
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  adj|good&CP(pro:dem|that)
example_end

Sent: you can put the top on .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(det|the($1,n|sugar($1)),$0))
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  adj|good&CP(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.not(aux|do(v|lick(pro|you,det|the($1,n|top($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  adj|good&CP(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
example_end

Sent: that 's better .
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  adj|good&CP(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.and(aux|can(v|put&ZERO(pro|you,det|the($1,n|top($1)),$0),$0),adv|on($0))
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  adj|good&CP(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
example_end

Sent: would you bring the napkin .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  adj|good&CP(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: bring me the napkin .
Sem:  adj|good&CP(pro:dem|that)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
example_end

Sent: you 're bringing me the cup .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.aux|will&COND(v|bring(pro|you,det|the($1,n|napkin($1)),$0),$0)
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what did you say ?
Sem:  lambda $0_{ev}.v|bring(pro|you,pro|me,det|the($1,n|napkin($1)),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.aux|be&PRES(part|bring-PROG(pro|you,pro|me,det|the($1,n|cup($1)),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: what is that ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
example_end

Sent: that 's another cheese .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|say(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
example_end

Sent: you get your highchair .
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
example_end

Sent: you put this back .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
example_end

Sent: you move your highchair .
Sem:  lambda $0_{ev}.eq(pro:dem|that,qn|another($1,n|cheese($1)),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
example_end

Sent: you put back  stool back .
Sem:  lambda $0_{ev}.v|get(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
example_end

Sent: you climb in .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:dem|this,$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
Sem:  lambda $0_{e}.n|shoe($0)
example_end

Sent: I 'm Fraser .
Sem:  lambda $0_{ev}.v|move(pro|you,pro:poss:det|your($1,n|+adj|high+n|chair($1)),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
Sem:  lambda $0_{e}.n|shoe($0)
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
example_end

Sent: Mommy did what ?
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,lambda $1_{e}.n|stool($1),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
Sem:  lambda $0_{e}.n|shoe($0)
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
Sem:  pro:poss:det|your($0,n|pencil($0))
example_end

Sent: shoe ?
Sem:  lambda $0_{ev}.and(v|climb(pro|you,$0),adv:loc|in($0))
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
Sem:  lambda $0_{e}.n|shoe($0)
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
Sem:  pro:poss:det|your($0,n|pencil($0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
example_end

Sent: leave the stool there .
Sem:  lambda $0_{ev}.eq(pro|I,n:prop|Fraser,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
Sem:  lambda $0_{e}.n|shoe($0)
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
Sem:  pro:poss:det|your($0,n|pencil($0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
example_end

Sent: your pencil .
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do&PAST(n:prop|Mommy,$0,$1)
Sem:  lambda $0_{e}.n|shoe($0)
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
Sem:  pro:poss:det|your($0,n|pencil($0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: you go .
Sem:  lambda $0_{e}.n|shoe($0)
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
Sem:  pro:poss:det|your($0,n|pencil($0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
example_end

Sent: where 's your paper ?
Sem:  lambda $0_{ev}.and(v|leave(pro|you,det|the($1,n|stool($1)),$0),adv:loc|there($0))
Sem:  pro:poss:det|your($0,n|pencil($0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
example_end

Sent: where is it ?
Sem:  pro:poss:det|your($0,n|pencil($0))
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
example_end

Sent: we 'll find you a pad .
Sem:  lambda $0_{ev}.v|go(pro|you,$0)
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
Sem:  lambda $0_{e}.n|banana($0)
example_end

Sent: move the stool ?
Sem:  lambda $0_{e}.eqLoc(pro:poss:det|your($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
example_end

Sent: Eve do what ?
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: banana ?
Sem:  lambda $0_{ev}.aux|will(v|find(pro|we,pro|you,det|a($1,n|pad($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
example_end

Sent: I don 't have a banana .
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
example_end

Sent: I 'm cracking the nuts .
Sem:  lambda $0_{e}.lambda $1_{ev}.v|do(n:prop|Eve,$0,$1)
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: you climb .
Sem:  lambda $0_{e}.n|banana($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: you can 't crack the nuts .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|I,det|a($1,n|banana($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
example_end

Sent: I 'm cracking the nuts .
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  adj|sorry(pro|I)
example_end

Sent: I 'm cracking the nuts .
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you may not have it .
Sem:  lambda $0_{ev}.not(aux|can(v|crack(pro|you,det|the($1,n|nut-PL($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
example_end

Sent: I 'm sorry .
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.aux|be&1S(part|crack-PROG(pro|I,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you dropped it .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro|it,$0),$0),$0)
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
example_end

Sent: make a hammer .
Sem:  adj|sorry(pro|I)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: Eve 's cracking the nut ?
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
example_end

Sent: use the tinkertoy .
Sem:  lambda $0_{ev}.v|make(pro|you,det|a($1,n|hammer($1)),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: use the tinkertoy .
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: are you cracking the nut ?
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
example_end

Sent: I 'll crack the nut .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
example_end

Sent: Mommy will crack the nut .
Sem:  lambda $0_{ev}.v|use(pro|you,det|the($1,n|+n|tinker+n|toy($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
example_end

Sent: are you cracking the nut ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: that 's yours .
Sem:  lambda $0_{ev}.aux|will(v|crack(pro|I,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
example_end

Sent: that 's your nut .
Sem:  lambda $0_{ev}.aux|will(v|crack(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
example_end

Sent: you cracked the nut .
Sem:  lambda $0_{ev}.Q(aux|be&PRES(part|crack-PROG(pro|you,det|the($1,n|nut($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
example_end

Sent: Cromer ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss|yours,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
example_end

Sent: where is Cromer ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: where is Fraser ?
Sem:  lambda $0_{ev}.v|crack-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
example_end

Sent: that 's the stool .
Sem:  lambda $0_{ev}.Q(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.eqLoc(n:prop|Cromer,$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
example_end

Sent: Eve will sit on the couch .
Sem:  lambda $0_{e}.eqLoc(n:prop|Fraser,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
example_end

Sent: crack the nut ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stool($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
example_end

Sent: Eve 's drinking grape juice ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
example_end

Sent: Eve is drinking grape juice ?
Sem:  lambda $0_{ev}.and(aux|will(v|sit(n:prop|Eve,$0),$0),prep|on(det|the($1,n|couch($1)),$0))
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
example_end

Sent: Eve put the top back .
Sem:  lambda $0_{ev}.Q(v|crack(pro|you,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
example_end

Sent: you 're lying down .
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
example_end

Sent: Cromer 's wearing a sweater .
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|drink-PROG(n:prop|Eve,lambda $1_{e}.and(n|grape($1),n|juice($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
example_end

Sent: he doesn 't have a sweater .
Sem:  lambda $0_{ev}.and(v|put&ZERO(n:prop|Eve,det|the($1,n|top($1)),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
example_end

Sent: he has a jacket .
Sem:  lambda $0_{ev}.and(aux|be&PRES(part|lie-PROG(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: the baby 's highchair .
Sem:  lambda $0_{ev}.aux|be&3S(part|wear-PROG(n:prop|Cromer,det|a($1,n|sweater($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: the baby 's highchair .
Sem:  lambda $0_{ev}.not(aux|do&3S(v|have(pro|he,det|a($1,n|sweater($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.v|have&3S(pro|he,det|a($1,n|jacket($1)),$0)
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: you say that .
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: you crack the nut .
Sem:  det|the($0,and(n|baby($0),n|+adj|high+n|chair($0)))
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
example_end

Sent: you crack the nut .
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
Sem:  adj|welcome(pro|you)
example_end

Sent: Mommy 's cracking the nut .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
example_end

Sent: and Eve 's cracking the nut too .
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
example_end

Sent: you 're welcome .
Sem:  lambda $0_{ev}.v|crack(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
Sem:  n:prop|Eve
example_end

Sent: you dropped the nut .
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Mommy,det|the($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
example_end

Sent: Eve dropped the nut .
Sem:  lambda $0_{ev}.aux|be&3S(part|crack-PROG(n:prop|Eve,det|the($1,n|nut($1)),$0),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
example_end

Sent: Eve
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
example_end

Sent: you get it .
Sem:  lambda $0_{ev}.v|drop-PAST(pro|you,det|the($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
example_end

Sent: what 's the difference ?
Sem:  lambda $0_{ev}.v|drop-PAST(n:prop|Eve,det|the($1,n|nut($1)),$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
example_end

Sent: not yet .
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
example_end

Sent: you crack the nut right now .
Sem:  lambda $0_{ev}.v|get(pro|you,pro|it,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
example_end

Sent: later we 'll swing .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,det|the($2,n|difference($2)),$1)
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
example_end

Sent: we 'll swing later .
Sem:  lambda $0_{ev}.not(adv|yet($0),$0)
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
example_end

Sent: you 're gonna climb ?
Sem:  lambda $0_{ev}.and(v|crack(pro|you,det|the($1,n|nut($1)),$0),adv|now($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
example_end

Sent: gimme your finger .
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: you climb .
Sem:  lambda $0_{ev}.and(aux|will(v|swing(pro|we,$0),$0),adv|later($0))
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: you 're a big girl .
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.v|give(pro|you,pro|me,pro:poss:det|your($1,n|finger($1)),$0)
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  det|the($0,n|stove($0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.v|climb(pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  det|the($0,n|stove($0))
Sem:  adj|welcome(pro|you)
example_end

Sent: that 's the stove .
Sem:  lambda $0_{ev}.eq(pro|you,det|a($1,and(adj|big($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  det|the($0,n|stove($0))
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
example_end

Sent: the stove .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  det|the($0,n|stove($0))
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: you 're welcome .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  det|the($0,n|stove($0))
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  pro|they
example_end

Sent: you want another nut ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  det|the($0,n|stove($0))
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  pro|they
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
example_end

Sent: there .
Sem:  det|the($0,n|stove($0))
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  pro|they
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
example_end

Sent: they 're all the same .
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  pro|they
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
example_end

Sent: what is this ?
Sem:  lambda $0_{ev}.Q(v|want(pro|you,qn|another($1,n|nut($1)),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  pro|they
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
example_end

Sent: a game ?
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  pro|they
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
example_end

Sent: it is ?
Sem:  pro|they
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
Sem:  adj|welcome(pro|you)
example_end

Sent: I 'll put it there .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|this,$1)
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
example_end

Sent: it 's a nut .
Sem:  lambda $0_{ev}.Q(det|a($1,n|game($1)),$0)
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
example_end

Sent: you 're welcome .
Sem:  lambda $0_{ev}.Q(pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
example_end

Sent: your nut ?
Sem:  lambda $0_{ev}.and(aux|will(v|put&ZERO(pro|I,pro|it,$0),$0),adv:loc|there($0))
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
example_end

Sent: that 's the stove .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|nut($1)),$0)
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
Sem:  pro:poss:det|your($0,n|stool($0))
example_end

Sent: you don 't touch it .
Sem:  adj|welcome(pro|you)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
Sem:  pro:poss:det|your($0,n|stool($0))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
example_end

Sent: the baby 's highchair ?
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
Sem:  pro:poss:det|your($0,n|stool($0))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
example_end

Sent: your stool .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,n|stove($1)),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
Sem:  pro:poss:det|your($0,n|stool($0))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
example_end

Sent: your grape juice is allgone .
Sem:  lambda $0_{ev}.not(aux|do(v|touch(pro|you,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
Sem:  pro:poss:det|your($0,n|stool($0))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
example_end

Sent: your grape juice is allgone .
Sem:  lambda $0_{ev}.Q(det|the($1,and(n|baby($1),n|+adj|high+n|chair($1))),$0)
Sem:  pro:poss:det|your($0,n|stool($0))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  n:prop|Eve
example_end

Sent: that 's the coffee pot .
Sem:  pro:poss:det|your($0,n|stool($0))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  n:prop|Eve
Sem:  pro|it
example_end

Sent: is it allgone ?
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  n:prop|Eve
Sem:  pro|it
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
example_end

Sent: Eve .
Sem:  adj|all_gone(pro:poss:det|your($0,and(n|grape($0),n|juice($0))))
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  n:prop|Eve
Sem:  pro|it
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
example_end

Sent: it 's not .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|the($1,and(n|coffee($1),n|pot($1))),$0)
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  n:prop|Eve
Sem:  pro|it
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
example_end

Sent: you 're gonna jump ?
Sem:  lambda $0_{ev}.Q(adj|all_gone(pro|it),$0)
Sem:  n:prop|Eve
Sem:  pro|it
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
example_end

Sent: Eve 's going to jump ?
Sem:  n:prop|Eve
Sem:  pro|it
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
example_end

Sent: they 're looking .
Sem:  pro|it
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: I can see you .
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|jump(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
example_end

Sent: you 'll spill it .
Sem:  lambda $0_{ev}.Q(aux|be&3S(and(part|go-PROG(n:prop|Eve,$0),v|jump(n:prop|Eve,$0)),$0),$0)
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
example_end

Sent: I see you .
Sem:  lambda $0_{ev}.aux|be&PRES(part|look-PROG(pro|they,$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: you dropped the nuts ?
Sem:  lambda $0_{ev}.aux|can(v|see(pro|I,pro|you,$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: you get the nuts .
Sem:  lambda $0_{ev}.aux|will(v|spill(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: can you say that ?
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.Q(v|drop-PAST(pro|you,det|the($1,n|nut-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.v|get(pro|you,det|the($1,n|nut-PL($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
example_end

Sent: you 're dancing .
Sem:  lambda $0_{ev}.Q(aux|can(v|say(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
example_end

Sent: that 's a nice dance .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is Eve ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
example_end

Sent: Eve can get the banjo .
Sem:  lambda $0_{ev}.aux|be&PRES(part|dance-PROG(pro|you,$0),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|dance($1))),$0)
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
example_end

Sent: where is the banjo ?
Sem:  lambda $0_{e}.eqLoc(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
example_end

Sent: you 've had a bowel movement .
Sem:  lambda $0_{ev}.aux|can(v|get(n:prop|Eve,det|the($1,n|banjo($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: shall we change your diaper .
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
example_end

Sent: haha I see you .
Sem:  lambda $0_{e}.eqLoc(det|the($1,n|banjo($1)),$0)
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.aux|have(part|have&PERF(pro|you,det|a($1,and(n|bowel($1),n|movement($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: that 's a good girl .
Sem:  lambda $0_{ev}.aux|shall(v|change(pro|we,pro:poss:det|your($1,n|diaper($1)),$0),$0)
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
example_end

Sent: look at Fraser ?
Sem:  lambda $0_{ev}.v|see(pro|I,pro|you,$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
example_end

Sent: he 's sitting in the chair .
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|good($1),n|girl($1))),$0)
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
example_end

Sent: Papa ?
Sem:  lambda $0_{ev}.Q(and(v|look(pro|you,$0),prep|at(n:prop|Fraser,$0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
example_end

Sent: Papa ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{e}.n|penny-PL($0)
example_end

Sent: he went by bike .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|sit-PROG(pro|he,$0),$0),prep|in(det|the($1,n|chair($1)),$0))
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{e}.n|penny-PL($0)
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
example_end

Sent: making pennies .
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{e}.n|penny-PL($0)
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: pennies .
Sem:  lambda $0_{ev}.Q(n:prop|Papa,$0)
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{e}.n|penny-PL($0)
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
example_end

Sent: making pennies .
Sem:  lambda $0_{ev}.and(v|go&PAST(pro|he,$0),prep|by(lambda $1_{e}.n|bike($1),$0))
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{e}.n|penny-PL($0)
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
Sem:  lambda $0_{e}.n|face($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{e}.n|penny-PL($0)
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
Sem:  lambda $0_{e}.n|face($0)
Sem:  adj|good(pro:dem|that)
example_end

Sent: swing ?
Sem:  lambda $0_{e}.n|penny-PL($0)
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
Sem:  lambda $0_{e}.n|face($0)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
example_end

Sent: face .
Sem:  lambda $0_{ev}.part|make-PROG(pro|you,lambda $1_{e}.n|penny-PL($1),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
Sem:  lambda $0_{e}.n|face($0)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: that 's good .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
Sem:  lambda $0_{e}.n|face($0)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|stool($0)
example_end

Sent: did I get it ?
Sem:  lambda $0_{ev}.Q(v|swing(pro|you,$0),$0)
Sem:  lambda $0_{e}.n|face($0)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|stool($0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.n|face($0)
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|stool($0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
example_end

Sent: stool .
Sem:  adj|good(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|stool($0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: you 're gonna climb ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|get(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|stool($0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: you can climb down .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|stool($0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{e}.n|stool($0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
example_end

Sent: what do you want me to do ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|climb(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
example_end

Sent: what do you want me to do .
Sem:  lambda $0_{ev}.and(aux|can(v|climb(pro|you,$0),$0),adv:loc|down($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
example_end

Sent: sleep .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
example_end

Sent: are you going to sleep ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
example_end

Sent: you sleep in bed .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(and(v|want(pro|you,pro|me,$1),v|do(pro|you,$0,$1)),$1)
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
example_end

Sent: watch your head .
Sem:  lambda $0_{ev}.v|sleep(pro|you,$0)
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: what are you saying ?
Sem:  lambda $0_{ev}.Q(aux|be&PRES(and(part|go-PROG(pro|you,$0),v|sleep(pro|you,$0)),$0),$0)
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
example_end

Sent: move the stool ?
Sem:  lambda $0_{ev}.and(v|sleep(pro|you,$0),prep|in(lambda $1_{e}.n|bed($1),$0))
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
example_end

Sent: you may not have that .
Sem:  lambda $0_{ev}.v|watch(pro|you,pro:poss:det|your($1,n|head($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
example_end

Sent: it 's another nut .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|say-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
example_end

Sent: take it outof your mouth .
Sem:  lambda $0_{ev}.Q(v|move(pro|you,det|the($1,n|stool($1)),$0),$0)
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
example_end

Sent: that 's it .
Sem:  lambda $0_{ev}.not(aux|may(v|have(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
example_end

Sent: I 'll take it away .
Sem:  lambda $0_{ev}.eq(pro|it,qn|another($1,n|nut($1)),$0)
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  pro:wh|what
example_end

Sent: because you put them in your mouth .
Sem:  lambda $0_{ev}.and(v|take(pro|you,pro|it,$0),prep|out_of(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  pro:wh|what
Sem:  n:prop|Mommy
example_end

Sent: because you put them in your mouth .
Sem:  lambda $0_{ev}.eq(pro:dem|that,pro|it,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  pro:wh|what
Sem:  n:prop|Mommy
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
example_end

Sent: what .
Sem:  lambda $0_{ev}.and(aux|will(v|take(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  pro:wh|what
Sem:  n:prop|Mommy
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
example_end

Sent: Mommy .
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  pro:wh|what
Sem:  n:prop|Mommy
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: here ?
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro|them,$0),prep|in(pro:poss:det|your($1,n|mouth($1)),$0))
Sem:  pro:wh|what
Sem:  n:prop|Mommy
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
example_end

Sent: you may play with them .
Sem:  pro:wh|what
Sem:  n:prop|Mommy
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
example_end

Sent: here .
Sem:  n:prop|Mommy
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
example_end

Sent: you go in on the table .
Sem:  lambda $0_{ev}.Q(adv:loc|here($0),$0)
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: here .
Sem:  lambda $0_{ev}.and(aux|may(v|play(pro|you,$0),$0),prep|with(pro|them,$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  n:prop|Eve
example_end

Sent: can you count them ?
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.and(v|go(pro|you,$0),prep|on(det|the($1,n|table($1)),$0))
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
example_end

Sent: Eve .
Sem:  lambda $0_{ev}.adv:loc|here($0)
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.Q(aux|can(v|count(pro|you,pro|them,$0),$0),$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
example_end

Sent: you say that .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
example_end

Sent: you say it .
Sem:  n:prop|Eve
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
example_end

Sent: Eve fix my shoe .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
example_end

Sent: you have my shoe off .
Sem:  lambda $0_{ev}.v|say(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: Eve 's wearing the shoe ?
Sem:  lambda $0_{ev}.v|say(pro|you,pro|it,$0)
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: Eve 's wearing the shoe ?
Sem:  lambda $0_{ev}.v|fix(n:prop|Eve,pro:poss:det|my($1,n|shoe($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: there .
Sem:  lambda $0_{ev}.and(v|have(pro|you,pro:poss:det|my($1,n|shoe($1)),$0),adv|off($0))
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|will(v|break(pro|you,det|the($1,n|can($1)),$0),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|will(v|break(pro|you,det|the($1,n|can($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|big($1),n|+n|tinker+n|toy($1))),$0)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.Q(aux|be&3S(part|wear-PROG(n:prop|Eve,det|the($1,n|shoe($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.aux|will(v|break(pro|you,det|the($1,n|can($1)),$0),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|big($1),n|+n|tinker+n|toy($1))),$0)
Sem:  lambda $0_{e}.eqLoc(det|the($1,and(adj|little($1),n|+n|tinker+n|toy($1))),$0)
example_end


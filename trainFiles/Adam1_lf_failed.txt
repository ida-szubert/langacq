Sent: no that 's his pencil .
Sem: lambda $0_{ev}.and(det:poss|his(pro:dem|that,n|pencil(pro:dem|that,$0)),co|no($0))
example_end

Sent: that 's not Daddy that 's Colin .
Sem: lambda $0_{ev}.not(and(n:prop|daddy(pro:dem|that,$0),n:prop|colin(pro:rel|that,$0)),$0)
example_end

Sent: I think perhaps he 's going back to school .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(and(and(part|go-presp(pro:sub|he,$1),adv|perhaps($1)),adv|back(prep|to(lambda $2_{e}.n|school($2),$1))),$1),$0)
example_end

Sent: not on the window sill Adam .
Sem: not(prep|on(det:art|the($0,and_comp(n|window($0),n|sill($0)))))
example_end

Sent: you write on the paper .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: my paper .
Sem: det:poss|my($0,n|paper($0))
example_end

Sent: sitting in Adam 's chair .
Sem: lambda $0_{ev}.and(part|sit-presp(you,$0),prep|in(n:prop|adam's($1,n|chair($1)),$0))
example_end

Sent: why don 't you read it to me ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|read-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|to(pro:obj|me,$0)),$0),$0)
example_end

Sent: that 's Cathy .
Sem: lambda $0_{ev}.n:prop|cathy(pro:dem|that,$0)
example_end

Sent: is this a horn ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|this,n|horn(pro:dem|this,$0)))
example_end

Sent: look what game is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,n|game(pro:dem|that,$0)),co|look(you,$0))
example_end

Sent: how many do you have like this ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|have(pro:per|you,lambda $1_{e}.$2(qn|many($1)),$0),prep|like(pro:dem|this,$0)),$0)
example_end

Sent: where are you going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: how does a bunny walk ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(n|walk(det:art|a($1,n|bunny+rabbit($1)),$0),$2($0)),$0)
example_end

Sent: what are you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: sweep broom .
Sem: lambda $0_{e}.and_comp(n|sweep($0),n|broom($0))
example_end

Sent: is that a broom ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|broom(pro:rel|that,$0)))
example_end

Sent: I thought it was a brush .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,n|brush(pro:per|it,$1)),$0)
example_end

Sent: Adam Smith ?
Sem: lambda $0_{e}.Q(n:prop|smith_adam($0))
example_end

Sent: is that very heavy ?
Sem: lambda $0_{ev}.Q(adv|very(adj|heavy(pro:rel|that,$0)))
example_end

Sent: what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: hear a tractor ?
Sem: lambda $0_{ev}.Q(v|hear(you,det:art|a($1,n|tractor($1)),$0))
example_end

Sent: no I think that 's a truck .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|truck(pro:dem|that,$1)),$0),co|no($0))
example_end

Sent: if you look out the other window maybe you 'll see it .
Sem: lambda $0_{ev}.mod|~will(conj|if(and(cop|look(pro:per|you,$0),prep|out(det:art|the($1,and(qn|other($1),n|window($1))),$0)),and(v|see(pro:per|you,pro:per|it,$0),adv|maybe($0))),$0)
example_end

Sent: did you see the truck ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|truck($1)),$0),$0))
example_end

Sent: no you didn 't see it .
Sem: lambda $0_{ev}.and(not(mod|do(v|see(pro:per|you,pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: there goes one .
Sem: lambda $0_{ev}.v|go-3s_there(you,pro:indef|one,$0)
example_end

Sent: yes there goes one .
Sem: lambda $0_{ev}.and(v|go-3s_there(you,pro:indef|one,$0),co|yes($0))
example_end

Sent: put the truck where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|truck($1)),$0),$2($0))
example_end

Sent: tow truck come here ?
Sem: lambda $0_{ev}.Q(and(v|come(lambda $1_{e}.and_comp(n|tow($1),n|truck($1)),$0),adv|here($0)))
example_end

Sent: oh yeah .
Sem: lambda $0_{ev}.co|yeah_oh($0)
example_end

Sent: that 's a big truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|truck(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: busy bulldozer ?
Sem: lambda $0_{e}.Q(and(adj|busy($0),n|bulldoze-dv($0)))
example_end

Sent: did you show Ursula that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,pro:dem|that,n:prop|ursula,$0),$0))
example_end

Sent: do you know what those are ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.cop|be-pres(pro:dem|those,pro:int|what,$1),$0),$0))
example_end

Sent: I guess she might like to see that .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.mod|might(v|like(pro:sub|she,lambda $2_{ev}.v|see(pro:sub|she,pro:dem|that,$2),$1),$1),$0)
example_end

Sent: what kind of hat is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|hat($2))))
example_end

Sent: Adam 's hat ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|hat($1),$0))
example_end

Sent: where have you seen a hat like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|have(and(part|see-pastp(pro:per|you,det:art|a($1,att(n|hat($1),prep|like(pro:dem|that))),$0),$2($0)),$0)
example_end

Sent: not shoe ball .
Sem: and(not(lambda $0_{e}.n|shoe($0)),lambda $1_{e}.n|ball($1))
example_end

Sent: foot ball .
Sem: lambda $0_{e}.n|ball_foot($0)
example_end

Sent: I saw a tank truck .
Sem: lambda $0_{ev}.v|see-past(pro:sub|i,det:art|a($1,and_comp(n|tank($1),n|truck($1))),$0)
example_end

Sent: was he dirty ?
Sem: lambda $0_{ev}.Q(adj|dirt-dn(pro:sub|he,$0))
example_end

Sent: Adam fall toy .
Sem: lambda $0_{ev}.n|fall(n:prop|adam,lambda $1_{e}.n|toy($1),$0)
example_end

Sent: you didn 't fall that time .
Sem: lambda $0_{ev}.not(mod|do(and(v|fall(pro:per|you,$0),pro:dem|that($1,n|time($1),$0)),$0),$0)
example_end

Sent: you just sat down .
Sem: lambda $0_{ev}.and(and(v|sit-past(pro:per|you,$0),adv|just($0)),adv|down($0))
example_end

Sent: do you want to see this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,pro:dem|this,$1),$0),$0))
example_end

Sent: here 's a label .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|label($1)),$0),pro:exist|here($0))
example_end

Sent: do you want to paste it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|paste(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: those are her paper clips .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|those,and_comp(n|paper(pro:dem|those,$0),n|clip-pl(pro:dem|those,$0)))
example_end

Sent: may I give you some ?
Sem: lambda $0_{ev}.Q(mod|may(v|give(pro:sub|i,qn|some,pro:per|you,$0),$0))
example_end

Sent: you don 't need a pencil .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: you had a pencil .
Sem: lambda $0_{ev}.v|have-past(pro:per|you,det:art|a($1,n|pencil($1)),$0)
example_end

Sent: here 's a pencil .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|pencil($1)),$0),pro:exist|here($0))
example_end

Sent: why don 't you take that over and show it to him .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(and(v|show(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0)),v|take(pro:per|you,pro:dem|that,$0)),$1($0)),adv|over($0)),$0),$0)
example_end

Sent: maybe he likes ball players .
Sem: lambda $0_{ev}.and(v|like-3s(pro:sub|he,lambda $1_{e}.and_comp(n|ball($1),n|play-dv($1)),$0),adv|maybe($0))
example_end

Sent: do you think he would ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|will-cond(pro:sub|he,$1),$0),$0))
example_end

Sent: did you show him the ball player ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:art|the($1,and_comp(n|ball($1),n|play-dv($1))),pro:obj|him,$0),$0))
example_end

Sent: your ball player ?
Sem: lambda $0_{e}.Q(det:poss|your($1,and_comp(n|ball($1),n|play-dv($1)),$0))
example_end

Sent: boots yes .
Sem: lambda $0_{ev}.and(n|boot-pl($0),co|yes($0))
example_end

Sent: can you fix your bike ?
Sem: lambda $0_{ev}.Q(mod|can(v|fix(pro:per|you,det:poss|your($1,n|bike($1)),$0),$0))
example_end

Sent: is that part of the two truck ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,and_comp(det:num|two($1),n|truck($1))))))
example_end

Sent: are you ready to go night_night ?
Sem: lambda $0_{ev}.Q(adj|ready(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),co|night_night($1)),$0))
example_end

Sent: you hit your head didn 't you .
Sem: lambda $0_{ev}.and(v|hit-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),not(mod|do(pro:per|you,$0),$0))
example_end

Sent: did it hurt ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:per|it,$0),$0))
example_end

Sent: poor head .
Sem: lambda $0_{e}.and(adj|poor($0),n|head($0))
example_end

Sent: don 't pull Mommy .
Sem: lambda $0_{ev}.not(mod|do(v|pull(you,n:prop|mommy,$0),$0),$0)
example_end

Sent: put pillow on the floor ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|pillow($1),$0),prep|on(det:art|the($2,n|floor($2)),$0)))
example_end

Sent: you want Mommy to sit on the floor ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.and(v|sit(you,$2),prep|on(det:art|the($3,n|floor($3)),$2))),$0))
example_end

Sent: what do you want Mommy to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.v|do($2,$1),$0),n:prop|mommy($0)),$0)
example_end

Sent: do you want Mommy to stand up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|stand(n:prop|mommy,$1),adv|up($1)),$0),$0))
example_end

Sent: Mommy stand up ?
Sem: lambda $0_{ev}.Q(and(v|stand(n:prop|mommy,$0),adv|up($0)))
example_end

Sent: what about the chair ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|chair($0))))
example_end

Sent: nice pony ?
Sem: lambda $0_{e}.Q(and(adj|nice($0),n|pony($0)))
example_end

Sent: may please ?
Sem: lambda $0_{ev}.Q(and(mod|may(you,$0),co|please($0)))
example_end

Sent: fix kitty ?
Sem: lambda $0_{ev}.Q(v|fix(you,lambda $1_{e}.n|kitty($1),$0))
example_end

Sent: make mosquito ?
Sem: lambda $0_{ev}.Q(v|make(you,lambda $1_{e}.n|mosquito($1),$0))
example_end

Sent: fine book ?
Sem: lambda $0_{e}.Q(and(adj|fine($0),n|book($0)))
example_end

Sent: don 't take those out .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(you,pro:dem|those,$0),adv|out($0)),$0),$0)
example_end

Sent: leave them in there .
Sem: lambda $0_{ev}.and(v|leave(you,pro:obj|them,$0),prep|in(adv|there($0)))
example_end

Sent: what is in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1,$0),prep|in(adv|there($0)))
example_end

Sent: get Adam 's bike !
Sem: lambda $0_{ev}.v|get(you,n:prop|adam's($1,n|bike($1)),$0)
example_end

Sent: which book ?
Sem: lambda $0_{e}.$0($1,n|book($1))
example_end

Sent: see there are no pictures .
Sem: lambda $0_{ev}.and(v|see(you,$0),cop|be-pres(qn|no($1,n|picture-pl($1)),$0))
example_end

Sent: did you read that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|read-zero(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: you gave it to him .
Sem: lambda $0_{ev}.and(v|give-past(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0))
example_end

Sent: go get it ?
Sem: lambda $0_{ev}.Q(v|get(you,pro:per|it,$0))
example_end

Sent: go get what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|get(you,$1,$0)
example_end

Sent: what am I ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|i,$0)
example_end

Sent: I help to move rocks .
Sem: lambda $0_{ev}.v|help(pro:sub|i,lambda $1_{ev}.n|move(pro:sub|i,lambda $2_{e}.n|rock-pl($2),$1),$0)
example_end

Sent: what is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: are you looking at the book ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|look-presp(pro:per|you,$0),prep|at(det:art|the($1,n|book($1)),$0)),$0))
example_end

Sent: no that 's a tape recorder .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0))),co|no($0))
example_end

Sent: yes tape recorder .
Sem: lambda $0_{ev}.and(and_comp(n|tape($0),n|record-dv($0)),co|yes($0))
example_end

Sent: read bunny .
Sem: lambda $0_{ev}.v|read-zero(you,lambda $1_{e}.n|bunny+rabbit($1),$0)
example_end

Sent: can the bunny read ?
Sem: lambda $0_{ev}.Q(mod|can(v|read-zero(det:art|the($1,n|bunny+rabbit($1)),$0),$0))
example_end

Sent: oh you 're going to read to the bunny .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|read-zero(pro:per|you,$1),prep|to(det:art|the($2,n|bunny+rabbit($2)),$1)),$0),$0),co|oh($0))
example_end

Sent: that 's a good idea .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|idea(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: you can 't write .
Sem: lambda $0_{ev}.not(mod|can(v|write(pro:per|you,$0),$0),$0)
example_end

Sent: I 'll get you .
Sem: lambda $0_{ev}.mod|~will(aux|get(pro:sub|i,pro:per|you,$0),$0)
example_end

Sent: poor Perro he was under the pillow .
Sem: lambda $0_{ev}.and(att(n:prop|perro,lambda $1_{e}.adj|poor($1)),and(aux|be-past(pro:sub|he,$0),prep|under(det:art|the($2,n|pillow($2)),$0)))
example_end

Sent: who 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: that 's little Robin Red Breast .
Sem: lambda $0_{ev}.n:prop|breast_red(pro:dem|that,$0)
example_end

Sent: what 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: you leave his pencil in there Adam .
Sem: lambda $0_{ev}.and(v|leave(pro:per|you,det:poss|his($1,n|pencil($1)),$0),prep|in(adv|there($0)))
example_end

Sent: look Adam .
Sem: lambda $0_{ev}.co|look(you,$0)
example_end

Sent: here 's one .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),pro:exist|here($0))
example_end

Sent: do you know this one ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0),$0))
example_end

Sent: now what are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|write-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: can you spell your name ?
Sem: lambda $0_{ev}.Q(mod|can(v|spell(pro:per|you,det:poss|your($1,n|name($1)),$0),$0))
example_end

Sent: mustn 't write on the book .
Sem: lambda $0_{ev}.not(mod|must(and(v|write(you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0),$0)
example_end

Sent: pencil and paper alright .
Sem: lambda $0_{ev}.and(coord|and(lambda $1_{e}.n|pencil($1),lambda $2_{e}.n|paper($2)),adj|alright($0))
example_end

Sent: does your writing look like his ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(cop|look(det:poss|your($1,n:gerund|write-presp($1)),$0),conj|like(det:poss|his,$0)),$0))
example_end

Sent: you tell me .
Sem: lambda $0_{ev}.v|tell(pro:per|you,pro:obj|me,$0)
example_end

Sent: don 't jump .
Sem: lambda $0_{ev}.not(mod|do(v|jump(you,$0),$0),$0)
example_end

Sent: he can 't write when you jump .
Sem: lambda $0_{ev}.not(conj|when(v|jump(pro:per|you,$0),mod|can(v|write(pro:sub|he,$0),$0)),$0)
example_end

Sent: put dirt up ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|dirt($1),$0),adv|up($0)))
example_end

Sent: are you a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|bulldoze-dv(pro:per|you,$0),adj|busy(pro:per|you,$0))))
example_end

Sent: why do you like to throw your book ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|like(pro:per|you,lambda $1_{ev}.v|throw(pro:per|you,det:poss|your($2,n|book($2)),$1),$0),$3($0)),$0)
example_end

Sent: oh you 're like a bulldozer ?
Sem: lambda $0_{ev}.Q(and(prep|like(det:art|a($1,n|bulldoze-dv($1)),pro:per|you,$0),co|oh($0)))
example_end

Sent: no that 's no funny .
Sem: lambda $0_{ev}.and(not(adj|fun-dn(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: you had such a funny expression .
Sem: lambda $0_{ev}.part|have-pastp(pro:per|you,qn|such(det:art|a($1,and(adj|fun-dn($1),n|expression($1)))),$0)
example_end

Sent: must go where ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|must(and(v|go(you,$0),$1($0)),$0)
example_end

Sent: Catherine too ?
Sem: lambda $0_{e}.Q(post|too(n:prop|catherine,$0))
example_end

Sent: well Cliffy 's at his house .
Sem: lambda $0_{ev}.and(prep|at(det:poss|his($1,n|house($1)),n:prop|cliffy,$0),co|well($0))
example_end

Sent: I guess Cliffy looks at Bozo at her house .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.and(and(cop|look-3s(n:prop|cliffy,$1),prep|at(n:prop|bozo,$1)),prep|at(det:poss|her($2,n|house($2)),$1)),$0)
example_end

Sent: how can you work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(and(v|work(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you don 't have anything else to put in the box do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|have(pro:per|you,lambda $1_{ev}.and(v|put-zero(post|else(pro:indef|anything),$1),prep|in(det:art|the($2,n|box($2)),$1)),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: this is your bulldozer ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:dem|this,n|bulldoze-dv(pro:dem|this,$0)))
example_end

Sent: oh my Adam bulldozer alright .
Sem: lambda $0_{ev}.and(co|alright(n:prop|adam's($1,n|bulldoze-dv($1)),$0),det:poss|my_oh($0))
example_end

Sent: don 't hit his feet .
Sem: lambda $0_{ev}.not(mod|do(v|hit-zero(you,det:poss|his($1,n|foot-pl($1)),$0),$0),$0)
example_end

Sent: you like hit ball ?
Sem: lambda $0_{ev}.Q(conj|like(pro:per|you,lambda $1_{ev}.v|hit-zero(pro:per|you,lambda $2_{e}.n|ball($2),$1),$0))
example_end

Sent: isn 't that part of your trailer ?
Sem: lambda $0_{ev}.Q(not(att(n|part(pro:dem|that,$0),prep|of(det:poss|your($1,n|trailer($1)))),$0))
example_end

Sent: you go get it .
Sem: lambda $0_{ev}.v|get(pro:per|you,pro:per|it,$0)
example_end

Sent: I 'll go get it .
Sem: lambda $0_{ev}.mod|~will(v|get(pro:sub|i,pro:per|it,$0),$0)
example_end

Sent: how did you get them in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|get(pro:per|you,pro:obj|them,$0),$1($0)),prep|in(adv|there($0))),$0)
example_end

Sent: there 's one .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),pro:exist|there($0))
example_end

Sent: two green ?
Sem: lambda $0_{e}.Q(det:num|two(n|green($0)))
example_end

Sent: I guess he 's working .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.aux|~be(part|work-presp(pro:sub|he,$1),$1),$0)
example_end

Sent: that 's a man ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|man(pro:dem|that,$0)))
example_end

Sent: what 's his name ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|his($2,n|name($2)),$0)
example_end

Sent: how can he see to deliver mail ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|can(and(v|see(pro:sub|he,lambda $1_{ev}.v|deliver(pro:sub|he,lambda $2_{e}.n|mail($2),$1),$0),$3($0)),$0)
example_end

Sent: where is a tomato ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|a($1,n|tomato($1)),$0),$2($0))
example_end

Sent: she 's gone home .
Sem: lambda $0_{ev}.aux|~be(and(part|go-pastp(pro:sub|she,$0),n|home($0)),$0)
example_end

Sent: she went home in July .
Sem: lambda $0_{ev}.and(and(v|go-past(pro:sub|she,$0),adv|home($0)),prep|in(n:prop|july,$0))
example_end

Sent: why don 't you come over here and play with the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(v|come(pro:per|you,$0),and(n|play(pro:per|you,$0),prep|with(det:art|the($1,n|ball($1)),$0))),$2($0)),adv|over(adv|here($0))),$0),$0)
example_end

Sent: you can get it .
Sem: lambda $0_{ev}.mod|can(aux|get(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: Daddy 's brief case .
Sem: n:prop|daddy's($0,n|case_brief($0))
example_end

Sent: did you get the ball ?
Sem: lambda $0_{ev}.Q(v|do-past(v|get(pro:per|you,det:art|the($1,n|ball($1)),$0),$0))
example_end

Sent: where is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s(pro:per|it,$0),$1($0))
example_end

Sent: those are Daddy 's books .
Sem: lambda $0_{ev}.n:prop|daddy's'(pro:dem|those,n|book-pl(pro:dem|those,$0))
example_end

Sent: would you like to have your books on the bookshelf too ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(and(v|have(pro:per|you,det:poss|your($2,n|book-pl($2)),$1),prep|on(det:art|the($3,n|book+shelf($3)),$1)),post|too($1)),$0),$0))
example_end

Sent: no that 's a church .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|church(pro:dem|that,$0)),co|no($0))
example_end

Sent: move your own road grader .
Sem: lambda $0_{ev}.v|move(you,det:poss|your($1,and_comp(n|road($1),and(adj|own($1),n|grade-dv($1)))),$0)
example_end

Sent: go move the road grader .
Sem: lambda $0_{ev}.v|move(you,det:art|the($1,and_comp(n|road($1),n|grade-dv($1))),$0)
example_end

Sent: you pick the road grader up .
Sem: lambda $0_{ev}.and(v|pick(pro:per|you,det:art|the($1,and_comp(n|road($1),n|grade-dv($1))),$0),adv|up($0))
example_end

Sent: the dog doesn 't want any paper does he ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|want(det:art|the($1,n|dog($1)),qn|any($2,n|paper($2)),$0),$0),$0),mod|do-3s(pro:sub|he,$0)))
example_end

Sent: here doggie .
Sem: adv|here(lambda $0_{e}.n|dog-dim($0))
example_end

Sent: that 's not a record .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|record(pro:dem|that,$0)),$0)
example_end

Sent: ask her what that is .
Sem: lambda $0_{ev}.v|ask(you,pro:obj|her,$0)
example_end

Sent: that 's a tape recorder .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)))
example_end

Sent: don 't touch .
Sem: lambda $0_{ev}.not(mod|do(v|touch(you,$0),$0),$0)
example_end

Sent: what is it doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(part|do-presp(pro:per|it,$1,$0),$0)
example_end

Sent: record is playing ?
Sem: lambda $0_{ev}.Q(aux|be-3s(part|play-presp(lambda $1_{e}.n|record($1),$0),$0))
example_end

Sent: what does it do when it plays ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(v|play-3s(pro:per|it,$0),mod|do-3s(v|do(pro:per|it,$1,$0),$0))
example_end

Sent: do you hear a horn playing ?
Sem: lambda $0_{ev}.Q(mod|do(v|hear(pro:per|you,lambda $1_{ev}.part|play-presp(det:art|a($2,n|horn($2)),$1),$0),$0))
example_end

Sent: I don 't hear a horn .
Sem: lambda $0_{ev}.not(mod|do(v|hear(pro:sub|i,det:art|a($1,n|horn($1)),$0),$0),$0)
example_end

Sent: is there a horn on there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|horn($1)),$0),prep|on(adv|there($0))))
example_end

Sent: did he like the water ?
Sem: lambda $0_{ev}.Q(mod|do-past(co|like(pro:sub|he,det:art|the($1,n|water($1)),$0),$0))
example_end

Sent: what do you see in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),adv|in(adv|there($0))),$0)
example_end

Sent: where does the ladder go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|go(det:art|the($1,n|ladder($1)),$0),$2($0)),$0)
example_end

Sent: can you put it on ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|on($0)),$0))
example_end

Sent: can you put them in there ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|in(adv|there($0))),$0))
example_end

Sent: I thought you couldn 't do it .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.not(mod|could(v|do(pro:per|you,pro:per|it,$1),$1),$1),$0)
example_end

Sent: that 's no ladder for that .
Sem: lambda $0_{ev}.not(att(n|ladder(pro:dem|that,$0),prep|for(pro:dem|that)),$0)
example_end

Sent: you read your paper and I 'll read mine .
Sem: lambda $0_{ev}.coord|and(mod|~will(v|read-zero(pro:sub|i,pro:poss|mine,$0),$0),v|read-zero(pro:per|you,det:poss|your($1,n|paper($1)),$0))
example_end

Sent: mine paper .
Sem: n|mine($0,n|paper($0))
example_end

Sent: alright it 's yours .
Sem: lambda $0_{ev}.and(pro:poss|yours(pro:per|it,$0),co|alright($0))
example_end

Sent: he 's going out .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:sub|he,$0),adv|out($0)),$0)
example_end

Sent: would you like some soup ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|soup($1)),$0),$0))
example_end

Sent: what kind of soup ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|soup($2))))
example_end

Sent: well you told her to sit there .
Sem: lambda $0_{ev}.and(v|tell-past(pro:per|you,lambda $1_{ev}.and(v|sit(pro:obj|her,$1),adv|there($1)),$0),co|well($0))
example_end

Sent: Mommy 's tea ?
Sem: lambda $0_{e}.Q(n:prop|mommy's($1,n|tea($1),$0))
example_end

Sent: what are you doing Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: did you see the sun ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|sun($1)),$0),$0))
example_end

Sent: is that a lady ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|lady(pro:rel|that,$0)))
example_end

Sent: is it hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:per|it,$0))
example_end

Sent: you can 't reach it ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|reach(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: put water in it ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|water($1),$0),prep|in(pro:per|it,$0)))
example_end

Sent: Adam drive record ?
Sem: lambda $0_{ev}.Q(n|drive(n:prop|adam,lambda $1_{e}.n|record($1),$0))
example_end

Sent: where 's your truck going ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|~be(and(part|go-presp(det:poss|your($1,n|truck($1)),$0),$2($0)),$0)
example_end

Sent: no there 's your paper .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|your($1,n|paper($1)),$0),pro:exist|there($0)),co|no($0))
example_end

Sent: oh doggie write paper ?
Sem: lambda $0_{ev}.Q(and(v|write(lambda $1_{e}.n|dog-dim($1),lambda $2_{e}.n|paper($2),$0),co|oh($0)))
example_end

Sent: that 's a smart doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|dog-dim(pro:dem|that,$0),adj|smart(pro:dem|that,$0)))
example_end

Sent: what did the doggie write ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|write(det:art|the($1,n|dog-dim($1)),$2,$0),$0)
example_end

Sent: that 's a hole .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|hole(pro:dem|that,$0))
example_end

Sent: oh climb ?
Sem: lambda $0_{ev}.Q(and(v|climb(you,$0),co|oh($0)))
example_end

Sent: what did he climb ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|climb(pro:sub|he,$1,$0),$0)
example_end

Sent: do you want to write on here ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|write(pro:per|you,$1),prep|on(adv|here($1))),$0),$0))
example_end

Sent: Daddy went to school .
Sem: lambda $0_{ev}.and(v|go-past(n:prop|daddy,$0),prep|to(lambda $1_{e}.n|school($1),$0))
example_end

Sent: those are her feet .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|those,n|foot-pl(pro:dem|those,$0))
example_end

Sent: how many feet does she have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|have(pro:sub|she,lambda $1_{e}.and($2(qn|many($1)),n|foot-pl($1)),$0),$0)
example_end

Sent: how many feet do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|foot-pl($1)),$0),$0)
example_end

Sent: Catherine stay tonight ?
Sem: lambda $0_{ev}.Q(and(n|stay(n:prop|catherine,$0),adv:tem|tonight($0)))
example_end

Sent: no Mommy is going to stay tonight .
Sem: lambda $0_{ev}.and(aux|be-3s(part|go-presp(n:prop|mommy,lambda $1_{ev}.and(cop|stay(n:prop|mommy,$1),adv:tem|tonight($1)),$0),$0),co|no($0))
example_end

Sent: yes Adam will stay tonight too .
Sem: lambda $0_{ev}.and(mod|will(and(and(cop|stay(n:prop|adam,$0),adv:tem|tonight($0)),post|too($0)),$0),co|yes($0))
example_end

Sent: no Howe won 't stay tonight .
Sem: lambda $0_{ev}.and(not(mod|will(and(cop|stay(n:prop|howe,$0),adv:tem|tonight($0)),$0),$0),co|no($0))
example_end

Sent: no there 's no fire back there .
Sem: lambda $0_{ev}.and(and(cop|~be(qn|no($1,n|fire($1)),$0),adv|back(adv|there($0))),co|no($0))
example_end

Sent: you drawing a kitty ?
Sem: lambda $0_{ev}.Q(n|drawing(pro:per|you,det:art|a($1,n|kitty($1)),$0))
example_end

Sent: what does Daddy say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|say(n:prop|daddy,$1,$0),$0)
example_end

Sent: write circle ?
Sem: lambda $0_{ev}.Q(v|write(you,lambda $1_{e}.n|circle($1),$0))
example_end

Sent: bumble bee ?
Sem: lambda $0_{e}.Q(n|bee_bumble($0))
example_end

Sent: where is he ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:sub|he,$0),$1($0))
example_end

Sent: why don 't you write that ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|write(pro:per|you,pro:dem|that,$0),$1($0)),$0),$0)
example_end

Sent: is that the bumble bee ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|bee_bumble(pro:rel|that,$0)))
example_end

Sent: do you want to read a book ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|read-zero(pro:per|you,det:art|a($2,n|book($2)),$1),$0),$0))
example_end

Sent: who is this .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:dem|this($0,$1)
example_end

Sent: Donald_Duck go ?
Sem: lambda $0_{ev}.Q(v|go(n:prop|donald_duck,$0))
example_end

Sent: I don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: did you look in your basket ?
Sem: lambda $0_{ev}.Q(v|do-past(and(cop|look(pro:per|you,$0),prep|in(det:poss|your($1,n|basket($1)),$0)),$0))
example_end

Sent: can you go with your bike ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|go(pro:per|you,$0),prep|with(det:poss|your($1,n|bike($1)),$0)),$0))
example_end

Sent: look a trailer ?
Sem: lambda $0_{ev}.Q(and(cop|look(you,$0),det:art|a($1,n|trailer($1))))
example_end

Sent: what are you going to pull ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|pull($2,$1),$0),$0)
example_end

Sent: pull Adam 's bike ?
Sem: lambda $0_{ev}.Q(v|pull(you,n:prop|adam's($1,n|bike($1)),$0))
example_end

Sent: no don 't take his head off .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|take(you,det:poss|his($1,n|head($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: leave him on there so he can drive it .
Sem: lambda $0_{ev}.conj|so(mod|can(v|drive(pro:sub|he,pro:per|it,$0),$0),and(v|leave(you,pro:obj|him,$0),prep|on(adv|there($0))))
example_end

Sent: yes his head is off .
Sem: lambda $0_{e}.lambda $1_{ev}.det:poss|his($0,n|head($0,$1))
example_end

Sent: do you have a comb ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|comb($1)),$0),$0))
example_end

Sent: is that a piggie ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pig-dim(pro:rel|that,$0)))
example_end

Sent: I can 't see .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:sub|i,$0),$0),$0)
example_end

Sent: no I can 't see .
Sem: lambda $0_{ev}.and(not(mod|can(v|see(pro:sub|i,$0),$0),$0),co|no($0))
example_end

Sent: where 's a ladder ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|ladder($1)),$0),$2($0))
example_end

Sent: that 's the tattooed man .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and(n|man(pro:dem|that,$0),part|tattoo-pastp(pro:dem|that,$0)))
example_end

Sent: tattooed man .
Sem: lambda $0_{e}.and(part|tattoo-pastp($0),n|man($0))
example_end

Sent: may I sit beside you ?
Sem: lambda $0_{ev}.Q(mod|may(and(v|sit(pro:sub|i,$0),prep|beside(pro:per|you,$0)),$0))
example_end

Sent: Judy and Buzz .
Sem: coord|and(n:prop|judy,n:prop|buzz)
example_end

Sent: you had an apple when you got up from your nap .
Sem: lambda $0_{ev}.conj|when(and(v|get-past_up(pro:per|you,$0),prep|from(det:poss|your($1,n|nap($1)),$0)),v|have-past(pro:per|you,det:art|a($2,n|apple($2)),$0))
example_end

Sent: Adam want to close the box ?
Sem: lambda $0_{ev}.Q(v|want(n:prop|adam,lambda $1_{ev}.v|close(n:prop|adam,det:art|the($2,n|box($2)),$1),$0))
example_end

Sent: do you want paper ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.n|paper($1),$0),$0))
example_end

Sent: whose brief case is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,and_comp(adj|brief(pro:dem|that,$0),n|case(pro:dem|that,$0)))
example_end

Sent: is that part of the game ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|game($1)))))
example_end

Sent: oh pin game .
Sem: lambda $0_{ev}.and(and_comp(n|pin($0),n|game($0)),co|oh($0))
example_end

Sent: John Buzzhart !
Sem:
example_end

Sent: Adam you don 't tell him what to write .
Sem: lambda $2_{e}.lambda $0_{ev}.and(not(mod|do(v|tell(pro:per|you,lambda $1_{ev}.v|write(pro:obj|him,$2,$1),$0),$0),$0),n:prop|adam)
example_end

Sent: don 't sit on that .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(you,$0),prep|on(pro:dem|that,$0)),$0),$0)
example_end

Sent: here 's your shoe .
Sem: lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|shoe($1)),$0),pro:exist|here($0))
example_end

Sent: no John Buzzhart .
Sem: lambda $0_{ev}.and(n:prop|buzzhart_john($0),co|no($0))
example_end

Sent: what kind of game ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|game($2))))
example_end

Sent: which one ?
Sem: lambda $0_{e}.$0($1,pro:indef|one($1))
example_end

Sent: oh shave a pig .
Sem: lambda $0_{ev}.and(v|shave(you,det:art|a($1,n|pig($1)),$0),co|oh($0))
example_end

Sent: that one ?
Sem: lambda $0_{e}.Q(pro:dem|that($1,pro:indef|one($1),$0))
example_end

Sent: you haven 't seen Bozo in a long time have you ?
Sem: lambda $0_{ev}.Q(and(not(aux|have(and(part|see-pastp(pro:per|you,n:prop|bozo,$0),prep|in(det:art|a($1,and(adj|long($1),n|time($1))),$0)),$0),$0),v|have(pro:per|you,$0)))
example_end

Sent: are you sitting with me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|sit-presp(pro:per|you,$0),prep|with(pro:obj|me,$0)),$0))
example_end

Sent: oh you found bunny .
Sem: lambda $0_{ev}.and(v|found(pro:per|you,lambda $1_{e}.n|bunny+rabbit($1),$0),co|oh($0))
example_end

Sent: that 's David 's Bunny_Rabbit .
Sem: lambda $0_{ev}.n:prop|david's'(pro:dem|that,n:prop|bunny_rabbit(pro:dem|that,$0))
example_end

Sent: yes I remember David .
Sem: lambda $0_{ev}.and(v|remember(pro:sub|i,n:prop|david,$0),co|yes($0))
example_end

Sent: do you remember David ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,n:prop|david,$0),$0))
example_end

Sent: no not her shoe .
Sem: lambda $0_{ev}.and(not(det:poss|her($1,n|shoe($1)),$0),co|no($0))
example_end

Sent: write on the paper .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: write on his shoe ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),prep|on(det:poss|his($1,n|shoe($1)),$0)))
example_end

Sent: no you can 't write on Mr Cromer 's show .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|write(pro:per|you,$0),prep|on(n:prop|cromer_mr's($1,n|show($1)),$0)),$0),$0),co|no($0))
example_end

Sent: like Adam 's horsie .
Sem: prep|like(n:prop|adam's($0,n|horse-dim($0)))
example_end

Sent: yes there 's a horse there .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|horse($1)),$0),adv|there($0)),co|yes($0))
example_end

Sent: he can 't copy me .
Sem: lambda $0_{ev}.not(mod|can(v|copy(pro:sub|he,pro:obj|me,$0),$0),$0)
example_end

Sent: I don 't care .
Sem: lambda $0_{ev}.not(mod|do(v|care(pro:sub|i,$0),$0),$0)
example_end

Sent: oh you 're going to give the kitty a ride in your wagon ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|give(pro:per|you,det:art|a($2,att(n|ride($2),prep|in(det:poss|your($3,n|wagon($3))))),det:art|the($4,n|kitty($4)),$1),$0),$0),co|oh($0)))
example_end

Sent: do you have a bite ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|bite($1)),$0),$0))
example_end

Sent: can you tell Mr Cromer about Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|tell(pro:per|you,n:prop|cromer_mr,$0),prep|about(n:prop|humpty_dumpty,$0)),$0))
example_end

Sent: oh he wants to shake hands .
Sem: lambda $0_{ev}.and(v|want-3s(pro:sub|he,lambda $1_{ev}.n|shake(pro:sub|he,lambda $2_{e}.n|hand-pl($2),$1),$0),co|oh($0))
example_end

Sent: is that a light ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|light(pro:rel|that,$0)))
example_end

Sent: is that Adam 's shoe ?
Sem: lambda $0_{ev}.Q(n:prop|adam's'(pro:dem|that,n|shoe(pro:dem|that,$0)))
example_end

Sent: can you play it ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you like to walk ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,lambda $1_{ev}.v|walk(pro:per|you,$1),$0))
example_end

Sent: Mommy can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(n:prop|mommy,$0),$0),$0)
example_end

Sent: no Mommy can 't march .
Sem: lambda $0_{ev}.and(not(mod|can(v|march(n:prop|mommy,$0),$0),$0),co|no($0))
example_end

Sent: maybe Catherine can march .
Sem: lambda $0_{ev}.mod|can(and(v|march(n:prop|catherine,$0),adv|maybe($0)),$0)
example_end

Sent: no you march .
Sem: lambda $0_{ev}.and(v|march(pro:per|you,$0),co|no($0))
example_end

Sent: where is Catherine ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|catherine,$0),$1($0))
example_end

Sent: no you write on paper with pencil .
Sem: lambda $0_{ev}.and(and(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|paper($1),$0)),prep|with(lambda $2_{e}.n|pencil($2),$0)),co|no($0))
example_end


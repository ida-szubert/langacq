Sent: you want to put that on the floor ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:dem|that,$1),prep|on(det:art|the($2,n|floor($2)),$1)),$0))
example_end

Sent: I didn 't bring my books today .
Sem: lambda $0_{ev}.not(mod|do(and(v|bring(pro:sub|i,det:poss|my($1,n|book-pl($1)),$0),adv:tem|today($0)),$0),$0)
example_end

Sent: that 's a new word .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|word(pro:dem|that,$0),adj|new(pro:dem|that,$0)))
example_end

Sent: we can 't figure it out .
Sem: lambda $0_{ev}.not(mod|can(and(v|figure(pro:sub|we,pro:per|it,$0),adv|out($0)),$0),$0)
example_end

Sent: fight him .
Sem: lambda $0_{ev}.v|fight(you,pro:obj|him,$0)
example_end

Sent: I think that 's a stick Adam .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|stick(pro:dem|that,$1)),$0)
example_end

Sent: what does he have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(v|have(pro:sub|he,$1,$0),$0)
example_end

Sent: is it a sword ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|sword(pro:per|it,$0)))
example_end

Sent: or a cane ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|cane($1),$0))
example_end

Sent: fishing rod ?
Sem: lambda $0_{e}.Q(and_comp(part|fish-presp($0),n|rod($0)))
example_end

Sent: why don 't you talk ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|talk(pro:per|you,$0),$1($0)),$0),$0)
example_end

Sent: okay no more sugar Adam .
Sem: lambda $0_{ev}.and(not(lambda $1_{e}.and(qn|more($1),n|sugar($1)),$0),co|okay($0))
example_end

Sent: you don 't need milk .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,lambda $1_{e}.n|milk($1),$0),$0),$0)
example_end

Sent: are you going to put it on the table ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$1),prep|on(det:art|the($2,n|table($2)),$1)),$0),$0))
example_end

Sent: do you want to take the napkins for me ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,det:art|the($2,n|napkin-pl($2)),$1),prep|for(pro:obj|me,$1)),$0),$0))
example_end

Sent: no more sugar for you Adam .
Sem: qn|no($0,att(and(qn|more($0),n|sugar($0)),prep|for(pro:per|you)))
example_end

Sent: I thought I heard something on the tape .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.and(v|hear-past(pro:sub|i,lambda $2_{e}.pro:indef|something($2),$1),prep|on(det:art|the($3,n|tape($3)),$1)),$0)
example_end

Sent: I don 't think I 've heard that before .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(part|hear-pastp(pro:sub|i,pro:rel|that,$1),adv|before($1)),$1),$0),$0),$0)
example_end

Sent: the man on the radio .
Sem: det:art|the($0,att(n|man($0),prep|on(det:art|the($1,n|radio($1)))))
example_end

Sent: you want some more espresso ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,qn|some($1,and(qn|more($1),n|espresso($1))),$0))
example_end

Sent: some espresso .
Sem: qn|some($0,n|espresso($0))
example_end

Sent: no sugar .
Sem: qn|no($0,n|sugar($0))
example_end

Sent: just take the spoon out if you want it .
Sem: lambda $0_{ev}.conj|if(v|want(pro:per|you,pro:per|it,$0),and(and(v|take(you,det:art|the($1,v|spoon($1)),$0),adv|just($0)),adv|out($0)))
example_end

Sent: no you 've already put sugar in your espresso .
Sem: lambda $0_{ev}.and(aux|~have(and(and(v|put-zero(pro:per|you,lambda $1_{e}.n|sugar($1),$0),adv|already($0)),prep|in(det:poss|your($2,n|espresso($2)),$0)),$0),co|no($0))
example_end

Sent: put them on the chair .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:obj|them,$0),prep|on(det:art|the($1,n|chair($1)),$0))
example_end

Sent: you simply don 't want to put them in the chair ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|want(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),prep|in(det:art|the($2,n|chair($2)),$1)),$0),adv|simple-dadj($0)),$0),$0))
example_end

Sent: the tape recorder .
Sem: det:art|the($0,and_comp(n|tape($0),n|record-dv($0)))
example_end

Sent: no Adam you can 't turn his head .
Sem: lambda $0_{ev}.and(not(mod|can(v|turn(pro:per|you,det:poss|his($1,n|head($1)),$0),$0),$0),co|no($0))
example_end

Sent: that 's a nice big brother .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(and(n|brother(pro:dem|that,$0),adj|nice(pro:dem|that,$0)),adj|big(pro:dem|that,$0)))
example_end

Sent: baby 's not talking to you ?
Sem: lambda $0_{ev}.Q(not(aux|~be(and(part|talk-presp(lambda $1_{e}.n|baby($1),$0),prep|to(pro:per|you,$0)),$0),$0))
example_end

Sent: bring it over Adam .
Sem: lambda $0_{ev}.and(v|bring(you,pro:per|it,$0),adv|over($0))
example_end

Sent: like this .
Sem: prep|like(pro:dem|this)
example_end

Sent: you try .
Sem: lambda $0_{ev}.v|try(pro:per|you,$0)
example_end

Sent: you 're waving ?
Sem: lambda $0_{ev}.Q(aux|~be(part|wave-presp(pro:per|you,$0),$0))
example_end

Sent: where is that wheel ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(pro:dem|that($1,n|wheel($1)),$0),$2($0))
example_end

Sent: come with you ?
Sem: lambda $0_{ev}.Q(and(v|come(you,$0),prep|with(pro:per|you,$0)))
example_end

Sent: I thought I 'd sit out here so if Paul cries it won 't make so much noise on the microphone .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.adv|so(not(mod|will(conj|if(v|cry-3s(n:prop|paul,$1),v|make(pro:per|it,adv|so(qn|much($2,att(n|noise($2),prep|on(det:art|the($3,n|microphone($3)))))),$1)),$1),$1),mod|~genmod(and(v|sit(pro:sub|i,$1),adv|out(adv|here($1))),$1)),$0)
example_end

Sent: oh Adam there 's something new .
Sem: lambda $0_{ev}.and(cop|~be(att(pro:indef|something,lambda $1_{e}.adj|new($1)),$0),co|oh($0))
example_end

Sent: is that now ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(pro:rel|that,$0),adv|now($0)))
example_end

Sent: is that a garage ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|garage(pro:rel|that,$0)))
example_end

Sent: can the car go down the ramp ?
Sem: lambda $0_{ev}.Q(n|can(and(v|go(det:art|the($1,n|car($1)),$0),adv|down(det:art|the($2,n|ramp($2)),$0)),$0))
example_end

Sent: can it go down ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|go(pro:per|it,$0),adv|down($0)),$0))
example_end

Sent: the sun !
Sem: det:art|the($0,n|sun($0))
example_end

Sent: the sun isn 't shining in that window .
Sem: lambda $0_{ev}.not(cop|be(and(part|shine-presp(det:art|the($1,n|sun($1)),$0),prep|in(pro:dem|that($2,n|window($2)),$0)),$0),$0)
example_end

Sent: it 's on the other side of the house .
Sem: lambda $0_{ev}.and(cop|~be(pro:per|it,$0),adv|on(det:art|the($1,att(and(qn|other($1),n|side($1)),prep|of(det:art|the($2,n|house($2))))),$0))
example_end

Sent: you be what Adam ?
Sem: lambda $0_{ev}.Q(pro:int|what(pro:per|you,$0))
example_end

Sent: no thank_you Adam .
Sem: qn|no($0,n|thank_you($0))
example_end

Sent: no she doesn 't want any more .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|she,qn|any($1,pro:indef|more($1)),$0),$0),$0),co|no($0))
example_end

Sent: did you try it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|try(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you like yours better .
Sem: lambda $0_{ev}.v|like(pro:per|you,lambda $1_{ev}.adj|good-cp(pro:poss|yours,$1),$0)
example_end

Sent: what 's broken ?
Sem: lambda $1_{e}.lambda $0_{ev}.part|break-pastp($1,$0)
example_end

Sent: I 'm broken !
Sem: lambda $0_{ev}.part|break-pastp(pro:sub|i,$0)
example_end

Sent: I 'm not hurt .
Sem: lambda $0_{ev}.not(v|hurt-zero(pro:sub|i,$0),$0)
example_end

Sent: I 've finished mine .
Sem: lambda $0_{ev}.aux|~have(part|finish-pastp(pro:sub|i,pro:poss|mine,$0),$0)
example_end

Sent: it 's very good .
Sem: lambda $0_{ev}.adv|very(adj|good(pro:per|it,$0))
example_end

Sent: is yours good ?
Sem: lambda $0_{ev}.Q(adj|good(pro:poss|yours,$0))
example_end

Sent: I 'm all finished .
Sem: lambda $0_{ev}.adv|all(part|finish-pastp(pro:sub|i,$0))
example_end

Sent: let me see the toy .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|see(pro:obj|me,det:art|the($2,n|toy($2)),$1),$0)
example_end

Sent: can you make it go ?
Sem: lambda $0_{ev}.Q(mod|can(v|make(pro:per|you,lambda $1_{ev}.v|go(pro:per|it,$1),$0),$0))
example_end

Sent: I don 't know the name for it .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,det:art|the($1,att(n|name($1),prep|for(pro:per|it))),$0),$0),$0)
example_end

Sent: don 't put your fingers on it .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,det:poss|your($1,n|finger-pl($1)),$0),prep|on(pro:per|it,$0)),$0),$0)
example_end

Sent: you might hurt your fingers .
Sem: lambda $0_{ev}.mod|might(v|hurt-zero(pro:per|you,det:poss|your($1,n|finger-pl($1)),$0),$0)
example_end

Sent: no you do it with this .
Sem: lambda $0_{ev}.and(and(v|do(pro:per|you,pro:per|it,$0),prep|with(pro:dem|this,$0)),co|no($0))
example_end

Sent: oh your telephone .
Sem: lambda $0_{ev}.and(det:poss|your($1,n|telephone($1),$0),co|oh($0))
example_end

Sent: you going to talk on the telephone ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|talk(pro:per|you,$1),prep|on(det:art|the($2,n|telephone($2)),$1)),$0))
example_end

Sent: Paul Douglas ?
Sem: lambda $0_{e}.Q(n:prop|douglas_paul($0))
example_end

Sent: what about him ?
Sem: att(pro:int|what,prep|about(pro:obj|him))
example_end

Sent: he 's a baby ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:sub|he,n|baby(pro:sub|he,$0)))
example_end

Sent: yes he is a little baby .
Sem: lambda $0_{ev}.and(det:art|a(pro:sub|he,and(n|baby(pro:sub|he,$0),adj|little(pro:sub|he,$0))),co|yes($0))
example_end

Sent: no Adam you just shoot .
Sem: lambda $0_{ev}.and(and(co|shoot(pro:per|you,$0),adv|just($0)),co|no($0))
example_end

Sent: you don 't hit anybody with it .
Sem: lambda $0_{ev}.not(mod|do(and(v|hit-zero(pro:per|you,lambda $1_{e}.pro:indef|anybody($1),$0),prep|with(pro:per|it,$0)),$0),$0)
example_end

Sent: Adam do you want to see something else ?
Sem: lambda $0_{ev}.Q(v|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,post|else(lambda $2_{e}.pro:indef|something($2)),$1),$0),$0))
example_end

Sent: you 're not big enough !
Sem: lambda $0_{ev}.not(adv|enough(adj|big(pro:per|you,$0)),$0)
example_end

Sent: there 's one wheel you 're right .
Sem: lambda $0_{ev}.and(and(aux|~be(lambda $1_{e}.det:num|one(n|wheel($1)),$0),pro:exist|there($0)),n|right(pro:per|you,$0))
example_end

Sent: you can 't wear it tomorrow ?
Sem: lambda $0_{ev}.Q(not(mod|can(and(v|wear(pro:per|you,pro:per|it,$0),adv:tem|tomorrow($0)),$0),$0))
example_end

Sent: simply wear it ?
Sem: lambda $0_{ev}.Q(and(v|wear(you,pro:per|it,$0),adv|simple-dadj($0)))
example_end

Sent: you don 't drink cold coffee until summer time .
Sem: lambda $0_{ev}.not(mod|do(and(v|drink(pro:per|you,lambda $1_{e}.and(adj|cold($1),n|coffee($1)),$0),prep|until(lambda $2_{e}.and_comp(n|summer($2),n|time($2)),$0)),$0),$0)
example_end

Sent: throw it away now ?
Sem: lambda $0_{ev}.Q(and(and(v|throw(you,pro:per|it,$0),adv|away($0)),adv|now($0)))
example_end

Sent: put the coffee cups back .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,and_comp(n|coffee($1),v|cup-3s($1))),$0),adv|back($0))
example_end

Sent: I 'll hold them here .
Sem: lambda $0_{ev}.mod|~will(and(v|hold(pro:sub|i,pro:obj|them,$0),adv|here($0)),$0)
example_end

Sent: wait don 't you unscrew it first ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|screw(pro:per|you,pro:per|it,$0),adv|first($0)),$0),$0),co|wait(you,$0)))
example_end

Sent: the green one .
Sem: det:art|the($0,and_comp(n|green($0),pro:indef|one($0)))
example_end

Sent: no no !
Sem: lambda $0_{ev}.and(co|no($0),co|no($0))
example_end

Sent: that 's pink .
Sem: lambda $0_{ev}.adj|pink(pro:dem|that,$0)
example_end

Sent: oh what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|oh($0))
example_end

Sent: I wouldn 't put it on with blocks in it .
Sem: lambda $0_{ev}.not(mod|will(and(and(v|put-zero(pro:sub|i,pro:per|it,$0),adv|on($0)),prep|with(lambda $1_{e}.att(n|block-pl($1),prep|in(pro:per|it)),$0)),$0),$0)
example_end

Sent: don 't want what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(v|want(you,$1,$0),$0),$0)
example_end

Sent: you simply don 't want what ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|want(pro:per|you,$1,$0),adv|simple-dadj($0)),$0),$0)
example_end

Sent: want beans in there ?
Sem: lambda $0_{ev}.Q(and(v|want(you,lambda $1_{e}.n|bean-pl($1),$0),prep|in(adv|there($0))))
example_end

Sent: how d you know there are beans in there ?
Sem: lambda $3_{e}.lambda $0_{ev}.v|do(and(v|know(pro:per|you,lambda $1_{ev}.and(cop|be-pres(lambda $2_{e}.n|bean-pl($2),$1),prep|in(adv|there($1))),$0),$3($0)),$0)
example_end

Sent: no they don 't come out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|come(pro:sub|they,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: you can 't wear it ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|wear(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: you heard something ?
Sem: lambda $0_{ev}.Q(v|hear-past(pro:per|you,lambda $1_{e}.pro:indef|something($1),$0))
example_end

Sent: what do you see out the window ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),prep|out(det:art|the($2,n|window($2)),$0)),$0)
example_end

Sent: I had plenty .
Sem: lambda $0_{ev}.and(v|have-past(pro:sub|i,$0),n|plenty($0))
example_end

Sent: I 've had enough .
Sem: lambda $0_{ev}.aux|~have(and(part|have-pastp(pro:sub|i,$0),adv|enough($0)),$0)
example_end

Sent: a little one .
Sem: det:art|a($0,att(pro:indef|one,lambda $1_{e}.adj|little($1),$0))
example_end

Sent: it 's all_gone .
Sem: lambda $0_{ev}.adj|all_gone(pro:per|it,$0)
example_end

Sent: what about the tow truck ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|tow($0),n|truck($0)))))
example_end

Sent: maybe somebody had to stop suddenly .
Sem: lambda $0_{ev}.and(v|have-past(pro:indef|somebody,lambda $1_{ev}.and(n|stop(pro:indef|somebody,$1),adv|sudden-dadj($1)),$0),adv|maybe($0))
example_end

Sent: no you had juice in your espresso .
Sem: lambda $0_{ev}.and(and(v|have-past(pro:per|you,lambda $1_{e}.n|juice($1),$0),prep|in(det:poss|your($2,n|espresso($2)),$0)),co|no($0))
example_end

Sent: you 're making trains ?
Sem: lambda $0_{ev}.Q(aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.n|train-pl($1),$0),$0))
example_end

Sent: I 'm not going any place .
Sem: lambda $0_{ev}.not(cop|~be(part|go-presp(pro:sub|i,qn|any($1,n|place($1)),$0),$0),$0)
example_end

Sent: oh you 're going to do that puzzle ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|do(pro:per|you,pro:dem|that($2,n|puzzle($2)),$1),$0),$0),co|oh($0)))
example_end

Sent: nobody wants to touch it .
Sem: lambda $0_{ev}.v|want-3s(lambda $1_{e}.pro:indef|nobody($1),lambda $2_{ev}.v|touch(lambda $3_{e}.pro:indef|nobody($3),pro:per|it,$2),$0)
example_end

Sent: did you say excuse me please ?
Sem: lambda $0_{ev}.Q(and(v|do-past(v|say(pro:per|you,lambda $1_{ev}.v|excuse(_,pro:obj|me,$1),$0),$0),co|please($0)))
example_end

Sent: you 're not funny ?
Sem: lambda $0_{ev}.Q(not(adj|fun-dn(pro:per|you,$0),$0))
example_end

Sent: those are carrots .
Sem: lambda $0_{ev}.n|carrot-pl(pro:dem|those,$0)
example_end

Sent: it goes there .
Sem: lambda $0_{ev}.and(v|go-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: that 's cats ?
Sem: lambda $0_{ev}.Q(n|cat-pl(pro:dem|that,$0))
example_end

Sent: Adam look up on the ceiling .
Sem: lambda $0_{ev}.and(and(co|look(you,$0),adv|up($0)),prep|on(det:art|the($1,n|ceiling($1)),$0))
example_end

Sent: I see something up on the ceiling .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,lambda $1_{e}.pro:indef|something($1),$0),adv|up(prep|on(det:art|the($2,n|ceiling($2)),$0)))
example_end

Sent: you like tree ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,lambda $1_{e}.n|tree($1),$0))
example_end

Sent: I don 't have paper ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|have(pro:sub|i,lambda $1_{e}.n|paper($1),$0),$0),$0))
example_end

Sent: I dropped it .
Sem: lambda $0_{ev}.v|drop-past(pro:sub|i,pro:per|it,$0)
example_end

Sent: where is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:dem|that,$0),$1($0))
example_end

Sent: it sounded like busy .
Sem: lambda $0_{ev}.and(v|sound-past(pro:per|it,$0),co|like(lambda $1_{e}.adj|busy($1),$0))
example_end

Sent: why are you doing that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: it 'll be ready soon .
Sem: lambda $0_{ev}.mod|~will(adj|soon(adj|ready(pro:per|it,$0)),$0)
example_end

Sent: I 'm folding diapers .
Sem: lambda $0_{ev}.aux|~be(part|fold-presp(pro:sub|i,lambda $1_{e}.n|diaper-pl($1),$0),$0)
example_end

Sent: a diaper .
Sem: det:art|a($0,n|diaper($0))
example_end

Sent: I hear you .
Sem: lambda $0_{ev}.v|hear(pro:sub|i,pro:per|you,$0)
example_end

Sent: I 'm looking for a pencil .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:sub|i,$0),prep|for(det:art|a($1,n|pencil($1)),$0)),$0)
example_end

Sent: what you doing Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.part|do-presp(pro:per|you,$1,$0)
example_end

Sent: you simply want that ?
Sem: lambda $0_{ev}.Q(and(v|want(pro:per|you,pro:dem|that,$0),adv|simple-dadj($0)))
example_end

Sent: here are some more .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some($1,pro:indef|more($1)),$0),adv|here($0))
example_end

Sent: who 's over in the meadow ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),adv|over(prep|in(det:art|the($2,n|meadow($2)),$0)))
example_end

Sent: what happened to her ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|her,$0))
example_end

Sent: what do you think ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|think(pro:per|you,$1,$0),$0)
example_end

Sent: what d you get from the cow ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|get(pro:per|you,$1,$0),prep|from(det:art|the($2,n|cow($2)),$0)),$0)
example_end

Sent: oh I thought it was milk .
Sem: lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.n|milk(pro:per|it,$1),$0),co|oh($0))
example_end

Sent: what d you think ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|think(pro:per|you,$1,$0),$0)
example_end

Sent: a pony .
Sem: det:art|a($0,n|pony($0))
example_end

Sent: what are these ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|these,$0)
example_end

Sent: do you have some chalk ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,qn|some($1,n|chalk($1)),$0),$0))
example_end

Sent: would you like some cookies ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|cookie-pl($1)),$0),$0))
example_end

Sent: what was that word honey ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that($2,n|word($2)),$0)
example_end

Sent: was that like her ?
Sem: lambda $0_{ev}.Q(cop|be-past(v|like(pro:dem|that,pro:obj|her,$0),$0))
example_end

Sent: just move Bobo out_of your way .
Sem: lambda $0_{ev}.and(and(n|move(you,n:prop|bobo,$0),adj|just($0)),prep|out_of(det:poss|your($1,n|way($1)),$0))
example_end

Sent: is that money ?
Sem: lambda $0_{ev}.Q(n|money(pro:dem|that,$0))
example_end

Sent: what are you going to buy with that ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|buy(pro:per|you,$2,$1),prep|with(pro:dem|that,$1)),$0),$0)
example_end

Sent: fish swim in the water with you ?
Sem: lambda $0_{ev}.Q(and(and(n|swim(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|water($2)),$0)),prep|with(pro:per|you,$0)))
example_end

Sent: where are some fish ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-pres(qn|some($1,n|fish($1)),$0),$2($0))
example_end

Sent: red fish ?
Sem: lambda $0_{e}.Q(and(adj|red($0),n|fish($0)))
example_end

Sent: what other kind of fish ?
Sem: lambda $0_{e}.$0($1,att(and(qn|other($1),n|kind($1)),prep|of(lambda $2_{e}.n|fish($2))))
example_end

Sent: you 're swimming ?
Sem: lambda $0_{ev}.Q(aux|~be(part|swim-presp(pro:per|you,$0),$0))
example_end

Sent: you 're not swimming now ?
Sem: lambda $0_{ev}.Q(not(aux|~be(and(part|swim-presp(pro:per|you,$0),adv|now($0)),$0),$0))
example_end

Sent: that 's enough .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,$0),adv|enough($0))
example_end

Sent: no I 'll get you a spoon .
Sem: lambda $0_{ev}.and(mod|~will(aux|get(pro:sub|i,det:art|a($1,n|spoon($1)),pro:per|you,$0),$0),co|no($0))
example_end

Sent: just leave that there .
Sem: lambda $0_{ev}.and(and(n|leave(you,pro:rel|that,$0),adj|just($0)),adv|there($0))
example_end

Sent: don 't hurry ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|hurry(you,$0),$0),$0))
example_end

Sent: isn 't it Chippewa ?
Sem: lambda $0_{ev}.Q(not(n:prop|chippewa(pro:per|it,$0),$0))
example_end

Sent: what d you have in the fish house ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:art|the($2,and_comp(n|fish($2),n|house($2))),$0)),$0)
example_end

Sent: little fish house .
Sem: lambda $0_{e}.and_comp(n|fish($0),and(adj|little($0),n|house($0)))
example_end

Sent: no Adam you take one .
Sem: lambda $0_{ev}.and(v|take(pro:per|you,lambda $1_{e}.pro:indef|one($1),$0),co|no($0))
example_end

Sent: take two .
Sem: lambda $0_{ev}.v|take(you,lambda $1_{e}.det:num|two($1),$0)
example_end

Sent: oh poor little fellow .
Sem: lambda $0_{ev}.and(and(adj|little($0),and(adj|poor($0),n|fellow($0))),co|oh($0))
example_end

Sent: what do you want some more of ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,$1,$0),$0)
example_end

Sent: d you want some more cookies ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,qn|some($1,and(qn|more($1),n|cookie-pl($1))),$0),$0))
example_end

Sent: you 're too big ?
Sem: lambda $0_{ev}.Q(adv|too(adj|big(pro:per|you,$0)))
example_end

Sent: did he bite you ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|bite(pro:sub|he,pro:per|you,$0),$0))
example_end

Sent: look on the back of Bozo .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|on(det:art|the($1,att(n|back($1),prep|of(n:prop|bozo))),$0))
example_end

Sent: oh he 's looking happy .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:sub|he,lambda $1_{ev}.adj|happy(pro:sub|he,$1),$0),$0),co|oh($0))
example_end

Sent: because you 'll break it .
Sem: lambda $0_{ev}.mod|~will(v|break(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: where 's your cup ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|cup($1)),$0),$2($0))
example_end

Sent: I think he said here we go .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|say-past(pro:sub|he,lambda $2_{ev}.and(v|go(pro:sub|we,$2),adv|here($2)),$1),$0)
example_end

Sent: he 's sleeping .
Sem: lambda $0_{ev}.aux|~be(part|sleep-presp(pro:sub|he,$0),$0)
example_end

Sent: I been chug .
Sem: lambda $0_{ev}.aux|be-pastp(v|chug(pro:sub|i,$0),$0)
example_end

Sent: I 've been chugging I guess .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.aux|be-pastp(aux|~have(part|chug-presp(pro:sub|i,$1),$1),$1),$0)
example_end

Sent: you 're turned over ?
Sem: lambda $0_{ev}.Q(aux|~be(and(v|turn-past(pro:per|you,$0),adv|over($0)),$0))
example_end

Sent: is that a ring ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|ring(pro:rel|that,$0)))
example_end

Sent: would you ask him ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|ask(pro:per|you,pro:obj|him,$0),$0))
example_end

Sent: like some ones ?
Sem: Q(prep|like(pro:indef|one-pl_some))
example_end

Sent: he doesn 't want a cookie after you 've had your dirty fingers all over it .
Sem: lambda $0_{ev}.not(prep|after(aux|~have(and(part|have-pastp(pro:per|you,det:poss|your($1,and(v|dirty($1),n|finger-pl($1))),$0),adv|all(prep|over(pro:per|it,$0))),$0),mod|do(v|want(pro:sub|he,det:art|a($2,n|cookie($2)),$0),$0)),$0)
example_end

Sent: take it out_of your mouth and just pretend .
Sem: lambda $0_{ev}.coord|and(and(adj|pretend(you,$0),adv|just($0)),and(v|take(you,pro:per|it,$0),prep|out_of(det:poss|your($1,n|mouth($1)),$0)))
example_end

Sent: when you pretend you don 't put it in .
Sem: lambda $0_{ev}.not(mod|do(conj|when(v|pretend(pro:per|you,$0),and(v|put-zero(pro:per|you,pro:per|it,$0),adv|in($0))),$0),$0)
example_end

Sent: what about the little toys in the wagon ?
Sem: att(pro:int|what,adv|about(det:art|the($0,att(and(adj|little($0),n|toy-pl($0)),prep|in(det:art|the($1,n|wagon($1)))))))
example_end

Sent: see you have a bag over there .
Sem: lambda $0_{ev}.and(and(v|have(pro:per|you,det:art|a($1,v|bag($1)),$0),adv|over(adv|there($0))),v|see(you,$0))
example_end

Sent: what 's in your bag ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|your($2,n|bag($2)),$0))
example_end

Sent: three cats ?
Sem: lambda $0_{e}.Q(det:num|three(n|cat-pl($0)))
example_end

Sent: well don 't do it on that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|do(you,pro:per|it,$0),prep|on(pro:dem|that,$0)),$0),$0),co|well($0))
example_end

Sent: you write on paper Adam .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|paper($1),$0))
example_end

Sent: before me ?
Sem: Q(prep|before(pro:obj|me))
example_end

Sent: you woke up at fourteen o'clock .
Sem: lambda $0_{ev}.and(and(v|wake-past(pro:per|you,$0),adv|up($0)),prep|at(lambda $1_{e}.det:num|fourteen(n|o'clock($1)),$0))
example_end

Sent: my clock only goes to twelve .
Sem: lambda $0_{ev}.and(and(v|go-3s(det:poss|my($1,n|clock($1)),$0),adv|only($0)),prep|to(lambda $2_{e}.det:num|twelve($2),$0))
example_end

Sent: oh it goes to fourteen .
Sem: lambda $0_{ev}.and(and(v|go-3s(pro:per|it,$0),prep|to(lambda $1_{e}.det:num|fourteen($1),$0)),co|oh($0))
example_end

Sent: I didn 't bring mine today .
Sem: lambda $0_{ev}.not(mod|do(and(v|bring(pro:sub|i,n|mine,$0),adv:tem|today($0)),$0),$0)
example_end

Sent: I didn 't need it today .
Sem: lambda $0_{ev}.not(mod|do(and(v|need(pro:sub|i,pro:per|it,$0),adv:tem|today($0)),$0),$0)
example_end

Sent: Cromer has a watch .
Sem: lambda $0_{ev}.v|have-3s(n:prop|cromer,det:art|a($1,n|watch($1)),$0)
example_end

Sent: do you know what a watch is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no I don 't have one .
Sem: lambda $0_{ev}.and(not(mod|do(v|have(pro:sub|i,pro:indef|one,$0),$0),$0),co|no($0))
example_end

Sent: I don 't own one .
Sem: lambda $0_{ev}.not(mod|do(v|own(pro:sub|i,pro:indef|one,$0),$0),$0)
example_end

Sent: do you know what that 's called ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.aux|~be(part|call-pastp(pro:rel|that,pro:int|what,$1),$1),$0),$0))
example_end

Sent: can you see Cromer 's watch ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,n:prop|cromer's($1,n|watch($1)),$0),$0))
example_end

Sent: how do I know what ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:sub|i,$1,$0),$2($0)),$0)
example_end

Sent: I don 't think he knows that .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|know-3s(pro:sub|he,pro:dem|that,$1),$0),$0),$0)
example_end

Sent: how do you know that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: oh well I look at the watch .
Sem: lambda $0_{ev}.and(and(and(cop|look(pro:sub|i,$0),prep|at(det:art|the($1,n|watch($1)),$0)),co|oh($0)),n|well($0))
example_end

Sent: Adam how do you know ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|know(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you 're not spaghetti ?
Sem: lambda $0_{ev}.Q(not(n|spaghetti(pro:per|you,$0),$0))
example_end

Sent: what are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: spaghetti on your leg ?
Sem: lambda $0_{e}.Q(att(n|spaghetti($0),prep|on(det:poss|your($1,n|leg($1)))))
example_end

Sent: what was the rest of that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,att(n|rest($2),prep|of(det:dem|that))),$0)
example_end

Sent: don 't let it fall .
Sem: lambda $0_{ev}.not(mod|do(v|let-zero(you,lambda $1_{ev}.v|fall(pro:per|it,$1),$0),$0),$0)
example_end

Sent: because you 'll spill it .
Sem: lambda $0_{ev}.mod|~will(v|spill(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: here me comes ?
Sem: lambda $0_{ev}.Q(and(v|come-3s(pro:obj|me,$0),adv|here($0)))
example_end

Sent: what happened to I ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:sub|i,$0))
example_end

Sent: I think you 've had enough .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(part|have-pastp(pro:per|you,$1),adv|enough($1)),$1),$0)
example_end

Sent: no I 've had enough and I think you 've had enough too .
Sem: lambda $0_{ev}.and(coord|and(v|think(pro:sub|i,lambda $1_{ev}.aux|~have(and(and(part|have-pastp(pro:per|you,$1),adv|enough($1)),post|too($1)),$1),$0),aux|~have(and(part|have-pastp(pro:sub|i,$0),adv|enough($0)),$0)),co|no($0))
example_end

Sent: you may have some water .
Sem: lambda $0_{ev}.mod|may(v|have(pro:per|you,qn|some($1,n|water($1)),$0),$0)
example_end

Sent: you don 't want some water ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,qn|some($1,n|water($1)),$0),$0),$0))
example_end

Sent: you don 't want to like water ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(pro:per|you,lambda $1_{ev}.co|like(pro:per|you,lambda $2_{e}.n|water($2),$1),$0),$0),$0))
example_end

Sent: oh you want another water ?
Sem: lambda $0_{ev}.Q(and(v|want(pro:per|you,qn|another($1,n|water($1)),$0),co|oh($0)))
example_end

Sent: it 's good for you .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|good($0,$1)
example_end

Sent: what about grandson ?
Sem: att(pro:int|what,adv|about(lambda $0_{e}.n|son($0)))
example_end

Sent: whose grandson are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,n|son(pro:per|you,$0))
example_end

Sent: you 're not grandson you 're Adam .
Sem: lambda $0_{ev}.not(and(n|son(pro:per|you,$0),n:prop|adam(pro:per|you,$0)),$0)
example_end

Sent: well you must be somebody 's grandson .
Sem: lambda $0_{ev}.and(mod|must(pro:indef|somebody's'(pro:per|you,n|son(pro:per|you,$0)),$0),co|well($0))
example_end


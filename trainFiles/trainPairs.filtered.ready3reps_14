Sent: a brown pencil ?
Sem:  lambda $0_{ev}.Q(v|do(pro|you,$0),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|brown($1),n|pencil($1))),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
example_end

Sent: where is it ?
Sem:  lambda $0_{ev}.Q(det|a($1,and(adj|brown($1),n|pencil($1))),$0)
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  pro:dem|that
example_end

Sent: that 's not brown .
Sem:  lambda $0_{e}.eqLoc(pro|it,$0)
Sem:  pro:dem|that
Sem:  adj|red(pro:dem|that)
example_end

Sent: that 's red .
Sem:  pro:dem|that
Sem:  adj|red(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|get(pro|you,$0,$1),$1)
example_end

Sent: what did you get ?
Sem:  adj|red(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|get(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|spell(pro:dem|that,$0,$1),$1)
example_end

Sent: what does that spell ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|get(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|spell(pro:dem|that,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|glass($1)),$0)
example_end

Sent: your glass ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|spell(pro:dem|that,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|glass($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|cracker($1)),$0),adv|first($0))
example_end

Sent: first you have a cracker .
Sem:  lambda $0_{ev}.Q(pro:poss:det|your($1,n|glass($1)),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|cracker($1)),$0),adv|first($0))
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
example_end

Sent: but look .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|cracker($1)),$0),adv|first($0))
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro:dem|this,$0),$0)
example_end

Sent: see this ?
Sem:  lambda $0_{ev}.v|look(pro|you,$0)
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro:dem|this,$0),$0)
Sem:  lambda $0_{ev}.Q(and(v|time(pro|it,$0),prep|for(lambda $1_{e}.n|lunch($1),$0)),$0)
example_end

Sent: is it time for lunch ?
Sem:  lambda $0_{ev}.Q(v|see(pro|you,pro:dem|this,$0),$0)
Sem:  lambda $0_{ev}.Q(and(v|time(pro|it,$0),prep|for(lambda $1_{e}.n|lunch($1),$0)),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: I 'll get it for you .
Sem:  lambda $0_{ev}.Q(and(v|time(pro|it,$0),prep|for(lambda $1_{e}.n|lunch($1),$0)),$0)
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,lambda $1_{e}.n|tapioca($1),$0),$0)
example_end

Sent: you can have tapioca .
Sem:  lambda $0_{ev}.and(aux|will(v|get(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,lambda $1_{e}.n|tapioca($1),$0),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,lambda $1_{e}.n|tapioca($1),$0),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0),$0),$0)
example_end

Sent: do you like your tapioca ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
example_end

Sent: Timothy 's a little boy .
Sem:  lambda $0_{ev}.Q(aux|do(v|like(pro|you,pro:poss:det|your($1,n|tapioca($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
example_end

Sent: Timothy 's a little boy .
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
example_end

Sent: Becky 's a girl .
Sem:  lambda $0_{ev}.eq(n:prop|Timothy,det|a($1,and(adj|little($1),n|boy($1))),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Timmy,det|a($1,n|boy($1)),$0)
example_end

Sent: Timmy 's a boy .
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Timmy,det|a($1,n|boy($1)),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
example_end

Sent: Becky 's a girl .
Sem:  lambda $0_{ev}.eq(n:prop|Timmy,det|a($1,n|boy($1)),$0)
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
Sem:  det|a($0,n|dog($0))
example_end

Sent: a dog .
Sem:  lambda $0_{ev}.eq(n:prop|Becky,det|a($1,n|girl($1)),$0)
Sem:  det|a($0,n|dog($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Josh,$0)
example_end

Sent: that 's Josh .
Sem:  det|a($0,n|dog($0))
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Josh,$0)
Sem:  n:prop|Josh
example_end

Sent: Josh .
Sem:  lambda $0_{ev}.eq(pro:dem|that,n:prop|Josh,$0)
Sem:  n:prop|Josh
Sem:  n:prop|Josh
example_end

Sent: Josh .
Sem:  n:prop|Josh
Sem:  n:prop|Josh
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
example_end

Sent: who ?
Sem:  n:prop|Josh
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{ev}.Q(pro:wh|who,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what 's he doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  pro|he
example_end

Sent: he is .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  pro|he
Sem:  pro|it
example_end

Sent: it is .
Sem:  pro|he
Sem:  pro|it
Sem:  adj|dirty(pro|it)
example_end

Sent: it 's dirty .
Sem:  pro|it
Sem:  adj|dirty(pro|it)
Sem:  lambda $0_{ev}.and(aux|will(v|throw(pro|I,pro|it,$0),$0),adv|away($0))
example_end

Sent: I 'll throw it away .
Sem:  adj|dirty(pro|it)
Sem:  lambda $0_{ev}.and(aux|will(v|throw(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.Q(and(aux|be&PAST(part|play-PROG(pro|you,$0),$0),adv:loc|outside($0)),$0)
example_end

Sent: were you playing outside ?
Sem:  lambda $0_{ev}.and(aux|will(v|throw(pro|I,pro|it,$0),$0),adv|away($0))
Sem:  lambda $0_{ev}.Q(and(aux|be&PAST(part|play-PROG(pro|you,$0),$0),adv:loc|outside($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what were you doing ?
Sem:  lambda $0_{ev}.Q(and(aux|be&PAST(part|play-PROG(pro|you,$0),$0),adv:loc|outside($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(part|play-PROG(pro|you,$0),prep|with(n:prop|Becky,$0))
example_end

Sent: playing with Becky .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.and(part|play-PROG(pro|you,$0),prep|with(n:prop|Becky,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:loc|outside($1))
example_end

Sent: but what did you do outside ?
Sem:  lambda $0_{ev}.and(part|play-PROG(pro|you,$0),prep|with(n:prop|Becky,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:loc|outside($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:dem|that,$0,$1)
example_end

Sent: that 's who .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),adv:loc|outside($1))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:dem|that,$0,$1)
Sem:  lambda $0_{e}.pro:wh|who
example_end

Sent: is who .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro:dem|that,$0,$1)
Sem:  lambda $0_{e}.pro:wh|who
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: but what were you doing ?
Sem:  lambda $0_{e}.pro:wh|who
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|make(pro|you,lambda $1_{e}.n|pie-PL($1),$0),$0),$0)
example_end

Sent: did you make pies ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|make(pro|you,lambda $1_{e}.n|pie-PL($1),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|nap($1)),$0),adv:tem|after($0))
example_end

Sent: after you have a nap .
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|make(pro|you,lambda $1_{e}.n|pie-PL($1),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|nap($1)),$0),adv:tem|after($0))
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|nap($1)),$0)
example_end

Sent: after you take a nap .
Sem:  lambda $0_{ev}.and(v|have(pro|you,det|a($1,n|nap($1)),$0),adv:tem|after($0))
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|nap($1)),$0)
Sem:  lambda $0_{ev}.part|play-PROG(pro|you,$0)
example_end

Sent: playing .
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|nap($1)),$0)
Sem:  lambda $0_{ev}.part|play-PROG(pro|you,$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|with(n:prop|Becky,$0))
example_end

Sent: he 's playing with Becky .
Sem:  lambda $0_{ev}.part|play-PROG(pro|you,$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|with(n:prop|Becky,$0))
Sem:  lambda $0_{ev}.Q(and(part|take-PROG(pro|you,det|the($1,n|bread($1)),$0),adv|off($0)),$0)
example_end

Sent: taking the bread off ?
Sem:  lambda $0_{ev}.and(aux|be&3S(part|play-PROG(pro|he,$0),$0),prep|with(n:prop|Becky,$0))
Sem:  lambda $0_{ev}.Q(and(part|take-PROG(pro|you,det|the($1,n|bread($1)),$0),adv|off($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
example_end

Sent: what is he doing ?
Sem:  lambda $0_{ev}.Q(and(part|take-PROG(pro|you,det|the($1,n|bread($1)),$0),adv|off($0)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see&PAST(pro|we,det|the($1,n|squirrel($1)),$0)
example_end

Sent: we saw the squirrel .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|he,$0,$1),$1)
Sem:  lambda $0_{ev}.v|see&PAST(pro|we,det|the($1,n|squirrel($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|see(n:prop|Fraser,pro|him,$0),$0),$0)
example_end

Sent: Fraser can 't see him .
Sem:  lambda $0_{ev}.v|see&PAST(pro|we,det|the($1,n|squirrel($1)),$0)
Sem:  lambda $0_{ev}.not(aux|can(v|see(n:prop|Fraser,pro|him,$0),$0),$0)
Sem:  lambda $0_{ev}.adv|perhaps($0)
example_end

Sent: perhaps .
Sem:  lambda $0_{ev}.not(aux|can(v|see(n:prop|Fraser,pro|him,$0),$0),$0)
Sem:  lambda $0_{ev}.adv|perhaps($0)
Sem:  lambda $0_{ev}.and(aux|will(v|open(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
example_end

Sent: I 'll open it for you .
Sem:  lambda $0_{ev}.adv|perhaps($0)
Sem:  lambda $0_{ev}.and(aux|will(v|open(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
example_end

Sent: I was laughing .
Sem:  lambda $0_{ev}.and(aux|will(v|open(pro|I,pro|it,$0),$0),prep|for(pro|you,$0))
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
example_end

Sent: I was laughing .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
Sem:  adj|funny(pro|you)
example_end

Sent: because you are funny .
Sem:  lambda $0_{ev}.aux|be&PAST&13S(part|laugh-PROG(pro|I,$0),$0)
Sem:  adj|funny(pro|you)
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|I,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0),$0)
example_end

Sent: I 've got big teeth .
Sem:  adj|funny(pro|you)
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|I,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.and(adj|brown($1),n|hair($1)),$0)
example_end

Sent: I have brown hair .
Sem:  lambda $0_{ev}.aux|have(part|get&PERF(pro|I,lambda $1_{e}.and(adj|big($1),n|tooth&PL($1)),$0),$0)
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.and(adj|brown($1),n|hair($1)),$0)
Sem:  lambda $0_{ev}.Q(v|have(pro|you,lambda $1_{e}.and(adj|red($1),n|hair($1)),$0),$0)
example_end

Sent: you have red hair ?
Sem:  lambda $0_{ev}.v|have(pro|I,lambda $1_{e}.and(adj|brown($1),n|hair($1)),$0)
Sem:  lambda $0_{ev}.Q(v|have(pro|you,lambda $1_{e}.and(adj|red($1),n|hair($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,pro|it,$0),$0)
example_end

Sent: you can have it .
Sem:  lambda $0_{ev}.Q(v|have(pro|you,lambda $1_{e}.and(adj|red($1),n|hair($1)),$0),$0)
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(pro|me,$0)
example_end

Sent: me ?
Sem:  lambda $0_{ev}.aux|can(v|have(pro|you,pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(pro|me,$0)
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,pro|it,$0),$0),$0)
example_end

Sent: may I have it ?
Sem:  lambda $0_{ev}.Q(pro|me,$0)
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
example_end

Sent: would you like that ?
Sem:  lambda $0_{ev}.Q(aux|may(v|have(pro|I,pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv|away($0))
example_end

Sent: instead of going for a nap right away .
Sem:  lambda $0_{ev}.Q(aux|will&COND(v|like(pro|you,pro:dem|that,$0),$0),$0)
Sem:  lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv|away($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
example_end

Sent: you 'd like what ?
Sem:  lambda $0_{ev}.and(part|go-PROG(pro|you,$0),adv|away($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|will&COND(v|like(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.part|pat-PROG(pro|you,lambda $1_{e}.n|cake($1),$0)
example_end

Sent: patting cake .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.part|pat-PROG(pro|you,lambda $1_{e}.n|cake($1),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|finger($1)),$0),prep|in(pro|it,$0))
example_end

Sent: you put your finger in it .
Sem:  lambda $0_{ev}.part|pat-PROG(pro|you,lambda $1_{e}.n|cake($1),$0)
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|finger($1)),$0),prep|in(pro|it,$0))
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: does it hurt ?
Sem:  lambda $0_{ev}.and(v|put&ZERO(pro|you,pro:poss:det|your($1,n|finger($1)),$0),prep|in(pro|it,$0))
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|hurt&ZERO(pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: it won 't hurt .
Sem:  lambda $0_{ev}.Q(aux|do&3S(v|hurt&ZERO(pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
example_end

Sent: it won 't hurt .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|get-PROG(pro|you,det|a($1,n|sliver($1)),$0),$0),adv:loc|out($0))
example_end

Sent: happiness is getting a  getting a sliver out .
Sem:  lambda $0_{ev}.not(aux|will(v|hurt&ZERO(pro|it,$0),$0),$0)
Sem:  lambda $0_{ev}.and(aux|be&3S(part|get-PROG(pro|you,det|a($1,n|sliver($1)),$0),$0),adv:loc|out($0))
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.and(aux|be&3S(part|get-PROG(pro|you,det|a($1,n|sliver($1)),$0),$0),adv:loc|out($0))
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
example_end

Sent: what is it ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
example_end

Sent: who do you see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro|it,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|you,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
example_end

Sent: who do I see ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
example_end

Sent: who do I see ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do(v|see(pro|I,$0,$1),$1)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|back($0))
example_end

Sent: we 'll come right back .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.adv|quick($0)
example_end

Sent: quick  quick .
Sem:  lambda $0_{ev}.and(aux|will(v|come(pro|we,$0),$0),adv:loc|back($0))
Sem:  lambda $0_{ev}.adv|quick($0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),prep|with(pro|you,$0))
example_end

Sent: I 'm going too with you .
Sem:  lambda $0_{ev}.adv|quick($0)
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),prep|with(pro|you,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|she,$0,$1),$1)
example_end

Sent: what is she doing ?
Sem:  lambda $0_{ev}.and(aux|be&1S(part|go-PROG(pro|I,$0),$0),prep|with(pro|you,$0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|she,$0,$1),$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|radio($1))),$0)
example_end

Sent: that 's a nice radio .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(part|do-PROG(pro|she,$0,$1),$1)
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|radio($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{ev}.eq(pro:dem|that,det|a($1,and(adj|nice($1),n|radio($1))),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.part|fold-PROG(pro|you,$0,$1)
example_end

Sent: folding what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.part|fold-PROG(pro|you,$0,$1)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{e}.lambda $1_{ev}.part|fold-PROG(pro|you,$0,$1)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|him,$0)
example_end

Sent: and tell him .
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|him,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|see(pro|you,pro|him,$0),$0),prep|on(n:prop|Wednesday,$0))
example_end

Sent: you 'll see him again on Wednesday .
Sem:  lambda $0_{ev}.v|tell(pro|you,pro|him,$0)
Sem:  lambda $0_{ev}.and(aux|will(v|see(pro|you,pro|him,$0),$0),prep|on(n:prop|Wednesday,$0))
Sem:  lambda $0_{ev}.aux|will(v|wipe(pro|I,pro:poss:det|your($1,n|tear-PL($1)),$0),$0)
example_end

Sent: I will wipe your tears .
Sem:  lambda $0_{ev}.and(aux|will(v|see(pro|you,pro|him,$0),$0),prep|on(n:prop|Wednesday,$0))
Sem:  lambda $0_{ev}.aux|will(v|wipe(pro|I,pro:poss:det|your($1,n|tear-PL($1)),$0),$0)
Sem:  det|the($0,and(adj|big($0),adj|round($0),n|cook($0)))
example_end

Sent: the big round cook .
Sem:  lambda $0_{ev}.aux|will(v|wipe(pro|I,pro:poss:det|your($1,n|tear-PL($1)),$0),$0)
Sem:  det|the($0,and(adj|big($0),adj|round($0),n|cook($0)))
Sem:  lambda $0_{ev}.aux|will(v|turn(pro|I,pro|it,$0),$0)
example_end

Sent: I 'll turn it .
Sem:  det|the($0,and(adj|big($0),adj|round($0),n|cook($0)))
Sem:  lambda $0_{ev}.aux|will(v|turn(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|turn-PROG(pro|it,pro:refl|itself,$0),$0)
example_end

Sent: it 's turning itself .
Sem:  lambda $0_{ev}.aux|will(v|turn(pro|I,pro|it,$0),$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|turn-PROG(pro|it,pro:refl|itself,$0),$0)
Sem:  lambda $0_{ev}.v|make&PAST(n:prop|Mom,det|a($1,n|mistake($1)),$0)
example_end

Sent: Mom made a mistake .
Sem:  lambda $0_{ev}.aux|be&3S(part|turn-PROG(pro|it,pro:refl|itself,$0),$0)
Sem:  lambda $0_{ev}.v|make&PAST(n:prop|Mom,det|a($1,n|mistake($1)),$0)
Sem:  lambda $0_{ev}.v|make&PAST(pro|I,det|a($1,n|mistake($1)),$0)
example_end

Sent: I made a mistake .
Sem:  lambda $0_{ev}.v|make&PAST(n:prop|Mom,det|a($1,n|mistake($1)),$0)
Sem:  lambda $0_{ev}.v|make&PAST(pro|I,det|a($1,n|mistake($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you doing ?
Sem:  lambda $0_{ev}.v|make&PAST(pro|I,det|a($1,n|mistake($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,n|clock($1)),$0),$0)
example_end

Sent: it 's not a clock .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,n|clock($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|lock($1)),$0)
example_end

Sent: it 's a lock .
Sem:  lambda $0_{ev}.not(eq(pro|it,det|a($1,n|clock($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|lock($1)),$0)
Sem:  lambda $0_{e}.n|key($0)
example_end

Sent: key .
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|lock($1)),$0)
Sem:  lambda $0_{e}.n|key($0)
Sem:  lambda $0_{e}.n|key($0)
example_end

Sent: key .
Sem:  lambda $0_{e}.n|key($0)
Sem:  lambda $0_{e}.n|key($0)
Sem:  lambda $0_{e}.n|key($0)
example_end

Sent: key .
Sem:  lambda $0_{e}.n|key($0)
Sem:  lambda $0_{e}.n|key($0)
Sem:  det|the($0,n|key($0))
example_end

Sent: the key .
Sem:  lambda $0_{e}.n|key($0)
Sem:  det|the($0,n|key($0))
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  det|the($0,n|key($0))
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|color(pro|we,$0,$1)),$1)
example_end

Sent: what are we going to color ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|color(pro|we,$0,$1)),$1)
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(and(part|go-PROG(pro|we,$1),v|color(pro|we,$0,$1)),$1)
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|color(pro|you,det|a($1,n|girl($1)),$0)
example_end

Sent: you color a girl .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{ev}.v|color(pro|you,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|horse($1)),$0),$0)
example_end

Sent: is that a horse ?
Sem:  lambda $0_{ev}.v|color(pro|you,det|a($1,n|girl($1)),$0)
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|horse($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|cow($1)),$0)
example_end

Sent: it 's a cow .
Sem:  lambda $0_{ev}.Q(eq(pro:dem|that,det|a($1,n|horse($1)),$0),$0)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|cow($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|color(pro|you,det|this($1,n|thing($1)),$0),$0),$0)
example_end

Sent: can you color this thing ?
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|cow($1)),$0)
Sem:  lambda $0_{ev}.Q(aux|can(v|color(pro|you,det|this($1,n|thing($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|here($0))
example_end

Sent: you stay right here .
Sem:  lambda $0_{ev}.Q(aux|can(v|color(pro|you,det|this($1,n|thing($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{ev}.and(v|stay(pro|you,$0),adv:loc|here($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|turtle($0)
example_end

Sent: turtle .
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.n|turtle($0)
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|this,$0),$0)
example_end

Sent: I 'll do this .
Sem:  lambda $0_{e}.n|turtle($0)
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|this,$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
example_end

Sent: you don 't need a grahamcracker .
Sem:  lambda $0_{ev}.aux|will(v|do(pro|I,pro:dem|this,$0),$0)
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|have(part|eat&PERF(pro|you,pro:poss:det|your($1,n|cookie($1)),$0),$0),$0)
example_end

Sent: you haven 't eaten your cookie .
Sem:  lambda $0_{ev}.not(aux|do(v|need(pro|you,det|a($1,n|+n|graham+n|cracker($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.not(aux|have(part|eat&PERF(pro|you,pro:poss:det|your($1,n|cookie($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(pro|they,$0)
example_end

Sent: are they ?
Sem:  lambda $0_{ev}.not(aux|have(part|eat&PERF(pro|you,pro:poss:det|your($1,n|cookie($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(pro|they,$0)
Sem:  lambda $0_{ev}.Q(pro|he,$0)
example_end

Sent: he is ?
Sem:  lambda $0_{ev}.Q(pro|they,$0)
Sem:  lambda $0_{ev}.Q(pro|he,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|should(v|do(pro|we,$0,$1),$1)
example_end

Sent: what should we do ?
Sem:  lambda $0_{ev}.Q(pro|he,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|should(v|do(pro|we,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|should(v|do(pro|we,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|do(pro|we,$0,$1),$1),prep|with(pro:dem|that,$1))
example_end

Sent: what should we do with that ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|do(pro|we,$0,$1),$1),prep|with(pro:dem|that,$1))
Sem:  lambda $0_{ev}.not(aux|do&3S(v|walk(pro|he,$0),$0),$0)
example_end

Sent: he doesn 't walk properly .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|do(pro|we,$0,$1),$1),prep|with(pro:dem|that,$1))
Sem:  lambda $0_{ev}.not(aux|do&3S(v|walk(pro|he,$0),$0),$0)
Sem:  lambda $0_{e}.n|flower($0)
example_end

Sent: flower ?
Sem:  lambda $0_{ev}.not(aux|do&3S(v|walk(pro|he,$0),$0),$0)
Sem:  lambda $0_{e}.n|flower($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Rick,$1),v|do(n:prop|Rick,$0,$1)),$1)
example_end

Sent: what is Rick going to do ?
Sem:  lambda $0_{e}.n|flower($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Rick,$1),v|do(n:prop|Rick,$0,$1)),$1)
Sem:  lambda $0_{ev}.eq(pro:dem|these,det|the($1,n|leave-PL($1)),$0)
example_end

Sent: these are the leaves .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&3S(and(part|go-PROG(n:prop|Rick,$1),v|do(n:prop|Rick,$0,$1)),$1)
Sem:  lambda $0_{ev}.eq(pro:dem|these,det|the($1,n|leave-PL($1)),$0)
Sem:  lambda $0_{ev}.aux|can(v|make(pro|we,det|the($1,n|leave-PL($1)),$0),$0)
example_end

Sent: we can make the leaves .
Sem:  lambda $0_{ev}.eq(pro:dem|these,det|the($1,n|leave-PL($1)),$0)
Sem:  lambda $0_{ev}.aux|can(v|make(pro|we,det|the($1,n|leave-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
example_end

Sent: can 't what ?
Sem:  lambda $0_{ev}.aux|can(v|make(pro|we,det|the($1,n|leave-PL($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|grow-PROG(pro|it,$0),$0)
example_end

Sent: it 's growing .
Sem:  lambda $0_{ev}.Q(pro:wh|what,$0)
Sem:  lambda $0_{ev}.aux|be&3S(part|grow-PROG(pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,qn|another($1,n|flower($1)),$0),$0),$0)
example_end

Sent: shall we make another flower ?
Sem:  lambda $0_{ev}.aux|be&3S(part|grow-PROG(pro|it,$0),$0)
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,qn|another($1,n|flower($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
example_end

Sent: that ?
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,qn|another($1,n|flower($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
example_end

Sent: what did you do ?
Sem:  lambda $0_{ev}.Q(pro:dem|that,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(and(aux|can(v|color(pro|you,pro:dem|that,$0),$0),adv:loc|in($0)),$0)
example_end

Sent: can you color that in ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&PAST(v|do(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(and(aux|can(v|color(pro|you,pro:dem|that,$0),$0),adv:loc|in($0)),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|door($1)),$0)
example_end

Sent: a door ?
Sem:  lambda $0_{ev}.Q(and(aux|can(v|color(pro|you,pro:dem|that,$0),$0),adv:loc|in($0)),$0)
Sem:  lambda $0_{ev}.Q(det|a($1,n|door($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|need(pro|we,$0,$1),$1),prep|on(pro|it,$1))
example_end

Sent: what do we need on it ?
Sem:  lambda $0_{ev}.Q(det|a($1,n|door($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|need(pro|we,$0,$1),$1),prep|on(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|put&ZERO(pro|we,$0,$1),$1),prep|on(det|the($2,n|house($2)),$1))
example_end

Sent: what should we put on the house ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do(v|need(pro|we,$0,$1),$1),prep|on(pro|it,$1))
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|put&ZERO(pro|we,$0,$1),$1),prep|on(det|the($2,n|house($2)),$1))
Sem:  lambda $0_{e}.n|cream($0)
example_end

Sent: cream ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|put&ZERO(pro|we,$0,$1),$1),prep|on(det|the($2,n|house($2)),$1))
Sem:  lambda $0_{e}.n|cream($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,qn|any($1,n|cream($1)),$0),$0),$0)
example_end

Sent: we don 't have any cream .
Sem:  lambda $0_{e}.n|cream($0)
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,qn|any($1,n|cream($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|could(v|put&ZERO(pro|we,det|a($1,n|doorway($1)),$0),$0)
example_end

Sent: we could put a doorway .
Sem:  lambda $0_{ev}.not(aux|do(v|have(pro|we,qn|any($1,n|cream($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|could(v|put&ZERO(pro|we,det|a($1,n|doorway($1)),$0),$0)
Sem:  lambda $0_{e}.and($0)
example_end

Sent: and what else ?
Sem:  lambda $0_{ev}.aux|could(v|put&ZERO(pro|we,det|a($1,n|doorway($1)),$0),$0)
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what 's that ?
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
example_end

Sent: it 's what ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|draw(pro|we,$0,$1),$1),prep|with(pro|it,$1))
example_end

Sent: what should we draw with it ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq(pro|it,$0,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|draw(pro|we,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.Q(det|a($1,n|house($1)),$0)
example_end

Sent: a house ?
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|should(v|draw(pro|we,$0,$1),$1),prep|with(pro|it,$1))
Sem:  lambda $0_{ev}.Q(det|a($1,n|house($1)),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
example_end

Sent: we 'll make a big house .
Sem:  lambda $0_{ev}.Q(det|a($1,n|house($1)),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
example_end

Sent: we 'll make a big house .
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|need(pro|it,$0,$1),$1)
example_end

Sent: what does it need ?
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,det|a($1,and(adj|big($1),n|house($1))),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|need(pro|it,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|should(v|put&ZERO(pro|we,det|a($1,n|window($1)),$0),$0),$0)
example_end

Sent: and should we put a window ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|do&3S(v|need(pro|it,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|should(v|put&ZERO(pro|we,det|a($1,n|window($1)),$0),$0),$0)
Sem:  n:prop|Papa
example_end

Sent: probably Papa .
Sem:  lambda $0_{ev}.Q(aux|should(v|put&ZERO(pro|we,det|a($1,n|window($1)),$0),$0),$0)
Sem:  n:prop|Papa
Sem:  adj|true(pro:dem|that)
example_end

Sent: that 's true .
Sem:  n:prop|Papa
Sem:  adj|true(pro:dem|that)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|suitcase($1)),$0)
example_end

Sent: it 's a suitcase .
Sem:  adj|true(pro:dem|that)
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|suitcase($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
example_end

Sent: what were you doing ?
Sem:  lambda $0_{ev}.eq(pro|it,det|a($1,n|suitcase($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|window($0)
example_end

Sent: which window ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PAST(part|do-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{e}.n|window($0)
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|a($1,n|window($1)),$0),$0),$0)
example_end

Sent: do you want a window ?
Sem:  lambda $0_{e}.n|window($0)
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|a($1,n|window($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
example_end

Sent: you 're making what ?
Sem:  lambda $0_{ev}.Q(aux|do(v|want(pro|you,det|a($1,n|window($1)),$0),$0),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|house($1),n|building($1))),$0)
example_end

Sent: a house building ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|house($1),n|building($1))),$0)
Sem:  lambda $0_{ev}.and(v|say(pro|you,pro|it,$0),adv|again($0))
example_end

Sent: say it again .
Sem:  lambda $0_{ev}.Q(det|a($1,and(n|house($1),n|building($1))),$0)
Sem:  lambda $0_{ev}.and(v|say(pro|you,pro|it,$0),adv|again($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
example_end

Sent: what are you making ?
Sem:  lambda $0_{ev}.and(v|say(pro|you,pro|it,$0),adv|again($0))
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|do&PAST(n:prop|Cathy,pro|it,$0)
example_end

Sent: Cathy did it .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&PRES(part|make-PROG(pro|you,$0,$1),$1)
Sem:  lambda $0_{ev}.v|do&PAST(n:prop|Cathy,pro|it,$0)
Sem:  lambda $0_{ev}.v|tear&PAST(pro|she,det|the($1,n|paper($1)),$0)
example_end

Sent: she tore the paper .
Sem:  lambda $0_{ev}.v|do&PAST(n:prop|Cathy,pro|it,$0)
Sem:  lambda $0_{ev}.v|tear&PAST(pro|she,det|the($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|shall(v|write(pro|I,$0,$1),$1)
example_end

Sent: what shall I write ?
Sem:  lambda $0_{ev}.v|tear&PAST(pro|she,det|the($1,n|paper($1)),$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|shall(v|write(pro|I,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,det|a($1,n|horse($1)),$0),$0),$0)
example_end

Sent: shall we make a horse ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|shall(v|write(pro|I,$0,$1),$1)
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,det|a($1,n|horse($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,qn|another($1,n|horse($1)),$0),$0)
example_end

Sent: we 'll make another horse .
Sem:  lambda $0_{ev}.Q(aux|shall(v|make(pro|we,det|a($1,n|horse($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,qn|another($1,n|horse($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(adj|sure(pro|you),$0)
example_end

Sent: are you sure ?
Sem:  lambda $0_{ev}.aux|will(v|make(pro|we,qn|another($1,n|horse($1)),$0),$0)
Sem:  lambda $0_{ev}.Q(adj|sure(pro|you),$0)
Sem:  pro|you
example_end

Sent: don 't you peepee .
Sem:  lambda $0_{ev}.Q(adj|sure(pro|you),$0)
Sem:  pro|you
Sem:  pro|you
example_end

Sent: don 't you peepee .
Sem:  pro|you
Sem:  pro|you
Sem:  lambda $0_{ev}.adv:loc|there($0)
example_end

Sent: there .
Sem:  pro|you
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|have(part|get&PERF(pro|I,$0,$1),$1)
example_end

Sent: what have I got .
Sem:  lambda $0_{ev}.adv:loc|there($0)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|have(part|get&PERF(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
example_end

Sent: what is that ?
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|have(part|get&PERF(pro|I,$0,$1),$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
example_end

Sent: what am I doing ?
Sem:  lambda $0_{e}.lambda $1_{ev}.eq($0,pro:dem|that,$1)
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  n:prop|John
example_end

Sent: John .
Sem:  lambda $0_{e}.lambda $1_{ev}.aux|be&1S(part|do-PROG(pro|I,$0,$1),$1)
Sem:  n:prop|John
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  n:prop|John
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.and($0)
example_end

Sent: and who else ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{e}.and($0)
Sem:  n:prop|Murray
example_end

Sent: Murray .
Sem:  lambda $0_{e}.and($0)
Sem:  n:prop|Murray
Sem:  lambda $0_{ev}.Q(n:prop|Noel,$0)
example_end

Sent: Noel ?
Sem:  n:prop|Murray
Sem:  lambda $0_{ev}.Q(n:prop|Noel,$0)
Sem:  n:prop|Noel
example_end

Sent: Noel .
Sem:  lambda $0_{ev}.Q(n:prop|Noel,$0)
Sem:  n:prop|Noel
Sem:  lambda $0_{e}.and($0)
example_end

Sent: and who else ?
Sem:  n:prop|Noel
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|bite($1)),$0)
example_end

Sent: take a bite .
Sem:  lambda $0_{e}.and($0)
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|bite($1)),$0)
Sem:  adj|right(pro:dem|that)
example_end

Sent: that 's right .
Sem:  lambda $0_{ev}.v|take(pro|you,det|a($1,n|bite($1)),$0)
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|fix(pro|he,pro:poss:det|your($1,n|chin($1)),$0),$0),$0)
example_end

Sent: he did fix your chin ?
Sem:  adj|right(pro:dem|that)
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|fix(pro|he,pro:poss:det|your($1,n|chin($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.Q(aux|do&PAST(v|fix(pro|he,pro:poss:det|your($1,n|chin($1)),$0),$0),$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|to(pro:poss:det|your($2,n|chin($2)),$1))
example_end

Sent: what did you do to your chin ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|to(pro:poss:det|your($2,n|chin($2)),$1))
Sem:  lambda $0_{ev}.v|taste(pro|you,pro:dem|that,$0)
example_end

Sent: you taste that .
Sem:  lambda $0_{e}.lambda $1_{ev}.and(aux|do&PAST(v|do(pro|you,$0,$1),$1),prep|to(pro:poss:det|your($2,n|chin($2)),$1))
Sem:  lambda $0_{ev}.v|taste(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
example_end

Sent: Eve ?
Sem:  lambda $0_{ev}.v|taste(pro|you,pro:dem|that,$0)
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
example_end

Sent: again ?
Sem:  lambda $0_{ev}.Q(n:prop|Eve,$0)
Sem:  lambda $0_{ev}.Q(adv|again($0),$0)
Sem:  lambda $0_{ev}.v|stop(pro|you,$0)
example_end


Sent: big drum ?
Sem: lambda $0_{e}.Q(and(adj|big($0),n|drum($0)))
example_end

Sent: who is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: those are checkers .
Sem: lambda $0_{ev}.n|checker-pl(pro:dem|those,$0)
example_end

Sent: two checkers yes .
Sem: lambda $0_{ev}.and(det:num|two(n|checker-pl($0)),co|yes($0))
example_end

Sent: play checkers ?
Sem: lambda $0_{ev}.Q(n|play(you,lambda $1_{e}.n|checker-pl($1),$0))
example_end

Sent: big horn ?
Sem: lambda $0_{e}.Q(and(adj|big($0),n|horn($0)))
example_end

Sent: are those your checkers ?
Sem: lambda $0_{ev}.Q(det:poss|your(det:dem|those,n|checker-pl(det:dem|those,$0)))
example_end

Sent: what 's this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: do you want to play with them ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|play(pro:per|you,$1),prep|with(pro:obj|them,$1)),$0),$0))
example_end

Sent: I like it .
Sem: lambda $0_{ev}.v|like(pro:sub|i,pro:per|it,$0)
example_end

Sent: why don 't you read Shadow yourself ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|read-zero(pro:per|you,n:prop|shadow,$0),$1($0)),pro:refl|yourself($0)),$0),$0)
example_end

Sent: why don 't you look at some of the toys in the basket .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(cop|look(pro:per|you,$0),$1($0)),prep|at(qn|some(det:art|the($2,att(n|toy-pl($2),prep|in(det:art|the($3,n|basket($3)))))),$0)),$0),$0)
example_end

Sent: what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: can you put them together Adam ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|together($0)),$0))
example_end

Sent: not in your mouth .
Sem: not(prep|in(det:poss|your($0,n|mouth($0))))
example_end

Sent: let me put them together .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.and(v|put-zero(pro:obj|me,pro:obj|them,$1),adv|together($1)),$0)
example_end

Sent: you 'll have_to pick them up .
Sem: lambda $0_{ev}.mod:aux|have_to(mod|~will(and(v|pick(pro:per|you,pro:obj|them,$0),adv|up($0)),$0),$0)
example_end

Sent: no that 's his pencil .
Sem: lambda $0_{ev}.and(det:poss|his(pro:dem|that,n|pencil(pro:dem|that,$0)),co|no($0))
example_end

Sent: that 's not Daddy that 's Colin .
Sem: lambda $0_{ev}.not(and(n:prop|daddy(pro:dem|that,$0),n:prop|colin(pro:rel|that,$0)),$0)
example_end

Sent: I think perhaps he 's going back to school .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(and(and(part|go-presp(pro:sub|he,$1),adv|perhaps($1)),adv|back(prep|to(lambda $2_{e}.n|school($2),$1))),$1),$0)
example_end

Sent: not on the window sill Adam .
Sem: not(prep|on(det:art|the($0,and_comp(n|window($0),n|sill($0)))))
example_end

Sent: you write on the paper .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: my paper .
Sem: det:poss|my($0,n|paper($0))
example_end

Sent: sitting in Adam 's chair .
Sem: lambda $0_{ev}.and(part|sit-presp(you,$0),prep|in(n:prop|adam's($1,n|chair($1)),$0))
example_end

Sent: why don 't you read it to me ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|read-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|to(pro:obj|me,$0)),$0),$0)
example_end

Sent: that 's Cathy .
Sem: lambda $0_{ev}.n:prop|cathy(pro:dem|that,$0)
example_end

Sent: is this a horn ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|this,n|horn(pro:dem|this,$0)))
example_end

Sent: look what game is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,n|game(pro:dem|that,$0)),co|look(you,$0))
example_end

Sent: how many do you have like this ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|have(pro:per|you,lambda $1_{e}.$2(qn|many($1)),$0),prep|like(pro:dem|this,$0)),$0)
example_end

Sent: where are you going ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: how does a bunny walk ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(n|walk(det:art|a($1,n|bunny+rabbit($1)),$0),$2($0)),$0)
example_end

Sent: what are you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: sweep broom .
Sem: lambda $0_{e}.and_comp(n|sweep($0),n|broom($0))
example_end

Sent: is that a broom ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|broom(pro:rel|that,$0)))
example_end

Sent: I thought it was a brush .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.det:art|a(pro:per|it,n|brush(pro:per|it,$1)),$0)
example_end

Sent: Adam Smith ?
Sem: lambda $0_{e}.Q(n:prop|smith_adam($0))
example_end

Sent: is that very heavy ?
Sem: lambda $0_{ev}.Q(adv|very(adj|heavy(pro:rel|that,$0)))
example_end

Sent: what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: hear a tractor ?
Sem: lambda $0_{ev}.Q(v|hear(you,det:art|a($1,n|tractor($1)),$0))
example_end

Sent: no I think that 's a truck .
Sem: lambda $0_{ev}.and(v|think(pro:sub|i,lambda $1_{ev}.det:art|a(pro:dem|that,n|truck(pro:dem|that,$1)),$0),co|no($0))
example_end

Sent: if you look out the other window maybe you 'll see it .
Sem: lambda $0_{ev}.mod|~will(conj|if(and(cop|look(pro:per|you,$0),prep|out(det:art|the($1,and(qn|other($1),n|window($1))),$0)),and(v|see(pro:per|you,pro:per|it,$0),adv|maybe($0))),$0)
example_end

Sent: did you see the truck ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|truck($1)),$0),$0))
example_end

Sent: no you didn 't see it .
Sem: lambda $0_{ev}.and(not(mod|do(v|see(pro:per|you,pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: there goes one .
Sem: lambda $0_{ev}.v|go-3s_there(you,pro:indef|one,$0)
example_end

Sent: yes there goes one .
Sem: lambda $0_{ev}.and(v|go-3s_there(you,pro:indef|one,$0),co|yes($0))
example_end

Sent: put the truck where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|truck($1)),$0),$2($0))
example_end

Sent: tow truck come here ?
Sem: lambda $0_{ev}.Q(and(v|come(lambda $1_{e}.and_comp(n|tow($1),n|truck($1)),$0),adv|here($0)))
example_end

Sent: oh yeah .
Sem: lambda $0_{ev}.co|yeah_oh($0)
example_end

Sent: that 's a big truck .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|truck(pro:dem|that,$0),adj|big(pro:dem|that,$0)))
example_end

Sent: busy bulldozer ?
Sem: lambda $0_{e}.Q(and(adj|busy($0),n|bulldoze-dv($0)))
example_end

Sent: did you show Ursula that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,pro:dem|that,n:prop|ursula,$0),$0))
example_end

Sent: do you know what those are ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.cop|be-pres(pro:dem|those,pro:int|what,$1),$0),$0))
example_end

Sent: I guess she might like to see that .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.mod|might(v|like(pro:sub|she,lambda $2_{ev}.v|see(pro:sub|she,pro:dem|that,$2),$1),$1),$0)
example_end

Sent: what kind of hat is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|hat($2))))
example_end

Sent: Adam 's hat ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|hat($1),$0))
example_end

Sent: where have you seen a hat like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|have(and(part|see-pastp(pro:per|you,det:art|a($1,att(n|hat($1),prep|like(pro:dem|that))),$0),$2($0)),$0)
example_end

Sent: not shoe ball .
Sem: and(not(lambda $0_{e}.n|shoe($0)),lambda $1_{e}.n|ball($1))
example_end

Sent: foot ball .
Sem: lambda $0_{e}.n|ball_foot($0)
example_end

Sent: I saw a tank truck .
Sem: lambda $0_{ev}.v|see-past(pro:sub|i,det:art|a($1,and_comp(n|tank($1),n|truck($1))),$0)
example_end

Sent: was he dirty ?
Sem: lambda $0_{ev}.Q(adj|dirt-dn(pro:sub|he,$0))
example_end

Sent: Adam fall toy .
Sem: lambda $0_{ev}.n|fall(n:prop|adam,lambda $1_{e}.n|toy($1),$0)
example_end

Sent: you didn 't fall that time .
Sem: lambda $0_{ev}.not(mod|do(and(v|fall(pro:per|you,$0),pro:dem|that($1,n|time($1),$0)),$0),$0)
example_end

Sent: you just sat down .
Sem: lambda $0_{ev}.and(and(v|sit-past(pro:per|you,$0),adv|just($0)),adv|down($0))
example_end

Sent: do you want to see this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,pro:dem|this,$1),$0),$0))
example_end

Sent: here 's a label .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|label($1)),$0),pro:exist|here($0))
example_end

Sent: do you want to paste it ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|paste(pro:per|you,pro:per|it,$1),$0),$0))
example_end

Sent: those are her paper clips .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|those,and_comp(n|paper(pro:dem|those,$0),n|clip-pl(pro:dem|those,$0)))
example_end

Sent: may I give you some ?
Sem: lambda $0_{ev}.Q(mod|may(v|give(pro:sub|i,qn|some,pro:per|you,$0),$0))
example_end

Sent: you don 't need a pencil .
Sem: lambda $0_{ev}.not(mod|do(v|need(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: you had a pencil .
Sem: lambda $0_{ev}.v|have-past(pro:per|you,det:art|a($1,n|pencil($1)),$0)
example_end

Sent: here 's a pencil .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|pencil($1)),$0),pro:exist|here($0))
example_end

Sent: why don 't you take that over and show it to him .
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(and(v|show(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0)),v|take(pro:per|you,pro:dem|that,$0)),$1($0)),adv|over($0)),$0),$0)
example_end

Sent: maybe he likes ball players .
Sem: lambda $0_{ev}.and(v|like-3s(pro:sub|he,lambda $1_{e}.and_comp(n|ball($1),n|play-dv($1)),$0),adv|maybe($0))
example_end

Sent: do you think he would ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|will-cond(pro:sub|he,$1),$0),$0))
example_end

Sent: did you show him the ball player ?
Sem: lambda $0_{ev}.Q(v|do-past(v|show(pro:per|you,det:art|the($1,and_comp(n|ball($1),n|play-dv($1))),pro:obj|him,$0),$0))
example_end

Sent: your ball player ?
Sem: lambda $0_{e}.Q(det:poss|your($1,and_comp(n|ball($1),n|play-dv($1)),$0))
example_end

Sent: boots yes .
Sem: lambda $0_{ev}.and(n|boot-pl($0),co|yes($0))
example_end

Sent: can you fix your bike ?
Sem: lambda $0_{ev}.Q(mod|can(v|fix(pro:per|you,det:poss|your($1,n|bike($1)),$0),$0))
example_end

Sent: is that part of the two truck ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,and_comp(det:num|two($1),n|truck($1))))))
example_end

Sent: are you ready to go night_night ?
Sem: lambda $0_{ev}.Q(adj|ready(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),co|night_night($1)),$0))
example_end

Sent: you hit your head didn 't you .
Sem: lambda $0_{ev}.and(v|hit-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),not(mod|do(pro:per|you,$0),$0))
example_end

Sent: did it hurt ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:per|it,$0),$0))
example_end

Sent: poor head .
Sem: lambda $0_{e}.and(adj|poor($0),n|head($0))
example_end

Sent: don 't pull Mommy .
Sem: lambda $0_{ev}.not(mod|do(v|pull(you,n:prop|mommy,$0),$0),$0)
example_end

Sent: put pillow on the floor ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|pillow($1),$0),prep|on(det:art|the($2,n|floor($2)),$0)))
example_end

Sent: you want Mommy to sit on the floor ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.and(v|sit(you,$2),prep|on(det:art|the($3,n|floor($3)),$2))),$0))
example_end

Sent: what do you want Mommy to do ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.v|do($2,$1),$0),n:prop|mommy($0)),$0)
example_end

Sent: do you want Mommy to stand up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|stand(n:prop|mommy,$1),adv|up($1)),$0),$0))
example_end

Sent: Mommy stand up ?
Sem: lambda $0_{ev}.Q(and(v|stand(n:prop|mommy,$0),adv|up($0)))
example_end

Sent: what about the chair ?
Sem: att(pro:int|what,adv|about(det:art|the($0,n|chair($0))))
example_end

Sent: nice pony ?
Sem: lambda $0_{e}.Q(and(adj|nice($0),n|pony($0)))
example_end

Sent: may please ?
Sem: lambda $0_{ev}.Q(and(mod|may(you,$0),co|please($0)))
example_end

Sent: fix kitty ?
Sem: lambda $0_{ev}.Q(v|fix(you,lambda $1_{e}.n|kitty($1),$0))
example_end

Sent: make mosquito ?
Sem: lambda $0_{ev}.Q(v|make(you,lambda $1_{e}.n|mosquito($1),$0))
example_end

Sent: fine book ?
Sem: lambda $0_{e}.Q(and(adj|fine($0),n|book($0)))
example_end

Sent: don 't take those out .
Sem: lambda $0_{ev}.not(mod|do(and(v|take(you,pro:dem|those,$0),adv|out($0)),$0),$0)
example_end

Sent: leave them in there .
Sem: lambda $0_{ev}.and(v|leave(you,pro:obj|them,$0),prep|in(adv|there($0)))
example_end

Sent: what is in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1,$0),prep|in(adv|there($0)))
example_end

Sent: get Adam 's bike !
Sem: lambda $0_{ev}.v|get(you,n:prop|adam's($1,n|bike($1)),$0)
example_end

Sent: which book ?
Sem: lambda $0_{e}.$0($1,n|book($1))
example_end

Sent: see there are no pictures .
Sem: lambda $0_{ev}.and(v|see(you,$0),cop|be-pres(qn|no($1,n|picture-pl($1)),$0))
example_end

Sent: did you read that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|read-zero(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: you gave it to him .
Sem: lambda $0_{ev}.and(v|give-past(pro:per|you,pro:per|it,$0),prep|to(pro:obj|him,$0))
example_end

Sent: go get it ?
Sem: lambda $0_{ev}.Q(v|get(you,pro:per|it,$0))
example_end

Sent: go get what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|get(you,$1,$0)
example_end

Sent: what am I ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|i,$0)
example_end

Sent: I help to move rocks .
Sem: lambda $0_{ev}.v|help(pro:sub|i,lambda $1_{ev}.n|move(pro:sub|i,lambda $2_{e}.n|rock-pl($2),$1),$0)
example_end

Sent: what is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: are you looking at the book ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|look-presp(pro:per|you,$0),prep|at(det:art|the($1,n|book($1)),$0)),$0))
example_end

Sent: no that 's a tape recorder .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0))),co|no($0))
example_end

Sent: yes tape recorder .
Sem: lambda $0_{ev}.and(and_comp(n|tape($0),n|record-dv($0)),co|yes($0))
example_end

Sent: read bunny .
Sem: lambda $0_{ev}.v|read-zero(you,lambda $1_{e}.n|bunny+rabbit($1),$0)
example_end

Sent: can the bunny read ?
Sem: lambda $0_{ev}.Q(mod|can(v|read-zero(det:art|the($1,n|bunny+rabbit($1)),$0),$0))
example_end

Sent: oh you 're going to read to the bunny .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|read-zero(pro:per|you,$1),prep|to(det:art|the($2,n|bunny+rabbit($2)),$1)),$0),$0),co|oh($0))
example_end

Sent: that 's a good idea .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|idea(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: you can 't write .
Sem: lambda $0_{ev}.not(mod|can(v|write(pro:per|you,$0),$0),$0)
example_end

Sent: I 'll get you .
Sem: lambda $0_{ev}.mod|~will(aux|get(pro:sub|i,pro:per|you,$0),$0)
example_end

Sent: poor Perro he was under the pillow .
Sem: lambda $0_{ev}.and(att(n:prop|perro,lambda $1_{e}.adj|poor($1)),and(aux|be-past(pro:sub|he,$0),prep|under(det:art|the($2,n|pillow($2)),$0)))
example_end

Sent: who 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: that 's little Robin Red Breast .
Sem: lambda $0_{ev}.n:prop|breast_red(pro:dem|that,$0)
example_end

Sent: what 's that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: you leave his pencil in there Adam .
Sem: lambda $0_{ev}.and(v|leave(pro:per|you,det:poss|his($1,n|pencil($1)),$0),prep|in(adv|there($0)))
example_end

Sent: look Adam .
Sem: lambda $0_{ev}.co|look(you,$0)
example_end

Sent: here 's one .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),pro:exist|here($0))
example_end

Sent: do you know this one ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,pro:dem|this($1,pro:indef|one($1)),$0),$0))
example_end

Sent: now what are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|write-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: can you spell your name ?
Sem: lambda $0_{ev}.Q(mod|can(v|spell(pro:per|you,det:poss|your($1,n|name($1)),$0),$0))
example_end

Sent: mustn 't write on the book .
Sem: lambda $0_{ev}.not(mod|must(and(v|write(you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0),$0)
example_end

Sent: pencil and paper alright .
Sem: lambda $0_{ev}.and(coord|and(lambda $1_{e}.n|pencil($1),lambda $2_{e}.n|paper($2)),adj|alright($0))
example_end

Sent: does your writing look like his ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(cop|look(det:poss|your($1,n:gerund|write-presp($1)),$0),conj|like(det:poss|his,$0)),$0))
example_end

Sent: you tell me .
Sem: lambda $0_{ev}.v|tell(pro:per|you,pro:obj|me,$0)
example_end

Sent: don 't jump .
Sem: lambda $0_{ev}.not(mod|do(v|jump(you,$0),$0),$0)
example_end

Sent: he can 't write when you jump .
Sem: lambda $0_{ev}.not(conj|when(v|jump(pro:per|you,$0),mod|can(v|write(pro:sub|he,$0),$0)),$0)
example_end

Sent: put dirt up ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|dirt($1),$0),adv|up($0)))
example_end

Sent: are you a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|bulldoze-dv(pro:per|you,$0),adj|busy(pro:per|you,$0))))
example_end

Sent: why do you like to throw your book ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|do(and(v|like(pro:per|you,lambda $1_{ev}.v|throw(pro:per|you,det:poss|your($2,n|book($2)),$1),$0),$3($0)),$0)
example_end

Sent: oh you 're like a bulldozer ?
Sem: lambda $0_{ev}.Q(and(prep|like(det:art|a($1,n|bulldoze-dv($1)),pro:per|you,$0),co|oh($0)))
example_end

Sent: no that 's no funny .
Sem: lambda $0_{ev}.and(not(adj|fun-dn(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: you had such a funny expression .
Sem: lambda $0_{ev}.part|have-pastp(pro:per|you,qn|such(det:art|a($1,and(adj|fun-dn($1),n|expression($1)))),$0)
example_end

Sent: must go where ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|must(and(v|go(you,$0),$1($0)),$0)
example_end

Sent: Catherine too ?
Sem: lambda $0_{e}.Q(post|too(n:prop|catherine,$0))
example_end

Sent: well Cliffy 's at his house .
Sem: lambda $0_{ev}.and(prep|at(det:poss|his($1,n|house($1)),n:prop|cliffy,$0),co|well($0))
example_end

Sent: I guess Cliffy looks at Bozo at her house .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.and(and(cop|look-3s(n:prop|cliffy,$1),prep|at(n:prop|bozo,$1)),prep|at(det:poss|her($2,n|house($2)),$1)),$0)
example_end

Sent: how can you work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|can(and(v|work(pro:per|you,$0),$1($0)),$0)
example_end

Sent: you don 't have anything else to put in the box do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|have(pro:per|you,lambda $1_{ev}.and(v|put-zero(post|else(pro:indef|anything),$1),prep|in(det:art|the($2,n|box($2)),$1)),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: this is your bulldozer ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:dem|this,n|bulldoze-dv(pro:dem|this,$0)))
example_end

Sent: oh my Adam bulldozer alright .
Sem: lambda $0_{ev}.and(co|alright(n:prop|adam's($1,n|bulldoze-dv($1)),$0),det:poss|my_oh($0))
example_end

Sent: don 't hit his feet .
Sem: lambda $0_{ev}.not(mod|do(v|hit-zero(you,det:poss|his($1,n|foot-pl($1)),$0),$0),$0)
example_end

Sent: you like hit ball ?
Sem: lambda $0_{ev}.Q(conj|like(pro:per|you,lambda $1_{ev}.v|hit-zero(pro:per|you,lambda $2_{e}.n|ball($2),$1),$0))
example_end

Sent: isn 't that part of your trailer ?
Sem: lambda $0_{ev}.Q(not(att(n|part(pro:dem|that,$0),prep|of(det:poss|your($1,n|trailer($1)))),$0))
example_end

Sent: you go get it .
Sem: lambda $0_{ev}.v|get(pro:per|you,pro:per|it,$0)
example_end

Sent: I 'll go get it .
Sem: lambda $0_{ev}.mod|~will(v|get(pro:sub|i,pro:per|it,$0),$0)
example_end

Sent: how did you get them in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|get(pro:per|you,pro:obj|them,$0),$1($0)),prep|in(adv|there($0))),$0)
example_end

Sent: there 's one .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),pro:exist|there($0))
example_end

Sent: two green ?
Sem: lambda $0_{e}.Q(det:num|two(n|green($0)))
example_end

Sent: I guess he 's working .
Sem: lambda $0_{ev}.v|guess(pro:sub|i,lambda $1_{ev}.aux|~be(part|work-presp(pro:sub|he,$1),$1),$0)
example_end

Sent: that 's a man ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:dem|that,n|man(pro:dem|that,$0)))
example_end

Sent: what 's his name ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:poss|his($2,n|name($2)),$0)
example_end

Sent: how can he see to deliver mail ?
Sem: lambda $3_{e}.lambda $0_{ev}.mod|can(and(v|see(pro:sub|he,lambda $1_{ev}.v|deliver(pro:sub|he,lambda $2_{e}.n|mail($2),$1),$0),$3($0)),$0)
example_end

Sent: where is a tomato ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|a($1,n|tomato($1)),$0),$2($0))
example_end

Sent: she 's gone home .
Sem: lambda $0_{ev}.aux|~be(and(part|go-pastp(pro:sub|she,$0),n|home($0)),$0)
example_end

Sent: she went home in July .
Sem: lambda $0_{ev}.and(and(v|go-past(pro:sub|she,$0),adv|home($0)),prep|in(n:prop|july,$0))
example_end

Sent: why don 't you come over here and play with the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(coord|and(v|come(pro:per|you,$0),and(n|play(pro:per|you,$0),prep|with(det:art|the($1,n|ball($1)),$0))),$2($0)),adv|over(adv|here($0))),$0),$0)
example_end

Sent: you can get it .
Sem: lambda $0_{ev}.mod|can(aux|get(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: Daddy 's brief case .
Sem: n:prop|daddy's($0,n|case_brief($0))
example_end

Sent: did you get the ball ?
Sem: lambda $0_{ev}.Q(v|do-past(v|get(pro:per|you,det:art|the($1,n|ball($1)),$0),$0))
example_end

Sent: where is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s(pro:per|it,$0),$1($0))
example_end

Sent: those are Daddy 's books .
Sem: lambda $0_{ev}.n:prop|daddy's'(pro:dem|those,n|book-pl(pro:dem|those,$0))
example_end

Sent: would you like to have your books on the bookshelf too ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.and(and(v|have(pro:per|you,det:poss|your($2,n|book-pl($2)),$1),prep|on(det:art|the($3,n|book+shelf($3)),$1)),post|too($1)),$0),$0))
example_end

Sent: no that 's a church .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|church(pro:dem|that,$0)),co|no($0))
example_end

Sent: move your own road grader .
Sem: lambda $0_{ev}.v|move(you,det:poss|your($1,and_comp(n|road($1),and(adj|own($1),n|grade-dv($1)))),$0)
example_end

Sent: go move the road grader .
Sem: lambda $0_{ev}.v|move(you,det:art|the($1,and_comp(n|road($1),n|grade-dv($1))),$0)
example_end

Sent: you pick the road grader up .
Sem: lambda $0_{ev}.and(v|pick(pro:per|you,det:art|the($1,and_comp(n|road($1),n|grade-dv($1))),$0),adv|up($0))
example_end

Sent: the dog doesn 't want any paper does he ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|want(det:art|the($1,n|dog($1)),qn|any($2,n|paper($2)),$0),$0),$0),mod|do-3s(pro:sub|he,$0)))
example_end

Sent: here doggie .
Sem: adv|here(lambda $0_{e}.n|dog-dim($0))
example_end

Sent: that 's not a record .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|record(pro:dem|that,$0)),$0)
example_end

Sent: ask her what that is .
Sem: lambda $0_{ev}.v|ask(you,pro:obj|her,$0)
example_end

Sent: that 's a tape recorder .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)))
example_end

Sent: don 't touch .
Sem: lambda $0_{ev}.not(mod|do(v|touch(you,$0),$0),$0)
example_end

Sent: what is it doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(part|do-presp(pro:per|it,$1,$0),$0)
example_end

Sent: record is playing ?
Sem: lambda $0_{ev}.Q(aux|be-3s(part|play-presp(lambda $1_{e}.n|record($1),$0),$0))
example_end

Sent: what does it do when it plays ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(v|play-3s(pro:per|it,$0),mod|do-3s(v|do(pro:per|it,$1,$0),$0))
example_end

Sent: do you hear a horn playing ?
Sem: lambda $0_{ev}.Q(mod|do(v|hear(pro:per|you,lambda $1_{ev}.part|play-presp(det:art|a($2,n|horn($2)),$1),$0),$0))
example_end

Sent: I don 't hear a horn .
Sem: lambda $0_{ev}.not(mod|do(v|hear(pro:sub|i,det:art|a($1,n|horn($1)),$0),$0),$0)
example_end

Sent: is there a horn on there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|horn($1)),$0),prep|on(adv|there($0))))
example_end

Sent: did he like the water ?
Sem: lambda $0_{ev}.Q(mod|do-past(co|like(pro:sub|he,det:art|the($1,n|water($1)),$0),$0))
example_end

Sent: what do you see in there ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|see(pro:per|you,$1,$0),adv|in(adv|there($0))),$0)
example_end

Sent: where does the ladder go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|go(det:art|the($1,n|ladder($1)),$0),$2($0)),$0)
example_end

Sent: can you put it on ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|on($0)),$0))
example_end

Sent: can you put them in there ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|in(adv|there($0))),$0))
example_end

Sent: I thought you couldn 't do it .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.not(mod|could(v|do(pro:per|you,pro:per|it,$1),$1),$1),$0)
example_end

Sent: that 's no ladder for that .
Sem: lambda $0_{ev}.not(att(n|ladder(pro:dem|that,$0),prep|for(pro:dem|that)),$0)
example_end

Sent: you read your paper and I 'll read mine .
Sem: lambda $0_{ev}.coord|and(mod|~will(v|read-zero(pro:sub|i,pro:poss|mine,$0),$0),v|read-zero(pro:per|you,det:poss|your($1,n|paper($1)),$0))
example_end

Sent: mine paper .
Sem: n|mine($0,n|paper($0))
example_end

Sent: alright it 's yours .
Sem: lambda $0_{ev}.and(pro:poss|yours(pro:per|it,$0),co|alright($0))
example_end

Sent: he 's going out .
Sem: lambda $0_{ev}.aux|~be(and(part|go-presp(pro:sub|he,$0),adv|out($0)),$0)
example_end

Sent: would you like some soup ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,qn|some($1,n|soup($1)),$0),$0))
example_end

Sent: what kind of soup ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|soup($2))))
example_end

Sent: well you told her to sit there .
Sem: lambda $0_{ev}.and(v|tell-past(pro:per|you,lambda $1_{ev}.and(v|sit(pro:obj|her,$1),adv|there($1)),$0),co|well($0))
example_end

Sent: Mommy 's tea ?
Sem: lambda $0_{e}.Q(n:prop|mommy's($1,n|tea($1),$0))
example_end

Sent: what are you doing Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0)
example_end

Sent: did you see the sun ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,det:art|the($1,n|sun($1)),$0),$0))
example_end

Sent: is that a lady ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|lady(pro:rel|that,$0)))
example_end

Sent: is it hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:per|it,$0))
example_end

Sent: you can 't reach it ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|reach(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: put water in it ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|water($1),$0),prep|in(pro:per|it,$0)))
example_end

Sent: Adam drive record ?
Sem: lambda $0_{ev}.Q(n|drive(n:prop|adam,lambda $1_{e}.n|record($1),$0))
example_end

Sent: where 's your truck going ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|~be(and(part|go-presp(det:poss|your($1,n|truck($1)),$0),$2($0)),$0)
example_end

Sent: no there 's your paper .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|your($1,n|paper($1)),$0),pro:exist|there($0)),co|no($0))
example_end

Sent: oh doggie write paper ?
Sem: lambda $0_{ev}.Q(and(v|write(lambda $1_{e}.n|dog-dim($1),lambda $2_{e}.n|paper($2),$0),co|oh($0)))
example_end

Sent: that 's a smart doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|dog-dim(pro:dem|that,$0),adj|smart(pro:dem|that,$0)))
example_end

Sent: what did the doggie write ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|write(det:art|the($1,n|dog-dim($1)),$2,$0),$0)
example_end

Sent: that 's a hole .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|hole(pro:dem|that,$0))
example_end

Sent: oh climb ?
Sem: lambda $0_{ev}.Q(and(v|climb(you,$0),co|oh($0)))
example_end

Sent: what did he climb ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|climb(pro:sub|he,$1,$0),$0)
example_end

Sent: do you want to write on here ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|write(pro:per|you,$1),prep|on(adv|here($1))),$0),$0))
example_end

Sent: Daddy went to school .
Sem: lambda $0_{ev}.and(v|go-past(n:prop|daddy,$0),prep|to(lambda $1_{e}.n|school($1),$0))
example_end

Sent: those are her feet .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|those,n|foot-pl(pro:dem|those,$0))
example_end

Sent: how many feet does she have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|have(pro:sub|she,lambda $1_{e}.and($2(qn|many($1)),n|foot-pl($1)),$0),$0)
example_end

Sent: how many feet do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|foot-pl($1)),$0),$0)
example_end

Sent: Catherine stay tonight ?
Sem: lambda $0_{ev}.Q(and(n|stay(n:prop|catherine,$0),adv:tem|tonight($0)))
example_end

Sent: no Mommy is going to stay tonight .
Sem: lambda $0_{ev}.and(aux|be-3s(part|go-presp(n:prop|mommy,lambda $1_{ev}.and(cop|stay(n:prop|mommy,$1),adv:tem|tonight($1)),$0),$0),co|no($0))
example_end

Sent: yes Adam will stay tonight too .
Sem: lambda $0_{ev}.and(mod|will(and(and(cop|stay(n:prop|adam,$0),adv:tem|tonight($0)),post|too($0)),$0),co|yes($0))
example_end

Sent: no Howe won 't stay tonight .
Sem: lambda $0_{ev}.and(not(mod|will(and(cop|stay(n:prop|howe,$0),adv:tem|tonight($0)),$0),$0),co|no($0))
example_end

Sent: no there 's no fire back there .
Sem: lambda $0_{ev}.and(and(cop|~be(qn|no($1,n|fire($1)),$0),adv|back(adv|there($0))),co|no($0))
example_end

Sent: you drawing a kitty ?
Sem: lambda $0_{ev}.Q(n|drawing(pro:per|you,det:art|a($1,n|kitty($1)),$0))
example_end

Sent: what does Daddy say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|say(n:prop|daddy,$1,$0),$0)
example_end

Sent: write circle ?
Sem: lambda $0_{ev}.Q(v|write(you,lambda $1_{e}.n|circle($1),$0))
example_end

Sent: bumble bee ?
Sem: lambda $0_{e}.Q(n|bee_bumble($0))
example_end

Sent: where is he ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:sub|he,$0),$1($0))
example_end

Sent: why don 't you write that ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(v|write(pro:per|you,pro:dem|that,$0),$1($0)),$0),$0)
example_end

Sent: is that the bumble bee ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|bee_bumble(pro:rel|that,$0)))
example_end

Sent: do you want to read a book ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|read-zero(pro:per|you,det:art|a($2,n|book($2)),$1),$0),$0))
example_end

Sent: who is this .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:dem|this($0,$1)
example_end

Sent: Donald_Duck go ?
Sem: lambda $0_{ev}.Q(v|go(n:prop|donald_duck,$0))
example_end

Sent: I don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: did you look in your basket ?
Sem: lambda $0_{ev}.Q(v|do-past(and(cop|look(pro:per|you,$0),prep|in(det:poss|your($1,n|basket($1)),$0)),$0))
example_end

Sent: can you go with your bike ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|go(pro:per|you,$0),prep|with(det:poss|your($1,n|bike($1)),$0)),$0))
example_end

Sent: look a trailer ?
Sem: lambda $0_{ev}.Q(and(cop|look(you,$0),det:art|a($1,n|trailer($1))))
example_end

Sent: what are you going to pull ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|pull($2,$1),$0),$0)
example_end

Sent: pull Adam 's bike ?
Sem: lambda $0_{ev}.Q(v|pull(you,n:prop|adam's($1,n|bike($1)),$0))
example_end

Sent: no don 't take his head off .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|take(you,det:poss|his($1,n|head($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: leave him on there so he can drive it .
Sem: lambda $0_{ev}.conj|so(mod|can(v|drive(pro:sub|he,pro:per|it,$0),$0),and(v|leave(you,pro:obj|him,$0),prep|on(adv|there($0))))
example_end

Sent: yes his head is off .
Sem: lambda $0_{e}.lambda $1_{ev}.det:poss|his($0,n|head($0,$1))
example_end

Sent: do you have a comb ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|comb($1)),$0),$0))
example_end

Sent: is that a piggie ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pig-dim(pro:rel|that,$0)))
example_end

Sent: I can 't see .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:sub|i,$0),$0),$0)
example_end

Sent: no I can 't see .
Sem: lambda $0_{ev}.and(not(mod|can(v|see(pro:sub|i,$0),$0),$0),co|no($0))
example_end

Sent: where 's a ladder ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|a($1,n|ladder($1)),$0),$2($0))
example_end

Sent: that 's the tattooed man .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and(n|man(pro:dem|that,$0),part|tattoo-pastp(pro:dem|that,$0)))
example_end

Sent: tattooed man .
Sem: lambda $0_{e}.and(part|tattoo-pastp($0),n|man($0))
example_end

Sent: may I sit beside you ?
Sem: lambda $0_{ev}.Q(mod|may(and(v|sit(pro:sub|i,$0),prep|beside(pro:per|you,$0)),$0))
example_end

Sent: Judy and Buzz .
Sem: coord|and(n:prop|judy,n:prop|buzz)
example_end

Sent: you had an apple when you got up from your nap .
Sem: lambda $0_{ev}.conj|when(and(v|get-past_up(pro:per|you,$0),prep|from(det:poss|your($1,n|nap($1)),$0)),v|have-past(pro:per|you,det:art|a($2,n|apple($2)),$0))
example_end

Sent: Adam want to close the box ?
Sem: lambda $0_{ev}.Q(v|want(n:prop|adam,lambda $1_{ev}.v|close(n:prop|adam,det:art|the($2,n|box($2)),$1),$0))
example_end

Sent: do you want paper ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.n|paper($1),$0),$0))
example_end

Sent: whose brief case is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,and_comp(adj|brief(pro:dem|that,$0),n|case(pro:dem|that,$0)))
example_end

Sent: is that part of the game ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|game($1)))))
example_end

Sent: oh pin game .
Sem: lambda $0_{ev}.and(and_comp(n|pin($0),n|game($0)),co|oh($0))
example_end

Sent: John Buzzhart !
Sem:
example_end

Sent: Adam you don 't tell him what to write .
Sem: lambda $2_{e}.lambda $0_{ev}.and(not(mod|do(v|tell(pro:per|you,lambda $1_{ev}.v|write(pro:obj|him,$2,$1),$0),$0),$0),n:prop|adam)
example_end

Sent: don 't sit on that .
Sem: lambda $0_{ev}.not(mod|do(and(v|sit(you,$0),prep|on(pro:dem|that,$0)),$0),$0)
example_end

Sent: here 's your shoe .
Sem: lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|shoe($1)),$0),pro:exist|here($0))
example_end

Sent: no John Buzzhart .
Sem: lambda $0_{ev}.and(n:prop|buzzhart_john($0),co|no($0))
example_end

Sent: what kind of game ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|game($2))))
example_end

Sent: which one ?
Sem: lambda $0_{e}.$0($1,pro:indef|one($1))
example_end

Sent: oh shave a pig .
Sem: lambda $0_{ev}.and(v|shave(you,det:art|a($1,n|pig($1)),$0),co|oh($0))
example_end

Sent: that one ?
Sem: lambda $0_{e}.Q(pro:dem|that($1,pro:indef|one($1),$0))
example_end

Sent: you haven 't seen Bozo in a long time have you ?
Sem: lambda $0_{ev}.Q(and(not(aux|have(and(part|see-pastp(pro:per|you,n:prop|bozo,$0),prep|in(det:art|a($1,and(adj|long($1),n|time($1))),$0)),$0),$0),v|have(pro:per|you,$0)))
example_end

Sent: are you sitting with me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|sit-presp(pro:per|you,$0),prep|with(pro:obj|me,$0)),$0))
example_end

Sent: oh you found bunny .
Sem: lambda $0_{ev}.and(v|found(pro:per|you,lambda $1_{e}.n|bunny+rabbit($1),$0),co|oh($0))
example_end

Sent: that 's David 's Bunny_Rabbit .
Sem: lambda $0_{ev}.n:prop|david's'(pro:dem|that,n:prop|bunny_rabbit(pro:dem|that,$0))
example_end

Sent: yes I remember David .
Sem: lambda $0_{ev}.and(v|remember(pro:sub|i,n:prop|david,$0),co|yes($0))
example_end

Sent: do you remember David ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,n:prop|david,$0),$0))
example_end

Sent: no not her shoe .
Sem: lambda $0_{ev}.and(not(det:poss|her($1,n|shoe($1)),$0),co|no($0))
example_end

Sent: write on the paper .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:art|the($1,n|paper($1)),$0))
example_end

Sent: write on his shoe ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),prep|on(det:poss|his($1,n|shoe($1)),$0)))
example_end

Sent: no you can 't write on Mr Cromer 's show .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|write(pro:per|you,$0),prep|on(n:prop|cromer_mr's($1,n|show($1)),$0)),$0),$0),co|no($0))
example_end

Sent: like Adam 's horsie .
Sem: prep|like(n:prop|adam's($0,n|horse-dim($0)))
example_end

Sent: yes there 's a horse there .
Sem: lambda $0_{ev}.and(and(cop|~be(det:art|a($1,n|horse($1)),$0),adv|there($0)),co|yes($0))
example_end

Sent: he can 't copy me .
Sem: lambda $0_{ev}.not(mod|can(v|copy(pro:sub|he,pro:obj|me,$0),$0),$0)
example_end

Sent: I don 't care .
Sem: lambda $0_{ev}.not(mod|do(v|care(pro:sub|i,$0),$0),$0)
example_end

Sent: oh you 're going to give the kitty a ride in your wagon ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|give(pro:per|you,det:art|a($2,att(n|ride($2),prep|in(det:poss|your($3,n|wagon($3))))),det:art|the($4,n|kitty($4)),$1),$0),$0),co|oh($0)))
example_end

Sent: do you have a bite ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|bite($1)),$0),$0))
example_end

Sent: can you tell Mr Cromer about Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|tell(pro:per|you,n:prop|cromer_mr,$0),prep|about(n:prop|humpty_dumpty,$0)),$0))
example_end

Sent: oh he wants to shake hands .
Sem: lambda $0_{ev}.and(v|want-3s(pro:sub|he,lambda $1_{ev}.n|shake(pro:sub|he,lambda $2_{e}.n|hand-pl($2),$1),$0),co|oh($0))
example_end

Sent: is that a light ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|light(pro:rel|that,$0)))
example_end

Sent: is that Adam 's shoe ?
Sem: lambda $0_{ev}.Q(n:prop|adam's'(pro:dem|that,n|shoe(pro:dem|that,$0)))
example_end

Sent: can you play it ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you like to walk ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,lambda $1_{ev}.v|walk(pro:per|you,$1),$0))
example_end

Sent: Mommy can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(n:prop|mommy,$0),$0),$0)
example_end

Sent: no Mommy can 't march .
Sem: lambda $0_{ev}.and(not(mod|can(v|march(n:prop|mommy,$0),$0),$0),co|no($0))
example_end

Sent: maybe Catherine can march .
Sem: lambda $0_{ev}.mod|can(and(v|march(n:prop|catherine,$0),adv|maybe($0)),$0)
example_end

Sent: no you march .
Sem: lambda $0_{ev}.and(v|march(pro:per|you,$0),co|no($0))
example_end

Sent: where is Catherine ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(n:prop|catherine,$0),$1($0))
example_end

Sent: no you write on paper with pencil .
Sem: lambda $0_{ev}.and(and(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|paper($1),$0)),prep|with(lambda $2_{e}.n|pencil($2),$0)),co|no($0))
example_end

Sent: whose suitcase is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|suitcase(pro:dem|that,$0))
example_end

Sent: that 's his name .
Sem: lambda $0_{ev}.det:poss|his(pro:dem|that,n|name(pro:dem|that,$0))
example_end

Sent: what does it say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|say(pro:per|it,$1,$0),$0)
example_end

Sent: whose tractor is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|tractor(pro:dem|that,$0))
example_end

Sent: put the ball where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: tape recorder ?
Sem: lambda $0_{e}.Q(and_comp(n|tape($0),n|record-dv($0)))
example_end

Sent: no you can 't put the ball on the tape recorder .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|put-zero(pro:per|you,det:art|the($1,n|ball($1)),$0),prep|on(det:art|the($2,and_comp(n|tape($2),n|record-dv($2))),$0)),$0),$0),co|no($0))
example_end

Sent: what did the ball hit ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(v|hit-zero(det:art|the($1,n|ball($1)),$2,$0),$0)
example_end

Sent: oh hit Mommy 's rug ?
Sem: lambda $0_{ev}.Q(and(n|hit(you,n:prop|mommy's($1,n|rug($1)),$0),co|oh($0)))
example_end

Sent: where did it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: is it under the chair ?
Sem: lambda $0_{ev}.Q(prep|under(det:art|the($1,n|chair($1)),pro:per|it,$0))
example_end

Sent: see you later again ?
Sem: lambda $0_{ev}.Q(and(and(v|see(you,pro:per|you,$0),adv|later($0)),adv|again($0)))
example_end

Sent: Adam whose ball is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|ball(pro:dem|that,$0))
example_end

Sent: no you can 't sit on my book .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|sit(pro:per|you,$0),prep|on(det:poss|my($1,n|book($1)),$0)),$0),$0),co|no($0))
example_end

Sent: what kind is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|kind(pro:dem|that,$0))
example_end

Sent: this is a diesel locomotive .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,and_comp(n|diesel(pro:dem|this,$0),n|locomotive(pro:dem|this,$0)))
example_end

Sent: can you say that ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,pro:dem|that,$0),$0))
example_end

Sent: baggage car ?
Sem: lambda $0_{e}.Q(and_comp(n|baggage($0),n|car($0)))
example_end

Sent: streamlined coach .
Sem: lambda $0_{e}.and_comp(part|streamline-pastp($0),n|coach($0))
example_end

Sent: sleeping car .
Sem: lambda $0_{e}.and_comp(part|sleep-presp($0),n|car($0))
example_end

Sent: dining car .
Sem: lambda $0_{e}.and_comp(part|dine-presp($0),n|car($0))
example_end

Sent: modern steam locomotive .
Sem: lambda $0_{e}.and_comp(n|steam($0),and(adj|modern($0),n|locomotive($0)))
example_end

Sent: electric locomotive .
Sem: lambda $0_{e}.and_comp(adj|electric($0),n|locomotive($0))
example_end

Sent: rotary snow plow .
Sem: lambda $0_{e}.and_comp(and_comp(adj|rotary($0),n|snow($0)),n|plow($0))
example_end

Sent: flat car .
Sem: lambda $0_{e}.and_comp(adj|flat($0),n|car($0))
example_end

Sent: mail car .
Sem: lambda $0_{e}.and_comp(n|mail($0),n|car($0))
example_end

Sent: tank car .
Sem: lambda $0_{e}.and_comp(n|tank($0),n|car($0))
example_end

Sent: box car .
Sem: lambda $0_{e}.and_comp(n|box($0),n|car($0))
example_end

Sent: do you know what kind this is ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|know(pro:per|you,lambda $1_{ev}.$2(pro:dem|this,n|kind(pro:dem|this,$1)),$0),$0)
example_end

Sent: yes there 's a man .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|man($1)),$0),co|yes($0))
example_end

Sent: put the baby where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|baby($1)),$0),$2($0))
example_end

Sent: where is the baby ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|baby($1)),$0),$2($0))
example_end

Sent: where is she ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s(pro:sub|she,$0),$1($0))
example_end

Sent: bed yes .
Sem: lambda $0_{ev}.and(n|bed($0),co|yes($0))
example_end

Sent: this is the sleeping car .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and_comp(part|sleep-presp(pro:dem|this,$0),n|car(pro:dem|this,$0)))
example_end

Sent: this is a box car .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,and_comp(n|box(pro:dem|this,$0),n|car(pro:dem|this,$0)))
example_end

Sent: know what kind that is ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|know(you,lambda $1_{ev}.$2(pro:rel|that,n|kind(pro:rel|that,$1)),$0)
example_end

Sent: do you know what that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: that 's the mail car .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,and_comp(n|mail(pro:dem|that,$0),n|car(pro:dem|that,$0)))
example_end

Sent: stop car .
Sem: lambda $0_{e}.and_comp(n|stop($0),n|car($0))
example_end

Sent: and the last car on a train is called the what ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-3s(part|call-pastp(det:art|the($1,att(and(adj|last($1),n|car($1)),prep|on(det:art|a($2,n|train($2))))),$3,$0),$0)
example_end

Sent: it 's called the caboose .
Sem: lambda $0_{ev}.aux|~be(part|call-pastp(pro:per|it,det:art|the($1,n|caboose($1)),$0),$0)
example_end

Sent: yes that does look like a broom doesn 't it .
Sem: lambda $0_{ev}.and(and(v|do-3s(and(cop|look(pro:rel|that,$0),conj|like(det:art|a($1,n|broom($1)),$0)),$0),not(mod|do(pro:per|it,$0),$0)),co|yes($0))
example_end

Sent: whose is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,$0)
example_end

Sent: fix bike ?
Sem: lambda $0_{ev}.Q(v|fix(you,lambda $1_{e}.n|bike($1),$0))
example_end

Sent: what do you want to take off ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|take($2,$1),adv|off($1)),$0),$0)
example_end

Sent: did you write it already ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|write(pro:per|you,pro:per|it,$0),adv|already($0)),$0))
example_end

Sent: careful don 't hit Ursula 's feet with the tow truck .
Sem: lambda $0_{ev}.and(not(mod|do(and(n|hit(you,n:prop|ursula's($1,n|foot-pl($1)),$0),prep|with(det:art|the($2,and_comp(n|tow($2),n|truck($2))),$0)),$0),$0),co|careful($0))
example_end

Sent: you hit your knee ?
Sem: lambda $0_{ev}.Q(v|hit-zero(pro:per|you,det:poss|your($1,n|knee($1)),$0))
example_end

Sent: the tow truck hit your knee ?
Sem: lambda $0_{ev}.Q(v|hit-zero(det:art|the($1,and_comp(n|tow($1),n|truck($1))),det:poss|your($2,n|knee($2)),$0))
example_end

Sent: yes that is Donald Duck .
Sem: lambda $0_{ev}.and(n:prop|duck_donald(pro:rel|that,$0),co|yes($0))
example_end

Sent: that 's not Pinnochio .
Sem: lambda $0_{ev}.not(n:prop|pinnochio(pro:dem|that,$0),$0)
example_end

Sent: those are chipmunks and Mickey_Mouse .
Sem: lambda $0_{ev}.coord|and(n|chipmunk-pl(pro:dem|those,$0),n:prop|mickey_mouse(pro:dem|those,$0))
example_end

Sent: put your pajamas on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:poss|your($1,n|pajamas($1)),$0),adv|on($0)))
example_end

Sent: put pajamas on and we can ride the car .
Sem: lambda $0_{ev}.coord|and(mod|can(v|ride(pro:sub|we,det:art|the($1,n|car($1)),$0),$0),and(v|put-zero(you,lambda $2_{e}.n|pajamas($2),$0),adv|on($0)))
example_end

Sent: Daddy 's racket ?
Sem: lambda $0_{e}.Q(n:prop|daddy's($1,n|racket($1),$0))
example_end

Sent: Adam whose racket is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|racket(pro:dem|that,$0))
example_end

Sent: where did your racket go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:poss|your($1,n|racket($1)),$0),$2($0)),$0)
example_end

Sent: yes Daddy 's racket .
Sem: lambda $0_{ev}.and(n:prop|daddy's($1,n|racket($1),$0),co|yes($0))
example_end

Sent: whose racket is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|racket(pro:dem|that,$0))
example_end

Sent: whose brief case is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|this,n|case_brief(pro:dem|this,$0))
example_end

Sent: get off her briefcase honey .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|her($1,n|briefcase($1)),$0),prep|off($0))
example_end

Sent: get up .
Sem: lambda $0_{ev}.and(v|get(you,$0),adv|up($0))
example_end

Sent: come on .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|on($0))
example_end

Sent: no you can 't sit on his either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|sit(pro:per|you,$0),prep|on(det:poss|his,$0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: where 's your foot ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|foot($1)),$0),$2($0))
example_end

Sent: where 's the other one ?
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0),$3($0))
example_end

Sent: oh did you find it ?
Sem: lambda $0_{ev}.Q(and(mod|do-past(v|find(pro:per|you,pro:per|it,$0),$0),co|oh($0)))
example_end

Sent: how many do you have now ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|have(pro:per|you,lambda $1_{e}.$2(qn|many($1)),$0),adv|now($0)),$0)
example_end

Sent: two feet .
Sem: lambda $0_{e}.det:num|two(n|foot-pl($0))
example_end

Sent: how many does Mr Cromer have ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(v|have(n:prop|cromer_mr,lambda $1_{e}.$2(qn|many($1)),$0),$0)
example_end

Sent: oh that 's the knee ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:dem|that,n|knee(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: do you have elbow ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,lambda $1_{e}.n|elbow($1),$0),$0))
example_end

Sent: what 's an elbow ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|a($2,n|elbow($2)),$0)
example_end

Sent: oh it 's right on your arm .
Sem: lambda $0_{ev}.and(adv|right(prep|on(det:poss|your($1,n|arm($1)),pro:per|it,$0)),co|oh($0))
example_end

Sent: it 's all squashed .
Sem: lambda $0_{ev}.adv|all(part|squash-pastp(pro:per|it,$0))
example_end

Sent: all squashed .
Sem: lambda $0_{e}.post|all(part|squash-pastp($0))
example_end

Sent: you 're stepping on her feet .
Sem: lambda $0_{ev}.aux|~be(and(n:gerund|step-presp(pro:per|you,$0),prep|on(det:poss|her($1,n|foot-pl($1)),$0)),$0)
example_end

Sent: where are you sitting ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|sit-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: Joshua 's chair or did you say Joshua 's shirt ?
Sem: lambda $0_{ev}.Q(v|do-past(v|say(pro:per|you,n:prop|joshua's($1,n|shirt($1)),$0),$0))
example_end

Sent: you 're picking the dirt up with your bulldozer ?
Sem: lambda $0_{ev}.Q(aux|~be(and(and(part|pick-presp(pro:per|you,det:art|the($1,n|dirt($1)),$0),adv|up($0)),prep|with(det:poss|your($2,n|bulldoze-dv($2)),$0)),$0))
example_end

Sent: the big tow truck 's picking Joshua 's dirt up ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|pick-presp(det:art|the($1,and_comp(n|tow($1),and(adj|big($1),n|truck($1)))),n:prop|joshua's($2,n|dirt($2)),$0),adv|up($0)),$0))
example_end

Sent: write that ?
Sem: lambda $0_{ev}.Q(v|write(you,pro:dem|that,$0))
example_end

Sent: the tractor can 't write .
Sem: lambda $0_{ev}.not(mod|can(v|write(det:art|the($1,n|tractor($1)),$0),$0),$0)
example_end

Sent: the racket can 't write either .
Sem: lambda $0_{ev}.not(mod|can(and(v|write(det:art|the($1,n|racket($1)),$0),adv|either($0)),$0),$0)
example_end

Sent: Adam is sitting down .
Sem: lambda $0_{ev}.aux|be-3s(and(part|sit-presp(n:prop|adam,$0),adv|down($0)),$0)
example_end

Sent: pick the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|dirt($1)),$0),adv|up($0)))
example_end

Sent: pick the roadgrader up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|roadgrader($1)),$0),adv|up($0)))
example_end

Sent: no you don 't have a nail in there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|nail($1)),$0),prep|in(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: he 's just sharp .
Sem: lambda $0_{ev}.adv|just(adj|sharp(pro:sub|he,$0))
example_end

Sent: Robie 's nail ?
Sem: lambda $0_{e}.Q(n:prop|robie's($1,n|nail($1),$0))
example_end

Sent: pick the glove up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,v|glove($1)),$0),adv|up($0)))
example_end

Sent: pick the paper up ?
Sem: lambda $0_{ev}.Q(and(v|pick(you,det:art|the($1,n|paper($1)),$0),adv|up($0)))
example_end

Sent: oh you can see the rug now ?
Sem: lambda $0_{ev}.Q(and(mod|can(and(v|see(pro:per|you,det:art|the($1,n|rug($1)),$0),adv|now($0)),$0),co|oh($0)))
example_end

Sent: what color is the rug ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1($2,n|color($2)),n|rug($1($2,n|color($2)),$0))
example_end

Sent: what color is in the rug ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-3s($1($2,n|color($2)),$0),prep|in(det:art|the($3,n|rug($3)),$0))
example_end

Sent: what other color is in it ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(lambda $1_{e}.and($2($3,qn|other($3),$1),n|color($1)),$0),prep|in(pro:per|it,$0))
example_end

Sent: green and what ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|green($1),pro:int|what,$0))
example_end

Sent: well what did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do-past(v|hit-zero(pro:per|you,$1,$0),$0),co|well($0))
example_end

Sent: you hit your shoulder .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,det:poss|your($1,n|shoulder($1)),$0)
example_end

Sent: on the table ?
Sem: Q(prep|on(det:art|the($0,n|table($0))))
example_end

Sent: you don 't have a mosquito bite back there .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,and_comp(n|mosquito($1),n|bite($1))),$0),adv|back(adv|there($0))),$0),$0)
example_end

Sent: don 't hit your head on the bicycle .
Sem: lambda $0_{ev}.not(mod|do(and(part|hit-pastp(you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|cycle($2)),$0)),$0),$0)
example_end

Sent: yes that is a man .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,n|man(pro:rel|that,$0)),co|yes($0))
example_end

Sent: yes he 's pushing the dirt up .
Sem: lambda $0_{ev}.and(aux|~be(and(part|push-presp(pro:sub|he,det:art|the($1,n|dirt($1)),$0),adv|up($0)),$0),co|yes($0))
example_end

Sent: where did what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.v|do-past(and(v|go($1,$0),$2($0)),$0)
example_end

Sent: until he met how many men ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|meet-past(pro:sub|he,lambda $1_{e}.and($2(qn|many($1)),n|man-pl($1)),$0)
example_end

Sent: three men .
Sem: lambda $0_{e}.det:num|three(n|man-pl($0))
example_end

Sent: that 's one of the men .
Sem: lambda $0_{ev}.att(pro:indef|one(pro:dem|that,$0),prep|of(det:art|the($1,n|man-pl($1))))
example_end

Sent: come on pal .
Sem: lambda $0_{ev}.v|come_on(you,$0)
example_end

Sent: no don 't push Mommy 's book .
Sem: lambda $0_{ev}.and(not(mod|do(n|push(you,n:prop|mommy's($1,n|book($1)),$0),$0),$0),co|no($0))
example_end

Sent: no it isn 't yours .
Sem: lambda $0_{ev}.and(not(pro:poss|yours(pro:per|it,$0),$0),co|no($0))
example_end

Sent: your books are over in your basket .
Sem: lambda $0_{ev}.and(aux|be-pres(det:poss|your($1,n|book-pl($1)),$0),adv|over(prep|in(det:poss|your($2,n|basket($2)),$0)))
example_end

Sent: is that Doctor Dan ?
Sem: lambda $0_{ev}.Q(n:prop|dan_doctor(pro:rel|that,$0))
example_end

Sent: is it ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|it($0,$1)
example_end

Sent: I didn 't think it was .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.cop|be-past(pro:per|it,$1),$0),$0),$0)
example_end

Sent: why do you call that spaghetti ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|call(pro:per|you,pro:dem|that,$0),$1($0)),$0),lambda $2_{e}.n|spaghetti($2))
example_end

Sent: or is that what you 're saying ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:dem|that($0,$1)
example_end

Sent: what about Daddy ?
Sem: att(pro:int|what,prep|about(n:prop|daddy))
example_end

Sent: no that 's Mr Cromer 's suitcase .
Sem: lambda $0_{ev}.and(n:prop|cromer_mr's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),co|no($0))
example_end

Sent: no whose suitcase is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,n|suitcase(pro:dem|that,$0)),qn|no($0))
example_end

Sent: to whom does that belong ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|belong(det:dem|that,$1,$0),$0)
example_end

Sent: yes that 's Daddy 's suitcase .
Sem: lambda $0_{ev}.and(n:prop|daddy's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),co|yes($0))
example_end

Sent: it 's not a pocketbook .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,n|pocket+book(pro:per|it,$0)),$0)
example_end

Sent: no don 't sit on that .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|sit(you,$0),prep|on(pro:dem|that,$0)),$0),$0),co|no($0))
example_end

Sent: what kind of car do you have ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,$1($2,att(n|kind($2),prep|of(lambda $3_{e}.n|car($3)))),$0),$0)
example_end

Sent: put Miss Munroe 's tow truck ?
Sem: lambda $0_{ev}.Q(v|put-zero(you,n:prop|munroe_miss's($1,and_comp(n|tow($1),n|truck($1))),$0))
example_end

Sent: is that your doggie ?
Sem: lambda $0_{ev}.Q(det:poss|your(pro:rel|that,n|dog-dim(pro:rel|that,$0)))
example_end

Sent: Texaco star ?
Sem: lambda $0_{e}.Q(and_comp(n:prop|texaco($0),n|star($0)))
example_end

Sent: that 's not a star .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|star(pro:dem|that,$0)),$0)
example_end

Sent: what about Cliffy ?
Sem: att(pro:int|what,prep|about(n:prop|cliffy))
example_end

Sent: two boots ?
Sem: lambda $0_{e}.Q(det:num|two(n|boot-pl($0)))
example_end

Sent: it doesn 't belong there .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:per|it,$0),adv|there($0)),$0),$0)
example_end

Sent: Adam 's doggie ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|dog-dim($1),$0))
example_end

Sent: take his nose off ?
Sem: lambda $0_{ev}.Q(and(v|take(you,det:poss|his($1,n|nose($1)),$0),adv|off($0)))
example_end

Sent: no you can 't take his nose off .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: how will he smell anything .
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(and(v|smell(pro:sub|he,pro:indef|anything,$0),$1($0)),$0)
example_end

Sent: no you can 't take his nose off either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: you can 't take his nose off .
Sem: lambda $0_{ev}.not(mod|can(and(v|take(pro:per|you,det:poss|his($1,n|nose($1)),$0),adv|off($0)),$0),$0)
example_end

Sent: can you take your nose off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|take(pro:per|you,det:poss|your($1,n|nose($1)),$0),adv|off($0)),$0))
example_end

Sent: did you take it off ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: no I don 't think those two men can .
Sem: lambda $0_{ev}.and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(pro:dem|those($2,det:num|two(n|man-pl($2))),$1),$0),$0),$0),co|no($0))
example_end

Sent: doggie take nose off ?
Sem: lambda $0_{ev}.Q(and(v|take(lambda $1_{e}.n|dog-dim($1),lambda $2_{e}.n|nose($2),$0),adv|off($0)))
example_end

Sent: no you can 't take the nose off .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|take(pro:per|you,det:art|the($1,n|nose($1)),$0),adv|off($0)),$0),$0),co|no($0))
example_end

Sent: Adam who take nose off ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|take($1,lambda $2_{e}.n|nose($2),$0),adv|off($0))
example_end

Sent: take nose off Donald Duck ?
Sem: lambda $0_{ev}.Q(and(and(v|take(you,lambda $1_{e}.n|nose($1),$0),prep|off($0)),n:prop|duck_donald($0)))
example_end

Sent: take nose off what ?
Sem: lambda $0_{ev}.and(v|take(you,lambda $1_{e}.n|nose($1),$0),prep|off($0))
example_end

Sent: no you can 't take the nose off the bird either .
Sem: lambda $0_{ev}.and(not(mod|can(and(and(v|take(pro:per|you,det:art|the($1,n|nose($1)),$0),prep|off(det:art|the($2,n|bird($2)),$0)),adv|either($0)),$0),$0),co|no($0))
example_end

Sent: does the bird have a nose ?
Sem: lambda $0_{ev}.Q(v|do-3s(v|have(det:art|the($1,n|bird($1)),det:art|a($2,n|nose($2)),$0),$0))
example_end

Sent: that is a man .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|man(pro:rel|that,$0))
example_end

Sent: that 's a piggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|pig-dim(pro:dem|that,$0))
example_end

Sent: that 's a little baby doggie .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(and(n|dog-dim(pro:dem|that,$0),adj|little(pro:dem|that,$0)),n|baby(pro:dem|that,$0)))
example_end

Sent: the baby doggie is a puppy .
Sem: lambda $0_{ev}.det:art|a(det:art|the($1,and(n|baby($1),n|dog-dim($1))),n|puppy(det:art|the($1,and(n|baby($1),n|dog-dim($1))),$0))
example_end

Sent: it 's not the same dog as Pepper .
Sem: lambda $0_{ev}.not(det:art|the(pro:per|it,att(and(n|dog(pro:per|it,$0),adj|same(pro:per|it,$0)),conj|as(n:prop|pepper))),$0)
example_end

Sent: record going to work ?
Sem: lambda $0_{ev}.Q(part|go-presp(lambda $1_{e}.n|record($1),lambda $2_{ev}.v|work(lambda $3_{e}.n|record($3),$2),$0))
example_end

Sent: it hasn 't finished .
Sem: lambda $0_{ev}.not(aux|have(part|finish-pastp(pro:per|it,$0),$0),$0)
example_end

Sent: Adam sit down .
Sem: lambda $0_{ev}.and(v|sit(you,$0),adv|down($0))
example_end

Sent: where are you going to sit ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.v|sit(pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: it doesn 't have nose .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|it,lambda $1_{e}.n|nose($1),$0),$0),$0)
example_end

Sent: where is the nose on the car ?
Sem: lambda $3_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,att(n|nose($1),prep|on(det:art|the($2,n|car($2))))),$0),$3($0))
example_end

Sent: that 's a train .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|train(pro:dem|that,$0))
example_end

Sent: the car is on the train .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|car($1)),$0),prep|on(det:art|the($2,n|train($2)),$0))
example_end

Sent: car train .
Sem: lambda $0_{e}.and_comp(n|car($0),n|train($0))
example_end

Sent: do you have anything in your pocket ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,pro:indef|anything,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)),$0))
example_end

Sent: do you have a penny ?
Sem: lambda $0_{ev}.Q(mod|do(v|have(pro:per|you,det:art|a($1,n|penny($1)),$0),$0))
example_end

Sent: that 's the rug .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|rug(pro:dem|that,$0))
example_end

Sent: whose rug is it Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|rug(pro:per|it,$0))
example_end

Sent: careful don 't step on his foot .
Sem: lambda $0_{ev}.and(not(mod|do(v|step(you,det:poss|his($1,n|foot($1)),$0),$0),$0),adj|care-dn($0))
example_end

Sent: how does it work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|work(pro:per|it,$0),$1($0)),$0)
example_end

Sent: that 's part of the broom .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|broom($1))))
example_end

Sent: what is that part of ?
Sem: lambda $1_{e}.lambda $0_{ev}.att($1(pro:dem|that,$0),prep|of(lambda $2_{e}.n|part($2)))
example_end

Sent: why don 't you put it in the trash ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),prep|in(det:art|the($2,n|trash($2)),$0)),$0),$0)
example_end

Sent: what else is on there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-3s($1,$0),prep|on(adv|there($0)))
example_end

Sent: beans and what ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|bean-pl($1),pro:int|what,$0))
example_end

Sent: those aren 't beans they 're peas .
Sem: lambda $0_{ev}.not(and(n|bean-pl(pro:dem|those,$0),n|pea-pl(pro:sub|they,$0)),$0)
example_end

Sent: may I see them ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,pro:obj|them,$0),$0))
example_end

Sent: what did Humpty_Dumpty do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(n:prop|humpty_dumpty,$1,$0),$0)
example_end

Sent: he sat on the wall .
Sem: lambda $0_{ev}.and(v|sit-past(pro:sub|he,$0),prep|on(det:art|the($1,n|wall($1)),$0))
example_end

Sent: Ricky will fix that ?
Sem: lambda $0_{ev}.Q(mod|will(v|fix(n:prop|ricky,pro:dem|that,$0),$0))
example_end

Sent: oh Lilly will fix it .
Sem: lambda $0_{ev}.and(mod|will(v|fix(n:prop|lilly,pro:per|it,$0),$0),co|oh($0))
example_end

Sent: oh Jesus loves me ?
Sem: lambda $0_{ev}.Q(and(v|love-3s(n:prop|jesus,pro:obj|me,$0),co|oh($0)))
example_end

Sent: at church .
Sem: prep|at(lambda $0_{e}.n|church($0))
example_end

Sent: Jesus love me .
Sem: lambda $0_{ev}.v|love(n:prop|jesus,pro:obj|me,$0)
example_end

Sent: you want to go to church ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|go(pro:per|you,$1),prep|to(lambda $2_{e}.n|church($2),$1)),$0))
example_end

Sent: you don 't go to church today .
Sem: lambda $0_{ev}.not(mod|do(and(v|go(pro:per|you,lambda $1_{e}.n|church($1),$0),adv:tem|today($0)),$0),$0)
example_end

Sent: Adam 's driving ?
Sem: lambda $0_{ev}.Q(aux|~be(part|drive-presp(n:prop|adam,$0),$0))
example_end

Sent: where did Daddy go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|daddy,$0),$1($0)),$0)
example_end

Sent: careful Adam !
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: yes that is Daddy .
Sem: lambda $0_{ev}.and(n:prop|daddy(pro:rel|that,$0),co|yes($0))
example_end

Sent: may I see it ?
Sem: lambda $0_{ev}.Q(mod|may(v|see(pro:sub|i,pro:per|it,$0),$0))
example_end

Sent: no leave that back there .
Sem: lambda $0_{ev}.and(and(n|leave(you,pro:rel|that,$0),adv|back(adv|there($0))),qn|no($0))
example_end

Sent: that 's Ursula 's tape recorder .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:dem|that,and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)))
example_end

Sent: Mommy is Ursula 's Daddy ?
Sem: lambda $0_{ev}.Q(n:prop|ursula's'(n:prop|mommy,n:prop|daddy(n:prop|mommy,$0)))
example_end

Sent: what does Daddy do at school ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|do(n:prop|daddy,$1,$0),prep|at(lambda $2_{e}.n|school($2),$0)),$0)
example_end

Sent: is the busy bulldozer at school ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),prep|at(lambda $2_{e}.n|school($2),$0)))
example_end

Sent: he can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(pro:sub|he,$0),$0),$0)
example_end

Sent: no he can 't march .
Sem: lambda $0_{ev}.and(not(mod|can(v|march(pro:sub|he,$0),$0),$0),co|no($0))
example_end

Sent: yes Mr Green_jeans can march .
Sem: lambda $0_{ev}.and(mod|can(v|march(n:prop|green_jeans_mr,$0),$0),co|yes($0))
example_end

Sent: Bambi can 't march .
Sem: lambda $0_{ev}.not(mod|can(v|march(n:prop|bambi,$0),$0),$0)
example_end

Sent: oh yes the bear can march .
Sem: lambda $0_{ev}.and(mod|can(v|march(det:art|the($1,n|bear($1)),$0),$0),co|yes_oh($0))
example_end

Sent: where 's your bumble bee ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|bee_bumble($1)),$0),$2($0))
example_end

Sent: get the bumble bee alright .
Sem: lambda $0_{ev}.and(v|get(you,det:art|the($1,n|bee_bumble($1)),$0),adj|alright($0))
example_end

Sent: do you think he can drive with that there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|can(and(v|drive(pro:sub|he,$1),adv|there(prep|with(det:dem|that,$1))),$1),$0),$0))
example_end

Sent: that 's your name .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|name(pro:dem|that,$0))
example_end

Sent: you can take it off ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|take(pro:per|you,pro:per|it,$0),adv|off($0)),$0))
example_end

Sent: I doubt it .
Sem: lambda $0_{ev}.v|doubt(pro:sub|i,pro:per|it,$0)
example_end

Sent: put him to work ?
Sem: lambda $0_{ev}.Q(v|put-zero(you,lambda $1_{ev}.v|work(pro:obj|him,$1),$0))
example_end

Sent: oh put him on the rug .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|him,$0),prep|on(det:art|the($1,n|rug($1)),$0)),co|oh($0))
example_end

Sent: that 's Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:dem|that,$0))
example_end

Sent: do you see him ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,pro:obj|him,$0),$0))
example_end

Sent: do you see Ursula too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|see(pro:per|you,n:prop|ursula,$0),post|too($0)),$0))
example_end

Sent: who else do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: do you see your truck too ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|see(pro:per|you,det:poss|your($1,n|truck($1)),$0),adv|too($0)),$0))
example_end

Sent: you don 't mean ball .
Sem: lambda $0_{ev}.not(mod|do(adj|mean(pro:per|you,lambda $1_{e}.n|ball($1),$0),$0),$0)
example_end

Sent: that 's a bat .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|bat(pro:dem|that,$0))
example_end

Sent: where 's the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|ball($1)),$0),$2($0))
example_end

Sent: careful don 't spill it .
Sem: lambda $0_{ev}.and(not(mod|do(v|spill(you,pro:per|it,$0),$0),$0),co|careful($0))
example_end

Sent: don 't spill the water on the rug .
Sem: lambda $0_{ev}.not(mod|do(and(v|spill(you,det:art|the($1,n|water($1)),$0),prep|on(det:art|the($2,n|rug($2)),$0)),$0),$0)
example_end

Sent: he doesn 't want any water I don 't think .
Sem: lambda $0_{ev}.not(and(mod|do(v|want(pro:sub|he,qn|any($1,n|water($1)),$0),$0),not(mod|do(v|think(pro:sub|i,$0),$0),$0)),$0)
example_end

Sent: ask her if she 'd like some .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|she,qn|some,$0),$0),v|ask(you,pro:obj|her,$0))
example_end

Sent: ask me if I 'd like some .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|i,qn|some,$0),$0),v|ask(you,pro:obj|me,$0))
example_end

Sent: ask Mr Cromer if he 'd like some water .
Sem: lambda $0_{ev}.conj|if(mod|~genmod(v|like(pro:sub|he,qn|some($1,n|water($1)),$0),$0),v|ask(you,n:prop|cromer_mr,$0))
example_end

Sent: the suitcase wants water .
Sem: lambda $0_{ev}.v|want-3s(det:art|the($1,n|suitcase($1)),lambda $2_{e}.n|water($2),$0)
example_end

Sent: that 's not your tummy .
Sem: lambda $0_{ev}.not(det:poss|your(pro:dem|that,n|tummy(pro:dem|that,$0)),$0)
example_end

Sent: how many tummies do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|tummy-pl($1)),$0),$0)
example_end

Sent: oh you 're wiping it off ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|wipe-presp(pro:per|you,pro:per|it,$0),adv|off($0)),$0),co|oh($0)))
example_end

Sent: are you the driver .
Sem: lambda $0_{ev}.det:art|the(pro:per|you,n|drive-dv(pro:per|you,$0))
example_end

Sent: how does it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|go(pro:per|it,$0),$1($0)),$0)
example_end

Sent: Adam go to work ?
Sem: lambda $0_{ev}.Q(and(v|go(n:prop|adam,$0),prep|to(lambda $1_{e}.n|work($1),$0)))
example_end

Sent: where does Adam work ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(n|work(n:prop|adam,$0),$1($0)),$0)
example_end

Sent: oh Adam 's driving .
Sem: lambda $0_{ev}.and(aux|~be(part|drive-presp(n:prop|adam,$0),$0),co|oh($0))
example_end

Sent: who is driving ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-3s(part|drive-presp($1,$0),$0)
example_end

Sent: Robbie 's driving too ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|drive-presp(n:prop|robbie,$0),post|too($0)),$0))
example_end

Sent: what kind of noise is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|noise($2))))
example_end

Sent: what kind of truck is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|truck($2))))
example_end

Sent: Hobo 's truck .
Sem: n:prop|hobo's($0,n|truck($0))
example_end

Sent: did you find it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: throw to Daddy ?
Sem: lambda $0_{ev}.Q(and(v|throw(you,$0),prep|to(n:prop|daddy,$0)))
example_end

Sent: Doctor Dan at the circus .
Sem: att(n:prop|dan_doctor,prep|at(det:art|the($0,n|circus($0))))
example_end

Sent: that 's a lion tamer .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n|lion(pro:dem|that,$0),adj|tame-cp(pro:dem|that,$0)))
example_end

Sent: the lady of the elephant .
Sem: det:art|the($0,att(n|lady($0),prep|of(det:art|the($1,n|elephant($1)))))
example_end

Sent: that 's the doggie .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|dog-dim(pro:dem|that,$0))
example_end

Sent: yes tattooed man .
Sem: lambda $0_{ev}.and(and(part|tattoo-pastp($0),n|man($0)),co|yes($0))
example_end

Sent: they 're all falling down .
Sem: lambda $0_{ev}.aux|~be(and(and(part|fall-presp(pro:sub|they,$0),post|all($0)),adv|down($0)),$0)
example_end

Sent: see the bird gets away .
Sem: lambda $0_{ev}.and(v|get-3s_away(det:art|the($1,n|bird($1)),$0),v|see(you,$0))
example_end

Sent: first he does what ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|do-3s(pro:sub|he,$1,$0),adv|first($0))
example_end

Sent: no the doggie didn 't bite him .
Sem: lambda $0_{ev}.and(not(mod|do(v|bite(det:art|the($1,n|dog-dim($1)),pro:obj|him,$0),$0),$0),qn|no($0))
example_end

Sent: Adam doesn 't have cowboy boots like that .
Sem: lambda $0_{ev}.not(mod|do(v|have(n:prop|adam,lambda $1_{e}.att(and_comp(n|cow+boy($1),n|boot-pl($1)),prep|like(pro:dem|that)),$0),$0),$0)
example_end

Sent: do you recognize any of these pictures ?
Sem: lambda $0_{ev}.Q(mod|do(v|recognize(pro:per|you,pro:dem|these($1,n|picture-pl($1)),$0),$0))
example_end

Sent: yeah they all fall down .
Sem: lambda $0_{ev}.and(and(and(v|fall(pro:sub|they,$0),post|all($0)),adv|down($0)),co|yeah($0))
example_end

Sent: how did he get tattooed ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|get(mod|do-past(and(part|tattoo-pastp(pro:sub|he,$0),$1($0)),$0),$0)
example_end

Sent: who fell down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|fall-past($1,$0),adv|down($0))
example_end

Sent: what happened to your head ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:poss|your($2,n|head($2)),$0))
example_end

Sent: what fell down ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|fall-past($1,$0),adv|down($0))
example_end

Sent: when did Adam fall down ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(and(and(n|fall(n:prop|adam,$0),$1($0)),adv|down($0)),$0)
example_end

Sent: you beep beep Adam .
Sem: lambda $0_{ev}.v|beep_beep(pro:per|you,$0)
example_end

Sent: you move some of your toys ?
Sem: lambda $0_{ev}.Q(v|move(pro:per|you,att(qn|some,prep|of(det:poss|your($1,n|toy-pl($1)))),$0))
example_end

Sent: yes move your bike .
Sem: lambda $0_{ev}.and(v|move(you,det:poss|your($1,n|bike($1)),$0),co|yes($0))
example_end

Sent: where 's your racket ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|racket($1)),$0),$2($0))
example_end

Sent: you 're welcome .
Sem: lambda $0_{ev}.adj|welcome(pro:per|you,$0)
example_end

Sent: what shall I write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(v|write(pro:sub|i,$1,$0),$0)
example_end

Sent: what will you write ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will(v|write(pro:per|you,$1,$0),$0)
example_end

Sent: that 's for you .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,$0),conj|for(pro:per|you,$0))
example_end

Sent: whose book is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|book(pro:dem|that,$0))
example_end

Sent: Bruno Walter .
Sem:
example_end

Sent: playing the piano .
Sem: lambda $0_{ev}.part|play-presp(you,det:art|the($1,n|piano($1)),$0)
example_end

Sent: they do look like stars .
Sem: lambda $0_{ev}.mod|do(and(cop|look(pro:sub|they,$0),conj|like(lambda $1_{e}.n|star-pl($1),$0)),$0)
example_end

Sent: what 's he doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: no that 's no paper .
Sem: lambda $0_{ev}.and(not(n|paper(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: Adam didn 't write that .
Sem: lambda $0_{ev}.not(mod|do(v|write(you,pro:dem|that,$0),$0),$0)
example_end

Sent: Mr Walter did .
Sem: lambda $0_{ev}.v|do-past(n:prop|walter_mr,$0)
example_end

Sent: which one is Mr Walter ?
Sem: lambda $1_{e}.lambda $0_{ev}.n:prop|walter_mr($1($2,pro:indef|one($2)),$0)
example_end

Sent: did you read that book last time Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|read-zero(pro:per|you,pro:dem|that($1,n|book($1)),$0),and(adj|last($0),n|time($0))),$0))
example_end

Sent: what is he doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-3s(part|do-presp(pro:sub|he,$1,$0),$0)
example_end

Sent: he 's conducting .
Sem: lambda $0_{ev}.aux|~be(part|conduct-presp(pro:sub|he,$0),$0)
example_end

Sent: he 's in there .
Sem: lambda $0_{ev}.and(cop|~be(pro:sub|he,$0),prep|in(adv|there($0)))
example_end

Sent: you going to give back to Ursula now .
Sem: lambda $0_{ev}.part|go-presp(pro:per|you,lambda $1_{ev}.and(v|give(pro:per|you,$1),adv|now(adv|back(prep|to(n:prop|ursula,$1)))),$0)
example_end

Sent: put it back in the briefcase .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|back(prep|in(det:art|the($1,n|briefcase($1)),$0)))
example_end

Sent: have you met Mr Walter ?
Sem: lambda $0_{ev}.Q(aux|have(v|meet-past(pro:per|you,n:prop|walter_mr,$0),$0))
example_end

Sent: have you read this book before ?
Sem: lambda $0_{ev}.Q(aux|have(and(v|read-zero(pro:per|you,pro:dem|this($1,n|book($1)),$0),adv|before($0)),$0))
example_end

Sent: you have ?
Sem: lambda $0_{ev}.Q(v|have(pro:per|you,$0))
example_end

Sent: Adam 's not funny .
Sem: lambda $0_{ev}.not(adj|fun-dn(n:prop|adam,$0),$0)
example_end

Sent: Daddy Cromer ?
Sem: lambda $0_{e}.Q(n:prop|cromer_daddy($0))
example_end

Sent: no that 's not Cromer 's Daddy .
Sem: lambda $0_{ev}.and(not(n:prop|cromer's'(pro:dem|that,n:prop|daddy(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: Adam Cromer ?
Sem: lambda $0_{e}.Q(n:prop|cromer_adam($0))
example_end

Sent: whose coat is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|coat(pro:dem|that,$0))
example_end

Sent: what are you going to do with the pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|do($2,$1),prep|with(det:art|the($3,n|pencil($3)),$1)),$0),$0)
example_end

Sent: how do you know tha  your pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|know(pro:per|you,lambda $1_{ev}.det:poss|your(pro:rel|that,n|pencil(pro:rel|that,$1)),$0),$2($0)),$0)
example_end

Sent: yes it 's turned on .
Sem: lambda $0_{ev}.and(cop|~be(and(v|turn-past(pro:per|it,$0),adv|on($0)),$0),co|yes($0))
example_end

Sent: are you lying on the dog .
Sem: lambda $0_{ev}.cop|be-pres(part|lie-presp(pro:per|you,det:art|the($1,n|dog($1)),$0),$0)
example_end

Sent: what are you talking about ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|talk-presp(pro:per|you,$1,$0),$0)
example_end

Sent: you tell me what is that ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|tell($0,pro:obj|me,$1)
example_end

Sent: Adam 's pencil ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|pencil($1),$0))
example_end

Sent: is that a pencil ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|pencil(pro:rel|that,$0)))
example_end

Sent: you want some paper ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,qn|some($1,n|paper($1)),$0))
example_end

Sent: Adam are you writing .
Sem: lambda $0_{ev}.aux|be-pres(part|write-presp(pro:per|you,$0),$0)
example_end

Sent: do you know how old you are ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,lambda $1_{ev}.adv:int|how(adj|old(pro:per|you,$1)),$0),$0))
example_end

Sent: two boy ?
Sem: lambda $0_{e}.Q(det:num|two(n|boy($0)))
example_end

Sent: see the racket ?
Sem: lambda $0_{ev}.Q(v|see(you,det:art|the($1,n|racket($1)),$0))
example_end

Sent: oh you see that ?
Sem: lambda $0_{ev}.Q(and(v|see(pro:per|you,pro:dem|that,$0),co|oh($0)))
example_end

Sent: are those pillows .
Sem: lambda $0_{ev}.n|pillow-pl(pro:dem|those,$0)
example_end

Sent: Mommy 's pillows .
Sem: n:prop|mommy's($0,n|pillow-pl($0))
example_end

Sent: well I don 't want my pillows on the floor .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|want(pro:sub|i,det:poss|my($1,n|pillow-pl($1)),$0),prep|on(det:art|the($2,n|floor($2)),$0)),$0),$0),co|well($0))
example_end

Sent: oh they 're Adam 's pillows .
Sem: lambda $0_{ev}.and(n:prop|adam's'(pro:sub|they,n|pillow-pl(pro:sub|they,$0)),co|oh($0))
example_end

Sent: I don 't think Daddy wants his pillows on the floor either .
Sem: lambda $0_{ev}.not(mod|do(and(v|think(pro:sub|i,lambda $1_{ev}.and(v|want-3s(n:prop|daddy,det:poss|his($2,n|pillow-pl($2)),$1),prep|on(det:art|the($3,n|floor($3)),$1)),$0),adv|either($0)),$0),$0)
example_end

Sent: put together again .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,$0),adv|together($0)),adv|again($0))
example_end

Sent: are you fixing the dog .
Sem: lambda $0_{ev}.cop|be-pres(part|fix-presp(pro:per|you,det:art|the($1,n|dog($1)),$0),$0)
example_end

Sent: you want me to move my case ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|move(pro:obj|me,det:poss|my($2,n|case($2)),$1),$0))
example_end

Sent: did you ask him to move it ?
Sem: lambda $0_{ev}.Q(v|do-past(v|ask(pro:per|you,lambda $1_{ev}.v|move(pro:obj|him,pro:per|it,$1),$0),$0))
example_end

Sent: are you pulling your dog .
Sem: lambda $0_{ev}.cop|be-pres(part|pull-presp(pro:per|you,det:poss|your($1,n|dog($1)),$0),$0)
example_end

Sent: is the doggie broken .
Sem: lambda $0_{ev}.part|break-pastp(det:art|the($1,n|dog-dim($1)),$0)
example_end

Sent: that 's no lion .
Sem: lambda $0_{ev}.not(n|lion(pro:dem|that,$0),$0)
example_end

Sent: well that 's the right way .
Sem: lambda $0_{ev}.and(det:art|the(pro:dem|that,and(n|way(pro:dem|that,$0),adj|right(pro:dem|that,$0))),co|well($0))
example_end

Sent: you can 't do that honey .
Sem: lambda $0_{ev}.not(mod|can(v|do(pro:per|you,pro:dem|that,$0),$0),$0)
example_end

Sent: are you writing a letter .
Sem: lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,det:art|a($1,n|letter($1)),$0),$0)
example_end

Sent: what are you Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|you,$0)
example_end

Sent: Adam did you pick up the pillows ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|pick_up(pro:per|you,det:art|the($1,n|pillow-pl($1)),$0),$0))
example_end

Sent: does the doggie like the pillows .
Sem: lambda $0_{ev}.mod|do-3s(prep|like(det:art|the($1,n|dog-dim($1)),det:art|the($2,n|pillow-pl($2)),$0),$0)
example_end

Sent: is that a racket .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|racket(pro:rel|that,$0))
example_end

Sent: what 's so funny ?
Sem: lambda $1_{e}.lambda $0_{ev}.adv|so(adj|fun-dn($1,$0))
example_end

Sent: did you think that was funny ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|think(pro:per|you,lambda $1_{ev}.adj|fun-dn(pro:rel|that,$1),$0),$0))
example_end

Sent: don 't ride the roadgrader up there .
Sem: lambda $0_{ev}.not(mod|do(and(v|ride(you,det:art|the($1,n|roadgrader($1)),$0),adv|up(adv|there($0))),$0),$0)
example_end

Sent: that 's right .
Sem: lambda $0_{ev}.n|right(pro:dem|that,$0)
example_end

Sent: it 's not a big hill .
Sem: lambda $0_{ev}.not(det:art|a(pro:per|it,and(n|hill(pro:per|it,$0),adj|big(pro:per|it,$0))),$0)
example_end

Sent: where is your pencil ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:poss|your($1,n|pencil($1)),$0),$2($0))
example_end

Sent: I have mine .
Sem: lambda $0_{ev}.v|have(pro:sub|i,pro:poss|mine,$0)
example_end

Sent: can you read what 's on there Adam ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|read-zero($1,$0,$2)
example_end

Sent: do you want a piece ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,n|piece($1)),$0),$0))
example_end

Sent: are you writing your name .
Sem: lambda $0_{ev}.cop|be-pres(part|write-presp(pro:per|you,det:poss|your($1,n|name($1)),$0),$0)
example_end

Sent: doctor Dan ?
Sem: lambda $0_{e}.Q(n:prop|dan_doctor($0))
example_end

Sent: oh wash hands ?
Sem: lambda $0_{ev}.Q(and(n|wash(you,lambda $1_{e}.n|hand-pl($1),$0),co|oh($0)))
example_end

Sent: is that a boot .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|boot(pro:rel|that,$0))
example_end

Sent: why don 't you show it to Ursula ?
Sem: lambda $1_{e}.lambda $0_{ev}.not(mod|do(and(and(v|show(pro:per|you,pro:per|it,$0),$1($0)),prep|to(n:prop|ursula,$0)),$0),$0)
example_end

Sent: yes Donald_Duck .
Sem: lambda $0_{ev}.and(n:prop|donald_duck($0),co|yes($0))
example_end

Sent: is that a ladder .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|ladder(pro:rel|that,$0))
example_end

Sent: who is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,$0)
example_end

Sent: show it to Ursula .
Sem: lambda $0_{ev}.and(v|show(you,pro:per|it,$0),prep|to(n:prop|ursula,$0))
example_end

Sent: is that Bambi .
Sem: lambda $0_{ev}.n:prop|bambi(pro:rel|that,$0)
example_end

Sent: what did you say then Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|say(pro:per|you,$1,$0),adv:tem|then($0)),$0)
example_end

Sent: why is he like Perro ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(v|like(n:prop|perro,pro:sub|he,$0))
example_end

Sent: is there a bunny there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|bunny+rabbit($1)),$0),adv|there($0)))
example_end

Sent: wet your pants ?
Sem: lambda $0_{ev}.Q(part|wet-pastp(you,det:poss|your($1,n:pt|pants($1)),$0))
example_end

Sent: can you say you 're sorry ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,lambda $1_{ev}.adj|sorry(pro:per|you,$1),$0),$0))
example_end

Sent: where 's the kitchen ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|kitchen($1)),$0),$2($0))
example_end

Sent: is that the kitchen ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,n|kitchen(pro:rel|that,$0)))
example_end

Sent: Adam is that a ball .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|ball(pro:rel|that,$0))
example_end

Sent: oh take my hand out ?
Sem: lambda $0_{ev}.Q(and(and(v|take(you,co|my($1,n|hand($1)),$0),adv|out($0)),co|oh($0)))
example_end

Sent: are you as tall as Mommy ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|tall($0,$1)
example_end

Sent: get the hand out ?
Sem: lambda $0_{ev}.Q(and(v|get(you,det:art|the($1,v|hand($1)),$0),adv|out($0)))
example_end

Sent: that 's not Donald Duck .
Sem: lambda $0_{ev}.not(n:prop|duck_donald(pro:dem|that,$0),$0)
example_end

Sent: that 's an egg .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|egg(pro:dem|that,$0))
example_end

Sent: hello Chatter .
Sem: lambda $0_{ev}.and(n:prop|chatter($0),co|hello($0))
example_end

Sent: you 're eating Chatter 's what ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|eat-presp(pro:per|you,$1,$0),$0)
example_end

Sent: what did you bite ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|bite(pro:per|you,$1,$0),$0)
example_end

Sent: wipe it off .
Sem: lambda $0_{ev}.and(v|wipe(you,pro:per|it,$0),adv|off($0))
example_end

Sent: did you like it ?
Sem: lambda $0_{ev}.Q(v|do-past(prep|like(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: was it good ?
Sem: lambda $0_{ev}.Q(adj|good(pro:per|it,$0))
example_end

Sent: it doesn 't go in your mouth does it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|go(pro:per|it,det:poss|your($1,n|mouth($1)),$0),$0),$0),mod|do-3s(pro:per|it,$0)))
example_end

Sent: in whose mouth does it go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(v|go(pro:per|it,$1($2,v|mouth($2)),$0),$0)
example_end

Sent: no not Mommy 's mouth .
Sem: lambda $0_{ev}.and(not(n:prop|mommy's($1,n|mouth($1)),$0),co|no($0))
example_end

Sent: not Adam 's mouth .
Sem: not(n:prop|adam's($0,n|mouth($0)))
example_end

Sent: bite whose mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|bite(you,$1($2,n|mouth($2)),$0)
example_end

Sent: does the tape recorder have a mouth ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|have(det:art|the($1,and_comp(n|tape($1),n|record-dv($1))),det:art|a($2,n|mouth($2)),$0),$0))
example_end

Sent: what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: is that hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:dem|that,$0))
example_end

Sent: Daddy 's desk ?
Sem: lambda $0_{e}.Q(n:prop|daddy's($1,n|desk($1),$0))
example_end

Sent: whose tummy hurts ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|hurt-3s($1($2,n|tummy($2)),$0)
example_end

Sent: oh your tummy hurts .
Sem: lambda $0_{ev}.and(v|hurt-3s(det:poss|your($1,n|tummy($1)),$0),co|oh($0))
example_end

Sent: if you put the tractor on your book won 't you tear it up ?
Sem: lambda $0_{ev}.Q(not(mod|will(conj|if(and(v|put-zero(pro:per|you,det:art|the($1,n|tractor($1)),$0),prep|on(det:poss|your($2,n|book($2)),$0)),and(v|tear(pro:per|you,pro:per|it,$0),adv|up($0))),$0),$0))
example_end

Sent: no you won 't tear the book up ?
Sem: lambda $0_{ev}.Q(and(not(mod|will(and(v|tear(pro:per|you,det:art|the($1,n|book($1)),$0),adv|up($0)),$0),$0),co|no($0)))
example_end

Sent: is that a green car .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,and(n|car(pro:rel|that,$0),n|green(pro:rel|that,$0)))
example_end

Sent: that 's a block .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|block(pro:dem|that,$0))
example_end

Sent: what color is the block ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|block($2)),n|color(det:art|the($2,n|block($2)),$0))
example_end

Sent: what color is the hammer ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,n|hammer($2)),n|color(det:art|the($2,n|hammer($2)),$0))
example_end

Sent: Bambi 's green .
Sem: lambda $0_{ev}.n|green(n:prop|bambi,$0)
example_end

Sent: what 's Bambi doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(part|do-presp(n:prop|bambi,$1,$0),$0)
example_end

Sent: poor Bambi .
Sem: att(n:prop|bambi,lambda $0_{e}.adj|poor($0))
example_end

Sent: did you hurt your head when you feel ?
Sem: lambda $0_{ev}.Q(conj|when(v|feel(pro:per|you,$0),v|do-past(v|hurt-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),$0)))
example_end

Sent: did he hurt his head ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:sub|he,det:poss|his($1,n|head($1)),$0),$0))
example_end

Sent: is it there .
Sem: lambda $0_{ev}.and(aux|be-3s(pro:per|it,$0),adv|there($0))
example_end

Sent: you get it .
Sem: lambda $0_{ev}.v|get(pro:per|you,pro:per|it,$0)
example_end

Sent: did you throw the ball ?
Sem: lambda $0_{ev}.Q(v|do-past(v|throw(pro:per|you,det:art|the($1,n|ball($1)),$0),$0))
example_end

Sent: the light .
Sem: det:art|the($0,n|light($0))
example_end

Sent: are you hitting the ball .
Sem: lambda $0_{ev}.cop|be-pres(part|hit-presp(pro:per|you,det:art|the($1,n|ball($1)),$0),$0)
example_end

Sent: where did the glove go .
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:art|the($1,n|glove($1)),$0),$2($0)),$0)
example_end

Sent: how can you use the glove and the racket at the same time ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(and(v|use(pro:per|you,det:art|the($1,n|glove($1)),$0),$2($0)),prep|at(det:art|the($3,and(adj|same($3),n|time($3))),$0)),$0)
example_end

Sent: is that a bat .
Sem: lambda $0_{ev}.det:art|a(pro:rel|that,n|bat(pro:rel|that,$0))
example_end

Sent: oh you lost your shoe ?
Sem: lambda $0_{ev}.Q(and(v|lose-past(pro:per|you,det:poss|your($1,n|shoe($1)),$0),co|oh($0)))
example_end

Sent: what did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|hit-zero(pro:per|you,$1,$0),$0)
example_end

Sent: you knocked Bambi off ?
Sem: lambda $0_{ev}.Q(and(v|knock-past(pro:per|you,n:prop|bambi,$0),adv|off($0)))
example_end

Sent: call Daddy .
Sem: lambda $0_{ev}.n|call(you,n:prop|daddy,$0)
example_end

Sent: Cromer 's at your home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|cromer,$0),prep|at(det:poss|your($1,n|home($1)),$0))
example_end

Sent: Joshua 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|joshua,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: Kenny 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|kenny,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: yes man driving tractor over there .
Sem: lambda $0_{ev}.and(and(part|drive-presp(lambda $1_{e}.n|man($1),lambda $2_{e}.n|tractor($2),$0),prep|over(adv|there($0))),co|yes($0))
example_end

Sent: oh yes .
Sem: lambda $0_{ev}.and(co|yes($0),co|oh($0))
example_end

Sent: Ricky 's at his home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|ricky,$0),prep|at(det:poss|his($1,n|home($1)),$0))
example_end

Sent: Susy is at her home .
Sem: lambda $0_{ev}.prep|at(det:poss|her($1,n|home($1)),n:prop|susy,$0)
example_end

Sent: what 's in his mouth ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|his($2,n|mouth($2)),$0))
example_end

Sent: yes that 's an eye .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|eye(pro:dem|that,$0)),co|yes($0))
example_end

Sent: how many eyes ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|eye-pl($0))
example_end

Sent: two ears .
Sem: lambda $0_{e}.det:num|two(n|ear-pl($0))
example_end

Sent: two eyes .
Sem: lambda $0_{e}.det:num|two(n|eye-pl($0))
example_end

Sent: yes that is a bell .
Sem: lambda $0_{ev}.and(det:art|a(pro:rel|that,n|bell(pro:rel|that,$0)),co|yes($0))
example_end

Sent: Ursula 's at your home .
Sem: lambda $0_{ev}.and(cop|~be(n:prop|ursula,$0),prep|at(det:poss|your($1,n|home($1)),$0))
example_end

Sent: tape recorder 's at your home .
Sem: lambda $0_{ev}.and(poss|~s(lambda $1_{e}.and_comp(n|tape($1),n|record($1)),$0),prep|at(det:poss|your($2,n|home($2)),$0))
example_end

Sent: don 't you think you should pick it up and put it in the basket ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|should(and(coord|and(and(v|put-zero(pro:per|you,pro:per|it,$1),prep|in(det:art|the($2,n|basket($2)),$1)),v|pick(pro:per|you,pro:per|it,$1)),adv|up($1)),$1),$0),$0),$0))
example_end

Sent: make Cromer do it !
Sem: lambda $0_{ev}.v|make(you,lambda $1_{ev}.v|do(n:prop|cromer,pro:per|it,$1),$0)
example_end

Sent: you pick doc Dan up yourself .
Sem: lambda $0_{ev}.and(and(v|pick(pro:per|you,n:prop|dan_doctor,$0),adv|up($0)),pro:refl|yourself($0))
example_end

Sent: do you like this book .
Sem: lambda $0_{ev}.mod|do(v|like(pro:per|you,pro:dem|this($1,n|book($1)),$0),$0)
example_end

Sent: why don 't you show him the tattooed man ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|show(pro:per|you,det:art|the($1,and(part|tattoo-pastp($1),n|man($1))),pro:obj|him,$0),$2($0)),$0),$0)
example_end

Sent: is this the tattooed man .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this,and(n|man(pro:dem|this,$0),part|tattoo-pastp(pro:dem|this,$0)))
example_end

Sent: do you like the tattooed man .
Sem: lambda $0_{ev}.mod|do(conj|like(pro:per|you,det:art|the($1,and(part|tattoo-pastp($1),n|man($1))),$0),$0)
example_end

Sent: is that like your doggie .
Sem: lambda $0_{ev}.prep|like(det:poss|your($1,n|dog-dim($1)),pro:dem|that,$0)
example_end

Sent: part of an apple ?
Sem: lambda $0_{e}.Q(att(n|part($0),prep|of(det:art|a($1,n|apple($1)))))
example_end

Sent: I think maybe it came from your basket .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(and(v|come-past(pro:per|it,$1),adv|maybe($1)),prep|from(det:poss|your($2,n|basket($2)),$1)),$0)
example_end

Sent: go where it belongs ?
Sem: lambda $0_{ev}.Q(v|go(you,lambda $1_{ev}.and(v|belong-3s(pro:per|it,$1),adv:int|where($1)),$0))
example_end

Sent: I don 't think you can put it back .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|put-zero(pro:per|you,pro:per|it,$1),adv|back($1)),$1),$0),$0),$0)
example_end

Sent: no that 's not part of an apple .
Sem: lambda $0_{ev}.and(not(att(n|part(pro:dem|that,$0),prep|of(det:art|a($1,n|apple($1)))),$0),co|no($0))
example_end

Sent: it 's not part of the apple .
Sem: lambda $0_{ev}.not(att(n|part(pro:per|it,$0),prep|of(det:art|the($1,n|apple($1)))),$0)
example_end

Sent: careful Adam with that pencil .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: what happened to Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|adam,$0))
example_end

Sent: did somebody spank Adam ?
Sem: lambda $0_{ev}.Q(v|do-past(v|spank(pro:indef|somebody,n:prop|adam,$0),$0))
example_end

Sent: change your diaper ?
Sem: lambda $0_{ev}.Q(v|change(you,det:poss|your($1,n|diaper($1)),$0))
example_end

Sent: that 's your back .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|back(pro:dem|that,$0))
example_end

Sent: you don 't have two tummies .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,lambda $1_{e}.det:num|two(n|tummy-pl($1)),$0),$0),$0)
example_end

Sent: your tummy 's in front .
Sem: lambda $0_{ev}.and(poss|~s(det:poss|your($1,n|tummy($1)),$0),n|front($0))
example_end

Sent: whose shoes did you hit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|hit-zero(pro:per|you,$1($2,n|shoe-pl($2)),$0),$0)
example_end

Sent: shall I help you ?
Sem: lambda $0_{ev}.Q(mod|shall(v|help(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: Jack and Jill .
Sem: coord|and(n:prop|jack,n:prop|jill)
example_end

Sent: you want to take it over to Ursula ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,pro:per|it,$1),adv|over(prep|to(n:prop|ursula,$1))),$0))
example_end

Sent: oh thank_you .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|oh($0))
example_end

Sent: what did you say Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|say(pro:per|you,$1,$0),$0)
example_end

Sent: that 's tape .
Sem: lambda $0_{ev}.n|tape(pro:dem|that,$0)
example_end

Sent: no that 's tape .
Sem: lambda $0_{ev}.and(n|tape(pro:dem|that,$0),co|no($0))
example_end

Sent: that 's a screw .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|screw(pro:dem|that,$0))
example_end

Sent: Ursula 's all set ?
Sem: lambda $0_{ev}.Q(aux|~be(and(n|set(n:prop|ursula,$0),adv|all($0)),$0))
example_end

Sent: we leave this down here .
Sem: lambda $0_{ev}.and(v|leave(pro:sub|we,pro:dem|this,$0),adv|down(adv|here($0)))
example_end

Sent: so it will be out_of the way .
Sem: lambda $0_{ev}.mod|will(prep|out_of(det:art|the($1,n|way($1)),pro:per|it,$0),$0)
example_end

Sent: that 's not a screw .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|screw(pro:dem|that,$0)),$0)
example_end

Sent: well that 's a screw .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|screw(pro:dem|that,$0)),co|well($0))
example_end

Sent: get back ?
Sem: lambda $0_{ev}.Q(and(v|get(you,$0),adv|back($0)))
example_end

Sent: if it 's hot won 't it burn you ?
Sem: lambda $0_{ev}.Q(not(mod|will(conj|if(adj|hot(pro:per|it,$0),v|burn(pro:per|it,pro:per|you,$0)),$0),$0))
example_end

Sent: find a penny ?
Sem: lambda $0_{ev}.Q(v|find(you,det:art|a($1,n|penny($1)),$0))
example_end

Sent: where did you put it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: put it in your pocket ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)))
example_end

Sent: do you want a pencil ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: what are you going to write ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|write_to($2,$1),$0),$0)
example_end

Sent: you 're going to write Cromer ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|write(pro:per|you,$1),$0),$0),n:prop|cromer))
example_end

Sent: don 't knock it over .
Sem: lambda $0_{ev}.not(mod|do(and(v|knock(you,pro:per|it,$0),adv|over($0)),$0),$0)
example_end

Sent: good morning .
Sem: lambda $0_{e}.and(adj|good($0),n|morning($0))
example_end

Sent: hurt knee .
Sem: lambda $0_{ev}.v|hurt-zero(you,lambda $1_{e}.n|knee($1),$0)
example_end

Sent: you didn 't hurt yourself with the screwdriver .
Sem: lambda $0_{ev}.not(mod|do(and(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),prep|with(det:art|the($1,n|screw+driver($1)),$0)),$0),$0)
example_end

Sent: you can fix the screws in your firetruck .
Sem: lambda $0_{ev}.mod|can(v|fix(pro:per|you,det:art|the($1,att(n|screw-pl($1),prep|in(det:poss|your($2,n|fire+truck($2))))),$0),$0)
example_end

Sent: put this one here .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:dem|this($1,pro:indef|one($1)),$0),adv|here($0))
example_end

Sent: what kind of truck is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|truck($2))))
example_end

Sent: truck broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(lambda $1_{e}.n|truck($1),$0))
example_end

Sent: you put the truck where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,det:art|the($1,n|truck($1)),$0),$2($0))
example_end

Sent: you 're a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|bulldoze-dv(pro:per|you,$0),adj|busy(pro:per|you,$0))))
example_end

Sent: oh it 's a truck ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|it,n|truck(pro:per|it,$0)),co|oh($0)))
example_end

Sent: red and yellow .
Sem: lambda $0_{e}.coord|and(adj|red($0),n|yellow($0))
example_end

Sent: which one is yellow ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|yellow($1($2,pro:indef|one($2)),$0)
example_end

Sent: Ursula 's right there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n:prop|ursula,$0),adv|right(adv|there($0))))
example_end

Sent: can you put it together again ?
Sem: lambda $0_{ev}.Q(mod|can(and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|together($0)),adv|again($0)),$0))
example_end

Sent: you put it together .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|together($0))
example_end

Sent: you turned it around properly and then you put them together .
Sem: lambda $0_{ev}.coord|and(and(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv:tem|then($0)),adv|together($0)),and(and(v|turn-past(pro:per|you,pro:per|it,$0),adv|around($0)),adv|proper-dadj($0)))
example_end

Sent: see the other one and put them together ?
Sem: lambda $0_{ev}.Q(coord|and(and(v|put-zero(you,pro:obj|them,$0),adv|together($0)),v|see(you,det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0)))
example_end

Sent: is it like this one ?
Sem: lambda $0_{ev}.Q(v|like(pro:dem|this($1,pro:indef|one($1)),pro:per|it,$0))
example_end

Sent: which one looks like that one ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|look-3s($1($2,pro:indef|one($2)),pro:dem|that($3,pro:indef|one($3)),$0)
example_end

Sent: what kind of horn is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|horn($2))))
example_end

Sent: what 's the matter with you ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1,att(n|matter($1,$0),prep|with(pro:per|you)))
example_end

Sent: where did Adam go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|adam,$0),$1($0)),$0)
example_end

Sent: well what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|well($0))
example_end

Sent: what does the baby have in his mouth ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|have(det:art|the($1,n|baby($1)),$2,$0),prep|in(det:poss|his($3,n|mouth($3)),$0)),$0)
example_end

Sent: whistle baby .
Sem: lambda $0_{e}.and_comp(n|whistle($0),n|baby($0))
example_end

Sent: mouth oh .
Sem: lambda $0_{ev}.and(meta|mouth($0),co|oh($0))
example_end

Sent: that 's Adam 's baby .
Sem: lambda $0_{ev}.n:prop|adam's'(pro:dem|that,n|baby(pro:dem|that,$0))
example_end

Sent: yes that 's water .
Sem: lambda $0_{ev}.and(n|water(pro:dem|that,$0),co|yes($0))
example_end

Sent: those are rocks .
Sem: lambda $0_{ev}.n|rock-pl(pro:dem|those,$0)
example_end

Sent: there may be fish in the water .
Sem: lambda $0_{ev}.mod|may(and(cop|be(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|water($2)),$0)),$0)
example_end

Sent: yes there may be some fish in the water .
Sem: lambda $0_{ev}.and(mod|may(and(cop|be(qn|some($1,n|fish($1)),$0),prep|in(det:art|the($2,n|water($2)),$0)),$0),co|yes($0))
example_end

Sent: that 's no tape recorder .
Sem: lambda $0_{ev}.not(and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)),$0)
example_end

Sent: those are records in a box .
Sem: lambda $0_{ev}.att(n|record-pl(pro:dem|those,$0),prep|in(det:art|a($1,n|box($1))))
example_end

Sent: how do you spell your name Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|spell(pro:per|you,det:poss|your($1,n|name($1)),$0),$2($0)),$0)
example_end

Sent: what does the label on Mr Cromer 's suitcase say ?
Sem: lambda $3_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|the($1,att(n|label($1),prep|on(n:prop|cromer_mr's($2,n|suitcase($2))))),$3,$0),$0)
example_end

Sent: that 's no horse .
Sem: lambda $0_{ev}.not(n|horse(pro:dem|that,$0),$0)
example_end

Sent: what about Cromer 's suitcase ?
Sem: att(pro:int|what,prep|about(n:prop|cromer's($0,n|suitcase($0))))
example_end

Sent: Adam break suitcase Cromer ?
Sem: lambda $0_{ev}.Q(v|break(n:prop|adam,n:prop|cromer's($1,n|suitcase($1)),$0))
example_end

Sent: no Adam shouldn 't break Cromer 's suitcase .
Sem: lambda $0_{ev}.and(not(mod|should(v|break(n:prop|adam,n:prop|cromer's($1,n|suitcase($1)),$0),$0),$0),co|no($0))
example_end

Sent: he 'd do without a suitcase .
Sem: lambda $0_{ev}.mod|~genmod(and(v|do(pro:sub|he,$0),prep|without(det:art|a($1,n|suitcase($1)),$0)),$0)
example_end

Sent: do with a suitcase ?
Sem: lambda $0_{ev}.Q(and(v|do(you,$0),prep|with(det:art|a($1,n|suitcase($1)),$0)))
example_end

Sent: Catherine take the suitcase ?
Sem: lambda $0_{ev}.Q(v|take(n:prop|catherine,det:art|the($1,n|suitcase($1)),$0))
example_end

Sent: raining outside .
Sem: lambda $0_{ev}.and(part|rain-presp(you,$0),adv|outside($0))
example_end

Sent: is it raining ?
Sem: lambda $0_{ev}.Q(aux|be-3s(part|rain-presp(you,$0),$0))
example_end

Sent: well is the sun shining ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(part|shine-presp(det:art|the($1,n|sun($1)),$0),$0),co|well($0)))
example_end

Sent: the sun 's not shining ?
Sem: lambda $0_{ev}.Q(not(aux|~be(part|shine-presp(det:art|the($1,n|sun($1)),$0),$0),$0))
example_end

Sent: is it cloudy ?
Sem: lambda $0_{ev}.Q(adj|cloud-dn($0))
example_end

Sent: Adam 's pieces ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|piece-pl($1),$0))
example_end

Sent: take a piece of candy .
Sem: lambda $0_{ev}.v|take(you,det:art|a($1,att(n|piece($1),prep|of(lambda $2_{e}.n|candy($2)))),$0)
example_end

Sent: write with pencil ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),prep|with(lambda $1_{e}.n|pencil($1),$0)))
example_end

Sent: put the radio in ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:art|the($1,n|radio($1)),$0),adv|in($0)))
example_end

Sent: you know Humpty_Dumpty .
Sem: lambda $0_{ev}.v|know(pro:per|you,n:prop|humpty_dumpty,$0)
example_end

Sent: do you think that radio will go in that box ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|will(v|go(pro:dem|that($2,n|radio($2)),pro:dem|that($3,n|box($3)),$1),$1),$0),$0))
example_end

Sent: it 's a windmill .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|windmill(pro:per|it,$0))
example_end

Sent: whose bike ?
Sem: lambda $0_{e}.$0($1,n|bike($1))
example_end

Sent: do you want to play Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|play(pro:per|you,$1),$0),$0))
example_end

Sent: what is that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:rel|that,$0)
example_end

Sent: you 're going to put all of your toys away .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,qn|all($3,n|toy-pl($3),$2)),$1),adv|away($1)),$0),$0)
example_end

Sent: you going to put your toys in there ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,n|toy-pl($2)),$1),prep|in(adv|there($1))),$0))
example_end

Sent: play toy ?
Sem: lambda $0_{e}.Q(and_comp(n|play($0),n|toy($0)))
example_end

Sent: what about your play toy ?
Sem: att(pro:int|what,adv|about(det:poss|your($0,and_comp(n|play($0),n|toy($0)))))
example_end

Sent: what happened to the play toy ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,and_comp(n|play($2),n|toy($2))),$0))
example_end

Sent: you dropped the play toy ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|the($1,and_comp(n|play($1),n|toy($1))),$0))
example_end

Sent: how many play toys do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and_comp(n|play($1),and($2(qn|many($1)),n|toy-pl($1))),$0),$0)
example_end

Sent: Adam fell down .
Sem: lambda $0_{ev}.and(v|fall-past(n:prop|adam,$0),adv|down($0))
example_end

Sent: oh you 're crawling on the radio ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|crawl-presp(pro:per|you,$0),prep|on(det:art|the($1,n|radio($1)),$0)),$0),co|oh($0)))
example_end

Sent: but I though you were crawling .
Sem: lambda $0_{ev}.adv|though(pro:sub|i,lambda $1_{ev}.aux|be-past(part|crawl-presp(pro:per|you,$1),$1),$0)
example_end

Sent: on your knees .
Sem: prep|on(det:poss|your($0,n|knee-pl($0)))
example_end

Sent: put shoe on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|shoe($1),$0),adv|on($0)))
example_end

Sent: where did your foot go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:poss|your($1,n|foot($1)),$0),$2($0)),$0)
example_end

Sent: is it in the shoe ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),prep|in(det:art|the($1,n|shoe($1)),$0)))
example_end

Sent: do you have play toys in the kitchen ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,lambda $1_{e}.and_comp(n|play($1),n|toy-pl($1)),$0),prep|in(det:art|the($2,n|kitchen($2)),$0)),$0))
example_end

Sent: what toy do you kick ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|kick(pro:per|you,$1($2,n|toy($2)),$0),$0)
example_end

Sent: kick your shoe ?
Sem: lambda $0_{ev}.Q(v|kick(you,det:poss|your($1,n|shoe($1)),$0))
example_end

Sent: you fell down .
Sem: lambda $0_{ev}.and(v|fall-past(pro:per|you,$0),adv|down($0))
example_end

Sent: doggie and the car ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|dog-dim($1),det:art|the($2,n|car($2)),$0))
example_end

Sent: where did you go yesterday ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|go(pro:per|you,$0),$1($0)),adv:tem|yesterday($0)),$0)
example_end

Sent: you saw some pretty flowers ?
Sem: lambda $0_{ev}.Q(v|saw(pro:per|you,qn|some($1,and(adj|pretty($1),n|flower-pl($1))),$0))
example_end

Sent: are you a boat or an airplane ?
Sem: lambda $0_{ev}.Q(coord|or(det:art|a(pro:per|you,n|boat(pro:per|you,$0)),det:art|a(pro:per|you,n|airplane(pro:per|you,$0))))
example_end

Sent: are you a Texaco star ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and_comp(n:prop|texaco(pro:per|you,$0),n|star(pro:per|you,$0))))
example_end

Sent: oh you 're a man with a Texaco star .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|you,att(n|man(pro:per|you,$0),prep|with(det:art|a($1,and_comp(n:prop|texaco($1),n|star($1)))))),co|oh($0))
example_end

Sent: don 't put your mouth on the paper .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,det:poss|your($1,n|mouth($1)),$0),prep|on(det:art|the($2,n|paper($2)),$0)),$0),$0)
example_end

Sent: what did you do here ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),adv|here($0)),$0)
example_end

Sent: what did you do to the paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|to(det:art|the($2,n|paper($2)),$0)),$0)
example_end

Sent: game Adam ?
Sem: lambda $0_{e}.Q(n|game($0))
example_end

Sent: play tail ?
Sem: lambda $0_{ev}.Q(n|play(you,lambda $1_{e}.n|tail($1),$0))
example_end

Sent: you put your gloves on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,det:poss|your($1,n|glove-pl($1)),$0),prep|on($0)))
example_end

Sent: can you put your gloves on ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,det:poss|your($1,n|glove-pl($1)),$0),prep|on($0)),$0))
example_end

Sent: what about the book and the door ?
Sem: coord|and(att(pro:int|what,adv|about(det:art|the($0,n|book($0)))),det:art|the($1,n|door($1)))
example_end

Sent: who puts your gloves on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-3s($1,det:poss|your($2,n|glove-pl($2)),$0),prep|on($0))
example_end

Sent: why are you going to put the book outside ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:art|the($2,n|book($2)),$1),adv|outside($1)),$0),$3($0)),$0)
example_end

Sent: another book yes .
Sem: lambda $0_{ev}.and(qn|another($1,n|book($1),$0),co|yes($0))
example_end

Sent: a book isn 't a ball .
Sem: lambda $0_{ev}.not(det:art|a(det:art|a($1,n|book($1)),n|ball(det:art|a($1,n|book($1)),$0)),$0)
example_end

Sent: don 't throw the book .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,det:art|the($1,n|book($1)),$0),$0),$0)
example_end

Sent: you ask somebody to play with you .
Sem: lambda $0_{ev}.v|ask(pro:per|you,lambda $1_{ev}.v|play(pro:indef|somebody,pro:per|you,$1),$0)
example_end

Sent: Chatter what 's the matter with you ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1,att(n|matter($1,$0),prep|with(pro:per|you)))
example_end

Sent: can 't you think of another game ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|think(pro:per|you,qn|another($1,n|game($1)),$0),$0),$0))
example_end

Sent: what are you doing with that chair ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|with(pro:dem|that($2,n|chair($2)),$0)),$0)
example_end

Sent: oh Adam sit in the chair .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),prep|in(det:art|the($1,n|chair($1)),$0)),co|oh($0))
example_end

Sent: oh Adam sit in the chair and watch the game ?
Sem: lambda $0_{ev}.Q(and(coord|and(v|watch(you,det:art|the($1,n|game($1)),$0),and(v|sit(you,$0),prep|in(det:art|the($2,n|chair($2)),$0))),co|oh($0)))
example_end

Sent: what kind of game are you going to watch ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|watch($2($3,att(n|kind($3),prep|of(lambda $4_{e}.n|game($4)))),$1),$0),$0)
example_end

Sent: watch the game ?
Sem: lambda $0_{ev}.Q(v|watch(you,det:art|the($1,n|game($1)),$0))
example_end

Sent: they usually come on the weekend .
Sem: lambda $0_{ev}.and(and(v|come(pro:sub|they,$0),adv|usual-dadj($0)),prep|on(det:art|the($1,n|week+end($1)),$0))
example_end

Sent: come at the end of the week .
Sem: lambda $0_{ev}.and(v|come(you,$0),prep|at(det:art|the($1,att(n|end($1),prep|of(det:art|the($2,n|week($2))))),$0))
example_end

Sent: Sunday yes is at the end of the week .
Sem: lambda $0_{ev}.and(and(cop|be-3s(n:prop|sunday,$0),prep|at(det:art|the($1,att(n|end($1),prep|of(det:art|the($2,n|week($2))))),$0)),co|yes($0))
example_end

Sent: the power shovel pick the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick(det:art|the($1,and_comp(n|power($1),n|shovel($1))),det:art|the($2,n|dirt($2)),$0),adv|up($0)))
example_end

Sent: did you see a power shovel yesterday ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|see(pro:per|you,det:art|a($1,and_comp(n|power($1),n|shovel($1))),$0),adv:tem|yesterday($0)),$0))
example_end

Sent: you say a busy bulldozer yesterday .
Sem: lambda $0_{ev}.and(v|say(pro:per|you,det:art|a($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),adv:tem|yesterday($0))
example_end

Sent: what was the busy bulldozer doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-past(part|do-presp(det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$2,$0),$0)
example_end

Sent: was it pushing the dirt around too ?
Sem: lambda $0_{ev}.Q(cop|be-past(and(and(part|push-presp(pro:per|it,det:art|the($1,n|dirt($1)),$0),adv|around($0)),adv|too($0)),$0))
example_end

Sent: moon picks the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick-3s(lambda $1_{e}.n|moon($1),det:art|the($2,n|dirt($2)),$0),adv|up($0)))
example_end

Sent: when do you see the moon ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|see(pro:per|you,det:art|the($1,n|moon($1)),$0),$2($0)),$0)
example_end

Sent: what are you going to say to the busy bulldozer ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|say($2,det:art|the($3,and(adj|busy($3),n|bulldoze-dv($3))),$1),$0),$0)
example_end

Sent: you 're a little rascal ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|rascal(pro:per|you,$0),adj|little(pro:per|you,$0))))
example_end

Sent: yes you are .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|you($0,$1)
example_end

Sent: just checking ?
Sem: lambda $0_{ev}.Q(and(part|check-presp(you,$0),adv|just($0)))
example_end

Sent: no you don 't need your temperature taken .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:per|you,lambda $1_{ev}.part|take-pastp(det:poss|your($2,n|temperature($2)),$1),$0),$0),$0),co|no($0))
example_end

Sent: Adam 's shirt !
Sem: n:prop|adam's($0,n|shirt($0))
example_end

Sent: don 't wear a shirt Mommy ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|wear(you,det:art|a($1,n|shirt($1)),$0),$0),$0))
example_end

Sent: Mommy doesn 't wear a shirt .
Sem: lambda $0_{ev}.not(mod|do(v|wear(n:prop|mommy,det:art|a($1,n|shirt($1)),$0),$0),$0)
example_end

Sent: yes Adam does wear shoes .
Sem: lambda $0_{ev}.and(mod|do-3s(v|wear(n:prop|adam,lambda $1_{e}.n|shoe-pl($1),$0),$0),co|yes($0))
example_end

Sent: that 's right don 't bite .
Sem: lambda $0_{ev}.and(adv|right(pro:dem|that,$0),not(mod|do(v|bite(you,$0),$0),$0))
example_end

Sent: don 't ride on the briefcase .
Sem: lambda $0_{ev}.not(mod|do(v|ride(you,det:art|the($1,n|briefcase($1)),$0),$0),$0)
example_end

Sent: that 's right you sit in a chair .
Sem: lambda $0_{ev}.and(adj|right(pro:dem|that,$0),and(v|sit(pro:per|you,$0),prep|in(det:art|a($1,n|chair($1)),$0)))
example_end

Sent: do you want to sit next_to me ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|sit(pro:per|you,$1),prep|next_to(pro:obj|me,$1)),$0),$0))
example_end

Sent: that 's Ursula 's pocket book .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:dem|that,and_comp(n|pocket(pro:dem|that,$0),n|book(pro:dem|that,$0)))
example_end

Sent: is it heavy ?
Sem: lambda $0_{ev}.Q(adj|heavy(pro:per|it,$0))
example_end

Sent: isn 't that a pretty box Adam ?
Sem: lambda $0_{ev}.Q(not(det:art|a(det:dem|that,and(n|box(det:dem|that,$0),adj|pretty(det:dem|that,$0))),$0))
example_end

Sent: can you bring me my pocket book ?
Sem: lambda $0_{ev}.Q(mod|can(v|bring(pro:per|you,det:poss|my($1,and_comp(n|pocket($1),n|book($1))),pro:obj|me,$0),$0))
example_end

Sent: no it 's not all finished .
Sem: lambda $0_{ev}.and(not(cop|~be(and(part|finish-pastp(pro:per|it,$0),adv|all($0)),$0),$0),co|no($0))
example_end

Sent: won 't you please go over and take Ursula 's pocketbook to her ?
Sem: lambda $0_{ev}.Q(not(mod|will(and(and(and(v|take(pro:per|you,n:prop|ursula's($1,n|pocket+book($1)),$0),co|please($0)),adv|over($0)),prep|to(pro:obj|her,$0)),$0),$0))
example_end

Sent: no you hit your head here on the bench .
Sem: lambda $0_{ev}.and(and(v|hit-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),adv|here(prep|on(det:art|the($2,n|bench($2)),$0))),co|no($0))
example_end

Sent: Adam what are you doing back there ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),adv|back(adv|there($0))),$0)
example_end

Sent: looking at the water ?
Sem: lambda $0_{ev}.Q(and(part|look-presp(you,$0),prep|at(det:art|the($1,n|water($1)),$0)))
example_end

Sent: no there isn 't any water in there .
Sem: lambda $0_{ev}.and(and(cop|be(not(qn|any($1,n|water($1))),$0),prep|in(adv|there($0))),co|no($0))
example_end

Sent: that wasn 't a drum .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|drum(pro:dem|that,$0)),$0)
example_end

Sent: picking tomatoes up ?
Sem: lambda $0_{ev}.Q(and(part|pick-presp(you,lambda $1_{e}.n|tomato-pl($1),$0),adv|up($0)))
example_end

Sent: why would you pick a tomato up like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(and(v|pick(pro:per|you,det:art|a($1,n|tomato($1)),$0),$2($0)),adv|up($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: what 's on your tongue ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),prep|on(det:poss|your($2,n|tongue($2)),$0))
example_end

Sent: you 've got a string of Mommy 's hair in your mouth .
Sem: lambda $0_{ev}.aux|~have(and(part|get-pastp(pro:per|you,det:art|a($1,att(n|string($1),prep|of(n:prop|mommy's($2,n|hair($2))))),$0),prep|in(det:poss|your($3,n|mouth($3)),$0)),$0)
example_end

Sent: use the eraser and then the writing is all_gone .
Sem: lambda $0_{ev}.coord|and(adv:tem|then(adj|all_gone(det:art|the($1,n:gerund|write-presp($1)),$0)),v|use(you,det:art|the($2,n|erase-dv($2)),$0))
example_end

Sent: no you don 't write on buttons .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|button-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: tomato soup ?
Sem: lambda $0_{e}.Q(and_comp(n|tomato($0),n|soup($0)))
example_end

Sent: how can I drink so much coffee ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(n|drink(pro:sub|i,adv|so(qn|much($1,n|coffee($1))),$0),$2($0)),$0)
example_end

Sent: oh Adam will drink some coffee too .
Sem: lambda $0_{ev}.and(mod|will(and(v|drink(n:prop|adam,qn|some($1,n|coffee($1)),$0),post|too($0)),$0),co|oh($0))
example_end

Sent: did you have a pumpkin at Halloween ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|have(pro:per|you,det:art|a($1,n|pumpkin($1)),$0),prep|at(n:prop|halloween,$0)),$0))
example_end

Sent: that 's a mouth .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|mouth(pro:dem|that,$0))
example_end

Sent: it looks like a tomato ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|tomato($1)),$0)))
example_end

Sent: that 's three .
Sem: lambda $0_{e}.det:num|three($0)
example_end

Sent: get your ball ?
Sem: lambda $0_{ev}.Q(v|get(you,det:poss|your($1,n|ball($1)),$0))
example_end

Sent: do you know ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,$0),$0))
example_end

Sent: when did you see the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|ball($1)),$0),$2($0)),$0)
example_end

Sent: do you like grapefruit ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.n|grape+fruit($1),$0),$0))
example_end

Sent: if you break it then you won 't have a pumpkin .
Sem: lambda $0_{ev}.not(mod|will(conj|if(v|break(pro:per|you,pro:per|it,$0),and(v|have(pro:per|you,det:art|a($1,n|pumpkin($1)),$0),adv:tem|then($0))),$0),$0)
example_end

Sent: poor pumpkin .
Sem: lambda $0_{e}.and(adj|poor($0),n|pumpkin($0))
example_end

Sent: oh is that Pepper ?
Sem: lambda $0_{ev}.Q(and(n:prop|pepper(pro:rel|that,$0),co|oh($0)))
example_end

Sent: he went out to the kitchen soon .
Sem: lambda $0_{ev}.and(and(and(v|go-past(pro:sub|he,$0),adv|out($0)),prep|to(det:art|the($1,n|kitchen($1)),$0)),adv|soon($0))
example_end

Sent: you do it .
Sem: lambda $0_{ev}.v|do(pro:per|you,pro:per|it,$0)
example_end

Sent: my that would be a big hat .
Sem: lambda $0_{ev}.and(mod|will-cond(det:art|a(pro:dem|that,and(n|hat(pro:dem|that,$0),adj|big(pro:dem|that,$0))),$0),det:poss|my($0))
example_end

Sent: where would you wear a hat like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|wear(pro:per|you,det:art|a($1,n|hat($1)),$0),$2($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: you put the pencil in your mouth ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,det:art|the($1,n|pencil($1)),$0),prep|in(det:poss|your($2,n|mouth($2)),$0)))
example_end

Sent: that 's not Daddy 's suitcase .
Sem: lambda $0_{ev}.not(n:prop|daddy's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),$0)
example_end

Sent: you knocked it over .
Sem: lambda $0_{ev}.and(v|knock-past(pro:per|you,pro:per|it,$0),adv|over($0))
example_end

Sent: buy milk ?
Sem: lambda $0_{ev}.Q(n|buy(you,lambda $1_{e}.n|milk($1),$0))
example_end

Sent: is milk on there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(lambda $1_{e}.v|milk($1),$0),prep|on(adv|there($0))))
example_end

Sent: what kind of bread ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|bread($2))))
example_end

Sent: fresh milk ?
Sem: lambda $0_{e}.Q(and(adj|fresh($0),n|milk($0)))
example_end

Sent: more candy .
Sem: qn|more($0,n|candy($0))
example_end

Sent: is that Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:rel|that,$0))
example_end

Sent: it 's not candy .
Sem: lambda $0_{ev}.not(n|candy(pro:per|it,$0),$0)
example_end

Sent: Adam 's suitcase ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|suitcase($1),$0))
example_end

Sent: what will happen if you drop it ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(v|drop(pro:per|you,pro:per|it,$0),mod|will(v|happen(you,$1,$0),$0))
example_end

Sent: is that a letter for somebody ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,att(n|letter(pro:rel|that,$0),prep|for(pro:indef|somebody))))
example_end

Sent: whose letter is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|letter(pro:per|it,$0))
example_end

Sent: Adam 's letter .
Sem: n:prop|adam's($0,n|letter($0))
example_end

Sent: the paint came off in your mouth .
Sem: lambda $0_{ev}.and(v|come-past_off(det:art|the($1,n|paint($1)),$0),prep|in(det:poss|your($2,n|mouth($2)),$0))
example_end

Sent: oh ice .
Sem: lambda $0_{ev}.and(n|ice+cream($0),co|oh($0))
example_end

Sent: put it in your mouth .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|mouth($1)),$0))
example_end

Sent: where are you going now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|go-presp(pro:per|you,$0),$1($0)),adv|now($0)),$0)
example_end

Sent: did you take the suitcase out ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,det:art|the($1,n|suitcase($1)),$0),adv|out($0)),$0))
example_end

Sent: they 'll cut you and hurt .
Sem: lambda $0_{ev}.mod|~will(coord|and(v|cut-zero(pro:sub|they,pro:per|you,$0),v|hurt-zero(pro:sub|they,pro:per|you,$0)),$0)
example_end

Sent: they 're too large .
Sem: lambda $0_{ev}.adv|too(adj|large(pro:sub|they,$0))
example_end

Sent: no it 's not broken .
Sem: lambda $0_{ev}.and(not(cop|~be(part|break-pastp(pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: no that side isn 't broken .
Sem: lambda $0_{ev}.and(not(cop|be(part|break-pastp(pro:dem|that($1,n|side($1)),$0),$0),$0),qn|no($0))
example_end

Sent: do you have a whistle over there ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,v|whistle($1)),$0),adv|over(adv|there($0))),$0))
example_end

Sent: the microphone .
Sem: det:art|the($0,n|microphone($0))
example_end

Sent: big boys don 't bother things like that .
Sem: lambda $0_{ev}.not(mod|do(v|bother(lambda $1_{e}.and(adj|big($1),n|boy-pl($1)),lambda $2_{e}.att(n|thing-pl($2),prep|like(pro:dem|that)),$0),$0),$0)
example_end

Sent: the record 's in the folder .
Sem: lambda $0_{ev}.and(poss|~s(det:art|the($1,n|record($1)),$0),prep|in(det:art|the($2,n|folder($2)),$0))
example_end

Sent: the record is in the folder .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|record($1)),$0),prep|in(det:art|the($2,n|folder($2)),$0))
example_end

Sent: is that yours ?
Sem: lambda $0_{ev}.Q(pro:poss|yours(pro:dem|that,$0))
example_end

Sent: whose is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: what 's the name of that song ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,att(n|name($2),prep|of(pro:dem|that($3,n|song($3))))),$0)
example_end

Sent: don 't scratch the record .
Sem: lambda $0_{ev}.not(mod|do(v|scratch(you,det:art|the($1,n|record($1)),$0),$0),$0)
example_end

Sent: put the toys in the basket .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|toy-pl($1)),$0),prep|in(det:art|the($2,n|basket($2)),$0))
example_end

Sent: where is the record ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|record($1)),$0),$2($0))
example_end

Sent: in your hand ?
Sem: Q(prep|in(det:poss|your($0,n|hand($0))))
example_end

Sent: see the record falling out_of the folder ?
Sem: lambda $0_{ev}.Q(and(v|see(you,det:art|the($1,n|record($1)),$0),and(part|fall-presp(you,$0),prep|out_of(det:art|the($2,n|folder($2)),$0))))
example_end

Sent: no that 's not the top to that .
Sem: lambda $0_{ev}.and(not(det:art|the(pro:dem|that,att(adj|top(pro:dem|that,$0),prep|to(pro:dem|that))),$0),co|no($0))
example_end

Sent: what kind of fish ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|fish($2))))
example_end

Sent: that 's not a bus .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|bus(pro:dem|that,$0)),$0)
example_end

Sent: that 's part of a train .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|a($1,n|train($1))))
example_end

Sent: I still don 't know what fish is in there .
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.and(cop|be-3s($2($3,n|fish($3)),$1),prep|in(adv|there($1))),$0),adv|still($0)),$0),$0)
example_end

Sent: I 'll put it in the drawer .
Sem: lambda $0_{ev}.mod|~will(and(v|put-zero(pro:sub|i,pro:per|it,$0),prep|in(det:art|the($1,n|drawer($1)),$0)),$0)
example_end

Sent: careful with the record .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: did Adam do that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|do(n:prop|adam,pro:dem|that,$0),$0))
example_end

Sent: the man did that ?
Sem: lambda $0_{ev}.Q(v|do-past(det:art|the($1,n|man($1)),pro:dem|that,$0))
example_end

Sent: Adam did that ?
Sem: lambda $0_{ev}.Q(v|do-past(n:prop|adam,pro:dem|that,$0))
example_end

Sent: why did Adam do that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(n:prop|adam,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: Adam take it off ?
Sem: lambda $0_{ev}.Q(and(v|take(n:prop|adam,pro:per|it,$0),adv|off($0)))
example_end

Sent: what makes the windmill turn around ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{ev}.and(n|turn(det:art|the($3,n|windmill($3)),$2),adv|around($2)),$0)
example_end

Sent: what makes a real windmill turn around ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{ev}.and(n|turn(det:art|a($3,and(adj|real($3),n|windmill($3))),$2),adv|around($2)),$0)
example_end

Sent: no you don 't know ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|know(pro:per|you,$0),$0),$0),co|no($0)))
example_end

Sent: I see it .
Sem: lambda $0_{ev}.v|see(pro:sub|i,pro:per|it,$0)
example_end

Sent: I 'm looking right at it .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:sub|i,pro:per|it,$0),adv|right($0)),$0)
example_end

Sent: yes I 'm looking .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:sub|i,$0),$0),co|yes($0))
example_end

Sent: what are you doing now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: oh you 're looking at the windmill .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:per|you,det:art|the($1,n|windmill($1)),$0),$0),co|oh($0))
example_end

Sent: you 're turning it on ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|on($0)),$0))
example_end

Sent: here comes an airplane ?
Sem: lambda $0_{ev}.Q(and(v|come-3s(you,det:art|a($1,n|airplane($1)),$0),adv|here($0)))
example_end

Sent: what does an airplane say ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|a($1,n|airplane($1)),$2,$0),$0)
example_end

Sent: do you want Mommy to take it and put it up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.coord|and(and(v|put-zero(you,pro:per|it,$2),adv|up($2)),v|take(_,pro:per|it,$2))),$0),$0))
example_end

Sent: get it again ?
Sem: lambda $0_{ev}.Q(and(aux|get(you,pro:per|it,$0),adv|again($0)))
example_end

Sent: is that a flag ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|flag(pro:rel|that,$0)))
example_end

Sent: oh you 're getting supper ready ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|get-presp(pro:per|you,lambda $1_{ev}.adj|ready(lambda $2_{e}.n|supper($2),$1),$0),$0),co|oh($0)))
example_end

Sent: do you like tomato soup ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.and_comp(n|tomato($1),n|soup($1)),$0),$0))
example_end

Sent: no you don 't like tomato soup ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(co|like(pro:per|you,lambda $1_{e}.and_comp(n|tomato($1),n|soup($1)),$0),$0),$0),co|no($0)))
example_end

Sent: you 're making two bowls of tomato soup .
Sem: lambda $0_{ev}.aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.att(det:num|two(n|bowl-pl($1)),prep|of(lambda $2_{e}.and_comp(n|tomato($2),n|soup($2)))),$0),$0)
example_end

Sent: other side .
Sem: qn|other($0,n|side($0))
example_end

Sent: well what are you cooking down there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(and(part|cook-presp(pro:per|you,$1,$0),adv|down(adv|there($0))),$0),co|well($0))
example_end

Sent: cooking water ?
Sem: lambda $0_{ev}.Q(part|cook-presp(you,lambda $1_{e}.n|water($1),$0))
example_end

Sent: Adam swimming .
Sem: lambda $0_{ev}.part|swim-presp(n:prop|adam,$0)
example_end

Sent: do you want Mommy to take the whistle and put it up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.coord|and(and(v|put-zero(you,pro:per|it,$2),adv|up($2)),v|take(_,det:art|the($3,n|whistle($3)),$2))),$0),$0))
example_end

Sent: when you throw it it hurts your head .
Sem: lambda $0_{ev}.conj|when(v|throw(pro:per|you,pro:per|it,$0),v|hurt-3s(pro:per|it,det:poss|your($1,n|head($1)),$0))
example_end

Sent: don 't throw it .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,pro:per|it,$0),$0),$0)
example_end

Sent: you 'll hurt Mr Cromer 's head .
Sem: lambda $0_{ev}.mod|~will(part|hurt-pastp(pro:per|you,n:prop|cromer_mr's($1,n|head($1)),$0),$0)
example_end

Sent: you 'll hurt Ursula too .
Sem: lambda $0_{ev}.mod|~will(and(part|hurt-pastp(pro:per|you,n:prop|ursula,$0),post|too($0)),$0)
example_end

Sent: you 'll hurt the suitcase too .
Sem: lambda $0_{ev}.mod|~will(and(v|hurt-zero(pro:per|you,det:art|the($1,n|suitcase($1)),$0),post|too($0)),$0)
example_end

Sent: you hit the floor .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,det:art|the($1,n|floor($1)),$0)
example_end

Sent: do you think you hurt the floor ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|hurt-zero(pro:per|you,det:art|the($2,n|floor($2)),$1),$0),$0))
example_end

Sent: hurt your knee ?
Sem: lambda $0_{ev}.Q(v|hurt-zero(you,det:poss|your($1,n|knee($1)),$0))
example_end

Sent: how did you hurt your knee ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|knee($1)),$0),$2($0)),$0)
example_end

Sent: on the chair ?
Sem: Q(prep|on(det:art|the($0,n|chair($0))))
example_end

Sent: how did you hurt your arm ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|arm($1)),$0),$2($0)),$0)
example_end

Sent: you hurt your arm on the chair .
Sem: lambda $0_{ev}.and(v|hurt-zero(pro:per|you,det:poss|your($1,n|arm($1)),$0),prep|on(det:art|the($2,n|chair($2)),$0))
example_end

Sent: pick the play toys up .
Sem: lambda $0_{ev}.and(v|pick(you,det:art|the($1,and_comp(n|play($1),v|toy-3s($1))),$0),adv|up($0))
example_end

Sent: that 's a good boy .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|boy(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: no that 's not yellow .
Sem: lambda $0_{ev}.and(not(adj|yellow(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: the papers are yellow .
Sem: lambda $0_{ev}.adj|yellow(det:art|the($1,n|paper-pl($1)),$0)
example_end

Sent: what are you checking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|check-presp(pro:per|you,$1,$0),$0)
example_end

Sent: that 's a radiator .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|radiator(pro:dem|that,$0))
example_end

Sent: there is another one in the kitchen .
Sem: lambda $0_{ev}.and(cop|be-3s(qn|another($1,pro:indef|one($1)),$0),prep|in(det:art|the($2,n|kitchen($2)),$0))
example_end

Sent: the other is hot ?
Sem: lambda $0_{ev}.Q(adj|hot(det:art|the($1,qn|other($1)),$0))
example_end

Sent: don 't fall pencil ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|fall(you,$0),$0),$0),lambda $1_{e}.n|pencil($1)))
example_end

Sent: I don 't hurt myself thank_you .
Sem: lambda $0_{ev}.and(not(mod|do(v|hurt-zero(pro:sub|i,pro:refl|myself,$0),$0),$0),n|thank_you($0))
example_end

Sent: time for bed ?
Sem: lambda $0_{e}.Q(att(n|time($0),prep|for(lambda $1_{e}.n|bed($1))))
example_end

Sent: for whom ?
Sem:
example_end

Sent: for Mommy ?
Sem: Q(conj|for(n:prop|mommy))
example_end

Sent: it 's not time for bed for Adam ?
Sem: lambda $0_{ev}.Q(not(att(att(v|time(pro:per|it,$0),prep|for(lambda $1_{e}.n|bed($1))),prep|for(n:prop|adam)),$0))
example_end

Sent: are you saying Bambi ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|say-presp(pro:per|you,n:prop|bambi,$0),$0))
example_end

Sent: oh you 're going to show Ursula .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.n|show(pro:per|you,n:prop|ursula,$1),$0),$0),co|oh($0))
example_end

Sent: what happened to Bambi ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|bambi,$0))
example_end

Sent: Adam you give Bambi a ride .
Sem: lambda $0_{ev}.v|give(pro:per|you,det:art|a($1,n|ride($1)),n:prop|bambi,$0)
example_end

Sent: on your foot .
Sem: prep|on(det:poss|your($0,n|foot($0)))
example_end

Sent: do you think he likes that ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|like-3s(pro:sub|he,pro:dem|that,$1),$0),$0))
example_end

Sent: alright you read book .
Sem: lambda $0_{ev}.and(v|read-zero(pro:per|you,lambda $1_{e}.n|book($1),$0),co|alright($0))
example_end

Sent: ups_a_daisy you dropped your shoe .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,det:poss|your($1,n|shoe($1)),$0),co|ups_a_daisy($0))
example_end

Sent: he ate his dinner on this table last night and he dropped some beans .
Sem: lambda $0_{ev}.coord|and(v|drop-past(pro:sub|he,qn|some($1,n|bean-pl($1)),$0),and(and(v|eat-past(pro:sub|he,det:poss|his($2,n|dinner($2)),$0),prep|on(pro:dem|this($3,n|table($3)),$0)),and(adv|last($0),n|night($0))))
example_end

Sent: Papa bear .
Sem: lambda $0_{e}.and_comp(n:prop|papa($0),n|bear($0))
example_end

Sent: did you see bunny ?
Sem: lambda $0_{ev}.Q(v|do-past(v|see(pro:per|you,lambda $1_{e}.n|bunny+rabbit($1),$0),$0))
example_end

Sent: the deer looks like Bambi .
Sem: lambda $0_{ev}.cop|look-3s(det:art|the($1,n|deer($1)),n:prop|bambi,$0)
example_end

Sent: bunny running ?
Sem: lambda $0_{ev}.Q(part|run-presp(lambda $1_{e}.n|bunny+rabbit($1),$0))
example_end

Sent: if he 's not careful yes they will stick him .
Sem: lambda $0_{ev}.and(mod|will(conj|if(not(co|careful(pro:sub|he,$0),$0),v|stick(pro:sub|they,pro:obj|him,$0)),$0),co|yes($0))
example_end

Sent: Mr Bear is dancing .
Sem: lambda $0_{ev}.aux|be-3s(part|dance-presp(n:prop|bear_mr,$0),$0)
example_end

Sent: he 's dancing .
Sem: lambda $0_{ev}.aux|~be(part|dance-presp(pro:sub|he,$0),$0)
example_end

Sent: I just read them .
Sem: lambda $0_{ev}.and(v|read-zero(pro:sub|i,pro:obj|them,$0),adv|just($0))
example_end

Sent: now you take them over to Ursula .
Sem: lambda $0_{ev}.and(and(and(v|take(pro:per|you,pro:obj|them,$0),adv|now($0)),adv|over($0)),prep|to(n:prop|ursula,$0))
example_end

Sent: they 're Ursula 's books .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:sub|they,n|book-pl(pro:sub|they,$0))
example_end

Sent: no I just read them .
Sem: lambda $0_{ev}.and(and(v|read-zero(pro:sub|i,pro:obj|them,$0),adv|just($0)),co|no($0))
example_end

Sent: you dropped a book .
Sem: lambda $0_{ev}.v|drop-past(pro:per|you,det:art|a($1,n|book($1)),$0)
example_end

Sent: poor Ursula .
Sem: att(n:prop|ursula,lambda $0_{e}.adj|poor($0))
example_end

Sent: she needs her books .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|she,det:poss|her($1,n|book-pl($1)),$0)
example_end

Sent: poor Cromer ?
Sem: lambda $0_{e}.Q(att(n:prop|cromer,lambda $1_{e}.adj|poor($1),$0))
example_end

Sent: what 's yours ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:poss|yours($0,$1)
example_end

Sent: no that 's a lion .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|lion(pro:dem|that,$0)),co|no($0))
example_end

Sent: hungry lion .
Sem: lambda $0_{e}.and(adj|hungry($0),n|lion($0))
example_end

Sent: Saggy Baggy Elephant .
Sem:
example_end

Sent: you go tell Ursula then .
Sem: lambda $0_{ev}.v|go(pro:per|you,lambda $1_{ev}.and(v|tell(pro:per|you,n:prop|ursula,$1),adv:tem|then($1)),$0)
example_end

Sent: I can 't see it .
Sem: lambda $0_{ev}.not(mod|can(v|see(pro:sub|i,pro:per|it,$0),$0),$0)
example_end

Sent: I thought you were going to tell her .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.v|tell(pro:per|you,pro:obj|her,$2),$1),$1),$0)
example_end

Sent: you have_to take it over there where she is .
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod:aux|have_to(and(v|take(pro:per|you,pro:per|it,$0),adv|over(adv|there($0))),$0),and(cop|be-3s(pro:sub|she,$0),$1($0)))
example_end

Sent: oh you 're going walking ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{e}.part|walk-presp($1),$0),$0),co|oh($0)))
example_end

Sent: did you step on the book ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|step(pro:per|you,$0),prep|on(det:art|the($1,n|book($1)),$0)),$0))
example_end

Sent: that 's alright then if you didn 't do it on purpose .
Sem: lambda $0_{ev}.conj|if(not(mod|do(and(v|do(pro:per|you,pro:per|it,$0),n|purpose($0)),$0),$0),adv:tem|then(adj|alright(pro:dem|that,$0)))
example_end

Sent: that 's red .
Sem: lambda $0_{ev}.adj|red(pro:dem|that,$0)
example_end

Sent: do you see a deer ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|a($1,n|deer($1)),$0),$0))
example_end

Sent: he 's hungry ?
Sem: lambda $0_{ev}.Q(adj|hungry(pro:sub|he,$0))
example_end

Sent: you turn it around ?
Sem: lambda $0_{ev}.Q(and(v|turn(pro:per|you,pro:per|it,$0),adv|around($0)))
example_end

Sent: I don 't think that really goes there do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(and(v|go-3s(pro:rel|that,$1),adv|real-dadj($1)),adv|there($1)),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: one pretty ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,lambda $1_{e}.adv|pretty($1),$0))
example_end

Sent: off Perro ?
Sem: Q(prep|off(n:prop|perro))
example_end

Sent: yes it 's alright .
Sem: lambda $0_{ev}.and(adj|alright(pro:per|it,$0),co|yes($0))
example_end

Sent: knock over ?
Sem: lambda $0_{ev}.Q(and(n|knock(you,$0),adv|over($0)))
example_end

Sent: go over ?
Sem: lambda $0_{ev}.Q(and(v|go(you,$0),adv|over($0)))
example_end

Sent: do you think that belongs there ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.and(v|belong-3s(pro:rel|that,$1),adv|there($1)),$0),$0))
example_end

Sent: you 're turning it over .
Sem: lambda $0_{ev}.aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|over($0)),$0)
example_end

Sent: you 're turning it around .
Sem: lambda $0_{ev}.aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|around($0)),$0)
example_end

Sent: turning it around .
Sem: lambda $0_{ev}.and(part|turn-presp(you,pro:per|it,$0),adv|around($0))
example_end

Sent: that 's your brush .
Sem: lambda $0_{ev}.det:poss|your(pro:dem|that,n|brush(pro:dem|that,$0))
example_end

Sent: that 's not a hammer .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|hammer(pro:dem|that,$0)),$0)
example_end

Sent: oh it looks like a hammer ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,det:art|a($1,n|hammer($1)),$0),co|oh($0)))
example_end

Sent: that 's not a doggie .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|dog-dim(pro:dem|that,$0)),$0)
example_end

Sent: no that 's a deer .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|deer(pro:dem|that,$0)),co|no($0))
example_end

Sent: oh you 're a big boy ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|you,and(n|boy(pro:per|you,$0),adj|big(pro:per|you,$0))),co|oh($0)))
example_end

Sent: why are you turning that ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|turn-presp(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: well yes it 's heavy .
Sem: lambda $0_{ev}.and(and(adj|heavy(pro:per|it,$0),co|well($0)),co|yes($0))
example_end

Sent: what are you brushing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|brush-presp(pro:per|you,$1,$0),$0)
example_end

Sent: what does this say today ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-3s(and(v|say(pro:dem|this,$1,$0),adv:tem|today($0)),$0)
example_end

Sent: oh you hurt your head on the table .
Sem: lambda $0_{ev}.and(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),prep|on(det:art|the($2,n|table($2)),$0)),co|oh($0))
example_end

Sent: what happened Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|happen-past($1,$0)
example_end

Sent: the chair didn 't hit your head did it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|hit-zero(det:art|the($1,n|chair($1)),det:poss|your($2,n|head($2)),$0),$0),$0),mod|do-past(pro:per|it,$0)))
example_end

Sent: no the head hit the table .
Sem: lambda $0_{ev}.and(v|hit-zero(det:art|the($1,n|head($1)),det:art|the($2,n|table($2)),$0),qn|no($0))
example_end

Sent: did you step on the books ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|step(pro:per|you,$0),prep|on(det:art|the($1,n|book-pl($1)),$0)),$0))
example_end

Sent: Perro 's going to read the book .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(n:prop|perro,lambda $1_{ev}.v|read-zero(n:prop|perro,det:art|the($2,n|book($2)),$1),$0),$0)
example_end

Sent: oh Adam will read the book ?
Sem: lambda $0_{ev}.Q(and(mod|will(v|read-zero(n:prop|adam,det:art|the($1,n|book($1)),$0),$0),co|oh($0)))
example_end

Sent: you 're excused .
Sem: lambda $0_{ev}.aux|~be(part|excuse-pastp(pro:per|you,$0),$0)
example_end

Sent: turn what over ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|turn(you,$1,$0),adv|over($0))
example_end

Sent: I thought you were going to read to Perro .
Sem: lambda $0_{ev}.v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|go-presp(pro:per|you,lambda $2_{ev}.and(v|read-zero(pro:per|you,$2),prep|to(n:prop|perro,$2)),$1),$1),$0)
example_end

Sent: good morning to you .
Sem: lambda $0_{e}.att(and(adj|good($0),n|morning($0)),prep|to(pro:per|you))
example_end

Sent: oh good morning .
Sem: lambda $0_{ev}.and(and(adj|good($0),n|morning($0)),co|oh($0))
example_end

Sent: oh laughing .
Sem: lambda $0_{ev}.and(part|laugh-presp(you,$0),co|oh($0))
example_end

Sent: what did Donald_Duck safety book say ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(v|say(lambda $1_{e}.and_comp(and_comp(n:prop|donald_duck($1),n|safety($1)),n|book($1)),$2,$0),$0)
example_end

Sent: you don 't play with plugs do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|play(pro:per|you,lambda $1_{e}.n|plug-pl($1),$0),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: you don 't play with cords either .
Sem: lambda $0_{ev}.not(mod|do(and(v|play(pro:per|you,lambda $1_{e}.n|cord-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: put it down .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),adv|down($0))
example_end

Sent: no it doesn 't go there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|go(pro:per|it,$0),adv|there($0)),$0),$0),co|no($0))
example_end

Sent: you don 't play with matches either do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|play(pro:per|you,lambda $1_{e}.n|match-pl($1),$0),coord|either($0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: yeah you dropped it .
Sem: lambda $0_{ev}.and(v|drop-past(pro:per|you,pro:per|it,$0),co|yeah($0))
example_end

Sent: well what happened to five six seven ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(lambda $2_{e}.det:num|five($2),$0)),co|well($0))
example_end

Sent: that 's no broom .
Sem: lambda $0_{ev}.not(n|broom(pro:dem|that,$0),$0)
example_end

Sent: that 's brush .
Sem: lambda $0_{ev}.n|brush(pro:dem|that,$0)
example_end

Sent: oh it looks like a broom does it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(pro:per|it,det:art|a($1,n|broom($1)),$0),mod|do-3s(pro:per|it,$0)),co|oh($0)))
example_end

Sent: I can 't put it together .
Sem: lambda $0_{ev}.not(mod|can(and(v|put-zero(pro:sub|i,pro:per|it,$0),adv|together($0)),$0),$0)
example_end

Sent: you have_to go get the car .
Sem: lambda $0_{ev}.mod:aux|have_to(v|get(pro:per|you,det:art|the($1,n|car($1)),$0),$0)
example_end

Sent: the car got tickled ?
Sem: lambda $0_{ev}.Q(aux|get-past(part|tickle-pastp(det:art|the($1,n|car($1)),$0),$0))
example_end

Sent: does it go there ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|go(pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: car dropped ?
Sem: lambda $0_{ev}.Q(v|drop-past(lambda $1_{e}.n|car($1),$0))
example_end

Sent: you missed that ?
Sem: lambda $0_{ev}.Q(v|miss-past(pro:per|you,pro:dem|that,$0))
example_end

Sent: what 's he going to sit against if you take all the pillows off .
Sem: lambda $3_{e}.lambda $0_{ev}.conj|if(and(v|take(pro:per|you,qn|all(det:art|the($1,n|pillow-pl($1))),$0),adv|off($0)),aux|~be(part|go-presp(pro:sub|he,lambda $2_{ev}.and(v|sit($3,$2),adv|against($2)),$0),$0))
example_end

Sent: how can he sit comfortably if you take all the pillows off ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|if(and(v|take(pro:per|you,qn|all(det:art|the($1,n|pillow-pl($1))),$0),adv|off($0)),mod|can(and(and(v|sit(pro:sub|he,$0),$2($0)),adv|comfort-dadj($0)),$0))
example_end

Sent: you 're going to give him one .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|give(pro:per|you,pro:indef|one,pro:obj|him,$1),$0),$0)
example_end

Sent: who uses a pillow on the floor for exercising ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|use-3s($1,det:art|a($2,n|pillow($2)),$0),prep|on(det:art|the($3,n|floor($3)),$0)),prep|for(lambda $4_{e}.n:gerund|exercise-presp($4),$0))
example_end

Sent: all finished with your exercises ?
Sem: lambda $0_{ev}.Q(and(and(v|finish-past(you,$0),post|all($0)),prep|with(det:poss|your($1,n|exercise-pl($1)),$0)))
example_end

Sent: why don 't you put the pillows up ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|put-zero(pro:per|you,det:art|the($1,n|pillow-pl($1)),$0),$2($0)),adv|up($0)),$0),$0)
example_end

Sent: would you like to have this ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,lambda $1_{ev}.v|have(pro:per|you,pro:dem|this,$1),$0),$0))
example_end

Sent: a big lion .
Sem: det:art|a($0,and(adj|big($0),n|lion($0)))
example_end

Sent: that 's a baby giraffe .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|giraffe(pro:dem|that,$0),n|baby(pro:dem|that,$0)))
example_end

Sent: just one wheel left .
Sem: lambda $0_{ev}.and(v|leave-past(lambda $1_{e}.det:num|one(n|wheel($1)),$0),adv|just($0))
example_end

Sent: saggy baggy .
Sem: lambda $0_{e}.adj|sag-dv($0)
example_end

Sent: what 's the elephant doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|elephant($1)),$2,$0),$0)
example_end

Sent: that 's a porcupine .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|porcupine(pro:dem|that,$0))
example_end

Sent: you know what that is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: that 's a hippopotamus .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|hippopotamus(pro:dem|that,$0))
example_end

Sent: and this ?
Sem: lambda $0_{e}.Q(pro:dem|this($0))
example_end

Sent: this is a panda .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|panda(pro:dem|this,$0))
example_end

Sent: no that 's not a giraffe .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|giraffe(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: a polar bear .
Sem: det:art|a($0,and_comp(adj|polar($0),n|bear($0)))
example_end

Sent: he 's sitting on top of ice .
Sem: lambda $0_{ev}.aux|~be(and(part|sit-presp(pro:sub|he,$0),prep|on(lambda $1_{e}.att(n|top($1),prep|of(lambda $2_{e}.n|ice($2))),$0)),$0)
example_end

Sent: this one 's the leopard .
Sem: lambda $0_{ev}.det:art|the(pro:dem|this($1,pro:indef|one($1)),n|leopard(pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: do you see a seal ?
Sem: lambda $0_{ev}.Q(mod|do(v|see(pro:per|you,det:art|a($1,n|seal($1)),$0),$0))
example_end

Sent: is that a seal ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|seal(pro:rel|that,$0)))
example_end

Sent: sitting on the broom ?
Sem: lambda $0_{ev}.Q(and(part|sit-presp(you,$0),prep|on(det:art|the($1,n|broom($1)),$0)))
example_end

Sent: would you like one ?
Sem: lambda $0_{ev}.Q(mod|will-cond(v|like(pro:per|you,pro:indef|one,$0),$0))
example_end

Sent: do you want a piece of this ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,att(n|piece($1),prep|of(pro:dem|this))),$0),$0))
example_end

Sent: what are you writing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|write-presp(pro:per|you,$1,$0),$0)
example_end

Sent: oh you 're writing Cromer ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|write-presp(pro:per|you,$0),n:prop|cromer($0)),$0),co|oh($0)))
example_end

Sent: you dropped your pencil .
Sem: lambda $0_{ev}.v|drop-past(pro:per|you,det:poss|your($1,n|pencil($1)),$0)
example_end

Sent: you have some paper .
Sem: lambda $0_{ev}.v|have(pro:per|you,qn|some($1,n|paper($1)),$0)
example_end

Sent: there 's one on the table .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|one,$0),prep|on(det:art|the($1,n|table($1)),$0))
example_end

Sent: no give her her pencil back Adam because you 've been breaking pencils lately .
Sem: lambda $0_{ev}.and(conj|because(aux|be-pastp(aux|~have(and(part|break-presp(pro:per|you,lambda $1_{e}.n|pencil-pl($1),$0),adv|late-dadj($0)),$0),$0),and(v|give(you,det:poss|her($2,n|pencil($2)),pro:obj|her,$0),adj|back($0))),co|no($0))
example_end

Sent: that 's a flute .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|flute(pro:dem|that,$0))
example_end

Sent: what kind of bird is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|bird($2))))
example_end

Sent: here 's my mail from this morning .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|my($1,n|mail($1)),$0),pro:exist|here($0)),prep|from(pro:dem|this($2,n|morning($2)),$0))
example_end

Sent: letters the mailman brought .
Sem: lambda $0_{ev}.v|bring-past(det:art|the($1,n|mail+man($1)),lambda $2_{e}.n|letter-pl($2),$0)
example_end

Sent: may I show you ?
Sem: lambda $0_{ev}.Q(mod|may(v|show(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: you show me .
Sem: lambda $0_{ev}.v|show(pro:per|you,pro:obj|me,$0)
example_end

Sent: get up there and sit down .
Sem: lambda $0_{ev}.coord|and(and(v|sit(you,$0),adv|down($0)),and(v|get(you,$0),adv|up(adv|there($0))))
example_end

Sent: can you see the snow ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,det:art|the($1,n|snow($1)),$0),$0))
example_end

Sent: oh you want to watch it .
Sem: lambda $0_{ev}.and(v|want(pro:per|you,lambda $1_{ev}.v|watch(pro:per|you,pro:per|it,$1),$0),co|oh($0))
example_end

Sent: I 'm sorry .
Sem: lambda $0_{ev}.adj|sorry(pro:sub|i,$0)
example_end

Sent: I don 't think that 's yellow .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.adj|yellow(pro:dem|that,$1),$0),$0),$0)
example_end

Sent: if that 's yellow what color is this ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(adj|yellow(pro:dem|that,$0),$1(pro:dem|this,n|color(pro:dem|this,$0)))
example_end

Sent: don 't do that .
Sem: lambda $0_{ev}.not(mod|do(v|do(you,pro:dem|that,$0),$0),$0)
example_end

Sent: you 'll bend it .
Sem: lambda $0_{ev}.mod|~will(v|bend(pro:per|you,pro:per|it,$0),$0)
example_end

Sent: because it will disrupt the machine .
Sem: lambda $0_{ev}.mod|will(v|disrupt(pro:per|it,det:art|the($1,n|machine($1)),$0),$0)
example_end

Sent: whose pencils are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.pro:sub|they($1($2,n|pencil-pl($2)),$0)
example_end

Sent: one door !
Sem: lambda $0_{e}.det:num|one(n|door($0))
example_end

Sent: will you read it to me ?
Sem: lambda $0_{ev}.Q(mod|will(and(v|read-zero(pro:per|you,pro:per|it,$0),prep|to(pro:obj|me,$0)),$0))
example_end

Sent: can you find the seal ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,det:art|the($1,n|seal($1)),$0),$0))
example_end

Sent: looks like Chatter .
Sem: lambda $0_{ev}.cop|look-3s(you,n:prop|chatter,$0)
example_end

Sent: oh that 's all .
Sem: lambda $0_{ev}.and(pro:indef|all(pro:dem|that,$0),co|oh($0))
example_end

Sent: it 's a camera .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|camera(pro:per|it,$0))
example_end

Sent: is that a hammer Adam ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|hammer(pro:rel|that,$0)))
example_end

Sent: here a hammer ?
Sem: lambda $0_{e}.Q(adv|here(det:art|a($1,n|hammer($1)),$0))
example_end

Sent: oh that 's not a hammer .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|hammer(pro:dem|that,$0)),$0),co|oh($0))
example_end

Sent: what 's that on it ?
Sem: lambda $0_{e}.lambda $1_{ev}.att(pro:dem|that($0,$1),prep|on(pro:per|it))
example_end

Sent: oh Chicken_Little .
Sem: lambda $0_{ev}.and(n:prop|chicken_little($0),co|oh($0))
example_end

Sent: where did you see Chicken_Little ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,n:prop|chicken_little,$0),$1($0)),$0)
example_end

Sent: you do ?
Sem: lambda $0_{ev}.Q(v|do(pro:per|you,$0))
example_end

Sent: well what is it that you love ?
Sem: lambda $0_{ev}.and(v|love(pro:per|you,$0),co|well($0))
example_end

Sent: what does a windmill do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|a($1,n|windmill($1)),$2,$0),$0)
example_end

Sent: silly boy .
Sem: lambda $0_{e}.and(co|silly($0),n|boy($0))
example_end

Sent: yes you have_to blow your nose don 't you .
Sem: lambda $0_{ev}.and(and(mod:aux|have_to(v|blow(pro:per|you,det:poss|your($1,n|nose($1)),$0),$0),not(mod|do(pro:per|you,$0),$0)),co|yes($0))
example_end

Sent: that 's a nice flute .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|flute(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))
example_end

Sent: no that 's a flute .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|flute(pro:dem|that,$0)),co|no($0))
example_end

Sent: it 's just from the rug honey .
Sem: lambda $0_{ev}.adj|just(prep|from(det:art|the($1,n|rug($1)),pro:per|it,$0))
example_end

Sent: oh turning like a windmill ?
Sem: lambda $0_{ev}.Q(and(and(part|turn-presp(you,$0),prep|like(det:art|a($1,n|windmill($1)),$0)),co|oh($0)))
example_end

Sent: what else has wings like that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|have-3s($1,lambda $2_{e}.n|wing-pl($2),$0),prep|like(pro:dem|that,$0))
example_end

Sent: oh here it is .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:per|it,$0),adv|here($0)),co|oh($0))
example_end

Sent: part of your car ?
Sem: lambda $0_{e}.Q(att(n|part($0),prep|of(det:poss|your($1,n|car($1)))))
example_end

Sent: poor Adam .
Sem: att(n:prop|adam,lambda $0_{e}.adj|poor($0))
example_end

Sent: did you hurt yourself ?
Sem: lambda $0_{ev}.Q(v|do-past(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),$0))
example_end

Sent: screw happened !
Sem: lambda $0_{ev}.v|happen-past(lambda $1_{e}.n|screw($1),$0)
example_end

Sent: you didn 't even have a screw .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,det:art|a($1,n|screw($1)),$0),v|even($0)),$0),$0)
example_end

Sent: you didn 't have a screw .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,det:art|a($1,n|screw($1)),$0),$0),$0)
example_end

Sent: are you playing peekaboo with me ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|play-presp(pro:per|you,lambda $1_{e}.v|peekaboo($1),$0),prep|with(pro:obj|me,$0)),$0))
example_end

Sent: you peekaboo back out in the kitchen with your juice .
Sem: lambda $0_{ev}.and(and(and(and(v|peekaboo(pro:per|you,$0),adv|back($0)),adv|out($0)),prep|in(det:art|the($1,n|kitchen($1)),$0)),prep|with(det:poss|your($2,n|juice($2)),$0))
example_end

Sent: is that juice ?
Sem: lambda $0_{ev}.Q(n|juice(pro:dem|that,$0))
example_end

Sent: get broom .
Sem: lambda $0_{ev}.v|get(you,lambda $1_{e}.n|broom($1),$0)
example_end

Sent: what 's all_gone ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|~be(co|all_gone($1,$0),$0)
example_end

Sent: oh you 're going to draw a picture .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|draw(pro:per|you,det:art|a($2,n|picture($2)),$1),$0),$0),co|oh($0))
example_end

Sent: well he doesn 't want that paper .
Sem: lambda $0_{ev}.and(not(mod|do(v|want(pro:sub|he,pro:dem|that($1,n|paper($1)),$0),$0),$0),co|well($0))
example_end

Sent: he has some nice paper .
Sem: lambda $0_{ev}.v|have-3s(pro:sub|he,qn|some($1,and(adj|nice($1),n|paper($1))),$0)
example_end

Sent: what do you want me to write ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(v|want(pro:per|you,lambda $1_{ev}.v|write(pro:obj|me,$2,$1),$0),$0)
example_end

Sent: does that fit there Adam ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:dem|that,$0),adv|there($0)),$0))
example_end

Sent: does that one fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(pro:dem|that($1,pro:indef|one($1)),$0),$0))
example_end

Sent: does it fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(pro:per|it,$0),$0))
example_end

Sent: does it fit there ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:per|it,$0),adv|there($0)),$0))
example_end

Sent: does it fit that way ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|fit-zero(pro:per|it,$0),pro:dem|that($1,n|way($1),$0)),$0))
example_end

Sent: does boy ?
Sem: lambda $0_{ev}.Q(mod|do-3s(lambda $1_{e}.n|boy($1),$0))
example_end

Sent: no Adam I 'll have_to take the flute away if you do that .
Sem: lambda $0_{ev}.and(conj|if(v|do(pro:per|you,pro:dem|that,$0),mod:aux|have_to(mod|~will(and(v|take(pro:sub|i,det:art|the($1,n|flute($1)),$0),adv|away($0)),$0),$0)),co|no($0))
example_end

Sent: it 's not hollow all the way down .
Sem: lambda $0_{e}.lambda $1_{ev}.v|hollow($0,$1)
example_end

Sent: look in that way and it 's hollow .
Sem: lambda $0_{ev}.coord|and(adj|hollow(pro:per|it,$0),and(cop|look(you,$0),prep|in(pro:dem|that($1,n|way($1)),$0)))
example_end

Sent: how many ends does it have ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-3s(v|have(pro:per|it,lambda $1_{e}.and($2(qn|many($1)),n|end-pl($1)),$0),$0)
example_end

Sent: a little hole .
Sem: det:art|a($0,and(adj|little($0),n|hole($0)))
example_end

Sent: that doesn 't belong there either .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|belong(pro:dem|that,$0),adv|there($0)),adv|either($0)),$0),$0)
example_end

Sent: you spilled your juice .
Sem: lambda $0_{ev}.v|spill-past(pro:per|you,det:poss|your($1,n|juice($1)),$0)
example_end

Sent: shall we open it ?
Sem: lambda $0_{ev}.Q(mod|shall(v|open(pro:sub|we,pro:per|it,$0),$0))
example_end

Sent: yes paper 's in there .
Sem: lambda $0_{ev}.and(and(poss|~s(lambda $1_{e}.n|paper($1),$0),adv|in(adv|there($0))),co|yes($0))
example_end

Sent: did you find a pencil ?
Sem: lambda $0_{ev}.Q(v|do-past(v|find(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: we 'll use that one tomorrow .
Sem: lambda $0_{ev}.mod|~will(and(v|use(pro:sub|we,pro:dem|that($1,pro:indef|one($1)),$0),adv:tem|tomorrow($0)),$0)
example_end

Sent: shall we use it tomorrow ?
Sem: lambda $0_{ev}.Q(mod|shall(and(v|use(pro:sub|we,pro:per|it,$0),adv:tem|tomorrow($0)),$0))
example_end

Sent: are you putting it back ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|put-presp(pro:per|you,pro:per|it,$0),adv|back($0)),$0))
example_end

Sent: does the box of tape fit ?
Sem: lambda $0_{ev}.Q(mod|do-3s(v|fit-zero(det:art|the($1,att(n|box($1),prep|of(lambda $2_{e}.n|tape($2)))),$0),$0))
example_end

Sent: there are so many papers .
Sem: lambda $0_{ev}.cop|be-pres(lambda $1_{e}.and(adv|so(qn|many($1)),n|paper-pl($1)),$0)
example_end

Sent: shall we do a game ?
Sem: lambda $0_{ev}.Q(mod|shall(v|do(pro:sub|we,det:art|a($1,n|game($1)),$0),$0))
example_end

Sent: can you give the baby in the bed ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|give(pro:per|you,det:art|the($1,n|baby($1)),$0),prep|in(det:art|the($2,n|bed($2)),$0)),$0))
example_end

Sent: can you give me the boy in the bath ?
Sem: lambda $0_{ev}.Q(mod|can(v|give(pro:per|you,det:art|the($1,att(n|boy($1),prep|in(det:art|the($2,n|bath+tub($2))))),pro:obj|me,$0),$0))
example_end

Sent: here he is in the bed .
Sem: lambda $0_{ev}.and(and(cop|be-3s(pro:sub|he,$0),adv|here($0)),prep|in(det:art|the($1,n|bed($1)),$0))
example_end

Sent: is the boy in the bed ?
Sem: lambda $0_{ev}.Q(prep|in(det:art|the($1,n|bed($1)),det:art|the($2,n|boy($2)),$0))
example_end

Sent: that 's a bath .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|bath+tub(pro:dem|that,$0))
example_end

Sent: that 's a boy in the bath .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,att(n|boy(pro:dem|that,$0),prep|in(det:art|the($1,n|bath+tub($1)))))
example_end

Sent: can you say that boy in the bath ?
Sem: lambda $0_{ev}.Q(mod|can(v|say(pro:per|you,pro:rel|that($1,att(n|boy($1),prep|in(det:art|the($2,n|bath+tub($2))))),$0),$0))
example_end

Sent: may I have them .
Sem: lambda $0_{ev}.mod|may(v|have(pro:sub|i,pro:obj|them,$0),$0)
example_end

Sent: you 're going to put them back ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back($1)),$0),$0))
example_end

Sent: can you give me the dog in the house ?
Sem: lambda $0_{ev}.Q(mod|can(v|give(pro:per|you,det:art|the($1,att(n|dog($1),prep|in(det:art|the($2,n|house($2))))),pro:obj|me,$0),$0))
example_end

Sent: is there a doggie in this house ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|dog-dim($1)),$0),prep|in(pro:dem|this($2,n|house($2)),$0)))
example_end

Sent: sit on the rug ?
Sem: lambda $0_{ev}.Q(and(v|sit(you,$0),prep|on(det:art|the($1,n|rug($1)),$0)))
example_end

Sent: his face cloth got stuck in the drain .
Sem: lambda $0_{ev}.aux|get-past(and(part|stick-pastp(det:poss|his($1,and_comp(n|face($1),n|cloth($1))),$0),prep|in(det:art|the($2,n|drain($2)),$0)),$0)
example_end

Sent: it got stuck in the drain ?
Sem: lambda $0_{ev}.Q(aux|get-past(and(part|stick-pastp(pro:per|it,$0),prep|in(det:art|the($1,n|drain($1)),$0)),$0))
example_end

Sent: which one has the doghouse ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|have-3s($1($2,pro:indef|one($2)),det:art|the($3,n|dog+house($3)),$0)
example_end

Sent: can you find it ?
Sem: lambda $0_{ev}.Q(mod|can(v|find(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: are those too many Adam ?
Sem: lambda $0_{ev}.Q(adv|too(qn|many(pro:dem|those,$0)))
example_end

Sent: is there a boy in there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(det:art|a($1,n|boy($1)),$0),prep|in(adv|there($0))))
example_end

Sent: where is the boy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|boy($1)),$0),$2($0))
example_end

Sent: do you have a bed like that ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,n|bed($1)),$0),prep|like(pro:dem|that,$0)),$0))
example_end

Sent: you saw the pictures .
Sem: lambda $0_{ev}.v|see-past(pro:per|you,det:art|the($1,n|picture-pl($1)),$0)
example_end

Sent: in the kitchen ?
Sem: Q(prep|in(det:art|the($0,n|kitchen($0))))
example_end

Sent: no you saw a giraffe on the television .
Sem: lambda $0_{ev}.and(and(v|see-past(pro:per|you,det:art|a($1,n|giraffe($1)),$0),prep|on(det:art|the($2,n|television($2)),$0)),co|no($0))
example_end

Sent: that 's a kangaroo .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|kangaroo(pro:dem|that,$0))
example_end

Sent: here 's a leopard .
Sem: lambda $0_{ev}.and(cop|~be(det:art|a($1,n|leopard($1)),$0),pro:exist|here($0))
example_end

Sent: look at this .
Sem: lambda $0_{ev}.and(cop|look(you,$0),prep|at(pro:dem|this,$0))
example_end

Sent: that 's a reindeer .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|reindeer(pro:dem|that,$0))
example_end

Sent: oh taking a shower ?
Sem: lambda $0_{ev}.Q(and(part|take-presp(you,det:art|a($1,n|shower($1)),$0),co|oh($0)))
example_end

Sent: that 's a lion .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|lion(pro:dem|that,$0))
example_end

Sent: hungry lion yes .
Sem: lambda $0_{ev}.and(and(adj|hungry($0),n|lion($0)),co|yes($0))
example_end

Sent: oh close the mouth .
Sem: lambda $0_{ev}.and(v|close(you,det:art|the($1,n|mouth($1)),$0),co|oh($0))
example_end

Sent: what does the knife do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|knife($1)),$2,$0),$0)
example_end

Sent: that 's a monkey .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|monkey(pro:dem|that,$0))
example_end

Sent: what is the monkey eating ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-3s(part|eat-presp(det:art|the($1,n|monkey($1)),$2,$0),$0)
example_end

Sent: eating crayon ?
Sem: lambda $0_{ev}.Q(part|eat-presp(you,lambda $1_{e}.n|crayon($1),$0))
example_end

Sent: what is he ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|he,$0)
example_end

Sent: that 's a fox .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fox(pro:dem|that,$0))
example_end

Sent: that 's a panda .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|panda(pro:dem|that,$0))
example_end

Sent: his legs are strong .
Sem: lambda $0_{ev}.adj|strong(det:poss|his($1,n|leg-pl($1)),$0)
example_end

Sent: sing a song ?
Sem: lambda $0_{ev}.Q(v|sing(you,det:art|a($1,n|song($1)),$0))
example_end

Sent: I don 't think that car is broken .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.part|break-pastp(pro:dem|that($2,n|car($2)),$1),$0),$0),$0)
example_end

Sent: excuse me please .
Sem: lambda $0_{ev}.and(v|excuse(you,pro:obj|me,$0),co|please($0))
example_end

Sent: be careful .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|care-dn($0,$1)
example_end

Sent: you missed it .
Sem: lambda $0_{ev}.v|miss-past(pro:per|you,pro:per|it,$0)
example_end

Sent: get down .
Sem: lambda $0_{ev}.and(v|get(you,$0),adv|down($0))
example_end

Sent: we don 't want all these beetles .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|we,qn|all(pro:dem|these($1,n|beetle-pl($1))),$0),$0),$0)
example_end

Sent: oh that 's a big one .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|big(pro:dem|that,$0))),co|oh($0))
example_end

Sent: we didn 't go to the grocery store .
Sem: lambda $0_{ev}.not(mod|do(and(v|go(pro:sub|we,$0),prep|to(det:art|the($1,and_comp(n|grocery($1),n|store($1))),$0)),$0),$0)
example_end

Sent: where did we go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(pro:sub|we,$0),$1($0)),$0)
example_end

Sent: yes we went in the car .
Sem: lambda $0_{ev}.and(and(v|go-past(pro:sub|we,$0),prep|in(det:art|the($1,n|car($1)),$0)),co|yes($0))
example_end

Sent: and what did you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: a big doggie eating ?
Sem: lambda $0_{ev}.Q(part|eat-presp(det:art|a($1,and(adj|big($1),n|dog-dim($1))),$0))
example_end

Sent: but he was much bigger than Perro .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|big-cp($0,$1)
example_end

Sent: do you remember what the place was called ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:per|you,lambda $1_{ev}.part|call-pastp(_,pro:int|what,det:art|the($2,n|place($2)),$1),$0),$0))
example_end

Sent: no zoo .
Sem: qn|no($0,n|zoo($0))
example_end

Sent: yeah we saw the parrot .
Sem: lambda $0_{ev}.and(v|see-past(pro:sub|we,det:art|the($1,n|parrot($1)),$0),co|yeah($0))
example_end

Sent: you didn 't see an elephant .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:per|you,det:art|a($1,n|elephant($1)),$0),$0),$0)
example_end

Sent: what else did you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: a lamb ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|lamb($1),$0))
example_end

Sent: is that what it says ?
Sem: lambda $0_{ev}.Q(cop|be-3s(pro:dem|that,lambda $1_{ev}.v|say-3s(pro:per|it,pro:int|what,$1),$0))
example_end

Sent: big dog .
Sem: lambda $0_{e}.and(adj|big($0),n|dog($0))
example_end

Sent: yeah big doggie was eating .
Sem: lambda $0_{ev}.and(aux|be-past(part|eat-presp(lambda $1_{e}.and(adj|big($1),n|dog-dim($1)),$0),$0),co|yeah($0))
example_end

Sent: oh broke a pencil .
Sem: lambda $0_{ev}.and(v|break-past(you,det:art|a($1,n|pencil($1)),$0),co|oh($0))
example_end

Sent: you mustn 't play with a pencil in your hand .
Sem: lambda $0_{ev}.not(mod|must(and(v|play(pro:per|you,$0),prep|with(det:art|a($1,att(n|pencil($1),prep|in(det:poss|your($2,n|hand($2))))),$0)),$0),$0)
example_end

Sent: what is what ?
Sem: lambda $2_{e}.lambda $0_{e}.lambda $1_{ev}.$2($0,$1)
example_end

Sent: oh those are shoes .
Sem: lambda $0_{ev}.and(n|shoe-pl(pro:dem|those,$0),co|oh($0))
example_end

Sent: lots_of boots ?
Sem: lambda $0_{e}.Q(qn|lots_of($1,n|boot-pl($1),$0))
example_end

Sent: a big needle .
Sem: det:art|a($0,and(adj|big($0),n|needle($0)))
example_end

Sent: oh another needle .
Sem: lambda $0_{ev}.and(qn|another($1,n|needle($1),$0),co|oh($0))
example_end

Sent: I don 't know what is it ?
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,$0),$0),$0)
example_end

Sent: oh Cromer 's pencil .
Sem: lambda $0_{ev}.and(n:prop|cromer's($1,n|pencil($1),$0),co|oh($0))
example_end

Sent: oh is that the sky ?
Sem: lambda $0_{ev}.Q(and(det:art|the(pro:rel|that,n|sky(pro:rel|that,$0)),co|oh($0)))
example_end

Sent: is that Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(n:prop|humpty_dumpty(pro:rel|that,$0))
example_end

Sent: who spanked Humpty_Dumpty 's face ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|spank-past($1,n:prop|humpty_dumpty's($2,n|face($2)),$0)
example_end

Sent: oh he 's under your finger .
Sem: lambda $0_{ev}.and(and(aux|~be(pro:sub|he,$0),adv|under(det:poss|your($1,n|finger($1)),$0)),co|oh($0))
example_end

Sent: write on the other side honey .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:art|the($1,and(qn|other($1),n|side($1))),$0))
example_end

Sent: you need a chair .
Sem: lambda $0_{ev}.v|need(pro:per|you,det:art|a($1,n|chair($1)),$0)
example_end

Sent: there 's Humpty_Dumpty ?
Sem: lambda $0_{ev}.Q(and(cop|~be(n:prop|humpty_dumpty,$0),pro:exist|there($0)))
example_end

Sent: where did you say he was ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|say(pro:per|you,lambda $1_{ev}.cop|be-past(pro:sub|he,$1),$0),$2($0)),$0)
example_end

Sent: a muffin man ?
Sem: lambda $0_{e}.Q(det:art|a($1,and_comp(n|muffin($1),n|man($1)),$0))
example_end

Sent: where 's the muffin man ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,and_comp(n|muffin($1),n|man($1))),$0),$2($0))
example_end

Sent: you 'll be back ?
Sem: lambda $0_{ev}.Q(mod|~will(and(cop|be(pro:per|you,$0),adv|back($0)),$0))
example_end

Sent: where does the muffin man live ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(adj|live(det:art|the($1,and_comp(n|muffin($1),n|man($1))),$0),$2($0)),$0)
example_end

Sent: yes I 'm alright .
Sem: lambda $0_{ev}.and(adj|alright(pro:sub|i,$0),co|yes($0))
example_end

Sent: is that a refrigerator ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|refrigerator(pro:rel|that,$0)))
example_end

Sent: on your side of the paper .
Sem: prep|on(det:poss|your($0,att(n|side($0),prep|of(det:art|the($1,n|paper($1))))))
example_end

Sent: shall we use a new piece ?
Sem: lambda $0_{ev}.Q(mod|shall(v|use(pro:sub|we,det:art|a($1,and(adj|new($1),n|piece($1))),$0),$0))
example_end

Sent: my turn ?
Sem: lambda $0_{e}.Q(det:poss|my($1,n|turn($1),$0))
example_end

Sent: oh what 're you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be(part|do-presp(pro:per|you,$1,$0),$0),co|oh($0))
example_end

Sent: on the paper .
Sem: prep|on(det:art|the($0,n|paper($0)))
example_end

Sent: you wrote on my finger .
Sem: lambda $0_{ev}.and(v|write-past(pro:per|you,$0),prep|on(det:poss|my($1,n|finger($1)),$0))
example_end

Sent: there 's nothing in here to read .
Sem: lambda $0_{ev}.and(cop|~be(pro:indef|nothing,lambda $1_{ev}.v|read-zero(pro:indef|nothing,$1),$0),prep|in(adv|here($0)))
example_end

Sent: Mommy 's read it .
Sem: lambda $0_{ev}.poss|~s(v|read-zero(n:prop|mommy,pro:per|it,$0),$0)
example_end

Sent: no that 's not shampoo .
Sem: lambda $0_{ev}.and(not(v|shampoo(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: that 's dressing .
Sem: lambda $0_{ev}.part|dress-presp(pro:rel|that,$0)
example_end

Sent: salad dressing .
Sem: lambda $0_{e}.and_comp(n|salad($0),part|dress-presp($0))
example_end

Sent: what you put on salad .
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,$1,$0),prep|on(lambda $2_{e}.n|salad($2),$0))
example_end

Sent: you do what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(pro:per|you,$1,$0)
example_end

Sent: you 're picking the ball .
Sem: lambda $0_{ev}.aux|~be(part|pick-presp(pro:per|you,det:art|the($1,n|ball($1)),$0),$0)
example_end

Sent: and what did you do with my piece of paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|with(det:poss|my($2,att(n|piece($2),prep|of(lambda $3_{e}.n|paper($3)))),$0)),$0)
example_end

Sent: why would he want that in his face ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|want(pro:sub|he,pro:dem|that,$0),$1($0)),prep|in(det:poss|his($2,n|face($2)),$0)),$0)
example_end

Sent: no what do I do ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(v|do(pro:sub|i,$1,$0),$0),co|no($0))
example_end

Sent: you take the card .
Sem: lambda $0_{ev}.v|take(pro:per|you,det:art|the($1,n|card($1)),$0)
example_end

Sent: where 's your page ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:poss|your($1,n|page($1)),$0),$2($0))
example_end

Sent: no you don 't pull on books .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|pull(pro:per|you,$0),prep|on(lambda $1_{e}.n|book-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: you don 't throw books either .
Sem: lambda $0_{ev}.not(mod|do(and(v|throw(pro:per|you,lambda $1_{e}.n|book-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: can you read it ?
Sem: lambda $0_{ev}.Q(mod|can(v|read-zero(pro:per|you,pro:per|it,$0),$0))
example_end

Sent: you don 't find pictures ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|find(pro:per|you,lambda $1_{e}.n|picture-pl($1),$0),$0),$0))
example_end

Sent: you may fall .
Sem: lambda $0_{ev}.mod|may(v|fall(pro:per|you,$0),$0)
example_end

Sent: you 're tires .
Sem: lambda $0_{ev}.n|tire-pl(pro:per|you,$0)
example_end

Sent: oh I thought you were tired .
Sem: lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.part|tire-pastp(pro:per|you,$1),$0),co|oh($0))
example_end

Sent: I did .
Sem: lambda $0_{ev}.v|do-past(pro:sub|i,$0)
example_end

Sent: oh you 're in the rodeo .
Sem: lambda $0_{ev}.and(and(aux|~be(pro:per|you,$0),prep|in(det:art|the($1,n|rodeo($1)),$0)),co|oh($0))
example_end

Sent: oh what are you doing ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(part|do-presp(pro:per|you,$1,$0),$0),co|oh($0))
example_end

Sent: are you riding a horse ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|ride-presp(pro:per|you,det:art|a($1,n|horse($1)),$0),$0))
example_end

Sent: what are you riding ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|ride-presp(pro:per|you,$1,$0),$0)
example_end

Sent: oh you 're going to ride a horse .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|ride(pro:per|you,det:art|a($2,n|horse($2)),$1),$0),$0),co|oh($0))
example_end

Sent: yes he is heavy .
Sem: lambda $0_{ev}.and(adj|heavy(pro:sub|he,$0),co|yes($0))
example_end

Sent: you 're okay ?
Sem: lambda $0_{ev}.Q(adj|okay(pro:per|you,$0))
example_end

Sent: no but that 's not ground .
Sem: lambda $0_{ev}.and(not(n|ground(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: you don 't use a pencil for that do you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|use(pro:per|you,det:art|a($1,n|pencil($1)),$0),prep|for(pro:dem|that,$0)),$0),$0),v|do(pro:per|you,$0)))
example_end

Sent: you write with a pencil .
Sem: lambda $0_{ev}.and(v|write(pro:per|you,$0),prep|with(det:art|a($1,n|pencil($1)),$0))
example_end

Sent: you don 't use that either .
Sem: lambda $0_{ev}.not(mod|do(and(v|use(pro:per|you,pro:dem|that,$0),adv|either($0)),$0),$0)
example_end

Sent: pushing what away ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(part|push-presp(you,$1,$0),adv|away($0))
example_end

Sent: you 're pushing that shadow away ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|push-presp(pro:per|you,pro:dem|that($1,n|shadow($1)),$0),adv|away($0)),$0))
example_end

Sent: whose shadow ?
Sem: lambda $0_{e}.$0($1,n|shadow($1))
example_end

Sent: your shadow .
Sem: det:poss|your($0,n|shadow($0))
example_end

Sent: I don 't see your shadow .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|i,det:poss|your($1,n|shadow($1)),$0),$0),$0)
example_end

Sent: Ricky 's in there ?
Sem: lambda $0_{ev}.Q(and(poss|~s(n:prop|ricky,$0),adv|in(adv|there($0))))
example_end

Sent: what 's funny ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|fun-dn($1,$0)
example_end

Sent: you can 't ride that horse can you ?
Sem: lambda $0_{ev}.Q(and(not(mod|can(v|ride(pro:per|you,pro:dem|that($1,n|horse($1)),$0),$0),$0),mod|can(pro:per|you,$0)))
example_end

Sent: it 's a big horse ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,and(n|horse(pro:per|it,$0),adj|big(pro:per|it,$0))))
example_end

Sent: oh you can ride that one .
Sem: lambda $0_{ev}.and(mod|can(v|ride(pro:per|you,pro:dem|that($1,pro:indef|one($1)),$0),$0),co|oh($0))
example_end

Sent: you can 't ride Perro .
Sem: lambda $0_{ev}.not(mod|can(v|ride(pro:per|you,n:prop|perro,$0),$0),$0)
example_end

Sent: he 's too small isn 't he ?
Sem: lambda $0_{ev}.Q(and(adv|too(adj|small(pro:sub|he,$0)),not(cop|be(pro:sub|he,$0),$0)))
example_end

Sent: no you can 't ride on the tail .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|ride(pro:per|you,$0),prep|on(det:art|the($1,n|tail($1)),$0)),$0),$0),co|no($0))
example_end

Sent: no you don 't need a blanket .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:per|you,det:art|a($1,n|blanket($1)),$0),$0),$0),co|no($0))
example_end

Sent: funny Pinocchio !
Sem: att(n:prop|pinocchio,lambda $0_{e}.adj|fun-dn($0))
example_end

Sent: what do you say ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|say(pro:per|you,$1,$0),$0)
example_end

Sent: you didn 't kick Perro .
Sem: lambda $0_{ev}.not(mod|do(v|kick(pro:per|you,n:prop|perro,$0),$0),$0)
example_end

Sent: whom did you kick with your shoe ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|kick(pro:per|you,$1,$0),prep|with(det:poss|your($2,n|shoe($2)),$0)),$0)
example_end

Sent: you hit Mr Cromer with your shoes .
Sem: lambda $0_{ev}.and(v|hit-zero(pro:per|you,n:prop|cromer_mr,$0),prep|with(det:poss|your($1,n|shoe-pl($1)),$0))
example_end

Sent: you kicked him with your shoe .
Sem: lambda $0_{ev}.and(v|kick-past(pro:per|you,pro:obj|him,$0),prep|with(det:poss|your($1,n|shoe($1)),$0))
example_end

Sent: kiss it !
Sem: lambda $0_{ev}.v|kiss(you,pro:per|it,$0)
example_end

Sent: you want him to kiss your dirty shoes .
Sem: lambda $0_{ev}.v|want(pro:per|you,lambda $1_{ev}.v|kiss(pro:obj|him,det:poss|your($2,and(adj|dirt-dn($2),n|shoe-pl($2))),$1),$0)
example_end

Sent: he has dirty feet doesn 't he ?
Sem: lambda $0_{ev}.Q(and(aux|have-3s(pro:sub|he,lambda $1_{e}.and(v|dirty($1),n|foot-pl($1)),$0),not(mod|do(pro:sub|he,$0),$0)))
example_end

Sent: no that 's not yours is it ?
Sem: lambda $0_{ev}.Q(and(and(not(pro:poss|yours(pro:dem|that,$0),$0),aux|be-3s(pro:per|it,$0)),co|no($0)))
example_end

Sent: that one doesn 't work that way .
Sem: lambda $0_{ev}.not(mod|do(v|work(pro:dem|that($1,pro:indef|one($1)),pro:dem|that($2,n|way($2)),$0),$0),$0)
example_end

Sent: that one 's different .
Sem: lambda $0_{ev}.adj|different(pro:dem|that($1,pro:indef|one($1)),$0)
example_end

Sent: let who ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|let-zero(you,$1,$0)
example_end

Sent: don 't step on it .
Sem: lambda $0_{ev}.not(mod|do(and(v|step(you,$0),prep|on(pro:per|it,$0)),$0),$0)
example_end

Sent: Daddy 's going to ride in the car ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(n:prop|daddy,lambda $1_{ev}.and(n|ride(n:prop|daddy,$1),prep|in(det:art|the($2,n|car($2)),$1)),$0),$0))
example_end

Sent: he 's not a copy cat .
Sem: lambda $0_{ev}.not(det:art|a(pro:sub|he,and_comp(n|copy(pro:sub|he,$0),n|cat(pro:sub|he,$0))),$0)
example_end

Sent: you 're a copy cat .
Sem: lambda $0_{ev}.det:art|a(pro:per|you,and_comp(n|copy(pro:per|you,$0),n|cat(pro:per|you,$0)))
example_end

Sent: don 't break the points Adam he needs that to write with .
Sem: lambda $0_{ev}.not(and(mod|do(v|break(you,det:art|the($1,n|point-pl($1)),$0),$0),v|need-3s(pro:sub|he,lambda $2_{ev}.v|write(pro:rel|that,$2),$0)),$0)
example_end

Sent: I think he meant let me play with Mr Cromer .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.v|mean-past(pro:sub|he,lambda $2_{ev}.v|let-zero(_,lambda $3_{ev}.and(v|play(pro:obj|me,$3),prep|with(n:prop|cromer_mr,$3)),$2),$1),$0)
example_end

Sent: where did you put that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|put-zero(pro:per|you,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: something broke ?
Sem: lambda $0_{ev}.Q(adj|broke(pro:indef|something,$0))
example_end

Sent: don 't break Mr Cromer 's pencil .
Sem: lambda $0_{ev}.not(mod|do(v|break(you,n:prop|cromer_mr's($1,n|pencil($1)),$0),$0),$0)
example_end

Sent: he won 't be able to write anymore .
Sem: lambda $0_{ev}.not(mod|will(adj|able(pro:sub|he,lambda $1_{ev}.and(v|write(pro:sub|he,$1),adv|anymore($1)),$0),$0),$0)
example_end

Sent: where are you putting that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,pro:rel|that,$0),$1($0)),$0)
example_end

Sent: where is the point ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|point($1)),$0),$2($0))
example_end

Sent: show me the point .
Sem: lambda $0_{ev}.v|show(you,det:art|the($1,n|point($1)),pro:obj|me,$0)
example_end

Sent: put your finger on the point .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:poss|your($1,n|finger($1)),$0),prep|on(det:art|the($2,n|point($2)),$0))
example_end

Sent: birdie toe .
Sem: lambda $0_{e}.and_comp(n|bird-dim($0),n|toe($0))
example_end

Sent: that 's the point .
Sem: lambda $0_{ev}.det:art|the(pro:dem|that,n|point(pro:dem|that,$0))
example_end

Sent: no thanks .
Sem: not(lambda $0_{e}.co|thanks($0))
example_end

Sent: you dropped your hat ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:poss|your($1,n|hat($1)),$0))
example_end

Sent: don 't hit the table so hard .
Sem: lambda $0_{ev}.not(mod|do(and(v|hit-zero(you,det:art|the($1,n|table($1)),$0),adv|so(adv|hard($0))),$0),$0)
example_end

Sent: why did you fall down ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|fall(pro:per|you,$0),$1($0)),adv|down($0)),$0)
example_end

Sent: I 'm not hungry .
Sem: lambda $0_{ev}.not(adj|hungry(pro:sub|i,$0),$0)
example_end

Sent: I don 't want a spoon .
Sem: lambda $0_{ev}.not(mod|do(v|want(pro:sub|i,det:art|a($1,n|spoon($1)),$0),$0),$0)
example_end

Sent: oh you 're going to eat ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|eat(pro:per|you,$1),$0),$0),co|oh($0)))
example_end

Sent: you already brought the supper .
Sem: lambda $0_{ev}.and(v|bring-past(pro:per|you,det:art|the($1,n|supper($1)),$0),adv|already($0))
example_end

Sent: you two be quiet .
Sem: lambda $0_{e}.lambda $1_{ev}.n|quiet($0,$1)
example_end

Sent: oh it 's macaroni ?
Sem: lambda $0_{ev}.Q(and(n|macaroni(pro:per|it,$0),co|oh($0)))
example_end

Sent: let me eat the macaroni ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|eat(pro:obj|me,det:art|the($2,n|macaroni($2)),$1),$0))
example_end

Sent: that 's very good .
Sem: lambda $0_{ev}.adv|very(adj|good(pro:dem|that,$0))
example_end

Sent: did you bake that yourself ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|bake(pro:per|you,pro:rel|that,$0),pro:refl|yourself($0)),$0))
example_end

Sent: like a piece of meat ?
Sem: Q(prep|like(det:art|a($0,att(n|piece($0),prep|of(lambda $1_{e}.n|meat($1))))))
example_end

Sent: maybe you dropped it out in the kitchen .
Sem: lambda $0_{ev}.and(and(v|drop-past(pro:per|you,pro:per|it,$0),adv|maybe($0)),adv|out(prep|in(det:art|the($1,n|kitchen($1)),$0)))
example_end

Sent: what kind of meat is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|meat($2))))
example_end

Sent: big meat .
Sem: lambda $0_{e}.and(adj|big($0),n|meat($0))
example_end

Sent: don 't push Adam that 's not nice .
Sem: lambda $0_{ev}.not(and(mod|do(v|push(you,$0),$0),not(adj|nice(pro:dem|that,$0),$0)),$0)
example_end

Sent: what are you getting now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|get-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: I don 't think you need a fork .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.v|need(pro:per|you,det:art|a($2,n|fork($2)),$1),$0),$0),$0)
example_end

Sent: why do you have a hat and why do you have that ?
Sem: lambda $3_{e}.lambda $1_{e}.lambda $0_{ev}.coord|and(mod|do(and(v|have(pro:per|you,pro:dem|that,$0),$1($0)),$0),mod|do(and(v|have(pro:per|you,det:art|a($2,n|hat($2)),$0),$3($0)),$0))
example_end

Sent: that was in the trash and you took it out didn 't you ?
Sem: lambda $0_{ev}.Q(coord|and(and(and(v|take-past(pro:per|you,pro:per|it,$0),adv|out($0)),not(mod|do(pro:per|you,$0),$0)),and(cop|be-past(pro:dem|that,$0),prep|in(det:art|the($1,n|trash($1)),$0))))
example_end

Sent: bite your pants ?
Sem: lambda $0_{ev}.Q(v|bite(you,det:poss|your($1,n:pt|pants($1)),$0))
example_end

Sent: who bit your pants ?
Sem: lambda $1_{e}.lambda $0_{ev}.n|bit($1,det:poss|your($2,n:pt|pants($2)),$0)
example_end

Sent: doggie did ?
Sem: lambda $0_{ev}.Q(v|do-past(lambda $1_{e}.n|dog-dim($1),$0))
example_end

Sent: which doggie ?
Sem: lambda $0_{e}.$0($1,n|dog-dim($1))
example_end

Sent: you got lots_of bites didn 't you ?
Sem: lambda $0_{ev}.Q(and(part|get-pastp(pro:per|you,qn|lots_of($1,n|bite-pl($1)),$0),not(mod|do(pro:per|you,$0),$0)))
example_end

Sent: why do you have_to put the hat on when you 're out there .
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(and(aux|~be(pro:per|you,$0),adv|out(adv|there($0))),mod:aux|have_to(mod|do(and(and(v|put-zero(pro:per|you,det:art|the($1,n|hat($1)),$0),$2($0)),adv|on($0)),$0),$0))
example_end

Sent: why do you have_to wear a hat ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod:aux|have_to(mod|do(and(v|wear(pro:per|you,det:art|a($1,n|hat($1)),$0),$2($0)),$0),$0)
example_end

Sent: cowboy lost the hat ?
Sem: lambda $0_{ev}.Q(v|lose-past(lambda $1_{e}.n|cow+boy($1),det:art|the($2,n|hat($2)),$0))
example_end

Sent: you don 't wear a bandana .
Sem: lambda $0_{ev}.not(mod|do(v|wear(pro:per|you,det:art|a($1,n|bandana($1)),$0),$0),$0)
example_end

Sent: cowboy likes a boot ?
Sem: lambda $0_{ev}.Q(v|like-3s(lambda $1_{e}.n|cow+boy($1),det:art|a($2,n|boot($2)),$0))
example_end

Sent: why does the cowboy like boots .
Sem: lambda $3_{e}.lambda $0_{ev}.v|do-3s(and(prep|like(det:art|the($1,n|cow+boy($1)),lambda $2_{e}.n|boot-pl($2),$0),$3($0)),$0)
example_end

Sent: you don 't have any boots on .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:per|you,qn|any($1,n|boot-pl($1)),$0),prep|on($0)),$0),$0)
example_end

Sent: you have a hat on .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,det:art|a($1,n|hat($1)),$0),adv|on($0))
example_end

Sent: what else do you have on Adam .
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(and(v|have(pro:per|you,$1,$0),prep|on($0)),$0)
example_end

Sent: you don 't have any bandana .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:per|you,qn|any($1,n|bandana($1)),$0),$0),$0)
example_end

Sent: who took them ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|take-past($1,pro:obj|them,$0)
example_end

Sent: Santa did ?
Sem: lambda $0_{ev}.Q(v|do-past(n:prop|santa,$0))
example_end

Sent: oh he can 't write with a spoon .
Sem: lambda $0_{ev}.and(not(mod|can(and(v|write(pro:sub|he,$0),prep|with(det:art|a($1,n|spoon($1)),$0)),$0),$0),co|oh($0))
example_end

Sent: put it in your hat .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|hat($1)),$0))
example_end

Sent: you will ?
Sem: lambda $0_{ev}.Q(mod|will(pro:per|you,$0))
example_end

Sent: just a minute Santa Claus .
Sem: adv|just(det:art|a($0,n|minute($0)))
example_end

Sent: oh Santa Claus has boots on just like you .
Sem: lambda $0_{ev}.and(and(and(aux|have-3s(n:prop|claus_santa,lambda $1_{e}.v|boot-3s($1),$0),adv|on($0)),adv|just(prep|like(pro:per|you,$0))),co|oh($0))
example_end

Sent: let you need them on ?
Sem: lambda $0_{ev}.Q(and(v|need(pro:per|you,pro:obj|them,$0),adv|on($0)))
example_end

Sent: oh the saddle and bridle are all_gone ?
Sem: lambda $0_{ev}.Q(and(adj|all_gone(coord|and(det:art|the($1,n|saddle($1)),lambda $2_{e}.n|bridle($2)),$0),co|oh($0)))
example_end

Sent: what happened to them ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|them,$0))
example_end

Sent: Mommy 's pointing ?
Sem: lambda $0_{ev}.Q(aux|~be(part|point-presp(n:prop|mommy,$0),$0))
example_end

Sent: your saddle and bridle .
Sem: coord|and(det:poss|your($0,n|saddle($0)),lambda $1_{e}.n|bridle($1))
example_end

Sent: oh that 's what cowboy 's horses wear .
Sem: lambda $0_{ev}.and(cop|~be(pro:dem|that,lambda $1_{ev}.v|wear(n|cow+boy's($2,n|horse-pl($2)),pro:int|what,$1),$0),co|oh($0))
example_end

Sent: who get out ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|get($1,$0),adv|out($0))
example_end

Sent: cowboys did ?
Sem: lambda $0_{ev}.Q(v|do-past(lambda $1_{e}.n|cow+boy($1),$0))
example_end

Sent: watch your head .
Sem: lambda $0_{ev}.v|watch(you,det:poss|your($1,n|head($1)),$0)
example_end

Sent: oh you 'll be back ?
Sem: lambda $0_{ev}.Q(and(mod|~will(and(cop|be(pro:per|you,$0),adv|back($0)),$0),co|oh($0)))
example_end

Sent: where are you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(pro:per|you,$0),$1($0))
example_end

Sent: you 're where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be(pro:per|you,$0),$1($0))
example_end

Sent: a little while ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|little($1),n|while($1)),$0))
example_end

Sent: other bunkhouse .
Sem: lambda $0_{e}.and(qn|other($0),n|bunkhouse($0))
example_end

Sent: somebody went away .
Sem: lambda $0_{ev}.and(v|go-past(pro:indef|somebody,$0),adv|away($0))
example_end

Sent: you 're going to dance with Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|dance(pro:per|you,$1),prep|with(n:prop|cromer,$1)),$0),$0))
example_end

Sent: no Adam don 't put that in the microphone .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,pro:dem|that,$0),prep|in(det:art|the($1,n|microphone($1)),$0)),$0),$0),co|no($0))
example_end

Sent: that can 't go in there .
Sem: lambda $0_{ev}.not(mod|can(and(v|go(pro:rel|that,$0),prep|in(adv|there($0))),$0),$0)
example_end

Sent: no don 't put it in the microphone .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,pro:per|it,$0),prep|in(det:art|the($1,n|microphone($1)),$0)),$0),$0),co|no($0))
example_end

Sent: is that part of the broom ?
Sem: lambda $0_{ev}.Q(att(n|part(pro:dem|that,$0),prep|of(det:art|the($1,n|broom($1)))))
example_end

Sent: Adam no .
Sem: lambda $0_{ev}.co|no($0)
example_end

Sent: she needs to write with the pencil .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|she,lambda $1_{ev}.and(v|write(pro:sub|she,$1),prep|with(det:art|the($2,n|pencil($2)),$1)),$0)
example_end

Sent: that wasn 't nice was it ?
Sem: lambda $0_{ev}.Q(and(not(adj|nice(pro:dem|that,$0),$0),cop|be-past(pro:per|it,$0)))
example_end

Sent: Jesus stands up what ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|stand-3s_up(n:prop|jesus,$0),$1($0))
example_end

Sent: oh horsie .
Sem: lambda $0_{ev}.and(n|horse-dim($0),co|oh($0))
example_end

Sent: another Jesus ?
Sem: lambda $0_{e}.Q(qn|another($1,n:prop|jesus($1),$0))
example_end

Sent: Jesus does what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-3s(n:prop|jesus,$1,$0)
example_end

Sent: Jesus walks ?
Sem: lambda $0_{ev}.Q(v|walk-3s(n:prop|jesus,$0))
example_end

Sent: no Adam that 's not nice .
Sem: lambda $0_{ev}.and(not(adj|nice(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: write on your paper .
Sem: lambda $0_{ev}.and(v|write(you,$0),prep|on(det:poss|your($1,n|paper($1)),$0))
example_end

Sent: no don 't get on the table .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|get(you,det:art|the($1,n|table($1)),$0),prep|on($0)),$0),$0),co|no($0))
example_end

Sent: get off the table honey .
Sem: lambda $0_{ev}.and(v|get(you,det:art|the($1,n|table($1)),$0),prep|off($0))
example_end

Sent: the table may fall .
Sem: lambda $0_{ev}.mod|may(v|fall(det:art|the($1,n|table($1)),$0),$0)
example_end

Sent: careful with the pencil honey .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: we 're Jesus .
Sem: lambda $0_{ev}.n:prop|jesus(pro:sub|we,$0)
example_end

Sent: no don 't you hit anybody with the pencil .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|hit-zero(pro:per|you,pro:indef|anybody,$0),prep|with(det:art|the($1,n|pencil($1)),$0)),$0),$0),co|no($0))
example_end

Sent: Adam be careful with the pencil .
Sem: lambda $0_{e}.lambda $1_{ev}.co|careful($0,$1)
example_end

Sent: well you bring it and put it on the table .
Sem: lambda $0_{ev}.and(coord|and(and(v|put-zero(pro:per|you,pro:per|it,$0),prep|on(det:art|the($1,n|table($1)),$0)),v|bring(pro:per|you,pro:per|it,$0)),co|well($0))
example_end

Sent: you 're rolling the tape ?
Sem: lambda $0_{ev}.Q(aux|~be(part|roll-presp(pro:per|you,det:art|the($1,n|tape($1)),$0),$0))
example_end

Sent: careful with your pencil honey .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: Adam no don 't do that to the rug .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|do(you,pro:dem|that,$0),prep|to(det:art|the($1,n|rug($1)),$0)),$0),$0),co|no($0))
example_end

Sent: don 't put the screwdriver on the rug like that .
Sem: lambda $0_{ev}.not(mod|do(and(and(v|put-zero(you,det:art|the($1,n|screw+driver($1)),$0),prep|on(det:art|the($2,n|rug($2)),$0)),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: not for digging .
Sem: not(prep|for(lambda $0_{e}.n:gerund|dig-presp($0)))
example_end

Sent: you use a shovel for digging .
Sem: lambda $0_{ev}.and(v|use(pro:per|you,det:art|a($1,n|shovel($1)),$0),prep|for(lambda $2_{e}.n:gerund|dig-presp($2),$0))
example_end

Sent: yes but you don 't have a shovel do you ?
Sem: lambda $0_{ev}.Q(and(and(not(mod|do(v|have(pro:per|you,det:art|a($1,n|shovel($1)),$0),$0),$0),v|do(pro:per|you,$0)),co|yes($0)))
example_end

Sent: when spring comes and we go outside you may have a shovel to dig in the sand outside .
Sem: lambda $0_{ev}.coord|and(and(v|go(pro:sub|we,$0),adv|outside($0)),and(v|come-3s(lambda $1_{e}.n|spring($1),$0),mod|may(v|have(pro:per|you,lambda $2_{ev}.and(n|dig(det:art|a($3,n|shovel($3)),$2),adv|outside(prep|in(det:art|the($4,n|sand($4)),$2))),$0),$0)))
example_end

Sent: why don 't you go work on your firetruck with the screwdriver ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(and(n|work(pro:per|you,det:poss|your($1,n|fire+truck($1)),$0),$2($0)),prep|on($0)),prep|with(det:art|the($3,n|screw+driver($3)),$0)),$0),$0)
example_end

Sent: what about the screws on your firetruck .
Sem: att(pro:int|what,adv|about(det:art|the($0,att(n|screw-pl($0),prep|on(det:poss|your($1,n|fire+truck($1)))))))
example_end

Sent: are they all there ?
Sem: lambda $0_{ev}.Q(and(cop|be-pres(pro:sub|they,$0),post|all(adv|there($0))))
example_end

Sent: she doesn 't have anything to show you in that bag .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|she,lambda $1_{ev}.v|show(att(pro:indef|anything,prep|in(pro:dem|that($2,n|bag($2)))),pro:per|you,$1),$0),$0),$0)
example_end

Sent: let me show you ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|show(pro:obj|me,_,pro:per|you,$1),$0))
example_end

Sent: do you want to see some more pictures ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|see(pro:per|you,qn|some($2,and(qn|more($2),n|picture-pl($2))),$1),$0),$0))
example_end

Sent: where 's Robin on there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(cop|~be(n:prop|robin,$0),$1($0)),prep|on(adv|there($0)))
example_end

Sent: no that 's not David .
Sem: lambda $0_{ev}.and(not(n:prop|david(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: can you see what they 're doing ?
Sem: lambda $0_{ev}.Q(mod|can(v|see(pro:per|you,lambda $1_{ev}.aux|~be(part|do-presp(pro:sub|they,pro:int|what,$1),$1),$0),$0))
example_end

Sent: they are working .
Sem: lambda $0_{ev}.aux|be-pres(part|work-presp(pro:sub|they,$0),$0)
example_end

Sent: oh Robin is a little boy ?
Sem: lambda $0_{ev}.Q(and(det:art|a(n:prop|robin,and(n|boy(n:prop|robin,$0),adj|little(n:prop|robin,$0))),co|oh($0)))
example_end

Sent: you don 't like it ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|like(pro:per|you,pro:per|it,$0),$0),$0))
example_end

Sent: no there 's nothing in there .
Sem: lambda $0_{ev}.and(and(cop|~be(pro:indef|nothing,$0),prep|in(adv|there($0))),co|no($0))
example_end

Sent: no that 's Urs  bag .
Sem: lambda $0_{ev}.and(n:prop|ursula's'(pro:dem|that,n|bag(pro:dem|that,$0)),co|no($0))
example_end

Sent: no don 't take it out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|take(you,pro:per|it,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: you ask Urs .
Sem: lambda $0_{ev}.v|ask(pro:per|you,n:prop|ursula,$0)
example_end

Sent: that 's her bag .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|that,n|bag(pro:dem|that,$0))
example_end

Sent: what are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:sub|they,$0)
example_end

Sent: yes I see .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,$0),co|yes($0))
example_end

Sent: bu I don 't think she wants the glove on now .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(and(v|want-3s(pro:sub|she,det:art|the($2,n|glove($2)),$1),prep|on($1)),adv|now($1)),$0),$0),$0)
example_end

Sent: she can 't write with the glove on .
Sem: lambda $0_{ev}.not(mod|can(and(v|write(pro:sub|she,$0),adv|on(prep|with(det:art|the($1,n|glove($1)),$0))),$0),$0)
example_end

Sent: you can put them on your hand .
Sem: lambda $0_{ev}.mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|on(det:poss|your($1,n|hand($1)),$0)),$0)
example_end

Sent: you keep that .
Sem: lambda $0_{ev}.v|keep(pro:per|you,pro:dem|that,$0)
example_end

Sent: you put them on your hand .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$0),prep|on(det:poss|your($1,n|hand($1)),$0))
example_end

Sent: is that the right one ?
Sem: lambda $0_{ev}.Q(det:art|the(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),adj|right(pro:rel|that,$0))))
example_end

Sent: you put it on .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|on($0))
example_end

Sent: that 's a fastener .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|fasten-dv(pro:dem|that,$0))
example_end

Sent: he doesn 't have fingers .
Sem: lambda $0_{ev}.not(mod|do(v|have(pro:sub|he,lambda $1_{e}.n|finger-pl($1),$0),$0),$0)
example_end

Sent: small doggie .
Sem: lambda $0_{e}.and(adj|small($0),n|dog-dim($0))
example_end

Sent: he doesn 't have fingers either .
Sem: lambda $0_{ev}.not(mod|do(and(v|have(pro:sub|he,lambda $1_{e}.n|finger-pl($1),$0),adv|either($0)),$0),$0)
example_end

Sent: well what do you have in the trash can ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|do(and(v|have(pro:per|you,$1,$0),prep|in(det:art|the($2,and_comp(n|trash($2),mod|can($2))),$0)),$0),co|well($0))
example_end

Sent: you got them .
Sem: lambda $0_{ev}.v|get-past(pro:per|you,pro:obj|them,$0)
example_end

Sent: where did you get them ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|get(pro:per|you,pro:obj|them,$0),$1($0)),$0)
example_end

Sent: from the bag .
Sem: prep|from(det:art|the($0,n|bag($0)))
example_end

Sent: alright put them back .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:obj|them,$0),adv|back($0)),co|alright($0))
example_end

Sent: Adam you have another one out here .
Sem: lambda $0_{ev}.and(v|have(pro:per|you,qn|another($1,pro:indef|one($1)),$0),adv|out(adv|here($0)))
example_end

Sent: no we don 't need our forks .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:sub|we,det:poss|our($1,n|fork-pl($1)),$0),$0),$0),co|no($0))
example_end

Sent: I already have mine .
Sem: lambda $0_{ev}.and(v|have(pro:sub|i,pro:poss|mine,$0),adv|already($0))
example_end

Sent: okay thank_you .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|okay($0))
example_end

Sent: little talk .
Sem: lambda $0_{e}.and(adj|little($0),n|talk($0))
example_end

Sent: maybe she 's afraid of doggies .
Sem: lambda $0_{e}.lambda $1_{ev}.adj|afraid($0,$1)
example_end

Sent: read a magazine ?
Sem: lambda $0_{ev}.Q(v|read-zero(you,det:art|a($1,n|magazine($1)),$0))
example_end

Sent: is that what you have a magazine ?
Sem: lambda $0_{ev}.Q(cop|be-3s(pro:dem|that,lambda $1_{ev}.v|have(pro:per|you,pro:int|what,$1),$0))
example_end

Sent: what are you reading in the magazine ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|read-presp(pro:per|you,$1,$0),prep|in(det:art|the($2,n|magazine($2)),$0)),$0)
example_end

Sent: let me want fork .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|want(pro:obj|me,lambda $2_{e}.n|fork($2),$1),$0)
example_end

Sent: what is that in the bottle ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(att(pro:dem|that,prep|in(det:art|the($2,n|bottle($2)))),$0)
example_end

Sent: it 's hot ?
Sem: lambda $0_{ev}.Q(adj|hot(pro:per|it,$0))
example_end

Sent: what 's hot ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|hot($1,$0)
example_end

Sent: radiator is hot ?
Sem: lambda $0_{ev}.Q(adj|hot(lambda $1_{e}.n|radiator($1),$0))
example_end

Sent: bandana belongs to the cowboy ?
Sem: lambda $0_{ev}.Q(and(v|belong-3s(lambda $1_{e}.n|bandana($1),$0),prep|to(det:art|the($2,n|cow+boy($2)),$0)))
example_end

Sent: oh that 's corn ?
Sem: lambda $0_{ev}.Q(and(n|corn(pro:dem|that,$0),co|oh($0)))
example_end

Sent: what kind of corn is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|corn($2))))
example_end

Sent: corn on the cob ?
Sem: lambda $0_{e}.Q(att(n|corn($0),prep|on(det:art|the($1,n|cob($1)))))
example_end

Sent: you 've finished your corn haven 't you ?
Sem: lambda $0_{ev}.Q(and(aux|~have(part|finish-pastp(pro:per|you,det:poss|your($1,n|corn($1)),$0),$0),not(aux|have(pro:per|you,$0),$0)))
example_end

Sent: what kind of smoke is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|smoke($2))))
example_end

Sent: you 're sitting at the table ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|sit-presp(pro:per|you,$0),prep|at(det:art|the($1,n|table($1)),$0)),$0))
example_end

Sent: well what kind of smoke is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|smoke($2)))),co|well($0))
example_end

Sent: oh cigarette smoke .
Sem: lambda $0_{ev}.and(and_comp(n|cigarette($0),n|smoke($0)),co|oh($0))
example_end

Sent: put the pencil right on the table .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|pencil($1)),$0),adv|right(prep|on(det:art|the($2,n|table($2)),$0)))
example_end

Sent: why don 't you write a tomato for me ?
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(and(v|write(pro:per|you,det:art|a($1,n|tomato($1)),$0),$2($0)),prep|for(pro:obj|me,$0)),$0),$0)
example_end

Sent: okay you draw a cowboy hat .
Sem: lambda $0_{ev}.and(v|draw(pro:per|you,det:art|a($1,and_comp(n|cow+boy($1),n|hat($1))),$0),co|okay($0))
example_end

Sent: oh that 's a nice cowboy hat .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and_comp(n|cow+boy(pro:dem|that,$0),and(n|hat(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))),co|oh($0))
example_end

Sent: come on Adam .
Sem: lambda $0_{ev}.and(v|come(you,$0),prep|on($0))
example_end

Sent: leave those mops alone and come out here .
Sem: lambda $0_{ev}.coord|and(and(v|come(you,$0),adv|out(adv|here($0))),and(v|leave(you,pro:dem|those($1,n|mop-pl($1)),$0),adv|alone($0)))
example_end

Sent: no you don 't do that on Mommy 's rug .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|do(pro:per|you,pro:dem|that,$0),prep|on(n:prop|mommy's($1,n|rug($1)),$0)),$0),$0),co|no($0))
example_end

Sent: no you don 't do that Adam what do you say ?
Sem: lambda $0_{ev}.Q(and(not(and(mod|do(v|do(pro:per|you,det:dem|that,$0),$0),mod|do(v|say(pro:per|you,pro:int|what,$0),$0)),$0),co|no($0)))
example_end

Sent: no where could she go ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(mod|could(and(v|go(pro:sub|she,$0),$1($0)),$0),co|no($0))
example_end

Sent: where could she sit ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|could(and(v|sit(pro:sub|she,$0),$1($0)),$0)
example_end

Sent: yes you sit down there and read a story to the microphone .
Sem: lambda $0_{ev}.and(and(coord|and(and(v|read-zero(pro:per|you,det:art|a($1,n|story($1)),$0),prep|to(det:art|the($2,n|microphone($2)),$0)),v|sit(pro:per|you,$0)),adv|down(adv|there($0))),co|yes($0))
example_end

Sent: are you going to listen to a story ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|listen(pro:per|you,$1),prep|to(det:art|a($2,n|story($2)),$1)),$0),$0))
example_end

Sent: well your story books are out here aren 't they ?
Sem: lambda $0_{ev}.Q(and(and(and(cop|be-pres(det:poss|your($1,and_comp(n|story($1),n|book-pl($1))),$0),adv|out(adv|here($0))),not(aux|be(pro:sub|they,$0),$0)),co|well($0)))
example_end

Sent: you can 't read without your hat .
Sem: lambda $0_{ev}.not(mod|can(and(v|read-zero(pro:per|you,$0),prep|without(det:poss|your($1,n|hat($1)),$0)),$0),$0)
example_end

Sent: a nice train ?
Sem: lambda $0_{e}.Q(det:art|a($1,and(adj|nice($1),n|train($1)),$0))
example_end

Sent: yes I 'd like to listen to shadow .
Sem: lambda $0_{ev}.and(mod|~genmod(v|like(pro:sub|i,lambda $1_{ev}.and(v|listen(pro:sub|i,$1),prep|to(lambda $2_{e}.n|shadow($2),$1)),$0),$0),co|yes($0))
example_end

Sent: very nice .
Sem: lambda $0_{e}.adv|very(adj|nice($0))
example_end

Sent: that 's a good one .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(pro:indef|one(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: a big one .
Sem: det:art|a($0,att(pro:indef|one,lambda $1_{e}.adj|big($1),$0))
example_end

Sent: a saddle and a bridle .
Sem: coord|and(det:art|a($0,n|saddle($0)),det:art|a($1,n|bridle($1)))
example_end

Sent: that 's a nice story .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|story(pro:dem|that,$0),adj|nice(pro:dem|that,$0)))
example_end

Sent: yes that 's a nice story .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,and(n|story(pro:dem|that,$0),adj|nice(pro:dem|that,$0))),co|yes($0))
example_end

Sent: where did all the pieces go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(qn|all(det:art|the($1,n|piece-pl($1))),$0),$2($0)),$0)
example_end

Sent: you can use the table Adam if you want to .
Sem: lambda $0_{ev}.conj|if(v|want(pro:per|you,$0),mod|can(v|use(pro:per|you,det:art|the($1,n|table($1)),$0),$0))
example_end

Sent: I think he 's standing on his feet .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.aux|~be(and(part|stand-presp(pro:sub|he,$1),prep|on(det:poss|his($2,n|foot-pl($2)),$1)),$1),$0)
example_end

Sent: that goes there doesn 't it ?
Sem: lambda $0_{ev}.Q(and(and(v|go-3s(pro:rel|that,$0),adv|there($0)),not(mod|do(pro:per|it,$0),$0)))
example_end

Sent: am I going to what ?
Sem: lambda $0_{ev}.aux|be-1s(part|go-presp(pro:sub|i,$0),$0)
example_end

Sent: that 's her pocketbook .
Sem: lambda $0_{ev}.det:poss|her(pro:dem|that,n|pocket+book(pro:dem|that,$0))
example_end

Sent: have you seen everything ?
Sem: lambda $0_{ev}.Q(v|have(part|see-pastp(pro:per|you,pro:indef|everything,$0),$0))
example_end

Sent: oh teasing .
Sem: lambda $0_{ev}.and(part|tease-presp(you,$0),co|oh($0))
example_end

Sent: you 're teasing Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(part|tease-presp(pro:per|you,n:prop|cromer,$0),$0))
example_end

Sent: do you know what this is ?
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: no that 's not a car .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:dem|that,n|car(pro:dem|that,$0)),$0),co|no($0))
example_end

Sent: what kind of pen ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|pen($2))))
example_end

Sent: what kind of car ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|car($2))))
example_end

Sent: red car ?
Sem: lambda $0_{e}.Q(and(adj|red($0),n|car($0)))
example_end

Sent: yellow car ?
Sem: lambda $0_{e}.Q(and(n|yellow($0),n|car($0)))
example_end

Sent: what do you do with it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(pro:per|it,$0)),$0)
example_end

Sent: where what go ?
Sem: lambda $2_{e}.lambda $1_{e}.lambda $0_{ev}.and(v|go($1,$0),$2($0))
example_end

Sent: did he go to the corral ?
Sem: lambda $0_{ev}.Q(mod|do-past(and(v|go(pro:sub|he,$0),prep|to(det:art|the($1,n|corral($1)),$0)),$0))
example_end

Sent: you 're doing tricks ?
Sem: lambda $0_{ev}.Q(aux|~be(part|do-presp(pro:per|you,lambda $1_{e}.n|trick-pl($1),$0),$0))
example_end

Sent: doing tricks ?
Sem: lambda $0_{ev}.Q(part|do-presp(you,lambda $1_{e}.n|trick-pl($1),$0))
example_end

Sent: what kind of tricks ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|trick-pl($2))))
example_end

Sent: chair tricks ?
Sem: lambda $0_{e}.Q(and_comp(n|chair($0),v|trick-3s($0)))
example_end

Sent: oh you 're laughing ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|laugh-presp(pro:per|you,$0),$0),co|oh($0)))
example_end

Sent: do I remember chair tricks ?
Sem: lambda $0_{ev}.Q(mod|do(v|remember(pro:sub|i,lambda $1_{e}.and_comp(n|chair($1),n|trick-pl($1)),$0),$0))
example_end

Sent: you 're pressing a button ?
Sem: lambda $0_{ev}.Q(aux|~be(part|press-presp(pro:per|you,det:art|a($1,n|button($1)),$0),$0))
example_end

Sent: and what happens ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|happen-3s(you,$1,$0)
example_end

Sent: rope tricks ?
Sem: lambda $0_{e}.Q(and_comp(n|rope($0),v|trick-3s($0)))
example_end

Sent: oh you fell down on Mommy 's floor ?
Sem: lambda $0_{ev}.Q(and(and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|on(n:prop|mommy's($1,n|floor($1)),$0)),co|oh($0)))
example_end

Sent: no don 't throw that .
Sem: lambda $0_{ev}.and(not(mod|do(v|throw(you,pro:dem|that,$0),$0),$0),co|no($0))
example_end

Sent: oh your rope tricks .
Sem: lambda $0_{ev}.and(det:poss|your($1,and_comp(n|rope($1),n|trick-pl($1)),$0),co|oh($0))
example_end

Sent: I don 't think it will if you put him down there .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,$0),$0),$0)
example_end

Sent: try him up there .
Sem: lambda $0_{ev}.and(v|try(you,pro:obj|him,$0),adv|up(adv|there($0)))
example_end

Sent: well it doesn 't really belong there .
Sem: lambda $0_{ev}.and(not(mod|do(and(and(v|belong(pro:per|it,$0),adv|real-dadj($0)),adv|there($0)),$0),$0),co|well($0))
example_end

Sent: what happened to him ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(pro:obj|him,$0))
example_end

Sent: Rusty 's down there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n:prop|rusty,$0),adv|down(adv|there($0))))
example_end

Sent: cowboy 's grass ?
Sem: lambda $0_{e}.Q(n|cow+boy's($1,n|grass($1),$0))
example_end

Sent: oh don 't take it from you ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(and(v|take(you,pro:per|it,$0),prep|from(pro:per|you,$0)),$0),$0),co|oh($0)))
example_end

Sent: what is it now ?
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|it($0,$1)
example_end

Sent: you can 't play with that .
Sem: lambda $0_{ev}.not(mod|can(and(v|play(pro:per|you,$0),prep|with(pro:dem|that,$0)),$0),$0)
example_end

Sent: it 's a can top .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,and_comp(n|can(pro:per|it,$0),n|top(pro:per|it,$0)))
example_end

Sent: strong and healthy .
Sem: lambda $0_{e}.coord|and(adj|strong($0),adj|health-dn($0))
example_end

Sent: that 's not a rocket .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|rocket(pro:dem|that,$0)),$0)
example_end

Sent: that 's a Wheaties box .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and_comp(n:prop|wheaties(pro:dem|that,$0),n|box(pro:dem|that,$0)))
example_end

Sent: you go over near the door .
Sem: lambda $0_{ev}.and(and(v|go(pro:per|you,$0),adv|over($0)),prep|near(det:art|the($1,n|door($1)),$0))
example_end

Sent: you got your rocket ?
Sem: lambda $0_{ev}.Q(v|get-past(pro:per|you,det:poss|your($1,n|rocket($1)),$0))
example_end

Sent: where are you trying to send your rocket ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-pres(and(part|try-presp(pro:per|you,lambda $1_{ev}.v|send(pro:per|you,det:poss|your($2,n|rocket($2)),$1),$0),$3($0)),$0)
example_end

Sent: to Rusty ?
Sem:
example_end

Sent: what are you doing with the rocket ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|with(det:art|the($2,n|rocket($2)),$0)),$0)
example_end

Sent: you might hurt him .
Sem: lambda $0_{ev}.mod|might(v|hurt-zero(pro:per|you,pro:obj|him,$0),$0)
example_end

Sent: isn 't the rocket heavy ?
Sem: lambda $0_{ev}.Q(not(adj|heavy(det:art|the($1,n|rocket($1)),$0),$0))
example_end

Sent: what kind of flag ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|flag($2))))
example_end

Sent: Adam don 't throw the ball okay ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|throw(you,det:art|the($1,n|ball($1)),$0),$0),$0),adj|okay($0)))
example_end

Sent: what 's wrong with it ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|wrong($0,$1)
example_end

Sent: oh it 's a trailer ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|it,n|trailer(pro:per|it,$0)),co|oh($0)))
example_end

Sent: push Rusty down ?
Sem: lambda $0_{ev}.Q(and(n|push(you,n:prop|rusty,$0),adv|down($0)))
example_end

Sent: go where ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|go(you,$0),$1($0))
example_end

Sent: well I can 't do that .
Sem: lambda $0_{ev}.and(not(mod|can(v|do(pro:sub|i,pro:dem|that,$0),$0),$0),co|well($0))
example_end

Sent: what 's the trailer doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|~be(part|do-presp(det:art|the($1,n|trailer($1)),$2,$0),$0)
example_end

Sent: watching you ?
Sem: lambda $0_{ev}.Q(part|watch-presp(you,pro:per|you,$0))
example_end

Sent: I wouldn 't throw my hat .
Sem: lambda $0_{ev}.not(mod|will(v|throw(pro:sub|i,det:poss|my($1,n|hat($1)),$0),$0),$0)
example_end

Sent: careful of the light Adam .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: you 're going to leave your horses down there ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|leave(pro:per|you,det:poss|your($2,n|horse-pl($2)),$1),adv|down(adv|there($1))),$0),$0))
example_end

Sent: yes I 'm watching you .
Sem: lambda $0_{ev}.and(aux|~be(part|watch-presp(pro:sub|i,pro:per|you,$0),$0),co|yes($0))
example_end

Sent: no Adam you don 't climb up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|climb(pro:per|you,$0),adv|up(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: come down .
Sem: lambda $0_{ev}.and(v|come(you,$0),adv|down($0))
example_end

Sent: no I don 't want that book thank_you .
Sem: lambda $0_{ev}.and(and(not(mod|do(v|want(pro:sub|i,pro:dem|that($1,n|book($1)),$0),$0),$0),co|no($0)),n|thank_you($0))
example_end

Sent: come down or else you can 't player over there anymore .
Sem: lambda $0_{ev}.post|else_or(not(mod|can(and(and(n|play-dv(pro:per|you,$0),adv|over(adv|there($0))),adv|anymore($0)),$0),$0),and(v|come(you,$0),adv|down($0)))
example_end

Sent: I don 't know what happened to you ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|happen-past(pro:int|what,$1),prep|to(pro:per|you,$1)),$0),$0),$0))
example_end

Sent: oh what happened to the cowboy ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(det:art|the($2,n|cow+boy($2)),$0)),co|oh($0))
example_end

Sent: don 't know .
Sem: lambda $0_{ev}.not(mod|do(v|know(you,$0),$0),$0)
example_end

Sent: he doesn 't see you putting any boots on .
Sem: lambda $0_{ev}.not(mod|do(v|see(pro:sub|he,lambda $1_{ev}.and(part|put-presp(pro:per|you,qn|any($2,n|boot-pl($2)),$1),prep|on($1)),$0),$0),$0)
example_end

Sent: you aren 't putting any boots on .
Sem: lambda $0_{ev}.not(aux|be(and(part|put-presp(pro:per|you,qn|any($1,n|boot-pl($1)),$0),prep|on($0)),$0),$0)
example_end

Sent: Adam you 're going to fall .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|fall(pro:per|you,$1),$0),$0)
example_end

Sent: how can you see when you 've broken it .
Sem: lambda $1_{e}.lambda $0_{ev}.conj|when(aux|~have(part|break-pastp(pro:per|you,pro:per|it,$0),$0),mod|can(and(v|see(pro:per|you,$0),$1($0)),$0))
example_end

Sent: what do you see ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|see(pro:per|you,$1,$0),$0)
example_end

Sent: see you what ?
Sem: lambda $0_{ev}.v|see(you,pro:per|you,$0)
example_end

Sent: it 's broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(pro:per|it,$0))
example_end

Sent: no it doesn 't come out .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|come(pro:per|it,$0),adv|out($0)),$0),$0),co|no($0))
example_end

Sent: it won 't come out .
Sem: lambda $0_{ev}.not(mod|will(and(v|come(pro:per|it,$0),adv|out($0)),$0),$0)
example_end

Sent: well she needs her pencil .
Sem: lambda $0_{ev}.and(v|need-3s(pro:sub|she,det:poss|her($1,n|pencil($1)),$0),co|well($0))
example_end

Sent: here 's your pencil over here .
Sem: lambda $0_{ev}.and(and(cop|~be(det:poss|your($1,n|pencil($1)),$0),pro:exist|here($0)),adv|over(adv|here($0)))
example_end

Sent: get out_of the way ?
Sem: lambda $0_{ev}.Q(and(v|get(you,$0),prep|out_of(det:art|the($1,n|way($1)),$0)))
example_end

Sent: who 's in your way ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|~be($1,$0),prep|in(det:poss|your($2,n|way($2)),$0))
example_end

Sent: that doesn 't belong on the floor .
Sem: lambda $0_{ev}.not(mod|do(and(v|belong(pro:dem|that,$0),prep|on(det:art|the($1,n|floor($1)),$0)),$0),$0)
example_end

Sent: ask Ursula what that is .
Sem: lambda $0_{ev}.v|ask(you,n:prop|ursula,$0)
example_end

Sent: you ask her .
Sem: lambda $0_{ev}.v|ask(pro:per|you,pro:obj|her,$0)
example_end

Sent: give it back to Ursla .
Sem: lambda $0_{ev}.and(v|give(you,pro:per|it,$0),adv|back(prep|to(n:prop|ursla,$0)))
example_end

Sent: it 's a brush for a typewriter with an eraser on this end .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,att(att(n|brush(pro:per|it,$0),prep|for(det:art|a($1,n|type+writer($1)))),prep|with(det:art|a($2,att(n|erase-dv($2),prep|on(pro:dem|this($3,n|end($3))))))))
example_end

Sent: I don 't think that 's yours .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.pro:poss|yours(pro:rel|that,$1),$0),$0),$0)
example_end

Sent: no let Urs look now Adam .
Sem: lambda $0_{ev}.and(part|let-pastp(you,lambda $1_{ev}.and(cop|look(n:prop|ursula,$1),adv|now($1)),$0),co|no($0))
example_end

Sent: let her finish looking in her pocket book now .
Sem: lambda $0_{ev}.and(v|let-zero(you,lambda $1_{ev}.v|finish(pro:obj|her,$1),$0),adv|now($0))
example_end

Sent: a picture of somebody .
Sem: det:art|a($0,att(n|picture($0),prep|of(pro:indef|somebody)))
example_end

Sent: who is the somebody ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,pro:indef|somebody($0,$1))
example_end

Sent: Adam wait .
Sem: lambda $0_{ev}.v|wait(you,$0)
example_end

Sent: oh that 's dollar ?
Sem: lambda $0_{ev}.Q(and(n|dollar(pro:dem|that,$0),co|oh($0)))
example_end

Sent: this doesn 't cut .
Sem: lambda $0_{ev}.not(mod|do(v|cut-zero(pro:dem|this,$0),$0),$0)
example_end

Sent: here are some more paper clips .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some(qn|more($1,and_comp(n|paper($1),n|clip-pl($1)))),$0),adv|here($0))
example_end

Sent: are you going to put them back in the box ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,pro:obj|them,$1),adv|back(prep|in(det:art|the($2,n|box($2)),$1))),$0),$0))
example_end

Sent: oh then put it .
Sem: lambda $0_{ev}.and(and(v|put-zero(you,pro:per|it,$0),adv:tem|then($0)),co|oh($0))
example_end

Sent: what do you do with the pipe ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|pipe($2)),$0)),$0)
example_end

Sent: oh button press .
Sem: lambda $0_{ev}.and(and_comp(n|button($0),n|press($0)),co|oh($0))
example_end

Sent: what happens when you press the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),v|happen-3s($2,$0))
example_end

Sent: got it ?
Sem: lambda $0_{ev}.Q(v|get-past(you,pro:per|it,$0))
example_end

Sent: what did you get ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|get(pro:per|you,$1,$0),$0)
example_end

Sent: you caught it ?
Sem: lambda $0_{ev}.Q(v|catch-past(pro:per|you,pro:per|it,$0))
example_end

Sent: what did you catch ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|catch(pro:per|you,$1,$0),$0)
example_end

Sent: meadow pond .
Sem: lambda $0_{e}.and_comp(adj|meadow($0),n|pond($0))
example_end

Sent: oh a meadow pond .
Sem: lambda $0_{ev}.and(det:art|a($1,and_comp(adj|meadow($1),n|pond($1)),$0),co|oh($0))
example_end

Sent: what about the meadow pond ?
Sem: att(pro:int|what,adv|about(det:art|the($0,and_comp(n|meadow($0),n|pond($0)))))
example_end

Sent: you jumped over it ?
Sem: lambda $0_{ev}.Q(and(v|jump-past(pro:per|you,$0),adv|over(pro:per|it,$0)))
example_end

Sent: I don 't think you can jump over the pipe .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.mod|can(and(v|jump(pro:per|you,$1),adv|over(det:art|the($2,n|pipe($2)),$1)),$1),$0),$0),$0)
example_end

Sent: yes you did jump over the pipe didn 't you ?
Sem: lambda $0_{ev}.Q(and(and(v|do-past(and(n|jump(pro:per|you,$0),adv|over(det:art|the($1,n|pipe($1)),$0)),$0),not(mod|do(pro:per|you,$0),$0)),co|yes($0)))
example_end

Sent: missed it ?
Sem: lambda $0_{ev}.Q(v|miss-past(you,pro:per|it,$0))
example_end

Sent: Adam what happens when you press the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),v|happen-3s($2,$0))
example_end

Sent: what does the button do ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|do(det:art|the($1,n|button($1)),$2,$0),$0)
example_end

Sent: press over the candle maker .
Sem: lambda $0_{ev}.and(n|press(you,$0),adv|over(lambda $1_{e}.and_comp(det:art|the($2,n|candle+stick($2),$1),n|make-dv($1)),$0))
example_end

Sent: when did you press the button ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|press(pro:per|you,det:art|the($1,n|button($1)),$0),$0))
example_end

Sent: where were you ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-past(pro:per|you,$0),$1($0))
example_end

Sent: when you pressed the button where were you Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press-past(pro:per|you,det:art|the($1,n|button($1)),$0),and(cop|be-past(pro:per|you,$0),$2($0)))
example_end

Sent: where were you when you pressed the button ?
Sem: lambda $2_{e}.lambda $0_{ev}.conj|when(v|press-past(pro:per|you,det:art|the($1,n|button($1)),$0),and(cop|be-past(pro:per|you,$0),$2($0)))
example_end

Sent: what were you riding in ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|be-past(and(part|ride-presp(pro:per|you,$1,$0),adv|in($0)),$0)
example_end

Sent: in a what ?
Sem: det:art|a($0,pro:int|what($0))
example_end

Sent: in taxi ?
Sem: Q(prep|in(lambda $0_{e}.n|taxi($0)))
example_end

Sent: you dropped a taxi wheel ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|a($1,and_comp(n|taxi($1),n|wheel($1))),$0))
example_end

Sent: if you like to .
Sem: lambda $0_{ev}.v|like(pro:per|you,$0)
example_end

Sent: oh what happened to the taxi wheels ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(and(v|happen-past($1,$0),prep|to(det:art|the($2,and_comp(n|taxi($2),n|wheel-pl($2))),$0)),co|oh($0))
example_end

Sent: here are some .
Sem: lambda $0_{ev}.and(cop|be-pres(qn|some,$0),adv|here($0))
example_end

Sent: oh that 's for Cromer ?
Sem: lambda $0_{ev}.Q(and(and(cop|~be(pro:dem|that,$0),prep|for(n:prop|cromer,$0)),co|oh($0)))
example_end

Sent: Urs has one ?
Sem: lambda $0_{ev}.Q(aux|have-3s(n:prop|ursula,pro:indef|one,$0))
example_end

Sent: what shall I buy with my dollar ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|shall(and(v|buy(pro:sub|i,$1,$0),prep|with(det:poss|my($2,n|dollar($2)),$0)),$0)
example_end

Sent: I don 't know where to find a unicorn .
Sem: lambda $0_{ev}.not(mod|do(v|know(pro:sub|i,lambda $1_{ev}.and(v|find(_,det:art|a($2,n|unicorn($2)),$1),adv:int|where($1)),$0),$0),$0)
example_end

Sent: well where 's your unicorn ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(and(aux|~be(det:poss|your($1,n|unicorn($1)),$0),$2($0)),co|well($0))
example_end

Sent: you took our money now you have_to give us a unicorn .
Sem: lambda $0_{ev}.and(v|take-past(pro:per|you,det:poss|our($1,n|money($1)),$0),mod:aux|have_to(and(v|give(pro:per|you,det:art|a($2,n|unicorn($2)),pro:obj|us,$0),adv|now($0)),$0))
example_end

Sent: why I thought you were buying us a unicorn .
Sem: lambda $3_{e}.lambda $0_{ev}.and(v|think-past(pro:sub|i,lambda $1_{ev}.aux|be-past(part|buy-presp(pro:per|you,det:art|a($2,n|unicorn($2)),pro:obj|us,$1),$1),$0),$3($0))
example_end

Sent: the unicorn didn 't want to come ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|want(det:art|the($1,n|unicorn($1)),lambda $2_{ev}.v|come(det:art|the($1,n|unicorn($1)),$2),$0),$0),$0))
example_end

Sent: help you reach ?
Sem: lambda $0_{ev}.Q(v|help(you,lambda $1_{ev}.v|reach(pro:per|you,$1),$0))
example_end

Sent: that 's for the unicorn ?
Sem: lambda $0_{ev}.Q(and(cop|~be(pro:dem|that,$0),conj|for(det:art|the($1,n|unicorn($1)),$0)))
example_end

Sent: where 's the unicorn ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|~be(det:art|the($1,n|unicorn($1)),$0),$2($0))
example_end

Sent: buy this one ?
Sem: lambda $0_{ev}.Q(v|buy(you,pro:dem|this($1,pro:indef|one($1)),$0))
example_end

Sent: in it ?
Sem: Q(prep|in(pro:per|it))
example_end

Sent: putting them in Rusty 's hat ?
Sem: lambda $0_{ev}.Q(and(part|put-presp(you,pro:obj|them,$0),prep|in(n:prop|rusty's($1,n|hat($1)),$0)))
example_end

Sent: Rusty didn 't want them in his hat ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|want(n:prop|rusty,pro:obj|them,$0),prep|in(det:poss|his($1,n|hat($1)),$0)),$0),$0))
example_end

Sent: why are you throwing ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|throw-presp(pro:per|you,$0),$1($0)),$0)
example_end

Sent: no Adam what 's the matter ?
Sem: lambda $0_{e}.lambda $1_{ev}.det:art|the($0,v|matter($0,$1))
example_end

Sent: are you tired ?
Sem: lambda $0_{ev}.Q(v|tire-past(pro:per|you,$0))
example_end

Sent: what does she have_to buy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod:aux|have_to(v|do-3s(v|buy(pro:sub|she,$1,$0),$0),$0)
example_end

Sent: what did he do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(pro:sub|he,$1,$0),$0)
example_end

Sent: what did Rusty do ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|do(n:prop|rusty,$1,$0),$0)
example_end

Sent: well what are you buying ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(part|buy-presp(pro:per|you,$1,$0),$0),co|well($0))
example_end

Sent: what did you buy ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|buy(pro:per|you,$1,$0),$0)
example_end

Sent: I see you have some crumpled dollars .
Sem: lambda $0_{ev}.v|see(pro:sub|i,lambda $1_{ev}.v|have(pro:per|you,qn|some($2,and(v|crumple-past($2),n|dollar-pl($2))),$1),$0)
example_end

Sent: you 're going shopping ?
Sem: lambda $0_{ev}.Q(aux|~be(part|go-presp(pro:per|you,lambda $1_{e}.part|shop-presp($1),$0),$0))
example_end

Sent: what did you do with the dollars ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|with(det:art|the($2,n|dollar-pl($2)),$0)),$0)
example_end

Sent: let Urs do it .
Sem: lambda $0_{ev}.v|let-zero(you,lambda $1_{ev}.v|do(n:prop|ursula,pro:per|it,$1),$0)
example_end

Sent: can you put them back in the bag ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv|back(prep|in(det:art|the($1,n|bag($1)),$0))),$0))
example_end

Sent: I know what you might like .
Sem: lambda $0_{ev}.v|know(pro:sub|i,lambda $1_{ev}.mod|might(prep|like(pro:per|you,pro:int|what,$1),$1),$0)
example_end

Sent: I have very long gloves .
Sem: lambda $0_{ev}.v|have(pro:sub|i,adv|very(lambda $1_{e}.and(adj|long($1),n|glove-pl($1))),$0)
example_end

Sent: you plug this in .
Sem: lambda $0_{ev}.and(v|plug(pro:per|you,pro:dem|this,$0),adv|in($0))
example_end

Sent: we have_to put this up now .
Sem: lambda $0_{ev}.mod:aux|have_to(and(and(v|put-zero(pro:sub|we,pro:dem|this,$0),adv|up($0)),adv|now($0)),$0)
example_end

Sent: what do you hear ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do(v|hear(pro:per|you,$1,$0),$0)
example_end

Sent: can you hear Urs ?
Sem: lambda $0_{ev}.Q(mod|can(v|hear(pro:per|you,n:prop|ursula,$0),$0))
example_end

Sent: no it 's not a toy .
Sem: lambda $0_{ev}.and(not(det:art|a(pro:per|it,n|toy(pro:per|it,$0)),$0),co|no($0))
example_end

Sent: are you going home Adam ?
Sem: lambda $0_{ev}.Q(cop|be-pres(and(part|go-presp(pro:per|you,$0),adv|home($0)),$0))
example_end

Sent: there you are .
Sem: lambda $0_{ev}.and(cop|be-pres(pro:per|you,$0),adv|there($0))
example_end

Sent: I don 't know what that is .
Sem: lambda $0_{e}.lambda $1_{e}.lambda $2_{ev}.v|know($1,$0,$2)
example_end

Sent: button let you press ?
Sem: lambda $0_{ev}.Q(v|let-zero(you,lambda $1_{ev}.v|press(pro:per|you,$1),$0))
example_end

Sent: a box .
Sem: det:art|a($0,n|box($0))
example_end

Sent: Cromer can 't change your diaper .
Sem: lambda $0_{ev}.not(mod|can(v|change(n:prop|cromer,det:poss|your($1,n|diaper($1)),$0),$0),$0)
example_end

Sent: she can 't change your diaper either .
Sem: lambda $0_{ev}.not(mod|can(and(v|change(pro:sub|she,det:poss|your($1,n|diaper($1)),$0),adv|either($0)),$0),$0)
example_end

Sent: no don 't put your foot up there .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|put-zero(you,det:poss|your($1,n|foot($1)),$0),adv|up(adv|there($0))),$0),$0),co|no($0))
example_end

Sent: Urs can 't change your diaper like that .
Sem: lambda $0_{ev}.not(mod|can(and(v|change(n:prop|ursula,det:poss|your($1,n|diaper($1)),$0),prep|like(pro:dem|that,$0)),$0),$0)
example_end

Sent: do you want me to change your diaper ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|change(pro:obj|me,det:poss|your($2,n|diaper($2)),$1),$0),$0))
example_end

Sent: oh you 're telling the microphone ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|tell-presp(pro:per|you,det:art|the($1,n|microphone($1)),$0),$0),co|oh($0)))
example_end

Sent: will you ask them to excuse you ?
Sem: lambda $0_{ev}.Q(mod|will(v|ask(pro:per|you,lambda $1_{ev}.v|excuse(pro:obj|them,pro:per|you,$1),$0),$0))
example_end

Sent: did he catch you ?
Sem: lambda $0_{ev}.Q(mod|do-past(v|catch(pro:sub|he,pro:per|you,$0),$0))
example_end

Sent: you 're playing peekaboo with Cromer ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|play-presp(pro:per|you,lambda $1_{e}.v|peekaboo($1),$0),prep|with(n:prop|cromer,$0)),$0))
example_end

Sent: oh you caught him ?
Sem: lambda $0_{ev}.Q(and(v|catch-past(pro:per|you,pro:obj|him,$0),co|oh($0)))
example_end

Sent: oh you fell down in the bunkhouse .
Sem: lambda $0_{ev}.and(and(and(v|fall-past(pro:per|you,$0),adv|down($0)),prep|in(det:art|the($1,n|bunkhouse($1)),$0)),co|oh($0))
example_end

Sent: you fell down with your shoes .
Sem: lambda $0_{ev}.and(v|fall-past_down(pro:per|you,$0),prep|with(det:poss|your($1,n|shoe-pl($1)),$0))
example_end

Sent: with your shoes ?
Sem: Q(prep|with(det:poss|your($0,n|shoe-pl($0))))
example_end

Sent: I put it in my pocket .
Sem: lambda $0_{ev}.and(v|put-zero(pro:sub|i,pro:per|it,$0),prep|in(det:poss|my($1,n|pocket($1)),$0))
example_end

Sent: don 't break the point Adam .
Sem: lambda $0_{ev}.not(mod|do(v|break(you,det:art|the($1,n|point($1)),$0),$0),$0)
example_end

Sent: now you 're getting it .
Sem: lambda $0_{ev}.aux|~be(and(n:gerund|get-presp(pro:per|you,pro:per|it,$0),adv|now($0)),$0)
example_end

Sent: drop it on the point ?
Sem: lambda $0_{ev}.Q(and(v|drop(you,pro:per|it,$0),prep|on(det:art|the($1,n|point($1)),$0)))
example_end

Sent: how many glasses ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|glass-pl($0))
example_end

Sent: oh there it goes ?
Sem: lambda $0_{ev}.Q(and(and(v|go-3s(pro:per|it,$0),adv|there($0)),co|oh($0)))
example_end

Sent: no don 't play with glasses .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|play(you,$0),prep|with(lambda $1_{e}.n|glass-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: how many pencils do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and($2(qn|many($1)),n|pencil-pl($1)),$0),$0)
example_end

Sent: big one ?
Sem: lambda $0_{e}.Q(att(pro:indef|one,lambda $1_{e}.adj|big($1),$0))
example_end

Sent: you like cereal .
Sem: lambda $0_{ev}.v|like(pro:per|you,lambda $1_{e}.n|cereal($1),$0)
example_end

Sent: oh I see .
Sem: lambda $0_{ev}.and(v|see(pro:sub|i,$0),co|oh($0))
example_end

Sent: when I eat grapefruit .
Sem: lambda $0_{ev}.v|eat(pro:sub|i,lambda $1_{e}.n|grape+fruit($1),$0)
example_end

Sent: okay you have your bib on ?
Sem: lambda $0_{ev}.Q(and(and(v|have(pro:per|you,det:poss|your($1,n|bib($1)),$0),adv|on($0)),co|okay($0)))
example_end

Sent: you like it ?
Sem: lambda $0_{ev}.Q(v|like(pro:per|you,pro:per|it,$0))
example_end

Sent: he dropped his pencil .
Sem: lambda $0_{ev}.v|drop-past(pro:sub|he,det:poss|his($1,n|pencil($1)),$0)
example_end

Sent: yes now you pick it up .
Sem: lambda $0_{ev}.and(and(and(v|pick(pro:per|you,pro:per|it,$0),adv|now($0)),adv|up($0)),co|yes($0))
example_end

Sent: who turned around ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|turn-past($1,$0),adv|around($0))
example_end

Sent: you 've got a tunnel ?
Sem: lambda $0_{ev}.Q(aux|~have(part|get-pastp(pro:per|you,det:art|a($1,n|tunnel($1)),$0),$0))
example_end

Sent: where are they ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(cop|be-pres(pro:sub|they,$0),$1($0))
example_end

Sent: don 't go down ?
Sem: lambda $0_{ev}.Q(not(mod|do(and(v|go(you,$0),adv|down($0)),$0),$0))
example_end

Sent: where do you want to go ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|want(pro:per|you,lambda $1_{ev}.v|go(pro:per|you,$1),$0),$2($0)),$0)
example_end

Sent: Daddy went down ?
Sem: lambda $0_{ev}.Q(and(v|go-past(n:prop|daddy,$0),adv|down($0)))
example_end

Sent: how many pencils ?
Sem: lambda $1_{e}.lambda $0_{e}.and($1(qn|many($0)),n|pencil-pl($0))
example_end

Sent: this is a radiator .
Sem: lambda $0_{ev}.det:art|a(pro:dem|this,n|radiator(pro:dem|this,$0))
example_end

Sent: so you mean elevator .
Sem: lambda $0_{ev}.and(adj|mean(pro:per|you,lambda $1_{e}.n|elevator($1),$0),co|so($0))
example_end

Sent: where are you putting them ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|put-presp(pro:per|you,pro:obj|them,$0),$1($0)),$0)
example_end

Sent: there 's some .
Sem: lambda $0_{ev}.and(cop|~be(qn|some,$0),pro:exist|there($0))
example_end

Sent: oh peek you .
Sem: lambda $0_{ev}.and(v|peek(you,pro:per|you,$0),co|oh($0))
example_end

Sent: see what you can do ?
Sem: lambda $0_{ev}.Q(v|see(you,lambda $1_{ev}.mod|can(v|do(pro:per|you,pro:int|what,$1),$1),$0))
example_end

Sent: that 's good .
Sem: lambda $0_{ev}.adj|good(pro:dem|that,$0)
example_end

Sent: put it on the wall ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|on(det:art|the($1,n|wall($1)),$0)))
example_end

Sent: what do you call that ?
Sem: lambda $0_{ev}.v|call(pro:per|you,pro:dem|that,$0)
example_end

Sent: I 'm watching .
Sem: lambda $0_{ev}.aux|~be(part|watch-presp(pro:sub|i,$0),$0)
example_end

Sent: no go get your rubber band .
Sem: lambda $0_{ev}.and(v|get(you,det:poss|your($1,and_comp(n|rubber($1),n|band($1))),$0),co|no($0))
example_end

Sent: did you have any more ?
Sem: lambda $0_{ev}.Q(v|do-past(v|have(pro:per|you,qn|any($1,pro:indef|more($1)),$0),$0))
example_end

Sent: yes you sit outside .
Sem: lambda $0_{ev}.and(and(v|sit(pro:per|you,$0),adv|outside($0)),co|yes($0))
example_end

Sent: whose blanket ?
Sem: lambda $0_{e}.$0($1,n|blanket($1))
example_end

Sent: oh does Adam have a blanket ?
Sem: lambda $0_{ev}.Q(and(mod|do-3s(v|have(n:prop|adam,det:art|a($1,n|blanket($1)),$0),$0),co|oh($0)))
example_end

Sent: why do you need your blanket ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|need(pro:per|you,det:poss|your($1,n|blanket($1)),$0),$2($0)),$0)
example_end

Sent: I think it 's out in the kitchen .
Sem: lambda $0_{ev}.v|think(pro:sub|i,lambda $1_{ev}.and(cop|~be(pro:per|it,$1),adv|out(prep|in(det:art|the($2,n|kitchen($2)),$1))),$0)
example_end

Sent: are you taking your nap ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|take-presp(pro:per|you,det:poss|your($1,n|nap($1)),$0),$0))
example_end

Sent: oh is that a small one ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:rel|that,and(pro:indef|one(pro:rel|that,$0),adj|small(pro:rel|that,$0))),co|oh($0)))
example_end

Sent: well you give him the pen .
Sem: lambda $0_{ev}.and(v|give(pro:per|you,det:art|the($1,n|pen($1)),pro:obj|him,$0),co|well($0))
example_end

Sent: Adam dropped the pencil .
Sem: lambda $0_{ev}.v|drop-past(n:prop|adam,det:art|the($1,n|pencil($1)),$0)
example_end

Sent: oh a trombone .
Sem: lambda $0_{ev}.and(det:art|a($1,n|trombone($1),$0),co|oh($0))
example_end

Sent: can you play the trombone ?
Sem: lambda $0_{ev}.Q(mod|can(v|play(pro:per|you,det:art|the($1,n|trombone($1)),$0),$0))
example_end

Sent: a fish ?
Sem: lambda $0_{e}.Q(det:art|a($1,n|fish($1),$0))
example_end

Sent: swim with you ?
Sem: lambda $0_{ev}.Q(and(n|swim(you,$0),prep|with(pro:per|you,$0)))
example_end

Sent: looks like a real tiny fish .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),adj|real(prep|like(det:art|a($1,and(adj|tiny($1),n|fish($1))),$0)))
example_end

Sent: know what that is ?
Sem: lambda $0_{e}.lambda $1_{ev}.v|know(you,$0,$1)
example_end

Sent: that 's a circle .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|circle(pro:dem|that,$0))
example_end

Sent: where is the cowboy ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|cow+boy($1)),$0),$2($0))
example_end

Sent: can you draw his boots ?
Sem: lambda $0_{ev}.Q(mod|can(v|draw(pro:per|you,det:poss|his($1,n|boot-pl($1)),$0),$0))
example_end

Sent: oh his spurs .
Sem: lambda $0_{ev}.and(det:poss|his($1,n|spur-pl($1),$0),co|oh($0))
example_end

Sent: it 's Goldilocks .
Sem: lambda $0_{ev}.n:prop|goldilocks(pro:per|it,$0)
example_end

Sent: cowboy bill ?
Sem: lambda $0_{e}.Q(and_comp(n|cow+boy($0),n|bill($0)))
example_end

Sent: looks like a road .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|road($1)),$0))
example_end

Sent: is it a road ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|road(pro:per|it,$0)))
example_end

Sent: looks like another one is it ?
Sem: lambda $0_{ev}.Q(and(and(cop|look-3s(you,$0),prep|like(qn|another($1,pro:indef|one($1)),$0)),cop|be-3s(pro:per|it,$0)))
example_end

Sent: a road another road ?
Sem: lambda $0_{e}.Q(and(det:art|a($1,n|road($1)),qn|another($2,n|road($2)),$0))
example_end

Sent: it 's a cowboy ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|cow+boy(pro:per|it,$0)))
example_end

Sent: he has a what on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|have-3s(pro:sub|he,$1,$0),adv|on($0))
example_end

Sent: whose boots are those ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|those,n|boot-pl(pro:dem|those,$0))
example_end

Sent: is that a hat ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|hat(pro:rel|that,$0)))
example_end

Sent: oh it 's a boy .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|it,n|boy(pro:per|it,$0)),co|oh($0))
example_end

Sent: does he have hat on ?
Sem: lambda $0_{ev}.Q(mod|do-3s(and(v|have(pro:sub|he,lambda $1_{e}.n|hat($1),$0),adv|on($0)),$0))
example_end

Sent: whose bandana is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,n|bandana(pro:dem|that,$0))
example_end

Sent: looks like a square .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|square($1)),$0))
example_end

Sent: is it a square ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|square(pro:per|it,$0)))
example_end

Sent: it 's a what ?
Sem: lambda $1_{e}.lambda $0_{ev}.det:art|a(pro:per|it,$1(pro:per|it,$0))
example_end

Sent: it 's a clown he said .
Sem: lambda $0_{ev}.v|say-past(pro:sub|he,lambda $1_{ev}.det:art|a(pro:per|it,n|clown(pro:per|it,$1)),$0)
example_end

Sent: it 's clown Adam .
Sem: lambda $0_{ev}.n|clown(pro:per|it,$0)
example_end

Sent: is Adam a clown ?
Sem: lambda $0_{ev}.Q(det:art|a(n:prop|adam,n|clown(n:prop|adam,$0)))
example_end

Sent: Adam 's busy ?
Sem: lambda $0_{ev}.Q(adj|busy(n:prop|adam,$0))
example_end

Sent: what is Adam busy doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|busy(n:prop|adam,lambda $1_{ev}.part|do-presp(n:prop|adam,$2,$1),$0)
example_end

Sent: you 're busy at home ?
Sem: lambda $0_{e}.lambda $1_{ev}.adj|busy($0,$1)
example_end

Sent: it is your home .
Sem: lambda $0_{ev}.det:poss|your(pro:per|it,n|home(pro:per|it,$0))
example_end

Sent: is it my home ?
Sem: lambda $0_{ev}.Q(det:poss|my(pro:per|it,n|home(pro:per|it,$0)))
example_end

Sent: yes I came on my bicycle .
Sem: lambda $0_{ev}.and(and(v|come-past(pro:sub|i,$0),prep|on(det:poss|my($1,n|cycle($1)),$0)),co|yes($0))
example_end

Sent: is it another clown .
Sem: lambda $0_{ev}.qn|another(pro:per|it,n|clown(pro:per|it,$0))
example_end

Sent: oh that 's a rope ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:dem|that,n|rope(pro:dem|that,$0)),co|oh($0)))
example_end

Sent: rope for tricks ?
Sem: lambda $0_{e}.Q(att(n|rope($0),prep|for(lambda $1_{e}.n|trick-pl($1))))
example_end

Sent: whose rope is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|rope(pro:per|it,$0))
example_end

Sent: another fish ?
Sem: lambda $0_{e}.Q(qn|another($1,n|fish($1),$0))
example_end

Sent: is that a fish ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|fish(pro:rel|that,$0)))
example_end

Sent: it 's a boy .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|boy(pro:per|it,$0))
example_end

Sent: did you reach the towel ?
Sem: lambda $0_{ev}.Q(v|do-past(v|reach(pro:per|you,det:art|the($1,n|towel($1)),$0),$0))
example_end

Sent: no you didn 't reach it ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|reach(pro:per|you,pro:per|it,$0),$0),$0),co|no($0)))
example_end

Sent: what did you do in the kitchen ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|in(det:art|the($2,n|kitchen($2)),$0)),$0)
example_end

Sent: is it a flag ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|flag(pro:per|it,$0)))
example_end

Sent: it 's a pipe ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|it,n|pipe(pro:per|it,$0)))
example_end

Sent: looks like a circle .
Sem: lambda $0_{ev}.and(cop|look-3s(you,$0),prep|like(det:art|a($1,n|circle($1)),$0))
example_end

Sent: let 's put this on the other side .
Sem: lambda $0_{ev}.v:obj|let(you,lambda $1_{ev}.and(v|put-zero(pro:obj|~us,pro:dem|this,$1),prep|on(det:art|the($2,and(qn|other($2),n|side($2))),$1)),$0)
example_end

Sent: oh yes he needs that one .
Sem: lambda $0_{ev}.and(and(v|need-3s(pro:sub|he,pro:dem|that($1,pro:indef|one($1)),$0),co|oh($0)),co|yes($0))
example_end

Sent: he needs that .
Sem: lambda $0_{ev}.v|need-3s(pro:sub|he,pro:dem|that,$0)
example_end

Sent: I 'll write you a note then you can have one .
Sem: lambda $0_{ev}.adv:tem|then(mod|can(v|have(pro:per|you,pro:indef|one,$0),$0),mod|~will(v|write(pro:sub|i,det:art|a($1,n|note($1)),pro:per|you,$0),$0))
example_end

Sent: you want me to fold it ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.v|fold(pro:obj|me,pro:per|it,$1),$0))
example_end

Sent: yes what is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:per|it,$0),co|yes($0))
example_end

Sent: coat hanger ?
Sem: lambda $0_{e}.Q(and_comp(n|coat($0),n|hang-dv($0)))
example_end

Sent: like penguins ?
Sem: Q(prep|like(lambda $0_{e}.n|penguin-pl($0)))
example_end

Sent: penguins don 't fly do they ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|fly(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0),mod|do(pro:sub|they,$0)))
example_end

Sent: they do fly .
Sem: lambda $0_{ev}.mod|do(v|fly(pro:sub|they,$0),$0)
example_end

Sent: no they don 't fly I don 't think .
Sem: lambda $0_{ev}.not(mod|do(v|think(pro:sub|i,lambda $1_{ev}.and(not(mod|do(v|fly(pro:sub|they,$1),$1),$1),co|no($1)),$0),$0),$0)
example_end

Sent: no they don 't .
Sem: lambda $0_{ev}.and(not(mod|do(pro:sub|they,$0),$0),co|no($0))
example_end

Sent: no he can 't fly like a kite .
Sem: lambda $0_{ev}.and(not(mod|can(and(n|fly(pro:sub|he,$0),prep|like(det:art|a($1,n|kite($1)),$0)),$0),$0),co|no($0))
example_end

Sent: you did what ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do-past(pro:per|you,$1,$0)
example_end

Sent: penguins can 't fly .
Sem: lambda $0_{ev}.not(mod|can(v|fly(lambda $1_{e}.n|penguin-pl($1),$0),$0),$0)
example_end

Sent: you finished ?
Sem: lambda $0_{ev}.Q(v|finish-past(pro:per|you,$0))
example_end

Sent: all set ?
Sem: lambda $0_{e}.Q(n|set($0))
example_end

Sent: you 're exercising ?
Sem: lambda $0_{ev}.Q(aux|~be(part|exercise-presp(pro:per|you,$0),$0))
example_end

Sent: more juice ?
Sem: lambda $0_{e}.Q(n|juice($0))
example_end

Sent: more coffee ?
Sem: lambda $0_{e}.Q(n|coffee($0))
example_end

Sent: two Adam ?
Sem: lambda $0_{e}.Q(n:prop|adam($0))
example_end

Sent: one leg ?
Sem: lambda $0_{e}.Q(n|leg($0))
example_end

Sent: I think they 're okay .
Sem: lambda $0_{ev}.v|think(pro:sub|i,$0)
example_end

Sent: more gas ?
Sem: lambda $0_{e}.Q(n|gas($0))
example_end

Sent: I know .
Sem: lambda $0_{ev}.v|know(pro:sub|i,$0)
example_end

Sent: it 's attached .
Sem: lambda $0_{ev}.aux|~be(part|attach-pastp(pro:per|it,$0),$0)
example_end

Sent: three six ears ?
Sem: lambda $0_{e}.Q(n|ear-pl($0))
example_end

Sent: that hurts .
Sem: lambda $0_{ev}.v|hurt-3s(pro:dem|that,$0)
example_end

Sent: no it didn 't .
Sem: lambda $0_{ev}.co|no($0)
example_end

Sent: it sticks .
Sem: lambda $0_{ev}.v|stick-3s(pro:per|it,$0)
example_end

Sent: got stuck .
Sem: lambda $0_{ev}.v|stick-past(you,$0)
example_end

Sent: saucer 's all_gone .
Sem: lambda $0_{e}.n|saucer($0)
example_end

Sent: he 's jumping ?
Sem: lambda $0_{ev}.Q(aux|~be(part|jump-presp(pro:sub|he,$0),$0))
example_end

Sent: another purse ?
Sem: lambda $0_{e}.Q(n|purse($0))
example_end

Sent: train pull ?
Sem: lambda $0_{ev}.Q(v|pull(lambda $1_{e}.n|train($1),$0))
example_end

Sent: nineteen o'clock ?
Sem: lambda $0_{e}.Q(n|o'clock($0))
example_end

Sent: it works .
Sem: lambda $0_{ev}.v|work-3s(pro:per|it,$0)
example_end

Sent: Adam do .
Sem: lambda $0_{ev}.v|do(n:prop|adam,$0)
example_end


Sent: shall I help you ?
Sem: lambda $0_{ev}.Q(mod|shall(v|help(pro:sub|i,pro:per|you,$0),$0))
example_end

Sent: Jack and Jill .
Sem: coord|and(n:prop|jack,n:prop|jill)
example_end

Sent: you want to take it over to Ursula ?
Sem: lambda $0_{ev}.Q(v|want(pro:per|you,lambda $1_{ev}.and(v|take(pro:per|you,pro:per|it,$1),adv|over(prep|to(n:prop|ursula,$1))),$0))
example_end

Sent: oh thank_you .
Sem: lambda $0_{ev}.and(n|thank_you($0),co|oh($0))
example_end

Sent: what did you say Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(v|say(pro:per|you,$1,$0),$0)
example_end

Sent: that 's tape .
Sem: lambda $0_{ev}.n|tape(pro:dem|that,$0)
example_end

Sent: no that 's tape .
Sem: lambda $0_{ev}.and(n|tape(pro:dem|that,$0),co|no($0))
example_end

Sent: that 's a screw .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|screw(pro:dem|that,$0))
example_end

Sent: Ursula 's all set ?
Sem: lambda $0_{ev}.Q(aux|~be(and(n|set(n:prop|ursula,$0),adv|all($0)),$0))
example_end

Sent: we leave this down here .
Sem: lambda $0_{ev}.and(v|leave(pro:sub|we,pro:dem|this,$0),adv|down(adv|here($0)))
example_end

Sent: so it will be out_of the way .
Sem: lambda $0_{ev}.mod|will(prep|out_of(det:art|the($1,n|way($1)),pro:per|it,$0),$0)
example_end

Sent: that 's not a screw .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|screw(pro:dem|that,$0)),$0)
example_end

Sent: well that 's a screw .
Sem: lambda $0_{ev}.and(det:art|a(pro:dem|that,n|screw(pro:dem|that,$0)),co|well($0))
example_end

Sent: get back ?
Sem: lambda $0_{ev}.Q(and(v|get(you,$0),adv|back($0)))
example_end

Sent: if it 's hot won 't it burn you ?
Sem: lambda $0_{ev}.Q(not(mod|will(conj|if(adj|hot(pro:per|it,$0),v|burn(pro:per|it,pro:per|you,$0)),$0),$0))
example_end

Sent: find a penny ?
Sem: lambda $0_{ev}.Q(v|find(you,det:art|a($1,n|penny($1)),$0))
example_end

Sent: where did you put it ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|put-zero(pro:per|you,pro:per|it,$0),$1($0)),$0)
example_end

Sent: put it in your pocket ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|pocket($1)),$0)))
example_end

Sent: do you want a pencil ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,det:art|a($1,n|pencil($1)),$0),$0))
example_end

Sent: what are you going to write ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|write_to($2,$1),$0),$0)
example_end

Sent: you 're going to write Cromer ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.v|write(pro:per|you,$1),$0),$0),n:prop|cromer))
example_end

Sent: don 't knock it over .
Sem: lambda $0_{ev}.not(mod|do(and(v|knock(you,pro:per|it,$0),adv|over($0)),$0),$0)
example_end

Sent: good morning .
Sem: lambda $0_{e}.and(adj|good($0),n|morning($0))
example_end

Sent: hurt knee .
Sem: lambda $0_{ev}.v|hurt-zero(you,lambda $1_{e}.n|knee($1),$0)
example_end

Sent: you didn 't hurt yourself with the screwdriver .
Sem: lambda $0_{ev}.not(mod|do(and(v|hurt-zero(pro:per|you,pro:refl|yourself,$0),prep|with(det:art|the($1,n|screw+driver($1)),$0)),$0),$0)
example_end

Sent: you can fix the screws in your firetruck .
Sem: lambda $0_{ev}.mod|can(v|fix(pro:per|you,det:art|the($1,att(n|screw-pl($1),prep|in(det:poss|your($2,n|fire+truck($2))))),$0),$0)
example_end

Sent: put this one here .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:dem|this($1,pro:indef|one($1)),$0),adv|here($0))
example_end

Sent: what kind of truck is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,att(n|kind(pro:per|it,$0),prep|of(lambda $2_{e}.n|truck($2))))
example_end

Sent: truck broken ?
Sem: lambda $0_{ev}.Q(part|break-pastp(lambda $1_{e}.n|truck($1),$0))
example_end

Sent: you put the truck where ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(v|put-zero(pro:per|you,det:art|the($1,n|truck($1)),$0),$2($0))
example_end

Sent: you 're a busy bulldozer ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|bulldoze-dv(pro:per|you,$0),adj|busy(pro:per|you,$0))))
example_end

Sent: oh it 's a truck ?
Sem: lambda $0_{ev}.Q(and(det:art|a(pro:per|it,n|truck(pro:per|it,$0)),co|oh($0)))
example_end

Sent: red and yellow .
Sem: lambda $0_{e}.coord|and(adj|red($0),n|yellow($0))
example_end

Sent: which one is yellow ?
Sem: lambda $1_{e}.lambda $0_{ev}.adj|yellow($1($2,pro:indef|one($2)),$0)
example_end

Sent: Ursula 's right there ?
Sem: lambda $0_{ev}.Q(and(aux|~be(n:prop|ursula,$0),adv|right(adv|there($0))))
example_end

Sent: can you put it together again ?
Sem: lambda $0_{ev}.Q(mod|can(and(and(v|put-zero(pro:per|you,pro:per|it,$0),adv|together($0)),adv|again($0)),$0))
example_end

Sent: you put it together .
Sem: lambda $0_{ev}.and(v|put-zero(pro:per|you,pro:per|it,$0),adv|together($0))
example_end

Sent: you turned it around properly and then you put them together .
Sem: lambda $0_{ev}.coord|and(and(and(v|put-zero(pro:per|you,pro:obj|them,$0),adv:tem|then($0)),adv|together($0)),and(and(v|turn-past(pro:per|you,pro:per|it,$0),adv|around($0)),adv|proper-dadj($0)))
example_end

Sent: see the other one and put them together ?
Sem: lambda $0_{ev}.Q(coord|and(and(v|put-zero(you,pro:obj|them,$0),adv|together($0)),v|see(you,det:art|the($1,att(pro:indef|one,lambda $2_{e}.qn|other($2),$1)),$0)))
example_end

Sent: is it like this one ?
Sem: lambda $0_{ev}.Q(v|like(pro:dem|this($1,pro:indef|one($1)),pro:per|it,$0))
example_end

Sent: which one looks like that one ?
Sem: lambda $1_{e}.lambda $0_{ev}.cop|look-3s($1($2,pro:indef|one($2)),pro:dem|that($3,pro:indef|one($3)),$0)
example_end

Sent: what kind of horn is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,att(n|kind(pro:dem|that,$0),prep|of(lambda $2_{e}.n|horn($2))))
example_end

Sent: what 's the matter with you ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1,att(n|matter($1,$0),prep|with(pro:per|you)))
example_end

Sent: where did Adam go ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|go(n:prop|adam,$0),$1($0)),$0)
example_end

Sent: well what is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.and($1(pro:dem|that,$0),co|well($0))
example_end

Sent: what does the baby have in his mouth ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(and(v|have(det:art|the($1,n|baby($1)),$2,$0),prep|in(det:poss|his($3,n|mouth($3)),$0)),$0)
example_end

Sent: whistle baby .
Sem: lambda $0_{e}.and_comp(n|whistle($0),n|baby($0))
example_end

Sent: mouth oh .
Sem: lambda $0_{ev}.and(meta|mouth($0),co|oh($0))
example_end

Sent: that 's Adam 's baby .
Sem: lambda $0_{ev}.n:prop|adam's'(pro:dem|that,n|baby(pro:dem|that,$0))
example_end

Sent: yes that 's water .
Sem: lambda $0_{ev}.and(n|water(pro:dem|that,$0),co|yes($0))
example_end

Sent: those are rocks .
Sem: lambda $0_{ev}.n|rock-pl(pro:dem|those,$0)
example_end

Sent: there may be fish in the water .
Sem: lambda $0_{ev}.mod|may(and(cop|be(lambda $1_{e}.n|fish($1),$0),prep|in(det:art|the($2,n|water($2)),$0)),$0)
example_end

Sent: yes there may be some fish in the water .
Sem: lambda $0_{ev}.and(mod|may(and(cop|be(qn|some($1,n|fish($1)),$0),prep|in(det:art|the($2,n|water($2)),$0)),$0),co|yes($0))
example_end

Sent: that 's no tape recorder .
Sem: lambda $0_{ev}.not(and_comp(n|tape(pro:dem|that,$0),n|record-dv(pro:dem|that,$0)),$0)
example_end

Sent: those are records in a box .
Sem: lambda $0_{ev}.att(n|record-pl(pro:dem|those,$0),prep|in(det:art|a($1,n|box($1))))
example_end

Sent: how do you spell your name Adam ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do(and(v|spell(pro:per|you,det:poss|your($1,n|name($1)),$0),$2($0)),$0)
example_end

Sent: what does the label on Mr Cromer 's suitcase say ?
Sem: lambda $3_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|the($1,att(n|label($1),prep|on(n:prop|cromer_mr's($2,n|suitcase($2))))),$3,$0),$0)
example_end

Sent: that 's no horse .
Sem: lambda $0_{ev}.not(n|horse(pro:dem|that,$0),$0)
example_end

Sent: what about Cromer 's suitcase ?
Sem: att(pro:int|what,prep|about(n:prop|cromer's($0,n|suitcase($0))))
example_end

Sent: Adam break suitcase Cromer ?
Sem: lambda $0_{ev}.Q(v|break(n:prop|adam,n:prop|cromer's($1,n|suitcase($1)),$0))
example_end

Sent: no Adam shouldn 't break Cromer 's suitcase .
Sem: lambda $0_{ev}.and(not(mod|should(v|break(n:prop|adam,n:prop|cromer's($1,n|suitcase($1)),$0),$0),$0),co|no($0))
example_end

Sent: he 'd do without a suitcase .
Sem: lambda $0_{ev}.mod|~genmod(and(v|do(pro:sub|he,$0),prep|without(det:art|a($1,n|suitcase($1)),$0)),$0)
example_end

Sent: do with a suitcase ?
Sem: lambda $0_{ev}.Q(and(v|do(you,$0),prep|with(det:art|a($1,n|suitcase($1)),$0)))
example_end

Sent: Catherine take the suitcase ?
Sem: lambda $0_{ev}.Q(v|take(n:prop|catherine,det:art|the($1,n|suitcase($1)),$0))
example_end

Sent: raining outside .
Sem: lambda $0_{ev}.and(part|rain-presp(you,$0),adv|outside($0))
example_end

Sent: is it raining ?
Sem: lambda $0_{ev}.Q(aux|be-3s(part|rain-presp(you,$0),$0))
example_end

Sent: well is the sun shining ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(part|shine-presp(det:art|the($1,n|sun($1)),$0),$0),co|well($0)))
example_end

Sent: the sun 's not shining ?
Sem: lambda $0_{ev}.Q(not(aux|~be(part|shine-presp(det:art|the($1,n|sun($1)),$0),$0),$0))
example_end

Sent: is it cloudy ?
Sem: lambda $0_{ev}.Q(adj|cloud-dn($0))
example_end

Sent: Adam 's pieces ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|piece-pl($1),$0))
example_end

Sent: take a piece of candy .
Sem: lambda $0_{ev}.v|take(you,det:art|a($1,att(n|piece($1),prep|of(lambda $2_{e}.n|candy($2)))),$0)
example_end

Sent: write with pencil ?
Sem: lambda $0_{ev}.Q(and(v|write(you,$0),prep|with(lambda $1_{e}.n|pencil($1),$0)))
example_end

Sent: put the radio in ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,det:art|the($1,n|radio($1)),$0),adv|in($0)))
example_end

Sent: you know Humpty_Dumpty .
Sem: lambda $0_{ev}.v|know(pro:per|you,n:prop|humpty_dumpty,$0)
example_end

Sent: do you think that radio will go in that box ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.mod|will(v|go(pro:dem|that($2,n|radio($2)),pro:dem|that($3,n|box($3)),$1),$1),$0),$0))
example_end

Sent: it 's a windmill .
Sem: lambda $0_{ev}.det:art|a(pro:per|it,n|windmill(pro:per|it,$0))
example_end

Sent: whose bike ?
Sem: lambda $0_{e}.$0($1,n|bike($1))
example_end

Sent: do you want to play Adam ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.v|play(pro:per|you,$1),$0),$0))
example_end

Sent: what is that Adam ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:rel|that,$0)
example_end

Sent: you 're going to put all of your toys away .
Sem: lambda $0_{ev}.aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,qn|all($3,n|toy-pl($3),$2)),$1),adv|away($1)),$0),$0)
example_end

Sent: you going to put your toys in there ?
Sem: lambda $0_{ev}.Q(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:poss|your($2,n|toy-pl($2)),$1),prep|in(adv|there($1))),$0))
example_end

Sent: play toy ?
Sem: lambda $0_{e}.Q(and_comp(n|play($0),n|toy($0)))
example_end

Sent: what about your play toy ?
Sem: att(pro:int|what,adv|about(det:poss|your($0,and_comp(n|play($0),n|toy($0)))))
example_end

Sent: what happened to the play toy ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(det:art|the($2,and_comp(n|play($2),n|toy($2))),$0))
example_end

Sent: you dropped the play toy ?
Sem: lambda $0_{ev}.Q(v|drop-past(pro:per|you,det:art|the($1,and_comp(n|play($1),n|toy($1))),$0))
example_end

Sent: how many play toys do you have ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(v|have(pro:per|you,lambda $1_{e}.and_comp(n|play($1),and($2(qn|many($1)),n|toy-pl($1))),$0),$0)
example_end

Sent: Adam fell down .
Sem: lambda $0_{ev}.and(v|fall-past(n:prop|adam,$0),adv|down($0))
example_end

Sent: oh you 're crawling on the radio ?
Sem: lambda $0_{ev}.Q(and(aux|~be(and(part|crawl-presp(pro:per|you,$0),prep|on(det:art|the($1,n|radio($1)),$0)),$0),co|oh($0)))
example_end

Sent: but I though you were crawling .
Sem: lambda $0_{ev}.adv|though(pro:sub|i,lambda $1_{ev}.aux|be-past(part|crawl-presp(pro:per|you,$1),$1),$0)
example_end

Sent: on your knees .
Sem: prep|on(det:poss|your($0,n|knee-pl($0)))
example_end

Sent: put shoe on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(you,lambda $1_{e}.n|shoe($1),$0),adv|on($0)))
example_end

Sent: where did your foot go ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-past(and(v|go(det:poss|your($1,n|foot($1)),$0),$2($0)),$0)
example_end

Sent: is it in the shoe ?
Sem: lambda $0_{ev}.Q(and(aux|be-3s(pro:per|it,$0),prep|in(det:art|the($1,n|shoe($1)),$0)))
example_end

Sent: do you have play toys in the kitchen ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,lambda $1_{e}.and_comp(n|play($1),n|toy-pl($1)),$0),prep|in(det:art|the($2,n|kitchen($2)),$0)),$0))
example_end

Sent: what toy do you kick ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|do(v|kick(pro:per|you,$1($2,n|toy($2)),$0),$0)
example_end

Sent: kick your shoe ?
Sem: lambda $0_{ev}.Q(v|kick(you,det:poss|your($1,n|shoe($1)),$0))
example_end

Sent: you fell down .
Sem: lambda $0_{ev}.and(v|fall-past(pro:per|you,$0),adv|down($0))
example_end

Sent: doggie and the car ?
Sem: lambda $0_{e}.Q(coord|and(lambda $1_{e}.n|dog-dim($1),det:art|the($2,n|car($2)),$0))
example_end

Sent: where did you go yesterday ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(and(v|go(pro:per|you,$0),$1($0)),adv:tem|yesterday($0)),$0)
example_end

Sent: you saw some pretty flowers ?
Sem: lambda $0_{ev}.Q(v|saw(pro:per|you,qn|some($1,and(adj|pretty($1),n|flower-pl($1))),$0))
example_end

Sent: are you a boat or an airplane ?
Sem: lambda $0_{ev}.Q(coord|or(det:art|a(pro:per|you,n|boat(pro:per|you,$0)),det:art|a(pro:per|you,n|airplane(pro:per|you,$0))))
example_end

Sent: are you a Texaco star ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and_comp(n:prop|texaco(pro:per|you,$0),n|star(pro:per|you,$0))))
example_end

Sent: oh you 're a man with a Texaco star .
Sem: lambda $0_{ev}.and(det:art|a(pro:per|you,att(n|man(pro:per|you,$0),prep|with(det:art|a($1,and_comp(n:prop|texaco($1),n|star($1)))))),co|oh($0))
example_end

Sent: don 't put your mouth on the paper .
Sem: lambda $0_{ev}.not(mod|do(and(v|put-zero(you,det:poss|your($1,n|mouth($1)),$0),prep|on(det:art|the($2,n|paper($2)),$0)),$0),$0)
example_end

Sent: what did you do here ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),adv|here($0)),$0)
example_end

Sent: what did you do to the paper ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(pro:per|you,$1,$0),prep|to(det:art|the($2,n|paper($2)),$0)),$0)
example_end

Sent: game Adam ?
Sem: lambda $0_{e}.Q(n|game($0))
example_end

Sent: play tail ?
Sem: lambda $0_{ev}.Q(n|play(you,lambda $1_{e}.n|tail($1),$0))
example_end

Sent: you put your gloves on ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,det:poss|your($1,n|glove-pl($1)),$0),prep|on($0)))
example_end

Sent: can you put your gloves on ?
Sem: lambda $0_{ev}.Q(mod|can(and(v|put-zero(pro:per|you,det:poss|your($1,n|glove-pl($1)),$0),prep|on($0)),$0))
example_end

Sent: what about the book and the door ?
Sem: coord|and(att(pro:int|what,adv|about(det:art|the($0,n|book($0)))),det:art|the($1,n|door($1)))
example_end

Sent: who puts your gloves on ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|put-3s($1,det:poss|your($2,n|glove-pl($2)),$0),prep|on($0))
example_end

Sent: why are you going to put the book outside ?
Sem: lambda $3_{e}.lambda $0_{ev}.aux|be-pres(and(part|go-presp(pro:per|you,lambda $1_{ev}.and(v|put-zero(pro:per|you,det:art|the($2,n|book($2)),$1),adv|outside($1)),$0),$3($0)),$0)
example_end

Sent: another book yes .
Sem: lambda $0_{ev}.and(qn|another($1,n|book($1),$0),co|yes($0))
example_end

Sent: a book isn 't a ball .
Sem: lambda $0_{ev}.not(det:art|a(det:art|a($1,n|book($1)),n|ball(det:art|a($1,n|book($1)),$0)),$0)
example_end

Sent: don 't throw the book .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,det:art|the($1,n|book($1)),$0),$0),$0)
example_end

Sent: you ask somebody to play with you .
Sem: lambda $0_{ev}.v|ask(pro:per|you,lambda $1_{ev}.v|play(pro:indef|somebody,pro:per|you,$1),$0)
example_end

Sent: Chatter what 's the matter with you ?
Sem: lambda $1_{e}.lambda $1_{e}.lambda $0_{ev}.det:art|the($1,att(n|matter($1,$0),prep|with(pro:per|you)))
example_end

Sent: can 't you think of another game ?
Sem: lambda $0_{ev}.Q(not(mod|can(v|think(pro:per|you,qn|another($1,n|game($1)),$0),$0),$0))
example_end

Sent: what are you doing with that chair ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),prep|with(pro:dem|that($2,n|chair($2)),$0)),$0)
example_end

Sent: oh Adam sit in the chair .
Sem: lambda $0_{ev}.and(and(v|sit(you,$0),prep|in(det:art|the($1,n|chair($1)),$0)),co|oh($0))
example_end

Sent: oh Adam sit in the chair and watch the game ?
Sem: lambda $0_{ev}.Q(and(coord|and(v|watch(you,det:art|the($1,n|game($1)),$0),and(v|sit(you,$0),prep|in(det:art|the($2,n|chair($2)),$0))),co|oh($0)))
example_end

Sent: what kind of game are you going to watch ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|watch($2($3,att(n|kind($3),prep|of(lambda $4_{e}.n|game($4)))),$1),$0),$0)
example_end

Sent: watch the game ?
Sem: lambda $0_{ev}.Q(v|watch(you,det:art|the($1,n|game($1)),$0))
example_end

Sent: they usually come on the weekend .
Sem: lambda $0_{ev}.and(and(v|come(pro:sub|they,$0),adv|usual-dadj($0)),prep|on(det:art|the($1,n|week+end($1)),$0))
example_end

Sent: come at the end of the week .
Sem: lambda $0_{ev}.and(v|come(you,$0),prep|at(det:art|the($1,att(n|end($1),prep|of(det:art|the($2,n|week($2))))),$0))
example_end

Sent: Sunday yes is at the end of the week .
Sem: lambda $0_{ev}.and(and(cop|be-3s(n:prop|sunday,$0),prep|at(det:art|the($1,att(n|end($1),prep|of(det:art|the($2,n|week($2))))),$0)),co|yes($0))
example_end

Sent: the power shovel pick the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick(det:art|the($1,and_comp(n|power($1),n|shovel($1))),det:art|the($2,n|dirt($2)),$0),adv|up($0)))
example_end

Sent: did you see a power shovel yesterday ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|see(pro:per|you,det:art|a($1,and_comp(n|power($1),n|shovel($1))),$0),adv:tem|yesterday($0)),$0))
example_end

Sent: you say a busy bulldozer yesterday .
Sem: lambda $0_{ev}.and(v|say(pro:per|you,det:art|a($1,and(adj|busy($1),n|bulldoze-dv($1))),$0),adv:tem|yesterday($0))
example_end

Sent: what was the busy bulldozer doing ?
Sem: lambda $2_{e}.lambda $0_{ev}.cop|be-past(part|do-presp(det:art|the($1,and(adj|busy($1),n|bulldoze-dv($1))),$2,$0),$0)
example_end

Sent: was it pushing the dirt around too ?
Sem: lambda $0_{ev}.Q(cop|be-past(and(and(part|push-presp(pro:per|it,det:art|the($1,n|dirt($1)),$0),adv|around($0)),adv|too($0)),$0))
example_end

Sent: moon picks the dirt up ?
Sem: lambda $0_{ev}.Q(and(v|pick-3s(lambda $1_{e}.n|moon($1),det:art|the($2,n|dirt($2)),$0),adv|up($0)))
example_end

Sent: when do you see the moon ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do(and(v|see(pro:per|you,det:art|the($1,n|moon($1)),$0),$2($0)),$0)
example_end

Sent: what are you going to say to the busy bulldozer ?
Sem: lambda $2_{e}.lambda $0_{ev}.aux|be-pres(part|go-presp(pro:per|you,lambda $1_{ev}.v|say($2,det:art|the($3,and(adj|busy($3),n|bulldoze-dv($3))),$1),$0),$0)
example_end

Sent: you 're a little rascal ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:per|you,and(n|rascal(pro:per|you,$0),adj|little(pro:per|you,$0))))
example_end

Sent: yes you are .
Sem: lambda $0_{e}.lambda $1_{ev}.pro:per|you($0,$1)
example_end

Sent: just checking ?
Sem: lambda $0_{ev}.Q(and(part|check-presp(you,$0),adv|just($0)))
example_end

Sent: no you don 't need your temperature taken .
Sem: lambda $0_{ev}.and(not(mod|do(v|need(pro:per|you,lambda $1_{ev}.part|take-pastp(det:poss|your($2,n|temperature($2)),$1),$0),$0),$0),co|no($0))
example_end

Sent: Adam 's shirt !
Sem: n:prop|adam's($0,n|shirt($0))
example_end

Sent: don 't wear a shirt Mommy ?
Sem: lambda $0_{ev}.Q(not(mod|do(v|wear(you,det:art|a($1,n|shirt($1)),$0),$0),$0))
example_end

Sent: Mommy doesn 't wear a shirt .
Sem: lambda $0_{ev}.not(mod|do(v|wear(n:prop|mommy,det:art|a($1,n|shirt($1)),$0),$0),$0)
example_end

Sent: yes Adam does wear shoes .
Sem: lambda $0_{ev}.and(mod|do-3s(v|wear(n:prop|adam,lambda $1_{e}.n|shoe-pl($1),$0),$0),co|yes($0))
example_end

Sent: that 's right don 't bite .
Sem: lambda $0_{ev}.and(adv|right(pro:dem|that,$0),not(mod|do(v|bite(you,$0),$0),$0))
example_end

Sent: don 't ride on the briefcase .
Sem: lambda $0_{ev}.not(mod|do(v|ride(you,det:art|the($1,n|briefcase($1)),$0),$0),$0)
example_end

Sent: that 's right you sit in a chair .
Sem: lambda $0_{ev}.and(adj|right(pro:dem|that,$0),and(v|sit(pro:per|you,$0),prep|in(det:art|a($1,n|chair($1)),$0)))
example_end

Sent: do you want to sit next_to me ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{ev}.and(v|sit(pro:per|you,$1),prep|next_to(pro:obj|me,$1)),$0),$0))
example_end

Sent: that 's Ursula 's pocket book .
Sem: lambda $0_{ev}.n:prop|ursula's'(pro:dem|that,and_comp(n|pocket(pro:dem|that,$0),n|book(pro:dem|that,$0)))
example_end

Sent: is it heavy ?
Sem: lambda $0_{ev}.Q(adj|heavy(pro:per|it,$0))
example_end

Sent: isn 't that a pretty box Adam ?
Sem: lambda $0_{ev}.Q(not(det:art|a(det:dem|that,and(n|box(det:dem|that,$0),adj|pretty(det:dem|that,$0))),$0))
example_end

Sent: can you bring me my pocket book ?
Sem: lambda $0_{ev}.Q(mod|can(v|bring(pro:per|you,det:poss|my($1,and_comp(n|pocket($1),n|book($1))),pro:obj|me,$0),$0))
example_end

Sent: no it 's not all finished .
Sem: lambda $0_{ev}.and(not(cop|~be(and(part|finish-pastp(pro:per|it,$0),adv|all($0)),$0),$0),co|no($0))
example_end

Sent: won 't you please go over and take Ursula 's pocketbook to her ?
Sem: lambda $0_{ev}.Q(not(mod|will(and(and(and(v|take(pro:per|you,n:prop|ursula's($1,n|pocket+book($1)),$0),co|please($0)),adv|over($0)),prep|to(pro:obj|her,$0)),$0),$0))
example_end

Sent: no you hit your head here on the bench .
Sem: lambda $0_{ev}.and(and(v|hit-zero(pro:per|you,det:poss|your($1,n|head($1)),$0),adv|here(prep|on(det:art|the($2,n|bench($2)),$0))),co|no($0))
example_end

Sent: Adam what are you doing back there ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),adv|back(adv|there($0))),$0)
example_end

Sent: looking at the water ?
Sem: lambda $0_{ev}.Q(and(part|look-presp(you,$0),prep|at(det:art|the($1,n|water($1)),$0)))
example_end

Sent: no there isn 't any water in there .
Sem: lambda $0_{ev}.and(and(cop|be(not(qn|any($1,n|water($1))),$0),prep|in(adv|there($0))),co|no($0))
example_end

Sent: that wasn 't a drum .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|drum(pro:dem|that,$0)),$0)
example_end

Sent: picking tomatoes up ?
Sem: lambda $0_{ev}.Q(and(part|pick-presp(you,lambda $1_{e}.n|tomato-pl($1),$0),adv|up($0)))
example_end

Sent: why would you pick a tomato up like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(and(v|pick(pro:per|you,det:art|a($1,n|tomato($1)),$0),$2($0)),adv|up($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: what 's on your tongue ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|~be($1,$0),prep|on(det:poss|your($2,n|tongue($2)),$0))
example_end

Sent: you 've got a string of Mommy 's hair in your mouth .
Sem: lambda $0_{ev}.aux|~have(and(part|get-pastp(pro:per|you,det:art|a($1,att(n|string($1),prep|of(n:prop|mommy's($2,n|hair($2))))),$0),prep|in(det:poss|your($3,n|mouth($3)),$0)),$0)
example_end

Sent: use the eraser and then the writing is all_gone .
Sem: lambda $0_{ev}.coord|and(adv:tem|then(adj|all_gone(det:art|the($1,n:gerund|write-presp($1)),$0)),v|use(you,det:art|the($2,n|erase-dv($2)),$0))
example_end

Sent: no you don 't write on buttons .
Sem: lambda $0_{ev}.and(not(mod|do(and(v|write(pro:per|you,$0),prep|on(lambda $1_{e}.n|button-pl($1),$0)),$0),$0),co|no($0))
example_end

Sent: tomato soup .
Sem: lambda $0_{e}.and_comp(n|tomato($0),n|soup($0))
example_end

Sent: how can I drink so much coffee ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|can(and(n|drink(pro:sub|i,adv|so(qn|much($1,n|coffee($1))),$0),$2($0)),$0)
example_end

Sent: oh Adam will drink some coffee too .
Sem: lambda $0_{ev}.and(mod|will(and(v|drink(n:prop|adam,qn|some($1,n|coffee($1)),$0),post|too($0)),$0),co|oh($0))
example_end

Sent: did you have a pumpkin at Halloween ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|have(pro:per|you,det:art|a($1,n|pumpkin($1)),$0),prep|at(n:prop|halloween,$0)),$0))
example_end

Sent: that 's a mouth .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|mouth(pro:dem|that,$0))
example_end

Sent: it looks like a tomato ?
Sem: lambda $0_{ev}.Q(and(cop|look-3s(pro:per|it,$0),prep|like(det:art|a($1,n|tomato($1)),$0)))
example_end

Sent: that 's three .
Sem: lambda $0_{e}.det:num|three($0)
example_end

Sent: get your ball ?
Sem: lambda $0_{ev}.Q(v|get(you,det:poss|your($1,n|ball($1)),$0))
example_end

Sent: do you know ?
Sem: lambda $0_{ev}.Q(mod|do(v|know(pro:per|you,$0),$0))
example_end

Sent: when did you see the ball ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|see(pro:per|you,det:art|the($1,n|ball($1)),$0),$2($0)),$0)
example_end

Sent: do you like grapefruit ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.n|grape+fruit($1),$0),$0))
example_end

Sent: if you break it then you won 't have a pumpkin .
Sem: lambda $0_{ev}.not(mod|will(conj|if(v|break(pro:per|you,pro:per|it,$0),and(v|have(pro:per|you,det:art|a($1,n|pumpkin($1)),$0),adv:tem|then($0))),$0),$0)
example_end

Sent: poor pumpkin .
Sem: lambda $0_{e}.and(adj|poor($0),n|pumpkin($0))
example_end

Sent: oh is that Pepper ?
Sem: lambda $0_{ev}.Q(and(n:prop|pepper(pro:rel|that,$0),co|oh($0)))
example_end

Sent: he went out to the kitchen soon .
Sem: lambda $0_{ev}.and(and(and(v|go-past(pro:sub|he,$0),adv|out($0)),prep|to(det:art|the($1,n|kitchen($1)),$0)),adv|soon($0))
example_end

Sent: you do it .
Sem: lambda $0_{ev}.v|do(pro:per|you,pro:per|it,$0)
example_end

Sent: my that would be a big hat .
Sem: lambda $0_{ev}.and(mod|will-cond(det:art|a(pro:dem|that,and(n|hat(pro:dem|that,$0),adj|big(pro:dem|that,$0))),$0),det:poss|my($0))
example_end

Sent: where would you wear a hat like that ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|will-cond(and(and(v|wear(pro:per|you,det:art|a($1,n|hat($1)),$0),$2($0)),prep|like(pro:dem|that,$0)),$0)
example_end

Sent: you put the pencil in your mouth ?
Sem: lambda $0_{ev}.Q(and(v|put-zero(pro:per|you,det:art|the($1,n|pencil($1)),$0),prep|in(det:poss|your($2,n|mouth($2)),$0)))
example_end

Sent: that 's not Daddy 's suitcase .
Sem: lambda $0_{ev}.not(n:prop|daddy's'(pro:dem|that,n|suitcase(pro:dem|that,$0)),$0)
example_end

Sent: you knocked it over .
Sem: lambda $0_{ev}.and(v|knock-past(pro:per|you,pro:per|it,$0),adv|over($0))
example_end

Sent: buy milk ?
Sem: lambda $0_{ev}.Q(n|buy(you,lambda $1_{e}.n|milk($1),$0))
example_end

Sent: is milk on there ?
Sem: lambda $0_{ev}.Q(and(cop|be-3s(lambda $1_{e}.v|milk($1),$0),prep|on(adv|there($0))))
example_end

Sent: what kind of bread ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|bread($2))))
example_end

Sent: fresh milk ?
Sem: lambda $0_{e}.Q(and(adj|fresh($0),n|milk($0)))
example_end

Sent: more candy .
Sem: qn|more($0,n|candy($0))
example_end

Sent: is that Adam ?
Sem: lambda $0_{ev}.Q(n:prop|adam(pro:rel|that,$0))
example_end

Sent: it 's not candy .
Sem: lambda $0_{ev}.not(n|candy(pro:per|it,$0),$0)
example_end

Sent: Adam 's suitcase ?
Sem: lambda $0_{e}.Q(n:prop|adam's($1,n|suitcase($1),$0))
example_end

Sent: what will happen if you drop it ?
Sem: lambda $1_{e}.lambda $0_{ev}.conj|if(v|drop(pro:per|you,pro:per|it,$0),mod|will(v|happen(you,$1,$0),$0))
example_end

Sent: is that a letter for somebody ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,att(n|letter(pro:rel|that,$0),prep|for(pro:indef|somebody))))
example_end

Sent: whose letter is it ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:per|it,n|letter(pro:per|it,$0))
example_end

Sent: Adam 's letter .
Sem: n:prop|adam's($0,n|letter($0))
example_end

Sent: the paint came off in your mouth .
Sem: lambda $0_{ev}.and(v|come-past_off(det:art|the($1,n|paint($1)),$0),prep|in(det:poss|your($2,n|mouth($2)),$0))
example_end

Sent: oh ice .
Sem: lambda $0_{ev}.and(n|ice+cream($0),co|oh($0))
example_end

Sent: put it in your mouth .
Sem: lambda $0_{ev}.and(v|put-zero(you,pro:per|it,$0),prep|in(det:poss|your($1,n|mouth($1)),$0))
example_end

Sent: where are you going now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(and(part|go-presp(pro:per|you,$0),$1($0)),adv|now($0)),$0)
example_end

Sent: did you take the suitcase out ?
Sem: lambda $0_{ev}.Q(v|do-past(and(v|take(pro:per|you,det:art|the($1,n|suitcase($1)),$0),adv|out($0)),$0))
example_end

Sent: they 'll cut you and hurt .
Sem: lambda $0_{ev}.mod|~will(coord|and(v|cut-zero(pro:sub|they,pro:per|you,$0),v|hurt-zero(pro:sub|they,pro:per|you,$0)),$0)
example_end

Sent: they 're too large .
Sem: lambda $0_{ev}.adv|too(adj|large(pro:sub|they,$0))
example_end

Sent: no it 's not broken .
Sem: lambda $0_{ev}.and(not(cop|~be(part|break-pastp(pro:per|it,$0),$0),$0),co|no($0))
example_end

Sent: no that side isn 't broken .
Sem: lambda $0_{ev}.and(not(cop|be(part|break-pastp(pro:dem|that($1,n|side($1)),$0),$0),$0),qn|no($0))
example_end

Sent: do you have a whistle over there ?
Sem: lambda $0_{ev}.Q(mod|do(and(v|have(pro:per|you,det:art|a($1,v|whistle($1)),$0),adv|over(adv|there($0))),$0))
example_end

Sent: the microphone .
Sem: det:art|the($0,n|microphone($0))
example_end

Sent: big boys don 't bother things like that .
Sem: lambda $0_{ev}.not(mod|do(v|bother(lambda $1_{e}.and(adj|big($1),n|boy-pl($1)),lambda $2_{e}.att(n|thing-pl($2),prep|like(pro:dem|that)),$0),$0),$0)
example_end

Sent: the record 's in the folder .
Sem: lambda $0_{ev}.and(poss|~s(det:art|the($1,n|record($1)),$0),prep|in(det:art|the($2,n|folder($2)),$0))
example_end

Sent: the record is in the folder .
Sem: lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|record($1)),$0),prep|in(det:art|the($2,n|folder($2)),$0))
example_end

Sent: is that yours ?
Sem: lambda $0_{ev}.Q(pro:poss|yours(pro:dem|that,$0))
example_end

Sent: whose is that ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(pro:dem|that,$0)
example_end

Sent: what 's the name of that song ?
Sem: lambda $1_{e}.lambda $0_{ev}.$1(det:art|the($2,att(n|name($2),prep|of(pro:dem|that($3,n|song($3))))),$0)
example_end

Sent: don 't scratch the record .
Sem: lambda $0_{ev}.not(mod|do(v|scratch(you,det:art|the($1,n|record($1)),$0),$0),$0)
example_end

Sent: put the toys in the basket .
Sem: lambda $0_{ev}.and(v|put-zero(you,det:art|the($1,n|toy-pl($1)),$0),prep|in(det:art|the($2,n|basket($2)),$0))
example_end

Sent: where is the record ?
Sem: lambda $2_{e}.lambda $0_{ev}.and(cop|be-3s(det:art|the($1,n|record($1)),$0),$2($0))
example_end

Sent: in your hand ?
Sem: Q(prep|in(det:poss|your($0,n|hand($0))))
example_end

Sent: see the record falling out_of the folder ?
Sem: lambda $0_{ev}.Q(and(v|see(you,det:art|the($1,n|record($1)),$0),and(part|fall-presp(you,$0),prep|out_of(det:art|the($2,n|folder($2)),$0))))
example_end

Sent: no that 's not the top to that .
Sem: lambda $0_{ev}.and(not(det:art|the(pro:dem|that,att(adj|top(pro:dem|that,$0),prep|to(pro:dem|that))),$0),co|no($0))
example_end

Sent: what kind of fish ?
Sem: lambda $0_{e}.$0($1,att(n|kind($1),prep|of(lambda $2_{e}.n|fish($2))))
example_end

Sent: that 's not a bus .
Sem: lambda $0_{ev}.not(det:art|a(pro:dem|that,n|bus(pro:dem|that,$0)),$0)
example_end

Sent: that 's part of a train .
Sem: lambda $0_{ev}.att(n|part(pro:dem|that,$0),prep|of(det:art|a($1,n|train($1))))
example_end

Sent: I still don 't know what fish is in there .
Sem: lambda $2_{e}.lambda $0_{ev}.not(mod|do(and(v|know(pro:sub|i,lambda $1_{ev}.and(cop|be-3s($2($3,n|fish($3)),$1),prep|in(adv|there($1))),$0),adv|still($0)),$0),$0)
example_end

Sent: I 'll put it in the drawer .
Sem: lambda $0_{ev}.mod|~will(and(v|put-zero(pro:sub|i,pro:per|it,$0),prep|in(det:art|the($1,n|drawer($1)),$0)),$0)
example_end

Sent: careful with the record .
Sem: lambda $0_{e}.co|careful($0)
example_end

Sent: did Adam do that ?
Sem: lambda $0_{ev}.Q(v|do-past(v|do(n:prop|adam,pro:dem|that,$0),$0))
example_end

Sent: the man did that ?
Sem: lambda $0_{ev}.Q(v|do-past(det:art|the($1,n|man($1)),pro:dem|that,$0))
example_end

Sent: Adam did that ?
Sem: lambda $0_{ev}.Q(v|do-past(n:prop|adam,pro:dem|that,$0))
example_end

Sent: why did Adam do that ?
Sem: lambda $1_{e}.lambda $0_{ev}.mod|do-past(and(v|do(n:prop|adam,pro:dem|that,$0),$1($0)),$0)
example_end

Sent: Adam take it off ?
Sem: lambda $0_{ev}.Q(and(v|take(n:prop|adam,pro:per|it,$0),adv|off($0)))
example_end

Sent: what makes the windmill turn around ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{ev}.and(n|turn(det:art|the($3,n|windmill($3)),$2),adv|around($2)),$0)
example_end

Sent: what makes a real windmill turn around ?
Sem: lambda $1_{e}.lambda $0_{ev}.v|make-3s($1,lambda $2_{ev}.and(n|turn(det:art|a($3,and(adj|real($3),n|windmill($3))),$2),adv|around($2)),$0)
example_end

Sent: no you don 't know ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|know(pro:per|you,$0),$0),$0),co|no($0)))
example_end

Sent: I see it .
Sem: lambda $0_{ev}.v|see(pro:sub|i,pro:per|it,$0)
example_end

Sent: I 'm looking right at it .
Sem: lambda $0_{ev}.aux|~be(and(part|look-presp(pro:sub|i,pro:per|it,$0),adv|right($0)),$0)
example_end

Sent: yes I 'm looking .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:sub|i,$0),$0),co|yes($0))
example_end

Sent: what are you doing now ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(and(part|do-presp(pro:per|you,$1,$0),adv|now($0)),$0)
example_end

Sent: oh you 're looking at the windmill .
Sem: lambda $0_{ev}.and(aux|~be(part|look-presp(pro:per|you,det:art|the($1,n|windmill($1)),$0),$0),co|oh($0))
example_end

Sent: you 're turning it on ?
Sem: lambda $0_{ev}.Q(aux|~be(and(part|turn-presp(pro:per|you,pro:per|it,$0),adv|on($0)),$0))
example_end

Sent: here comes an airplane ?
Sem: lambda $0_{ev}.Q(and(v|come-3s(you,det:art|a($1,n|airplane($1)),$0),adv|here($0)))
example_end

Sent: what does an airplane say ?
Sem: lambda $2_{e}.lambda $0_{ev}.v|do-3s(v|say(det:art|a($1,n|airplane($1)),$2,$0),$0)
example_end

Sent: do you want Mommy to take it and put it up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.coord|and(and(v|put-zero(you,pro:per|it,$2),adv|up($2)),v|take(_,pro:per|it,$2))),$0),$0))
example_end

Sent: get it again ?
Sem: lambda $0_{ev}.Q(and(aux|get(you,pro:per|it,$0),adv|again($0)))
example_end

Sent: is that a flag ?
Sem: lambda $0_{ev}.Q(det:art|a(pro:rel|that,n|flag(pro:rel|that,$0)))
example_end

Sent: oh you 're getting supper ready ?
Sem: lambda $0_{ev}.Q(and(aux|~be(part|get-presp(pro:per|you,lambda $1_{ev}.adj|ready(lambda $2_{e}.n|supper($2),$1),$0),$0),co|oh($0)))
example_end

Sent: do you like tomato soup ?
Sem: lambda $0_{ev}.Q(mod|do(co|like(pro:per|you,lambda $1_{e}.and_comp(n|tomato($1),n|soup($1)),$0),$0))
example_end

Sent: no you don 't like tomato soup ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(co|like(pro:per|you,lambda $1_{e}.and_comp(n|tomato($1),n|soup($1)),$0),$0),$0),co|no($0)))
example_end

Sent: you 're making two bowls of tomato soup .
Sem: lambda $0_{ev}.aux|~be(part|make-presp(pro:per|you,lambda $1_{e}.att(det:num|two(n|bowl-pl($1)),prep|of(lambda $2_{e}.and_comp(n|tomato($2),n|soup($2)))),$0),$0)
example_end

Sent: other side .
Sem: qn|other($0,n|side($0))
example_end

Sent: well what are you cooking down there ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(aux|be-pres(and(part|cook-presp(pro:per|you,$1,$0),adv|down(adv|there($0))),$0),co|well($0))
example_end

Sent: cooking water ?
Sem: lambda $0_{ev}.Q(part|cook-presp(you,lambda $1_{e}.n|water($1),$0))
example_end

Sent: Adam swimming .
Sem: lambda $0_{ev}.part|swim-presp(n:prop|adam,$0)
example_end

Sent: do you want Mommy to take the whistle and put it up ?
Sem: lambda $0_{ev}.Q(mod|do(v|want(pro:per|you,lambda $1_{e}.rel(n:prop|mommy($1),lambda $2_{ev}.coord|and(and(v|put-zero(you,pro:per|it,$2),adv|up($2)),v|take(_,det:art|the($3,n|whistle($3)),$2))),$0),$0))
example_end

Sent: when you throw it it hurts your head .
Sem: lambda $0_{ev}.conj|when(v|throw(pro:per|you,pro:per|it,$0),v|hurt-3s(pro:per|it,det:poss|your($1,n|head($1)),$0))
example_end

Sent: don 't throw it .
Sem: lambda $0_{ev}.not(mod|do(v|throw(you,pro:per|it,$0),$0),$0)
example_end

Sent: you 'll hurt Mr Cromer 's head .
Sem: lambda $0_{ev}.mod|~will(part|hurt-pastp(pro:per|you,n:prop|cromer_mr's($1,n|head($1)),$0),$0)
example_end

Sent: you 'll hurt Ursula too .
Sem: lambda $0_{ev}.mod|~will(and(part|hurt-pastp(pro:per|you,n:prop|ursula,$0),post|too($0)),$0)
example_end

Sent: you 'll hurt the suitcase too .
Sem: lambda $0_{ev}.mod|~will(and(v|hurt-zero(pro:per|you,det:art|the($1,n|suitcase($1)),$0),post|too($0)),$0)
example_end

Sent: you hit the floor .
Sem: lambda $0_{ev}.v|hit-zero(pro:per|you,det:art|the($1,n|floor($1)),$0)
example_end

Sent: do you think you hurt the floor ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|hurt-zero(pro:per|you,det:art|the($2,n|floor($2)),$1),$0),$0))
example_end

Sent: hurt your knee ?
Sem: lambda $0_{ev}.Q(v|hurt-zero(you,det:poss|your($1,n|knee($1)),$0))
example_end

Sent: how did you hurt your knee ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|knee($1)),$0),$2($0)),$0)
example_end

Sent: on the chair .
Sem: prep|on(det:art|the($0,n|chair($0)))
example_end

Sent: how did you hurt your arm ?
Sem: lambda $2_{e}.lambda $0_{ev}.mod|do-past(and(v|hurt-zero(pro:per|you,det:poss|your($1,n|arm($1)),$0),$2($0)),$0)
example_end

Sent: you hurt your arm on the chair .
Sem: lambda $0_{ev}.and(v|hurt-zero(pro:per|you,det:poss|your($1,n|arm($1)),$0),prep|on(det:art|the($2,n|chair($2)),$0))
example_end

Sent: pick the play toys up .
Sem: lambda $0_{ev}.and(v|pick(you,det:art|the($1,and_comp(n|play($1),v|toy-3s($1))),$0),adv|up($0))
example_end

Sent: that 's a good boy .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,and(n|boy(pro:dem|that,$0),adj|good(pro:dem|that,$0)))
example_end

Sent: no that 's not yellow .
Sem: lambda $0_{ev}.and(not(adj|yellow(pro:dem|that,$0),$0),co|no($0))
example_end

Sent: the papers are yellow .
Sem: lambda $0_{ev}.adj|yellow(det:art|the($1,n|paper-pl($1)),$0)
example_end

Sent: what are you checking ?
Sem: lambda $1_{e}.lambda $0_{ev}.aux|be-pres(part|check-presp(pro:per|you,$1,$0),$0)
example_end

Sent: that 's a radiator .
Sem: lambda $0_{ev}.det:art|a(pro:dem|that,n|radiator(pro:dem|that,$0))
example_end

Sent: there is another one in the kitchen .
Sem: lambda $0_{ev}.and(cop|be-3s(qn|another($1,pro:indef|one($1)),$0),prep|in(det:art|the($2,n|kitchen($2)),$0))
example_end

Sent: the other is hot ?
Sem: lambda $0_{ev}.Q(adj|hot(det:art|the($1,qn|other($1)),$0))
example_end

Sent: don 't fall pencil ?
Sem: lambda $0_{ev}.Q(and(not(mod|do(v|fall(you,$0),$0),$0),lambda $1_{e}.n|pencil($1)))
example_end

Sent: I don 't hurt myself thank_you .
Sem: lambda $0_{ev}.and(not(mod|do(v|hurt-zero(pro:sub|i,pro:refl|myself,$0),$0),$0),n|thank_you($0))
example_end

Sent: time for bed ?
Sem: lambda $0_{e}.Q(att(n|time($0),prep|for(lambda $1_{e}.n|bed($1))))
example_end

Sent: for Mommy .
Sem: conj|for(n:prop|mommy)
example_end

Sent: it 's not time for bed for Adam ?
Sem: lambda $0_{ev}.Q(not(att(att(v|time(pro:per|it,$0),prep|for(lambda $1_{e}.n|bed($1))),prep|for(n:prop|adam)),$0))
example_end

Sent: are you saying Bambi ?
Sem: lambda $0_{ev}.Q(cop|be-pres(part|say-presp(pro:per|you,n:prop|bambi,$0),$0))
example_end

Sent: oh you 're going to show Ursula .
Sem: lambda $0_{ev}.and(aux|~be(part|go-presp(pro:per|you,lambda $1_{ev}.n|show(pro:per|you,n:prop|ursula,$1),$0),$0),co|oh($0))
example_end

Sent: what happened to Bambi ?
Sem: lambda $1_{e}.lambda $0_{ev}.and(v|happen-past($1,$0),prep|to(n:prop|bambi,$0))
example_end

Sent: Adam you give Bambi a ride .
Sem: lambda $0_{ev}.v|give(pro:per|you,det:art|a($1,n|ride($1)),n:prop|bambi,$0)
example_end

Sent: on your foot .
Sem: prep|on(det:poss|your($0,n|foot($0)))
example_end

Sent: do you think he likes that ?
Sem: lambda $0_{ev}.Q(mod|do(v|think(pro:per|you,lambda $1_{ev}.v|like-3s(pro:sub|he,pro:dem|that,$1),$0),$0))
example_end

